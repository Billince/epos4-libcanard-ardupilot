
Newlibcanard_pixhawk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fb84  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001648  0800fd0c  0800fd0c  00010d0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011354  08011354  000149a0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011354  08011354  00012354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801135c  0801135c  000149a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801135c  0801135c  0001235c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011360  08011360  00012360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000019a0  20000000  08011364  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000149a0  2**0
                  CONTENTS
 10 .bss          00004abc  200019a0  200019a0  000149a0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000645c  2000645c  000149a0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000149a0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000196a4  00000000  00000000  000149d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000043e9  00000000  00000000  0002e074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001510  00000000  00000000  00032460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001022  00000000  00000000  00033970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005f67  00000000  00000000  00034992  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a506  00000000  00000000  0003a8f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1655  00000000  00000000  00054dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00126454  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006048  00000000  00000000  00126498  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000087  00000000  00000000  0012c4e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200019a0 	.word	0x200019a0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800fcf4 	.word	0x0800fcf4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200019a4 	.word	0x200019a4
 80001c4:	0800fcf4 	.word	0x0800fcf4

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__aeabi_drsub>:
 80001ec:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001f0:	e002      	b.n	80001f8 <__adddf3>
 80001f2:	bf00      	nop

080001f4 <__aeabi_dsub>:
 80001f4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001f8 <__adddf3>:
 80001f8:	b530      	push	{r4, r5, lr}
 80001fa:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001fe:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000202:	ea94 0f05 	teq	r4, r5
 8000206:	bf08      	it	eq
 8000208:	ea90 0f02 	teqeq	r0, r2
 800020c:	bf1f      	itttt	ne
 800020e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000212:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000216:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800021e:	f000 80e2 	beq.w	80003e6 <__adddf3+0x1ee>
 8000222:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000226:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022a:	bfb8      	it	lt
 800022c:	426d      	neglt	r5, r5
 800022e:	dd0c      	ble.n	800024a <__adddf3+0x52>
 8000230:	442c      	add	r4, r5
 8000232:	ea80 0202 	eor.w	r2, r0, r2
 8000236:	ea81 0303 	eor.w	r3, r1, r3
 800023a:	ea82 0000 	eor.w	r0, r2, r0
 800023e:	ea83 0101 	eor.w	r1, r3, r1
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	2d36      	cmp	r5, #54	@ 0x36
 800024c:	bf88      	it	hi
 800024e:	bd30      	pophi	{r4, r5, pc}
 8000250:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000254:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000258:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 800025c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x70>
 8000262:	4240      	negs	r0, r0
 8000264:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000268:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 800026c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000270:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000274:	d002      	beq.n	800027c <__adddf3+0x84>
 8000276:	4252      	negs	r2, r2
 8000278:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800027c:	ea94 0f05 	teq	r4, r5
 8000280:	f000 80a7 	beq.w	80003d2 <__adddf3+0x1da>
 8000284:	f1a4 0401 	sub.w	r4, r4, #1
 8000288:	f1d5 0e20 	rsbs	lr, r5, #32
 800028c:	db0d      	blt.n	80002aa <__adddf3+0xb2>
 800028e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000292:	fa22 f205 	lsr.w	r2, r2, r5
 8000296:	1880      	adds	r0, r0, r2
 8000298:	f141 0100 	adc.w	r1, r1, #0
 800029c:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a0:	1880      	adds	r0, r0, r2
 80002a2:	fa43 f305 	asr.w	r3, r3, r5
 80002a6:	4159      	adcs	r1, r3
 80002a8:	e00e      	b.n	80002c8 <__adddf3+0xd0>
 80002aa:	f1a5 0520 	sub.w	r5, r5, #32
 80002ae:	f10e 0e20 	add.w	lr, lr, #32
 80002b2:	2a01      	cmp	r2, #1
 80002b4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002b8:	bf28      	it	cs
 80002ba:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	18c0      	adds	r0, r0, r3
 80002c4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002cc:	d507      	bpl.n	80002de <__adddf3+0xe6>
 80002ce:	f04f 0e00 	mov.w	lr, #0
 80002d2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002d6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002da:	eb6e 0101 	sbc.w	r1, lr, r1
 80002de:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002e2:	d31b      	bcc.n	800031c <__adddf3+0x124>
 80002e4:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002e8:	d30c      	bcc.n	8000304 <__adddf3+0x10c>
 80002ea:	0849      	lsrs	r1, r1, #1
 80002ec:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f0:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f4:	f104 0401 	add.w	r4, r4, #1
 80002f8:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002fc:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000300:	f080 809a 	bcs.w	8000438 <__adddf3+0x240>
 8000304:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000308:	bf08      	it	eq
 800030a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800030e:	f150 0000 	adcs.w	r0, r0, #0
 8000312:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000316:	ea41 0105 	orr.w	r1, r1, r5
 800031a:	bd30      	pop	{r4, r5, pc}
 800031c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000320:	4140      	adcs	r0, r0
 8000322:	eb41 0101 	adc.w	r1, r1, r1
 8000326:	3c01      	subs	r4, #1
 8000328:	bf28      	it	cs
 800032a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800032e:	d2e9      	bcs.n	8000304 <__adddf3+0x10c>
 8000330:	f091 0f00 	teq	r1, #0
 8000334:	bf04      	itt	eq
 8000336:	4601      	moveq	r1, r0
 8000338:	2000      	moveq	r0, #0
 800033a:	fab1 f381 	clz	r3, r1
 800033e:	bf08      	it	eq
 8000340:	3320      	addeq	r3, #32
 8000342:	f1a3 030b 	sub.w	r3, r3, #11
 8000346:	f1b3 0220 	subs.w	r2, r3, #32
 800034a:	da0c      	bge.n	8000366 <__adddf3+0x16e>
 800034c:	320c      	adds	r2, #12
 800034e:	dd08      	ble.n	8000362 <__adddf3+0x16a>
 8000350:	f102 0c14 	add.w	ip, r2, #20
 8000354:	f1c2 020c 	rsb	r2, r2, #12
 8000358:	fa01 f00c 	lsl.w	r0, r1, ip
 800035c:	fa21 f102 	lsr.w	r1, r1, r2
 8000360:	e00c      	b.n	800037c <__adddf3+0x184>
 8000362:	f102 0214 	add.w	r2, r2, #20
 8000366:	bfd8      	it	le
 8000368:	f1c2 0c20 	rsble	ip, r2, #32
 800036c:	fa01 f102 	lsl.w	r1, r1, r2
 8000370:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000374:	bfdc      	itt	le
 8000376:	ea41 010c 	orrle.w	r1, r1, ip
 800037a:	4090      	lslle	r0, r2
 800037c:	1ae4      	subs	r4, r4, r3
 800037e:	bfa2      	ittt	ge
 8000380:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000384:	4329      	orrge	r1, r5
 8000386:	bd30      	popge	{r4, r5, pc}
 8000388:	ea6f 0404 	mvn.w	r4, r4
 800038c:	3c1f      	subs	r4, #31
 800038e:	da1c      	bge.n	80003ca <__adddf3+0x1d2>
 8000390:	340c      	adds	r4, #12
 8000392:	dc0e      	bgt.n	80003b2 <__adddf3+0x1ba>
 8000394:	f104 0414 	add.w	r4, r4, #20
 8000398:	f1c4 0220 	rsb	r2, r4, #32
 800039c:	fa20 f004 	lsr.w	r0, r0, r4
 80003a0:	fa01 f302 	lsl.w	r3, r1, r2
 80003a4:	ea40 0003 	orr.w	r0, r0, r3
 80003a8:	fa21 f304 	lsr.w	r3, r1, r4
 80003ac:	ea45 0103 	orr.w	r1, r5, r3
 80003b0:	bd30      	pop	{r4, r5, pc}
 80003b2:	f1c4 040c 	rsb	r4, r4, #12
 80003b6:	f1c4 0220 	rsb	r2, r4, #32
 80003ba:	fa20 f002 	lsr.w	r0, r0, r2
 80003be:	fa01 f304 	lsl.w	r3, r1, r4
 80003c2:	ea40 0003 	orr.w	r0, r0, r3
 80003c6:	4629      	mov	r1, r5
 80003c8:	bd30      	pop	{r4, r5, pc}
 80003ca:	fa21 f004 	lsr.w	r0, r1, r4
 80003ce:	4629      	mov	r1, r5
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	f094 0f00 	teq	r4, #0
 80003d6:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003da:	bf06      	itte	eq
 80003dc:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003e0:	3401      	addeq	r4, #1
 80003e2:	3d01      	subne	r5, #1
 80003e4:	e74e      	b.n	8000284 <__adddf3+0x8c>
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf18      	it	ne
 80003ec:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f0:	d029      	beq.n	8000446 <__adddf3+0x24e>
 80003f2:	ea94 0f05 	teq	r4, r5
 80003f6:	bf08      	it	eq
 80003f8:	ea90 0f02 	teqeq	r0, r2
 80003fc:	d005      	beq.n	800040a <__adddf3+0x212>
 80003fe:	ea54 0c00 	orrs.w	ip, r4, r0
 8000402:	bf04      	itt	eq
 8000404:	4619      	moveq	r1, r3
 8000406:	4610      	moveq	r0, r2
 8000408:	bd30      	pop	{r4, r5, pc}
 800040a:	ea91 0f03 	teq	r1, r3
 800040e:	bf1e      	ittt	ne
 8000410:	2100      	movne	r1, #0
 8000412:	2000      	movne	r0, #0
 8000414:	bd30      	popne	{r4, r5, pc}
 8000416:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041a:	d105      	bne.n	8000428 <__adddf3+0x230>
 800041c:	0040      	lsls	r0, r0, #1
 800041e:	4149      	adcs	r1, r1
 8000420:	bf28      	it	cs
 8000422:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000426:	bd30      	pop	{r4, r5, pc}
 8000428:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800042c:	bf3c      	itt	cc
 800042e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000432:	bd30      	popcc	{r4, r5, pc}
 8000434:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000438:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800043c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000440:	f04f 0000 	mov.w	r0, #0
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044a:	bf1a      	itte	ne
 800044c:	4619      	movne	r1, r3
 800044e:	4610      	movne	r0, r2
 8000450:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000454:	bf1c      	itt	ne
 8000456:	460b      	movne	r3, r1
 8000458:	4602      	movne	r2, r0
 800045a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800045e:	bf06      	itte	eq
 8000460:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000464:	ea91 0f03 	teqeq	r1, r3
 8000468:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	bf00      	nop

08000470 <__aeabi_ui2d>:
 8000470:	f090 0f00 	teq	r0, #0
 8000474:	bf04      	itt	eq
 8000476:	2100      	moveq	r1, #0
 8000478:	4770      	bxeq	lr
 800047a:	b530      	push	{r4, r5, lr}
 800047c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000480:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000484:	f04f 0500 	mov.w	r5, #0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e750      	b.n	8000330 <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_i2d>:
 8000490:	f090 0f00 	teq	r0, #0
 8000494:	bf04      	itt	eq
 8000496:	2100      	moveq	r1, #0
 8000498:	4770      	bxeq	lr
 800049a:	b530      	push	{r4, r5, lr}
 800049c:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004a0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004a4:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 80004a8:	bf48      	it	mi
 80004aa:	4240      	negmi	r0, r0
 80004ac:	f04f 0100 	mov.w	r1, #0
 80004b0:	e73e      	b.n	8000330 <__adddf3+0x138>
 80004b2:	bf00      	nop

080004b4 <__aeabi_f2d>:
 80004b4:	0042      	lsls	r2, r0, #1
 80004b6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ba:	ea4f 0131 	mov.w	r1, r1, rrx
 80004be:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c2:	bf1f      	itttt	ne
 80004c4:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004c8:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004cc:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004d0:	4770      	bxne	lr
 80004d2:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004d6:	bf08      	it	eq
 80004d8:	4770      	bxeq	lr
 80004da:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004de:	bf04      	itt	eq
 80004e0:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004e4:	4770      	bxeq	lr
 80004e6:	b530      	push	{r4, r5, lr}
 80004e8:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004ec:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004f4:	e71c      	b.n	8000330 <__adddf3+0x138>
 80004f6:	bf00      	nop

080004f8 <__aeabi_ul2d>:
 80004f8:	ea50 0201 	orrs.w	r2, r0, r1
 80004fc:	bf08      	it	eq
 80004fe:	4770      	bxeq	lr
 8000500:	b530      	push	{r4, r5, lr}
 8000502:	f04f 0500 	mov.w	r5, #0
 8000506:	e00a      	b.n	800051e <__aeabi_l2d+0x16>

08000508 <__aeabi_l2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000516:	d502      	bpl.n	800051e <__aeabi_l2d+0x16>
 8000518:	4240      	negs	r0, r0
 800051a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800051e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000522:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000526:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052a:	f43f aed8 	beq.w	80002de <__adddf3+0xe6>
 800052e:	f04f 0203 	mov.w	r2, #3
 8000532:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000536:	bf18      	it	ne
 8000538:	3203      	addne	r2, #3
 800053a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053e:	bf18      	it	ne
 8000540:	3203      	addne	r2, #3
 8000542:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000546:	f1c2 0320 	rsb	r3, r2, #32
 800054a:	fa00 fc03 	lsl.w	ip, r0, r3
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 fe03 	lsl.w	lr, r1, r3
 8000556:	ea40 000e 	orr.w	r0, r0, lr
 800055a:	fa21 f102 	lsr.w	r1, r1, r2
 800055e:	4414      	add	r4, r2
 8000560:	e6bd      	b.n	80002de <__adddf3+0xe6>
 8000562:	bf00      	nop

08000564 <__aeabi_frsub>:
 8000564:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000568:	e002      	b.n	8000570 <__addsf3>
 800056a:	bf00      	nop

0800056c <__aeabi_fsub>:
 800056c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000570 <__addsf3>:
 8000570:	0042      	lsls	r2, r0, #1
 8000572:	bf1f      	itttt	ne
 8000574:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000578:	ea92 0f03 	teqne	r2, r3
 800057c:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000580:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000584:	d06a      	beq.n	800065c <__addsf3+0xec>
 8000586:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800058a:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800058e:	bfc1      	itttt	gt
 8000590:	18d2      	addgt	r2, r2, r3
 8000592:	4041      	eorgt	r1, r0
 8000594:	4048      	eorgt	r0, r1
 8000596:	4041      	eorgt	r1, r0
 8000598:	bfb8      	it	lt
 800059a:	425b      	neglt	r3, r3
 800059c:	2b19      	cmp	r3, #25
 800059e:	bf88      	it	hi
 80005a0:	4770      	bxhi	lr
 80005a2:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80005a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80005aa:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80005ae:	bf18      	it	ne
 80005b0:	4240      	negne	r0, r0
 80005b2:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80005b6:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80005ba:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80005be:	bf18      	it	ne
 80005c0:	4249      	negne	r1, r1
 80005c2:	ea92 0f03 	teq	r2, r3
 80005c6:	d03f      	beq.n	8000648 <__addsf3+0xd8>
 80005c8:	f1a2 0201 	sub.w	r2, r2, #1
 80005cc:	fa41 fc03 	asr.w	ip, r1, r3
 80005d0:	eb10 000c 	adds.w	r0, r0, ip
 80005d4:	f1c3 0320 	rsb	r3, r3, #32
 80005d8:	fa01 f103 	lsl.w	r1, r1, r3
 80005dc:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80005e0:	d502      	bpl.n	80005e8 <__addsf3+0x78>
 80005e2:	4249      	negs	r1, r1
 80005e4:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80005e8:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80005ec:	d313      	bcc.n	8000616 <__addsf3+0xa6>
 80005ee:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80005f2:	d306      	bcc.n	8000602 <__addsf3+0x92>
 80005f4:	0840      	lsrs	r0, r0, #1
 80005f6:	ea4f 0131 	mov.w	r1, r1, rrx
 80005fa:	f102 0201 	add.w	r2, r2, #1
 80005fe:	2afe      	cmp	r2, #254	@ 0xfe
 8000600:	d251      	bcs.n	80006a6 <__addsf3+0x136>
 8000602:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000606:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800060a:	bf08      	it	eq
 800060c:	f020 0001 	biceq.w	r0, r0, #1
 8000610:	ea40 0003 	orr.w	r0, r0, r3
 8000614:	4770      	bx	lr
 8000616:	0049      	lsls	r1, r1, #1
 8000618:	eb40 0000 	adc.w	r0, r0, r0
 800061c:	3a01      	subs	r2, #1
 800061e:	bf28      	it	cs
 8000620:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000624:	d2ed      	bcs.n	8000602 <__addsf3+0x92>
 8000626:	fab0 fc80 	clz	ip, r0
 800062a:	f1ac 0c08 	sub.w	ip, ip, #8
 800062e:	ebb2 020c 	subs.w	r2, r2, ip
 8000632:	fa00 f00c 	lsl.w	r0, r0, ip
 8000636:	bfaa      	itet	ge
 8000638:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 800063c:	4252      	neglt	r2, r2
 800063e:	4318      	orrge	r0, r3
 8000640:	bfbc      	itt	lt
 8000642:	40d0      	lsrlt	r0, r2
 8000644:	4318      	orrlt	r0, r3
 8000646:	4770      	bx	lr
 8000648:	f092 0f00 	teq	r2, #0
 800064c:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000650:	bf06      	itte	eq
 8000652:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000656:	3201      	addeq	r2, #1
 8000658:	3b01      	subne	r3, #1
 800065a:	e7b5      	b.n	80005c8 <__addsf3+0x58>
 800065c:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000660:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000664:	bf18      	it	ne
 8000666:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800066a:	d021      	beq.n	80006b0 <__addsf3+0x140>
 800066c:	ea92 0f03 	teq	r2, r3
 8000670:	d004      	beq.n	800067c <__addsf3+0x10c>
 8000672:	f092 0f00 	teq	r2, #0
 8000676:	bf08      	it	eq
 8000678:	4608      	moveq	r0, r1
 800067a:	4770      	bx	lr
 800067c:	ea90 0f01 	teq	r0, r1
 8000680:	bf1c      	itt	ne
 8000682:	2000      	movne	r0, #0
 8000684:	4770      	bxne	lr
 8000686:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 800068a:	d104      	bne.n	8000696 <__addsf3+0x126>
 800068c:	0040      	lsls	r0, r0, #1
 800068e:	bf28      	it	cs
 8000690:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000694:	4770      	bx	lr
 8000696:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 800069a:	bf3c      	itt	cc
 800069c:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 80006a0:	4770      	bxcc	lr
 80006a2:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80006a6:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 80006aa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80006ae:	4770      	bx	lr
 80006b0:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80006b4:	bf16      	itet	ne
 80006b6:	4608      	movne	r0, r1
 80006b8:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80006bc:	4601      	movne	r1, r0
 80006be:	0242      	lsls	r2, r0, #9
 80006c0:	bf06      	itte	eq
 80006c2:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80006c6:	ea90 0f01 	teqeq	r0, r1
 80006ca:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80006ce:	4770      	bx	lr

080006d0 <__aeabi_ui2f>:
 80006d0:	f04f 0300 	mov.w	r3, #0
 80006d4:	e004      	b.n	80006e0 <__aeabi_i2f+0x8>
 80006d6:	bf00      	nop

080006d8 <__aeabi_i2f>:
 80006d8:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80006dc:	bf48      	it	mi
 80006de:	4240      	negmi	r0, r0
 80006e0:	ea5f 0c00 	movs.w	ip, r0
 80006e4:	bf08      	it	eq
 80006e6:	4770      	bxeq	lr
 80006e8:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80006ec:	4601      	mov	r1, r0
 80006ee:	f04f 0000 	mov.w	r0, #0
 80006f2:	e01c      	b.n	800072e <__aeabi_l2f+0x2a>

080006f4 <__aeabi_ul2f>:
 80006f4:	ea50 0201 	orrs.w	r2, r0, r1
 80006f8:	bf08      	it	eq
 80006fa:	4770      	bxeq	lr
 80006fc:	f04f 0300 	mov.w	r3, #0
 8000700:	e00a      	b.n	8000718 <__aeabi_l2f+0x14>
 8000702:	bf00      	nop

08000704 <__aeabi_l2f>:
 8000704:	ea50 0201 	orrs.w	r2, r0, r1
 8000708:	bf08      	it	eq
 800070a:	4770      	bxeq	lr
 800070c:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000710:	d502      	bpl.n	8000718 <__aeabi_l2f+0x14>
 8000712:	4240      	negs	r0, r0
 8000714:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000718:	ea5f 0c01 	movs.w	ip, r1
 800071c:	bf02      	ittt	eq
 800071e:	4684      	moveq	ip, r0
 8000720:	4601      	moveq	r1, r0
 8000722:	2000      	moveq	r0, #0
 8000724:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000728:	bf08      	it	eq
 800072a:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800072e:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000732:	fabc f28c 	clz	r2, ip
 8000736:	3a08      	subs	r2, #8
 8000738:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 800073c:	db10      	blt.n	8000760 <__aeabi_l2f+0x5c>
 800073e:	fa01 fc02 	lsl.w	ip, r1, r2
 8000742:	4463      	add	r3, ip
 8000744:	fa00 fc02 	lsl.w	ip, r0, r2
 8000748:	f1c2 0220 	rsb	r2, r2, #32
 800074c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000750:	fa20 f202 	lsr.w	r2, r0, r2
 8000754:	eb43 0002 	adc.w	r0, r3, r2
 8000758:	bf08      	it	eq
 800075a:	f020 0001 	biceq.w	r0, r0, #1
 800075e:	4770      	bx	lr
 8000760:	f102 0220 	add.w	r2, r2, #32
 8000764:	fa01 fc02 	lsl.w	ip, r1, r2
 8000768:	f1c2 0220 	rsb	r2, r2, #32
 800076c:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000770:	fa21 f202 	lsr.w	r2, r1, r2
 8000774:	eb43 0002 	adc.w	r0, r3, r2
 8000778:	bf08      	it	eq
 800077a:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800077e:	4770      	bx	lr

08000780 <__aeabi_uldivmod>:
 8000780:	b953      	cbnz	r3, 8000798 <__aeabi_uldivmod+0x18>
 8000782:	b94a      	cbnz	r2, 8000798 <__aeabi_uldivmod+0x18>
 8000784:	2900      	cmp	r1, #0
 8000786:	bf08      	it	eq
 8000788:	2800      	cmpeq	r0, #0
 800078a:	bf1c      	itt	ne
 800078c:	f04f 31ff 	movne.w	r1, #4294967295
 8000790:	f04f 30ff 	movne.w	r0, #4294967295
 8000794:	f000 b988 	b.w	8000aa8 <__aeabi_idiv0>
 8000798:	f1ad 0c08 	sub.w	ip, sp, #8
 800079c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80007a0:	f000 f806 	bl	80007b0 <__udivmoddi4>
 80007a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007ac:	b004      	add	sp, #16
 80007ae:	4770      	bx	lr

080007b0 <__udivmoddi4>:
 80007b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80007b4:	9d08      	ldr	r5, [sp, #32]
 80007b6:	468e      	mov	lr, r1
 80007b8:	4604      	mov	r4, r0
 80007ba:	4688      	mov	r8, r1
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d14a      	bne.n	8000856 <__udivmoddi4+0xa6>
 80007c0:	428a      	cmp	r2, r1
 80007c2:	4617      	mov	r7, r2
 80007c4:	d962      	bls.n	800088c <__udivmoddi4+0xdc>
 80007c6:	fab2 f682 	clz	r6, r2
 80007ca:	b14e      	cbz	r6, 80007e0 <__udivmoddi4+0x30>
 80007cc:	f1c6 0320 	rsb	r3, r6, #32
 80007d0:	fa01 f806 	lsl.w	r8, r1, r6
 80007d4:	fa20 f303 	lsr.w	r3, r0, r3
 80007d8:	40b7      	lsls	r7, r6
 80007da:	ea43 0808 	orr.w	r8, r3, r8
 80007de:	40b4      	lsls	r4, r6
 80007e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80007e4:	fa1f fc87 	uxth.w	ip, r7
 80007e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80007ec:	0c23      	lsrs	r3, r4, #16
 80007ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80007f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80007f6:	fb01 f20c 	mul.w	r2, r1, ip
 80007fa:	429a      	cmp	r2, r3
 80007fc:	d909      	bls.n	8000812 <__udivmoddi4+0x62>
 80007fe:	18fb      	adds	r3, r7, r3
 8000800:	f101 30ff 	add.w	r0, r1, #4294967295
 8000804:	f080 80ea 	bcs.w	80009dc <__udivmoddi4+0x22c>
 8000808:	429a      	cmp	r2, r3
 800080a:	f240 80e7 	bls.w	80009dc <__udivmoddi4+0x22c>
 800080e:	3902      	subs	r1, #2
 8000810:	443b      	add	r3, r7
 8000812:	1a9a      	subs	r2, r3, r2
 8000814:	b2a3      	uxth	r3, r4
 8000816:	fbb2 f0fe 	udiv	r0, r2, lr
 800081a:	fb0e 2210 	mls	r2, lr, r0, r2
 800081e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000822:	fb00 fc0c 	mul.w	ip, r0, ip
 8000826:	459c      	cmp	ip, r3
 8000828:	d909      	bls.n	800083e <__udivmoddi4+0x8e>
 800082a:	18fb      	adds	r3, r7, r3
 800082c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000830:	f080 80d6 	bcs.w	80009e0 <__udivmoddi4+0x230>
 8000834:	459c      	cmp	ip, r3
 8000836:	f240 80d3 	bls.w	80009e0 <__udivmoddi4+0x230>
 800083a:	443b      	add	r3, r7
 800083c:	3802      	subs	r0, #2
 800083e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000842:	eba3 030c 	sub.w	r3, r3, ip
 8000846:	2100      	movs	r1, #0
 8000848:	b11d      	cbz	r5, 8000852 <__udivmoddi4+0xa2>
 800084a:	40f3      	lsrs	r3, r6
 800084c:	2200      	movs	r2, #0
 800084e:	e9c5 3200 	strd	r3, r2, [r5]
 8000852:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000856:	428b      	cmp	r3, r1
 8000858:	d905      	bls.n	8000866 <__udivmoddi4+0xb6>
 800085a:	b10d      	cbz	r5, 8000860 <__udivmoddi4+0xb0>
 800085c:	e9c5 0100 	strd	r0, r1, [r5]
 8000860:	2100      	movs	r1, #0
 8000862:	4608      	mov	r0, r1
 8000864:	e7f5      	b.n	8000852 <__udivmoddi4+0xa2>
 8000866:	fab3 f183 	clz	r1, r3
 800086a:	2900      	cmp	r1, #0
 800086c:	d146      	bne.n	80008fc <__udivmoddi4+0x14c>
 800086e:	4573      	cmp	r3, lr
 8000870:	d302      	bcc.n	8000878 <__udivmoddi4+0xc8>
 8000872:	4282      	cmp	r2, r0
 8000874:	f200 8105 	bhi.w	8000a82 <__udivmoddi4+0x2d2>
 8000878:	1a84      	subs	r4, r0, r2
 800087a:	eb6e 0203 	sbc.w	r2, lr, r3
 800087e:	2001      	movs	r0, #1
 8000880:	4690      	mov	r8, r2
 8000882:	2d00      	cmp	r5, #0
 8000884:	d0e5      	beq.n	8000852 <__udivmoddi4+0xa2>
 8000886:	e9c5 4800 	strd	r4, r8, [r5]
 800088a:	e7e2      	b.n	8000852 <__udivmoddi4+0xa2>
 800088c:	2a00      	cmp	r2, #0
 800088e:	f000 8090 	beq.w	80009b2 <__udivmoddi4+0x202>
 8000892:	fab2 f682 	clz	r6, r2
 8000896:	2e00      	cmp	r6, #0
 8000898:	f040 80a4 	bne.w	80009e4 <__udivmoddi4+0x234>
 800089c:	1a8a      	subs	r2, r1, r2
 800089e:	0c03      	lsrs	r3, r0, #16
 80008a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80008a4:	b280      	uxth	r0, r0
 80008a6:	b2bc      	uxth	r4, r7
 80008a8:	2101      	movs	r1, #1
 80008aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80008ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80008b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80008b6:	fb04 f20c 	mul.w	r2, r4, ip
 80008ba:	429a      	cmp	r2, r3
 80008bc:	d907      	bls.n	80008ce <__udivmoddi4+0x11e>
 80008be:	18fb      	adds	r3, r7, r3
 80008c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80008c4:	d202      	bcs.n	80008cc <__udivmoddi4+0x11c>
 80008c6:	429a      	cmp	r2, r3
 80008c8:	f200 80e0 	bhi.w	8000a8c <__udivmoddi4+0x2dc>
 80008cc:	46c4      	mov	ip, r8
 80008ce:	1a9b      	subs	r3, r3, r2
 80008d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80008d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80008d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80008dc:	fb02 f404 	mul.w	r4, r2, r4
 80008e0:	429c      	cmp	r4, r3
 80008e2:	d907      	bls.n	80008f4 <__udivmoddi4+0x144>
 80008e4:	18fb      	adds	r3, r7, r3
 80008e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80008ea:	d202      	bcs.n	80008f2 <__udivmoddi4+0x142>
 80008ec:	429c      	cmp	r4, r3
 80008ee:	f200 80ca 	bhi.w	8000a86 <__udivmoddi4+0x2d6>
 80008f2:	4602      	mov	r2, r0
 80008f4:	1b1b      	subs	r3, r3, r4
 80008f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80008fa:	e7a5      	b.n	8000848 <__udivmoddi4+0x98>
 80008fc:	f1c1 0620 	rsb	r6, r1, #32
 8000900:	408b      	lsls	r3, r1
 8000902:	fa22 f706 	lsr.w	r7, r2, r6
 8000906:	431f      	orrs	r7, r3
 8000908:	fa0e f401 	lsl.w	r4, lr, r1
 800090c:	fa20 f306 	lsr.w	r3, r0, r6
 8000910:	fa2e fe06 	lsr.w	lr, lr, r6
 8000914:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000918:	4323      	orrs	r3, r4
 800091a:	fa00 f801 	lsl.w	r8, r0, r1
 800091e:	fa1f fc87 	uxth.w	ip, r7
 8000922:	fbbe f0f9 	udiv	r0, lr, r9
 8000926:	0c1c      	lsrs	r4, r3, #16
 8000928:	fb09 ee10 	mls	lr, r9, r0, lr
 800092c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000930:	fb00 fe0c 	mul.w	lr, r0, ip
 8000934:	45a6      	cmp	lr, r4
 8000936:	fa02 f201 	lsl.w	r2, r2, r1
 800093a:	d909      	bls.n	8000950 <__udivmoddi4+0x1a0>
 800093c:	193c      	adds	r4, r7, r4
 800093e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000942:	f080 809c 	bcs.w	8000a7e <__udivmoddi4+0x2ce>
 8000946:	45a6      	cmp	lr, r4
 8000948:	f240 8099 	bls.w	8000a7e <__udivmoddi4+0x2ce>
 800094c:	3802      	subs	r0, #2
 800094e:	443c      	add	r4, r7
 8000950:	eba4 040e 	sub.w	r4, r4, lr
 8000954:	fa1f fe83 	uxth.w	lr, r3
 8000958:	fbb4 f3f9 	udiv	r3, r4, r9
 800095c:	fb09 4413 	mls	r4, r9, r3, r4
 8000960:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000964:	fb03 fc0c 	mul.w	ip, r3, ip
 8000968:	45a4      	cmp	ip, r4
 800096a:	d908      	bls.n	800097e <__udivmoddi4+0x1ce>
 800096c:	193c      	adds	r4, r7, r4
 800096e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000972:	f080 8082 	bcs.w	8000a7a <__udivmoddi4+0x2ca>
 8000976:	45a4      	cmp	ip, r4
 8000978:	d97f      	bls.n	8000a7a <__udivmoddi4+0x2ca>
 800097a:	3b02      	subs	r3, #2
 800097c:	443c      	add	r4, r7
 800097e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000982:	eba4 040c 	sub.w	r4, r4, ip
 8000986:	fba0 ec02 	umull	lr, ip, r0, r2
 800098a:	4564      	cmp	r4, ip
 800098c:	4673      	mov	r3, lr
 800098e:	46e1      	mov	r9, ip
 8000990:	d362      	bcc.n	8000a58 <__udivmoddi4+0x2a8>
 8000992:	d05f      	beq.n	8000a54 <__udivmoddi4+0x2a4>
 8000994:	b15d      	cbz	r5, 80009ae <__udivmoddi4+0x1fe>
 8000996:	ebb8 0203 	subs.w	r2, r8, r3
 800099a:	eb64 0409 	sbc.w	r4, r4, r9
 800099e:	fa04 f606 	lsl.w	r6, r4, r6
 80009a2:	fa22 f301 	lsr.w	r3, r2, r1
 80009a6:	431e      	orrs	r6, r3
 80009a8:	40cc      	lsrs	r4, r1
 80009aa:	e9c5 6400 	strd	r6, r4, [r5]
 80009ae:	2100      	movs	r1, #0
 80009b0:	e74f      	b.n	8000852 <__udivmoddi4+0xa2>
 80009b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80009b6:	0c01      	lsrs	r1, r0, #16
 80009b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80009bc:	b280      	uxth	r0, r0
 80009be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80009c2:	463b      	mov	r3, r7
 80009c4:	4638      	mov	r0, r7
 80009c6:	463c      	mov	r4, r7
 80009c8:	46b8      	mov	r8, r7
 80009ca:	46be      	mov	lr, r7
 80009cc:	2620      	movs	r6, #32
 80009ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80009d2:	eba2 0208 	sub.w	r2, r2, r8
 80009d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80009da:	e766      	b.n	80008aa <__udivmoddi4+0xfa>
 80009dc:	4601      	mov	r1, r0
 80009de:	e718      	b.n	8000812 <__udivmoddi4+0x62>
 80009e0:	4610      	mov	r0, r2
 80009e2:	e72c      	b.n	800083e <__udivmoddi4+0x8e>
 80009e4:	f1c6 0220 	rsb	r2, r6, #32
 80009e8:	fa2e f302 	lsr.w	r3, lr, r2
 80009ec:	40b7      	lsls	r7, r6
 80009ee:	40b1      	lsls	r1, r6
 80009f0:	fa20 f202 	lsr.w	r2, r0, r2
 80009f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80009f8:	430a      	orrs	r2, r1
 80009fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80009fe:	b2bc      	uxth	r4, r7
 8000a00:	fb0e 3318 	mls	r3, lr, r8, r3
 8000a04:	0c11      	lsrs	r1, r2, #16
 8000a06:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a0a:	fb08 f904 	mul.w	r9, r8, r4
 8000a0e:	40b0      	lsls	r0, r6
 8000a10:	4589      	cmp	r9, r1
 8000a12:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000a16:	b280      	uxth	r0, r0
 8000a18:	d93e      	bls.n	8000a98 <__udivmoddi4+0x2e8>
 8000a1a:	1879      	adds	r1, r7, r1
 8000a1c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000a20:	d201      	bcs.n	8000a26 <__udivmoddi4+0x276>
 8000a22:	4589      	cmp	r9, r1
 8000a24:	d81f      	bhi.n	8000a66 <__udivmoddi4+0x2b6>
 8000a26:	eba1 0109 	sub.w	r1, r1, r9
 8000a2a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a2e:	fb09 f804 	mul.w	r8, r9, r4
 8000a32:	fb0e 1119 	mls	r1, lr, r9, r1
 8000a36:	b292      	uxth	r2, r2
 8000a38:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000a3c:	4542      	cmp	r2, r8
 8000a3e:	d229      	bcs.n	8000a94 <__udivmoddi4+0x2e4>
 8000a40:	18ba      	adds	r2, r7, r2
 8000a42:	f109 31ff 	add.w	r1, r9, #4294967295
 8000a46:	d2c4      	bcs.n	80009d2 <__udivmoddi4+0x222>
 8000a48:	4542      	cmp	r2, r8
 8000a4a:	d2c2      	bcs.n	80009d2 <__udivmoddi4+0x222>
 8000a4c:	f1a9 0102 	sub.w	r1, r9, #2
 8000a50:	443a      	add	r2, r7
 8000a52:	e7be      	b.n	80009d2 <__udivmoddi4+0x222>
 8000a54:	45f0      	cmp	r8, lr
 8000a56:	d29d      	bcs.n	8000994 <__udivmoddi4+0x1e4>
 8000a58:	ebbe 0302 	subs.w	r3, lr, r2
 8000a5c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000a60:	3801      	subs	r0, #1
 8000a62:	46e1      	mov	r9, ip
 8000a64:	e796      	b.n	8000994 <__udivmoddi4+0x1e4>
 8000a66:	eba7 0909 	sub.w	r9, r7, r9
 8000a6a:	4449      	add	r1, r9
 8000a6c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000a70:	fbb1 f9fe 	udiv	r9, r1, lr
 8000a74:	fb09 f804 	mul.w	r8, r9, r4
 8000a78:	e7db      	b.n	8000a32 <__udivmoddi4+0x282>
 8000a7a:	4673      	mov	r3, lr
 8000a7c:	e77f      	b.n	800097e <__udivmoddi4+0x1ce>
 8000a7e:	4650      	mov	r0, sl
 8000a80:	e766      	b.n	8000950 <__udivmoddi4+0x1a0>
 8000a82:	4608      	mov	r0, r1
 8000a84:	e6fd      	b.n	8000882 <__udivmoddi4+0xd2>
 8000a86:	443b      	add	r3, r7
 8000a88:	3a02      	subs	r2, #2
 8000a8a:	e733      	b.n	80008f4 <__udivmoddi4+0x144>
 8000a8c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000a90:	443b      	add	r3, r7
 8000a92:	e71c      	b.n	80008ce <__udivmoddi4+0x11e>
 8000a94:	4649      	mov	r1, r9
 8000a96:	e79c      	b.n	80009d2 <__udivmoddi4+0x222>
 8000a98:	eba1 0109 	sub.w	r1, r1, r9
 8000a9c:	46c4      	mov	ip, r8
 8000a9e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000aa2:	fb09 f804 	mul.w	r8, r9, r4
 8000aa6:	e7c4      	b.n	8000a32 <__udivmoddi4+0x282>

08000aa8 <__aeabi_idiv0>:
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <canardInit>:
                void* mem_arena,
                size_t mem_arena_size,
                CanardOnTransferReception on_reception,
                CanardShouldAcceptTransfer should_accept,
                void* user_reference)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	60b9      	str	r1, [r7, #8]
 8000ab6:	607a      	str	r2, [r7, #4]
 8000ab8:	603b      	str	r3, [r7, #0]
     * If your application fails here, make sure it's not built in 64-bit mode.
     * Refer to the design documentation for more info.
     */
    CANARD_ASSERT(CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE >= 5);

    memset(out_ins, 0, sizeof(*out_ins));
 8000aba:	222c      	movs	r2, #44	@ 0x2c
 8000abc:	2100      	movs	r1, #0
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f00e fef0 	bl	800f8a4 <memset>

    out_ins->node_id = CANARD_BROADCAST_NODE_ID;
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	701a      	strb	r2, [r3, #0]
    out_ins->on_reception = on_reception;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	683a      	ldr	r2, [r7, #0]
 8000ace:	609a      	str	r2, [r3, #8]
    out_ins->should_accept = should_accept;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	6a3a      	ldr	r2, [r7, #32]
 8000ad4:	605a      	str	r2, [r3, #4]
    out_ins->rx_states = NULL;
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	2200      	movs	r2, #0
 8000ada:	621a      	str	r2, [r3, #32]
    out_ins->tx_queue = NULL;
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	2200      	movs	r2, #0
 8000ae0:	625a      	str	r2, [r3, #36]	@ 0x24
    out_ins->user_reference = user_reference;
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000ae6:	629a      	str	r2, [r3, #40]	@ 0x28
#if CANARD_ENABLE_TAO_OPTION
    out_ins->tao_disabled = false;
#endif
    size_t pool_capacity = mem_arena_size / CANARD_MEM_BLOCK_SIZE;
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	095b      	lsrs	r3, r3, #5
 8000aec:	617b      	str	r3, [r7, #20]
    if (pool_capacity > 0xFFFFU)
 8000aee:	697b      	ldr	r3, [r7, #20]
 8000af0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000af4:	d302      	bcc.n	8000afc <canardInit+0x50>
    {
        pool_capacity = 0xFFFFU;
 8000af6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000afa:	617b      	str	r3, [r7, #20]
    }

    initPoolAllocator(&out_ins->allocator, mem_arena, (uint16_t)pool_capacity);
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	330c      	adds	r3, #12
 8000b00:	697a      	ldr	r2, [r7, #20]
 8000b02:	b292      	uxth	r2, r2
 8000b04:	68b9      	ldr	r1, [r7, #8]
 8000b06:	4618      	mov	r0, r3
 8000b08:	f001 ff03 	bl	8002912 <initPoolAllocator>
}
 8000b0c:	bf00      	nop
 8000b0e:	3718      	adds	r7, #24
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <canardSetLocalNodeID>:
    CANARD_ASSERT(ins != NULL);
    return ins->user_reference;
}

void canardSetLocalNodeID(CanardInstance* ins, uint8_t self_node_id)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	460b      	mov	r3, r1
 8000b1e:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);

    if ((ins->node_id == CANARD_BROADCAST_NODE_ID) &&
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d109      	bne.n	8000b3c <canardSetLocalNodeID+0x28>
 8000b28:	78fb      	ldrb	r3, [r7, #3]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d006      	beq.n	8000b3c <canardSetLocalNodeID+0x28>
        (self_node_id >= CANARD_MIN_NODE_ID) &&
        (self_node_id <= CANARD_MAX_NODE_ID))
 8000b2e:	f997 3003 	ldrsb.w	r3, [r7, #3]
        (self_node_id >= CANARD_MIN_NODE_ID) &&
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	db02      	blt.n	8000b3c <canardSetLocalNodeID+0x28>
    {
        ins->node_id = self_node_id;
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	78fa      	ldrb	r2, [r7, #3]
 8000b3a:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        CANARD_ASSERT(false);
    }
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <canardGetLocalNodeID>:

uint8_t canardGetLocalNodeID(const CanardInstance* ins)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
    return ins->node_id;
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	781b      	ldrb	r3, [r3, #0]
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <canardBroadcast>:
#endif
#if CANARD_ENABLE_CANFD
                        ,bool canfd
#endif
)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08e      	sub	sp, #56	@ 0x38
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	60f8      	str	r0, [r7, #12]
 8000b68:	e9c7 2300 	strd	r2, r3, [r7]
    // create transfer object
    CanardTxTransfer transfer_object = {
 8000b6c:	f107 0310 	add.w	r3, r7, #16
 8000b70:	2228      	movs	r2, #40	@ 0x28
 8000b72:	2100      	movs	r1, #0
 8000b74:	4618      	mov	r0, r3
 8000b76:	f00e fe95 	bl	800f8a4 <memset>
 8000b7a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b7e:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000b82:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 8000b86:	843b      	strh	r3, [r7, #32]
 8000b88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b8a:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b8c:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000b90:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8000b94:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000b96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b98:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8000b9c:	863b      	strh	r3, [r7, #48]	@ 0x30
#if CANARD_ENABLE_CANFD
        .canfd = canfd,
#endif
    };

    return canardBroadcastObj(ins, &transfer_object);
 8000b9e:	f107 0310 	add.w	r3, r7, #16
 8000ba2:	4619      	mov	r1, r3
 8000ba4:	68f8      	ldr	r0, [r7, #12]
 8000ba6:	f000 f805 	bl	8000bb4 <canardBroadcastObj>
 8000baa:	4603      	mov	r3, r0
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3738      	adds	r7, #56	@ 0x38
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <canardBroadcastObj>:

int16_t canardBroadcastObj(CanardInstance* ins, CanardTxTransfer* transfer_object)
{
 8000bb4:	b590      	push	{r4, r7, lr}
 8000bb6:	b087      	sub	sp, #28
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
    if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	69db      	ldr	r3, [r3, #28]
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d106      	bne.n	8000bd4 <canardBroadcastObj+0x20>
 8000bc6:	683b      	ldr	r3, [r7, #0]
 8000bc8:	8c1b      	ldrh	r3, [r3, #32]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d002      	beq.n	8000bd4 <canardBroadcastObj+0x20>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000bce:	f06f 0301 	mvn.w	r3, #1
 8000bd2:	e070      	b.n	8000cb6 <canardBroadcastObj+0x102>
    }
    if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 8000bd4:	683b      	ldr	r3, [r7, #0]
 8000bd6:	7e1b      	ldrb	r3, [r3, #24]
 8000bd8:	2b1f      	cmp	r3, #31
 8000bda:	d902      	bls.n	8000be2 <canardBroadcastObj+0x2e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000bdc:	f06f 0301 	mvn.w	r3, #1
 8000be0:	e069      	b.n	8000cb6 <canardBroadcastObj+0x102>
    }

    uint32_t can_id = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
    uint16_t crc = 0xFFFFU;
 8000be6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bea:	827b      	strh	r3, [r7, #18]

    if (canardGetLocalNodeID(ins) == 0)
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ffab 	bl	8000b48 <canardGetLocalNodeID>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d138      	bne.n	8000c6a <canardBroadcastObj+0xb6>
    {
        if (transfer_object->payload_len > 7)
 8000bf8:	683b      	ldr	r3, [r7, #0]
 8000bfa:	8c1b      	ldrh	r3, [r3, #32]
 8000bfc:	2b07      	cmp	r3, #7
 8000bfe:	d902      	bls.n	8000c06 <canardBroadcastObj+0x52>
        {
            return -CANARD_ERROR_NODE_ID_NOT_SET;
 8000c00:	f06f 0303 	mvn.w	r3, #3
 8000c04:	e057      	b.n	8000cb6 <canardBroadcastObj+0x102>
        }

        static const uint16_t DTIDMask = (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;

        if ((transfer_object->data_type_id & DTIDMask) != transfer_object->data_type_id)
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	8a1a      	ldrh	r2, [r3, #16]
 8000c0a:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc0 <canardBroadcastObj+0x10c>)
 8000c0c:	881b      	ldrh	r3, [r3, #0]
 8000c0e:	4013      	ands	r3, r2
 8000c10:	b29a      	uxth	r2, r3
 8000c12:	683b      	ldr	r3, [r7, #0]
 8000c14:	8a1b      	ldrh	r3, [r3, #16]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	d002      	beq.n	8000c20 <canardBroadcastObj+0x6c>
        {
            return -CANARD_ERROR_INVALID_ARGUMENT;
 8000c1a:	f06f 0301 	mvn.w	r3, #1
 8000c1e:	e04a      	b.n	8000cb6 <canardBroadcastObj+0x102>
        }

        // anonymous transfer, random discriminator
        const uint16_t discriminator = (uint16_t)((crcAdd(0xFFFFU, transfer_object->payload, transfer_object->payload_len)) & 0x7FFEU);
 8000c20:	683b      	ldr	r3, [r7, #0]
 8000c22:	69d9      	ldr	r1, [r3, #28]
 8000c24:	683b      	ldr	r3, [r7, #0]
 8000c26:	8c1b      	ldrh	r3, [r3, #32]
 8000c28:	461a      	mov	r2, r3
 8000c2a:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8000c2e:	f001 fe53 	bl	80028d8 <crcAdd>
 8000c32:	4603      	mov	r3, r0
 8000c34:	461a      	mov	r2, r3
 8000c36:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
 8000c3a:	4013      	ands	r3, r2
 8000c3c:	823b      	strh	r3, [r7, #16]
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8000c3e:	683b      	ldr	r3, [r7, #0]
 8000c40:	7e1b      	ldrb	r3, [r3, #24]
 8000c42:	061a      	lsls	r2, r3, #24
 8000c44:	8a3b      	ldrh	r3, [r7, #16]
 8000c46:	025b      	lsls	r3, r3, #9
 8000c48:	431a      	orrs	r2, r3
                 ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8000c4a:	683b      	ldr	r3, [r7, #0]
 8000c4c:	8a19      	ldrh	r1, [r3, #16]
 8000c4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc0 <canardBroadcastObj+0x10c>)
 8000c50:	881b      	ldrh	r3, [r3, #0]
 8000c52:	400b      	ands	r3, r1
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	021b      	lsls	r3, r3, #8
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8000c58:	ea42 0403 	orr.w	r4, r2, r3
                 ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8000c5c:	6878      	ldr	r0, [r7, #4]
 8000c5e:	f7ff ff73 	bl	8000b48 <canardGetLocalNodeID>
 8000c62:	4603      	mov	r3, r0
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8000c64:	4323      	orrs	r3, r4
 8000c66:	617b      	str	r3, [r7, #20]
 8000c68:	e012      	b.n	8000c90 <canardBroadcastObj+0xdc>
    }
    else
    {
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8000c6a:	683b      	ldr	r3, [r7, #0]
 8000c6c:	7e1b      	ldrb	r3, [r3, #24]
 8000c6e:	061a      	lsls	r2, r3, #24
 8000c70:	683b      	ldr	r3, [r7, #0]
 8000c72:	8a1b      	ldrh	r3, [r3, #16]
 8000c74:	021b      	lsls	r3, r3, #8
 8000c76:	ea42 0403 	orr.w	r4, r2, r3
 8000c7a:	6878      	ldr	r0, [r7, #4]
 8000c7c:	f7ff ff64 	bl	8000b48 <canardGetLocalNodeID>
 8000c80:	4603      	mov	r3, r0
 8000c82:	4323      	orrs	r3, r4
 8000c84:	617b      	str	r3, [r7, #20]
        crc = calculateCRC(transfer_object);
 8000c86:	6838      	ldr	r0, [r7, #0]
 8000c88:	f000 f84c 	bl	8000d24 <calculateCRC>
 8000c8c:	4603      	mov	r3, r0
 8000c8e:	827b      	strh	r3, [r7, #18]
    }

    const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 8000c90:	8a7a      	ldrh	r2, [r7, #18]
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	6979      	ldr	r1, [r7, #20]
 8000c96:	6878      	ldr	r0, [r7, #4]
 8000c98:	f000 ffe6 	bl	8001c68 <enqueueTxFrames>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	81fb      	strh	r3, [r7, #14]

    if (result > 0) {
 8000ca0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ca4:	2b00      	cmp	r3, #0
 8000ca6:	dd04      	ble.n	8000cb2 <canardBroadcastObj+0xfe>
        incrementTransferID(transfer_object->inout_transfer_id);
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	695b      	ldr	r3, [r3, #20]
 8000cac:	4618      	mov	r0, r3
 8000cae:	f000 ff66 	bl	8001b7e <incrementTransferID>
    }

    return result;
 8000cb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	371c      	adds	r7, #28
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd90      	pop	{r4, r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	08011340 	.word	0x08011340

08000cc4 <canardBufferFromIdx>:
  CanardBufferBlock and CanartRxState structures to have the same size
  on 32 bit and 64 bit platforms, which allows for easier testing in
  simulator environments
 */
CANARD_INTERNAL CanardBufferBlock *canardBufferFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b083      	sub	sp, #12
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
 8000ccc:	6039      	str	r1, [r7, #0]
        return NULL;
    }
    return (CanardBufferBlock *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
#else
    (void)allocator;
    return (CanardBufferBlock *)idx;
 8000cce:	683b      	ldr	r3, [r7, #0]
#endif
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr

08000cdc <canardBufferToIdx>:

CANARD_INTERNAL canard_buffer_idx_t canardBufferToIdx(CanardPoolAllocator* allocator, const CanardBufferBlock *buf)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	6039      	str	r1, [r7, #0]
        return CANARD_BUFFER_IDX_NONE;
    }
    return 1U+((canard_buffer_idx_t)((uint8_t *)buf - (uint8_t *)allocator->arena));
#else
    (void)allocator;
    return (canard_buffer_idx_t)buf;
 8000ce6:	683b      	ldr	r3, [r7, #0]
#endif
}
 8000ce8:	4618      	mov	r0, r3
 8000cea:	370c      	adds	r7, #12
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr

08000cf4 <canardRxFromIdx>:

CANARD_INTERNAL CanardRxState *canardRxFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
        return NULL;
    }
    return (CanardRxState *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
#else
    (void)allocator;
    return (CanardRxState *)idx;
 8000cfe:	683b      	ldr	r3, [r7, #0]
#endif
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr

08000d0c <canardRxToIdx>:

CANARD_INTERNAL canard_buffer_idx_t canardRxToIdx(CanardPoolAllocator* allocator, const CanardRxState *rx)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	b083      	sub	sp, #12
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
 8000d14:	6039      	str	r1, [r7, #0]
        return CANARD_BUFFER_IDX_NONE;
    }
    return 1U+((canard_buffer_idx_t)((uint8_t *)rx - (uint8_t *)allocator->arena));
#else
    (void)allocator;
    return (canard_buffer_idx_t)rx;
 8000d16:	683b      	ldr	r3, [r7, #0]
#endif
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <calculateCRC>:

CANARD_INTERNAL uint16_t calculateCRC(const CanardTxTransfer* transfer_object)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
    uint16_t crc = 0xFFFFU;
 8000d2c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d30:	81fb      	strh	r3, [r7, #14]
#if CANARD_ENABLE_CANFD
    if ((transfer_object->payload_len > 7 && !transfer_object->canfd) ||
        (transfer_object->payload_len > 63 && transfer_object->canfd))
#else
    if (transfer_object->payload_len > 7)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	8c1b      	ldrh	r3, [r3, #32]
 8000d36:	2b07      	cmp	r3, #7
 8000d38:	d913      	bls.n	8000d62 <calculateCRC+0x3e>
#endif
    {
        crc = crcAddSignature(crc, transfer_object->data_type_signature);
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000d40:	89f9      	ldrh	r1, [r7, #14]
 8000d42:	4608      	mov	r0, r1
 8000d44:	f001 fd99 	bl	800287a <crcAddSignature>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	81fb      	strh	r3, [r7, #14]
        crc = crcAdd(crc, transfer_object->payload, transfer_object->payload_len);
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	69d9      	ldr	r1, [r3, #28]
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	8c1b      	ldrh	r3, [r3, #32]
 8000d54:	461a      	mov	r2, r3
 8000d56:	89fb      	ldrh	r3, [r7, #14]
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f001 fdbd 	bl	80028d8 <crcAdd>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	81fb      	strh	r3, [r7, #14]
                crc = crcAddByte(crc, empty);
            }
        }
#endif
    }
    return crc;
 8000d62:	89fb      	ldrh	r3, [r7, #14]
}
 8000d64:	4618      	mov	r0, r3
 8000d66:	3710      	adds	r7, #16
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}

08000d6c <canardRequestOrRespond>:
#endif
#if CANARD_ENABLE_CANFD
                               ,bool canfd
#endif
)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08e      	sub	sp, #56	@ 0x38
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	60f8      	str	r0, [r7, #12]
 8000d74:	e9c7 2300 	strd	r2, r3, [r7]
 8000d78:	460b      	mov	r3, r1
 8000d7a:	72fb      	strb	r3, [r7, #11]
    CanardTxTransfer transfer_object = {
        .data_type_signature = data_type_signature,
        .data_type_id = data_type_id,
        .inout_transfer_id = inout_transfer_id,
        .priority = priority,
        .transfer_type = kind == CanardRequest ? CanardTransferTypeRequest : CanardTransferTypeResponse,
 8000d7c:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	bf0c      	ite	eq
 8000d84:	2301      	moveq	r3, #1
 8000d86:	2300      	movne	r3, #0
 8000d88:	b2db      	uxtb	r3, r3
    CanardTxTransfer transfer_object = {
 8000d8a:	743b      	strb	r3, [r7, #16]
 8000d8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000d90:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000d94:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000d98:	b29b      	uxth	r3, r3
 8000d9a:	843b      	strh	r3, [r7, #32]
 8000d9c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000d9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000da0:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000da4:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8000da8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000dac:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8000db0:	863b      	strh	r3, [r7, #48]	@ 0x30
#endif
#if CANARD_ENABLE_CANFD
        .canfd = canfd,
#endif
    };
    return canardRequestOrRespondObj(ins, destination_node_id, &transfer_object);
 8000db2:	f107 0210 	add.w	r2, r7, #16
 8000db6:	7afb      	ldrb	r3, [r7, #11]
 8000db8:	4619      	mov	r1, r3
 8000dba:	68f8      	ldr	r0, [r7, #12]
 8000dbc:	f000 f805 	bl	8000dca <canardRequestOrRespondObj>
 8000dc0:	4603      	mov	r3, r0
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3738      	adds	r7, #56	@ 0x38
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <canardRequestOrRespondObj>:

int16_t canardRequestOrRespondObj(CanardInstance* ins, uint8_t destination_node_id, CanardTxTransfer* transfer_object)
{
 8000dca:	b590      	push	{r4, r7, lr}
 8000dcc:	b087      	sub	sp, #28
 8000dce:	af00      	add	r7, sp, #0
 8000dd0:	60f8      	str	r0, [r7, #12]
 8000dd2:	460b      	mov	r3, r1
 8000dd4:	607a      	str	r2, [r7, #4]
 8000dd6:	72fb      	strb	r3, [r7, #11]
    if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	69db      	ldr	r3, [r3, #28]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d106      	bne.n	8000dee <canardRequestOrRespondObj+0x24>
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	8c1b      	ldrh	r3, [r3, #32]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d002      	beq.n	8000dee <canardRequestOrRespondObj+0x24>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000de8:	f06f 0301 	mvn.w	r3, #1
 8000dec:	e042      	b.n	8000e74 <canardRequestOrRespondObj+0xaa>
    }
    if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	7e1b      	ldrb	r3, [r3, #24]
 8000df2:	2b1f      	cmp	r3, #31
 8000df4:	d902      	bls.n	8000dfc <canardRequestOrRespondObj+0x32>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000df6:	f06f 0301 	mvn.w	r3, #1
 8000dfa:	e03b      	b.n	8000e74 <canardRequestOrRespondObj+0xaa>
    }
    if (canardGetLocalNodeID(ins) == 0)
 8000dfc:	68f8      	ldr	r0, [r7, #12]
 8000dfe:	f7ff fea3 	bl	8000b48 <canardGetLocalNodeID>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d102      	bne.n	8000e0e <canardRequestOrRespondObj+0x44>
    {
        return -CANARD_ERROR_NODE_ID_NOT_SET;
 8000e08:	f06f 0303 	mvn.w	r3, #3
 8000e0c:	e032      	b.n	8000e74 <canardRequestOrRespondObj+0xaa>
    }

    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	7e1b      	ldrb	r3, [r3, #24]
 8000e12:	061a      	lsls	r2, r3, #24
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	8a1b      	ldrh	r3, [r3, #16]
 8000e18:	041b      	lsls	r3, r3, #16
 8000e1a:	431a      	orrs	r2, r3
                            ((uint32_t) transfer_object->transfer_type << 15U) | ((uint32_t) destination_node_id << 8U) |
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	03db      	lsls	r3, r3, #15
    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 8000e22:	431a      	orrs	r2, r3
                            ((uint32_t) transfer_object->transfer_type << 15U) | ((uint32_t) destination_node_id << 8U) |
 8000e24:	7afb      	ldrb	r3, [r7, #11]
 8000e26:	021b      	lsls	r3, r3, #8
 8000e28:	ea42 0403 	orr.w	r4, r2, r3
                            (1U << 7U) | (uint32_t) canardGetLocalNodeID(ins);
 8000e2c:	68f8      	ldr	r0, [r7, #12]
 8000e2e:	f7ff fe8b 	bl	8000b48 <canardGetLocalNodeID>
 8000e32:	4603      	mov	r3, r0
 8000e34:	4323      	orrs	r3, r4
    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 8000e36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000e3a:	617b      	str	r3, [r7, #20]

    uint16_t crc = calculateCRC(transfer_object);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff ff71 	bl	8000d24 <calculateCRC>
 8000e42:	4603      	mov	r3, r0
 8000e44:	827b      	strh	r3, [r7, #18]


    const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 8000e46:	8a7a      	ldrh	r2, [r7, #18]
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	6979      	ldr	r1, [r7, #20]
 8000e4c:	68f8      	ldr	r0, [r7, #12]
 8000e4e:	f000 ff0b 	bl	8001c68 <enqueueTxFrames>
 8000e52:	4603      	mov	r3, r0
 8000e54:	823b      	strh	r3, [r7, #16]

    if (result > 0 && transfer_object->transfer_type == CanardTransferTypeRequest)                      // Response Transfer ID must not be altered
 8000e56:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	dd08      	ble.n	8000e70 <canardRequestOrRespondObj+0xa6>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	781b      	ldrb	r3, [r3, #0]
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d104      	bne.n	8000e70 <canardRequestOrRespondObj+0xa6>
    {
        incrementTransferID(transfer_object->inout_transfer_id);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	695b      	ldr	r3, [r3, #20]
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f000 fe87 	bl	8001b7e <incrementTransferID>
    }

    return result;
 8000e70:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	371c      	adds	r7, #28
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd90      	pop	{r4, r7, pc}

08000e7c <canardPeekTxQueue>:

CanardCANFrame* canardPeekTxQueue(const CanardInstance* ins)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b083      	sub	sp, #12
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
    if (ins->tx_queue == NULL)
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	d101      	bne.n	8000e90 <canardPeekTxQueue+0x14>
    {
        return NULL;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	e002      	b.n	8000e96 <canardPeekTxQueue+0x1a>
    }
    return &ins->tx_queue->frame;
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e94:	3304      	adds	r3, #4
}
 8000e96:	4618      	mov	r0, r3
 8000e98:	370c      	adds	r7, #12
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea0:	4770      	bx	lr

08000ea2 <canardPopTxQueue>:

void canardPopTxQueue(CanardInstance* ins)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b084      	sub	sp, #16
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
    CanardTxQueueItem* item = ins->tx_queue;
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000eae:	60fb      	str	r3, [r7, #12]
    ins->tx_queue = item->next;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681a      	ldr	r2, [r3, #0]
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	625a      	str	r2, [r3, #36]	@ 0x24
    freeBlock(&ins->allocator, item);
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	330c      	adds	r3, #12
 8000ebc:	68f9      	ldr	r1, [r7, #12]
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f001 fd87 	bl	80029d2 <freeBlock>
}
 8000ec4:	bf00      	nop
 8000ec6:	3710      	adds	r7, #16
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}

08000ecc <canardHandleRxFrame>:

int16_t canardHandleRxFrame(CanardInstance* ins, const CanardCANFrame* frame, uint64_t timestamp_usec)
{
 8000ecc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000ed0:	b09f      	sub	sp, #124	@ 0x7c
 8000ed2:	af02      	add	r7, sp, #8
 8000ed4:	60f8      	str	r0, [r7, #12]
 8000ed6:	60b9      	str	r1, [r7, #8]
 8000ed8:	e9c7 2300 	strd	r2, r3, [r7]
    const CanardTransferType transfer_type = extractTransferType(frame->id);
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	f001 f8eb 	bl	80020bc <extractTransferType>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 8000eec:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000ef0:	2b02      	cmp	r3, #2
 8000ef2:	d007      	beq.n	8000f04 <canardHandleRxFrame+0x38>
                                        (uint8_t)CANARD_BROADCAST_NODE_ID :
                                        DEST_ID_FROM_ID(frame->id);
 8000ef4:	68bb      	ldr	r3, [r7, #8]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	b2db      	uxtb	r3, r3
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 8000efc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	e000      	b.n	8000f06 <canardHandleRxFrame+0x3a>
 8000f04:	2300      	movs	r3, #0
 8000f06:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

    // TODO: This function should maintain statistics of transfer errors and such.

    if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	da0f      	bge.n	8000f32 <canardHandleRxFrame+0x66>
        (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 8000f12:	68bb      	ldr	r3, [r7, #8]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
    if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d109      	bne.n	8000f32 <canardHandleRxFrame+0x66>
        (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 8000f1e:	68bb      	ldr	r3, [r7, #8]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
        (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d103      	bne.n	8000f32 <canardHandleRxFrame+0x66>
        (frame->data_len < 1))
 8000f2a:	68bb      	ldr	r3, [r7, #8]
 8000f2c:	7b1b      	ldrb	r3, [r3, #12]
        (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d102      	bne.n	8000f38 <canardHandleRxFrame+0x6c>
    {
        return -CANARD_ERROR_RX_INCOMPATIBLE_PACKET;
 8000f32:	f06f 0309 	mvn.w	r3, #9
 8000f36:	e361      	b.n	80015fc <canardHandleRxFrame+0x730>
    }

    if (transfer_type != CanardTransferTypeBroadcast &&
 8000f38:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000f3c:	2b02      	cmp	r3, #2
 8000f3e:	d00b      	beq.n	8000f58 <canardHandleRxFrame+0x8c>
        destination_node_id != canardGetLocalNodeID(ins))
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f7ff fe01 	bl	8000b48 <canardGetLocalNodeID>
 8000f46:	4603      	mov	r3, r0
 8000f48:	461a      	mov	r2, r3
    if (transfer_type != CanardTransferTypeBroadcast &&
 8000f4a:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8000f4e:	4293      	cmp	r3, r2
 8000f50:	d002      	beq.n	8000f58 <canardHandleRxFrame+0x8c>
    {
        return -CANARD_ERROR_RX_WRONG_ADDRESS;
 8000f52:	f06f 030a 	mvn.w	r3, #10
 8000f56:	e351      	b.n	80015fc <canardHandleRxFrame+0x730>
    }

    const uint8_t priority = PRIORITY_FROM_ID(frame->id);
 8000f58:	68bb      	ldr	r3, [r7, #8]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	0e1b      	lsrs	r3, r3, #24
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	f003 031f 	and.w	r3, r3, #31
 8000f64:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    const uint8_t source_node_id = SOURCE_ID_FROM_ID(frame->id);
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000f72:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    const uint16_t data_type_id = extractDataType(frame->id);
 8000f76:	68bb      	ldr	r3, [r7, #8]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f001 f87e 	bl	800207c <extractDataType>
 8000f80:	4603      	mov	r3, r0
 8000f82:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    const uint32_t transfer_descriptor =
            MAKE_TRANSFER_DESCRIPTOR(data_type_id, transfer_type, source_node_id, destination_node_id);
 8000f86:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8000f8a:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000f8e:	041b      	lsls	r3, r3, #16
 8000f90:	431a      	orrs	r2, r3
 8000f92:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8000f96:	049b      	lsls	r3, r3, #18
 8000f98:	431a      	orrs	r2, r3
 8000f9a:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8000f9e:	065b      	lsls	r3, r3, #25
    const uint32_t transfer_descriptor =
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	64fb      	str	r3, [r7, #76]	@ 0x4c

    const uint8_t tail_byte = frame->data[frame->data_len - 1];
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	7b1b      	ldrb	r3, [r3, #12]
 8000fa8:	3b01      	subs	r3, #1
 8000faa:	68ba      	ldr	r2, [r7, #8]
 8000fac:	4413      	add	r3, r2
 8000fae:	791b      	ldrb	r3, [r3, #4]
 8000fb0:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

    uint64_t data_type_signature = 0;
 8000fb4:	f04f 0200 	mov.w	r2, #0
 8000fb8:	f04f 0300 	mov.w	r3, #0
 8000fbc:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    CanardRxState* rx_state = NULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	66fb      	str	r3, [r7, #108]	@ 0x6c

    if (IS_START_OF_TRANSFER(tail_byte))
 8000fc4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000fc8:	09db      	lsrs	r3, r3, #7
 8000fca:	b2db      	uxtb	r3, r3
 8000fcc:	f003 0301 	and.w	r3, r3, #1
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d01e      	beq.n	8001012 <canardHandleRxFrame+0x146>
    {

        if (ins->should_accept(ins, &data_type_signature, data_type_id, transfer_type, source_node_id))
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	685e      	ldr	r6, [r3, #4]
 8000fd8:	f897 0057 	ldrb.w	r0, [r7, #87]	@ 0x57
 8000fdc:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8000fe0:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000fe4:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8000fe8:	9300      	str	r3, [sp, #0]
 8000fea:	4603      	mov	r3, r0
 8000fec:	68f8      	ldr	r0, [r7, #12]
 8000fee:	47b0      	blx	r6
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d00a      	beq.n	800100c <canardHandleRxFrame+0x140>
        {
            rx_state = traverseRxStates(ins, transfer_descriptor);
 8000ff6:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000ff8:	68f8      	ldr	r0, [r7, #12]
 8000ffa:	f001 f883 	bl	8002104 <traverseRxStates>
 8000ffe:	66f8      	str	r0, [r7, #108]	@ 0x6c

            if(rx_state == NULL)
 8001000:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001002:	2b00      	cmp	r3, #0
 8001004:	d110      	bne.n	8001028 <canardHandleRxFrame+0x15c>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 8001006:	f06f 0302 	mvn.w	r3, #2
 800100a:	e2f7      	b.n	80015fc <canardHandleRxFrame+0x730>
            }
        }
        else
        {
            return -CANARD_ERROR_RX_NOT_WANTED;
 800100c:	f06f 030b 	mvn.w	r3, #11
 8001010:	e2f4      	b.n	80015fc <canardHandleRxFrame+0x730>
        }
    }
    else
    {
        rx_state = findRxState(ins, transfer_descriptor);
 8001012:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8001014:	68f8      	ldr	r0, [r7, #12]
 8001016:	f001 f8a4 	bl	8002162 <findRxState>
 800101a:	66f8      	str	r0, [r7, #108]	@ 0x6c

        if (rx_state == NULL)
 800101c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800101e:	2b00      	cmp	r3, #0
 8001020:	d102      	bne.n	8001028 <canardHandleRxFrame+0x15c>
        {
            return -CANARD_ERROR_RX_MISSED_START;
 8001022:	f06f 030c 	mvn.w	r3, #12
 8001026:	e2e9      	b.n	80015fc <canardHandleRxFrame+0x730>
    }

    CANARD_ASSERT(rx_state != NULL);    // All paths that lead to NULL should be terminated with return above

    // Resolving the state flags:
    const bool not_initialized = rx_state->timestamp_usec == 0;
 8001028:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800102a:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800102e:	4313      	orrs	r3, r2
 8001030:	bf0c      	ite	eq
 8001032:	2301      	moveq	r3, #1
 8001034:	2300      	movne	r3, #0
 8001036:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
    const bool tid_timed_out = (timestamp_usec - rx_state->timestamp_usec) > TRANSFER_TIMEOUT_USEC;
 800103a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800103c:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001040:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001044:	ebb0 0802 	subs.w	r8, r0, r2
 8001048:	eb61 0903 	sbc.w	r9, r1, r3
 800104c:	4ba9      	ldr	r3, [pc, #676]	@ (80012f4 <canardHandleRxFrame+0x428>)
 800104e:	4598      	cmp	r8, r3
 8001050:	f179 0300 	sbcs.w	r3, r9, #0
 8001054:	bf2c      	ite	cs
 8001056:	2301      	movcs	r3, #1
 8001058:	2300      	movcc	r3, #0
 800105a:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
    const bool same_iface = frame->iface_id == rx_state->iface_id;
 800105e:	68bb      	ldr	r3, [r7, #8]
 8001060:	7b5a      	ldrb	r2, [r3, #13]
 8001062:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001064:	7e9b      	ldrb	r3, [r3, #26]
 8001066:	429a      	cmp	r2, r3
 8001068:	bf0c      	ite	eq
 800106a:	2301      	moveq	r3, #1
 800106c:	2300      	movne	r3, #0
 800106e:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
    const bool first_frame = IS_START_OF_TRANSFER(tail_byte);
 8001072:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001076:	09db      	lsrs	r3, r3, #7
 8001078:	b2db      	uxtb	r3, r3
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	2b00      	cmp	r3, #0
 8001080:	bf14      	ite	ne
 8001082:	2301      	movne	r3, #1
 8001084:	2300      	moveq	r3, #0
 8001086:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    const bool not_previous_tid =
        computeTransferIDForwardDistance((uint8_t) rx_state->transfer_id, TRANSFER_ID_FROM_TAIL_BYTE(tail_byte)) > 1;
 800108a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800108c:	7ddb      	ldrb	r3, [r3, #23]
 800108e:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8001092:	b2db      	uxtb	r3, r3
 8001094:	461a      	mov	r2, r3
 8001096:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800109a:	f003 031f 	and.w	r3, r3, #31
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	4619      	mov	r1, r3
 80010a2:	4610      	mov	r0, r2
 80010a4:	f000 fd4c 	bl	8001b40 <computeTransferIDForwardDistance>
 80010a8:	4603      	mov	r3, r0
    const bool not_previous_tid =
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	bfcc      	ite	gt
 80010ae:	2301      	movgt	r3, #1
 80010b0:	2300      	movle	r3, #0
 80010b2:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    const bool iface_switch_allowed = (timestamp_usec - rx_state->timestamp_usec) > IFACE_SWITCH_DELAY_USEC;
 80010b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80010b8:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 80010bc:	e9d7 0100 	ldrd	r0, r1, [r7]
 80010c0:	1a84      	subs	r4, r0, r2
 80010c2:	eb61 0503 	sbc.w	r5, r1, r3
 80010c6:	4b8c      	ldr	r3, [pc, #560]	@ (80012f8 <canardHandleRxFrame+0x42c>)
 80010c8:	429c      	cmp	r4, r3
 80010ca:	f175 0300 	sbcs.w	r3, r5, #0
 80010ce:	bf2c      	ite	cs
 80010d0:	2301      	movcs	r3, #1
 80010d2:	2300      	movcc	r3, #0
 80010d4:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    const bool non_wrapped_tid = computeTransferIDForwardDistance(TRANSFER_ID_FROM_TAIL_BYTE(tail_byte), (uint8_t) rx_state->transfer_id) < (1 << (TRANSFER_ID_BIT_LEN-1));
 80010d8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80010dc:	f003 031f 	and.w	r3, r3, #31
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80010e4:	7ddb      	ldrb	r3, [r3, #23]
 80010e6:	f3c3 0384 	ubfx	r3, r3, #2, #5
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	4619      	mov	r1, r3
 80010ee:	4610      	mov	r0, r2
 80010f0:	f000 fd26 	bl	8001b40 <computeTransferIDForwardDistance>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b0f      	cmp	r3, #15
 80010f8:	bfd4      	ite	le
 80010fa:	2301      	movle	r3, #1
 80010fc:	2300      	movgt	r3, #0
 80010fe:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    const bool incomplete_frame = rx_state->buffer_blocks != CANARD_BUFFER_IDX_NONE;
 8001102:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	2b00      	cmp	r3, #0
 8001108:	bf14      	ite	ne
 800110a:	2301      	movne	r3, #1
 800110c:	2300      	moveq	r3, #0
 800110e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    const bool need_restart =
            (not_initialized) ||
            (tid_timed_out) ||
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 8001112:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001116:	2b00      	cmp	r3, #0
 8001118:	d11f      	bne.n	800115a <canardHandleRxFrame+0x28e>
            (not_initialized) ||
 800111a:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 800111e:	2b00      	cmp	r3, #0
 8001120:	d11b      	bne.n	800115a <canardHandleRxFrame+0x28e>
            (tid_timed_out) ||
 8001122:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001126:	2b00      	cmp	r3, #0
 8001128:	d00b      	beq.n	8001142 <canardHandleRxFrame+0x276>
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 800112a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800112e:	2b00      	cmp	r3, #0
 8001130:	d007      	beq.n	8001142 <canardHandleRxFrame+0x276>
 8001132:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10f      	bne.n	800115a <canardHandleRxFrame+0x28e>
 800113a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 800113e:	2b00      	cmp	r3, #0
 8001140:	d10b      	bne.n	800115a <canardHandleRxFrame+0x28e>
 8001142:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8001146:	2b00      	cmp	r3, #0
 8001148:	d009      	beq.n	800115e <canardHandleRxFrame+0x292>
            (iface_switch_allowed && first_frame && non_wrapped_tid);
 800114a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800114e:	2b00      	cmp	r3, #0
 8001150:	d005      	beq.n	800115e <canardHandleRxFrame+0x292>
 8001152:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8001156:	2b00      	cmp	r3, #0
 8001158:	d001      	beq.n	800115e <canardHandleRxFrame+0x292>
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 800115a:	2301      	movs	r3, #1
 800115c:	e000      	b.n	8001160 <canardHandleRxFrame+0x294>
 800115e:	2300      	movs	r3, #0
    const bool need_restart =
 8001160:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8001164:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001168:	f003 0301 	and.w	r3, r3, #1
 800116c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

    if (need_restart)
 8001170:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8001174:	2b00      	cmp	r3, #0
 8001176:	d02f      	beq.n	80011d8 <canardHandleRxFrame+0x30c>
    {
        rx_state->transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte);
 8001178:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800117c:	f003 031f 	and.w	r3, r3, #31
 8001180:	b2d9      	uxtb	r1, r3
 8001182:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001184:	7dd3      	ldrb	r3, [r2, #23]
 8001186:	f361 0386 	bfi	r3, r1, #2, #5
 800118a:	75d3      	strb	r3, [r2, #23]
        rx_state->next_toggle = 0;
 800118c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800118e:	7dd3      	ldrb	r3, [r2, #23]
 8001190:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001194:	75d3      	strb	r3, [r2, #23]
        releaseStatePayload(ins, rx_state);
 8001196:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001198:	68f8      	ldr	r0, [r7, #12]
 800119a:	f001 f84c 	bl	8002236 <releaseStatePayload>
        rx_state->iface_id = frame->iface_id;
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	7b5a      	ldrb	r2, [r3, #13]
 80011a2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011a4:	769a      	strb	r2, [r3, #26]
        if (!IS_START_OF_TRANSFER(tail_byte))
 80011a6:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80011aa:	09db      	lsrs	r3, r3, #7
 80011ac:	b2db      	uxtb	r3, r3
 80011ae:	f003 0301 	and.w	r3, r3, #1
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d110      	bne.n	80011d8 <canardHandleRxFrame+0x30c>
        {
            rx_state->transfer_id++;
 80011b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011b8:	7ddb      	ldrb	r3, [r3, #23]
 80011ba:	f3c3 0384 	ubfx	r3, r3, #2, #5
 80011be:	b2db      	uxtb	r3, r3
 80011c0:	3301      	adds	r3, #1
 80011c2:	f003 031f 	and.w	r3, r3, #31
 80011c6:	b2d9      	uxtb	r1, r3
 80011c8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80011ca:	7dd3      	ldrb	r3, [r2, #23]
 80011cc:	f361 0386 	bfi	r3, r1, #2, #5
 80011d0:	75d3      	strb	r3, [r2, #23]
            return -CANARD_ERROR_RX_MISSED_START;
 80011d2:	f06f 030c 	mvn.w	r3, #12
 80011d6:	e211      	b.n	80015fc <canardHandleRxFrame+0x730>
        }
    }

    if (frame->iface_id != rx_state->iface_id)
 80011d8:	68bb      	ldr	r3, [r7, #8]
 80011da:	7b5a      	ldrb	r2, [r3, #13]
 80011dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011de:	7e9b      	ldrb	r3, [r3, #26]
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d001      	beq.n	80011e8 <canardHandleRxFrame+0x31c>
    {
        // drop frame if coming from unexpected interface
        return CANARD_OK;
 80011e4:	2300      	movs	r3, #0
 80011e6:	e209      	b.n	80015fc <canardHandleRxFrame+0x730>
    }

    if (IS_START_OF_TRANSFER(tail_byte) && IS_END_OF_TRANSFER(tail_byte)) // single frame transfer
 80011e8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80011ec:	09db      	lsrs	r3, r3, #7
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	f003 0301 	and.w	r3, r3, #1
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d041      	beq.n	800127c <canardHandleRxFrame+0x3b0>
 80011f8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80011fc:	099b      	lsrs	r3, r3, #6
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	f003 0301 	and.w	r3, r3, #1
 8001204:	2b00      	cmp	r3, #0
 8001206:	d039      	beq.n	800127c <canardHandleRxFrame+0x3b0>
    {
        rx_state->timestamp_usec = timestamp_usec;
 8001208:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800120a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800120e:	e9c1 2302 	strd	r2, r3, [r1, #8]
        CanardRxTransfer rx_transfer = {
 8001212:	f107 0310 	add.w	r3, r7, #16
 8001216:	2220      	movs	r2, #32
 8001218:	2100      	movs	r1, #0
 800121a:	4618      	mov	r0, r3
 800121c:	f00e fb42 	bl	800f8a4 <memset>
 8001220:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001224:	e9c7 2304 	strd	r2, r3, [r7, #16]
            .timestamp_usec = timestamp_usec,
            .payload_head = frame->data,
 8001228:	68bb      	ldr	r3, [r7, #8]
 800122a:	3304      	adds	r3, #4
        CanardRxTransfer rx_transfer = {
 800122c:	61bb      	str	r3, [r7, #24]
            .payload_len = (uint8_t)(frame->data_len - 1U),
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	7b1b      	ldrb	r3, [r3, #12]
 8001232:	3b01      	subs	r3, #1
 8001234:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 8001236:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001238:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 800123c:	84fb      	strh	r3, [r7, #38]	@ 0x26
 800123e:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001242:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            .data_type_id = data_type_id,
            .transfer_type = (uint8_t)transfer_type,
            .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 8001246:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800124a:	f003 031f 	and.w	r3, r3, #31
 800124e:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 8001250:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8001254:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001258:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800125c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8001260:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#elif CANARD_ENABLE_TAO_OPTION
            .tao = !ins->tao_disabled
#endif
        };

        ins->on_reception(ins, &rx_transfer);
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f107 0210 	add.w	r2, r7, #16
 800126c:	4611      	mov	r1, r2
 800126e:	68f8      	ldr	r0, [r7, #12]
 8001270:	4798      	blx	r3

        prepareForNextTransfer(rx_state);
 8001272:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001274:	f000 fee0 	bl	8002038 <prepareForNextTransfer>
        return CANARD_OK;
 8001278:	2300      	movs	r3, #0
 800127a:	e1bf      	b.n	80015fc <canardHandleRxFrame+0x730>
    }

    if (TOGGLE_BIT(tail_byte) != rx_state->next_toggle)
 800127c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001280:	095b      	lsrs	r3, r3, #5
 8001282:	b2db      	uxtb	r3, r3
 8001284:	f003 0301 	and.w	r3, r3, #1
 8001288:	2b00      	cmp	r3, #0
 800128a:	bf14      	ite	ne
 800128c:	2301      	movne	r3, #1
 800128e:	2300      	moveq	r3, #0
 8001290:	b2db      	uxtb	r3, r3
 8001292:	461a      	mov	r2, r3
 8001294:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001296:	7ddb      	ldrb	r3, [r3, #23]
 8001298:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 800129c:	b2db      	uxtb	r3, r3
 800129e:	429a      	cmp	r2, r3
 80012a0:	d002      	beq.n	80012a8 <canardHandleRxFrame+0x3dc>
    {
        return -CANARD_ERROR_RX_WRONG_TOGGLE;
 80012a2:	f06f 030d 	mvn.w	r3, #13
 80012a6:	e1a9      	b.n	80015fc <canardHandleRxFrame+0x730>
    }

    if (TRANSFER_ID_FROM_TAIL_BYTE(tail_byte) != rx_state->transfer_id)
 80012a8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80012ac:	f003 031f 	and.w	r3, r3, #31
 80012b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80012b2:	7dd2      	ldrb	r2, [r2, #23]
 80012b4:	f3c2 0284 	ubfx	r2, r2, #2, #5
 80012b8:	b2d2      	uxtb	r2, r2
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d002      	beq.n	80012c4 <canardHandleRxFrame+0x3f8>
    {
        return -CANARD_ERROR_RX_UNEXPECTED_TID;
 80012be:	f06f 030e 	mvn.w	r3, #14
 80012c2:	e19b      	b.n	80015fc <canardHandleRxFrame+0x730>
    }

    if (IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))      // Beginning of multi frame transfer
 80012c4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80012c8:	09db      	lsrs	r3, r3, #7
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d061      	beq.n	8001398 <canardHandleRxFrame+0x4cc>
 80012d4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80012d8:	099b      	lsrs	r3, r3, #6
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d159      	bne.n	8001398 <canardHandleRxFrame+0x4cc>
    {
        if (frame->data_len <= 3)
 80012e4:	68bb      	ldr	r3, [r7, #8]
 80012e6:	7b1b      	ldrb	r3, [r3, #12]
 80012e8:	2b03      	cmp	r3, #3
 80012ea:	d807      	bhi.n	80012fc <canardHandleRxFrame+0x430>
        {
            return -CANARD_ERROR_RX_SHORT_FRAME;
 80012ec:	f06f 030f 	mvn.w	r3, #15
 80012f0:	e184      	b.n	80015fc <canardHandleRxFrame+0x730>
 80012f2:	bf00      	nop
 80012f4:	001e8481 	.word	0x001e8481
 80012f8:	000f4241 	.word	0x000f4241
        }

        // take off the crc and store the payload
        rx_state->timestamp_usec = timestamp_usec;
 80012fc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80012fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001302:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rx_state->payload_len = 0;
 8001306:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001308:	8ad3      	ldrh	r3, [r2, #22]
 800130a:	f36f 0309 	bfc	r3, #0, #10
 800130e:	82d3      	strh	r3, [r2, #22]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	f103 000c 	add.w	r0, r3, #12
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	3304      	adds	r3, #4
 800131a:	1c9a      	adds	r2, r3, #2
                                                 (uint8_t) (frame->data_len - 3));
 800131c:	68bb      	ldr	r3, [r7, #8]
 800131e:	7b1b      	ldrb	r3, [r3, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 8001320:	3b03      	subs	r3, #3
 8001322:	b2db      	uxtb	r3, r3
 8001324:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001326:	f000 ffbb 	bl	80022a0 <bufferBlockPushBytes>
 800132a:	4603      	mov	r3, r0
 800132c:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        if (ret < 0)
 8001330:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 8001334:	2b00      	cmp	r3, #0
 8001336:	da09      	bge.n	800134c <canardHandleRxFrame+0x480>
        {
            releaseStatePayload(ins, rx_state);
 8001338:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	f000 ff7b 	bl	8002236 <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 8001340:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001342:	f000 fe79 	bl	8002038 <prepareForNextTransfer>
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8001346:	f06f 0302 	mvn.w	r3, #2
 800134a:	e157      	b.n	80015fc <canardHandleRxFrame+0x730>
        }
        rx_state->payload_crc = (uint16_t)(((uint16_t) frame->data[0]) | (uint16_t)((uint16_t) frame->data[1] << 8U));
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	791b      	ldrb	r3, [r3, #4]
 8001350:	461a      	mov	r2, r3
 8001352:	68bb      	ldr	r3, [r7, #8]
 8001354:	795b      	ldrb	r3, [r3, #5]
 8001356:	021b      	lsls	r3, r3, #8
 8001358:	b29b      	uxth	r3, r3
 800135a:	4313      	orrs	r3, r2
 800135c:	b29a      	uxth	r2, r3
 800135e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001360:	831a      	strh	r2, [r3, #24]
        rx_state->calculated_crc = crcAddSignature(0xFFFFU, data_type_signature);
 8001362:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8001366:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800136a:	f001 fa86 	bl	800287a <crcAddSignature>
 800136e:	4603      	mov	r3, r0
 8001370:	461a      	mov	r2, r3
 8001372:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001374:	829a      	strh	r2, [r3, #20]
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8001376:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001378:	8a98      	ldrh	r0, [r3, #20]
                                          frame->data + 2, (uint8_t)(frame->data_len - 3));
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	3304      	adds	r3, #4
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 800137e:	1c99      	adds	r1, r3, #2
                                          frame->data + 2, (uint8_t)(frame->data_len - 3));
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	7b1b      	ldrb	r3, [r3, #12]
 8001384:	3b03      	subs	r3, #3
 8001386:	b2db      	uxtb	r3, r3
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8001388:	461a      	mov	r2, r3
 800138a:	f001 faa5 	bl	80028d8 <crcAdd>
 800138e:	4603      	mov	r3, r0
 8001390:	461a      	mov	r2, r3
 8001392:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001394:	829a      	strh	r2, [r3, #20]
    {
 8001396:	e124      	b.n	80015e2 <canardHandleRxFrame+0x716>
    }
    else if (!IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))    // Middle of a multi-frame transfer
 8001398:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800139c:	09db      	lsrs	r3, r3, #7
 800139e:	b2db      	uxtb	r3, r3
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d133      	bne.n	8001410 <canardHandleRxFrame+0x544>
 80013a8:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80013ac:	099b      	lsrs	r3, r3, #6
 80013ae:	b2db      	uxtb	r3, r3
 80013b0:	f003 0301 	and.w	r3, r3, #1
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d12b      	bne.n	8001410 <canardHandleRxFrame+0x544>
    {
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	f103 000c 	add.w	r0, r3, #12
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	1d1a      	adds	r2, r3, #4
                                                 (uint8_t) (frame->data_len - 1));
 80013c2:	68bb      	ldr	r3, [r7, #8]
 80013c4:	7b1b      	ldrb	r3, [r3, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 80013c6:	3b01      	subs	r3, #1
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80013cc:	f000 ff68 	bl	80022a0 <bufferBlockPushBytes>
 80013d0:	4603      	mov	r3, r0
 80013d2:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (ret < 0)
 80013d4:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 80013d8:	2b00      	cmp	r3, #0
 80013da:	da09      	bge.n	80013f0 <canardHandleRxFrame+0x524>
        {
            releaseStatePayload(ins, rx_state);
 80013dc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	f000 ff29 	bl	8002236 <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 80013e4:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80013e6:	f000 fe27 	bl	8002038 <prepareForNextTransfer>
            return -CANARD_ERROR_OUT_OF_MEMORY;
 80013ea:	f06f 0302 	mvn.w	r3, #2
 80013ee:	e105      	b.n	80015fc <canardHandleRxFrame+0x730>
        }
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 80013f0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80013f2:	8a98      	ldrh	r0, [r3, #20]
                                          frame->data, (uint8_t)(frame->data_len - 1));
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	1d19      	adds	r1, r3, #4
 80013f8:	68bb      	ldr	r3, [r7, #8]
 80013fa:	7b1b      	ldrb	r3, [r3, #12]
 80013fc:	3b01      	subs	r3, #1
 80013fe:	b2db      	uxtb	r3, r3
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8001400:	461a      	mov	r2, r3
 8001402:	f001 fa69 	bl	80028d8 <crcAdd>
 8001406:	4603      	mov	r3, r0
 8001408:	461a      	mov	r2, r3
 800140a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800140c:	829a      	strh	r2, [r3, #20]
    {
 800140e:	e0e8      	b.n	80015e2 <canardHandleRxFrame+0x716>
    }
    else                                                                            // End of a multi-frame transfer
    {
        const uint8_t frame_payload_size = (uint8_t)(frame->data_len - 1);
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	7b1b      	ldrb	r3, [r3, #12]
 8001414:	3b01      	subs	r3, #1
 8001416:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

        uint8_t tail_offset = 0;
 800141a:	2300      	movs	r3, #0
 800141c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

        if (rx_state->payload_len < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE)
 8001420:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001422:	8adb      	ldrh	r3, [r3, #22]
 8001424:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001428:	b29b      	uxth	r3, r3
 800142a:	2b04      	cmp	r3, #4
 800142c:	d823      	bhi.n	8001476 <canardHandleRxFrame+0x5aa>
        {
            // Copy the beginning of the frame into the head, point the tail pointer to the remainder
            for (size_t i = rx_state->payload_len;
 800142e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001430:	8adb      	ldrh	r3, [r3, #22]
 8001432:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001436:	b29b      	uxth	r3, r3
 8001438:	667b      	str	r3, [r7, #100]	@ 0x64
 800143a:	e012      	b.n	8001462 <canardHandleRxFrame+0x596>
                 (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
                 i++, tail_offset++)
            {
                rx_state->buffer_head[i] = frame->data[tail_offset];
 800143c:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001440:	68ba      	ldr	r2, [r7, #8]
 8001442:	4413      	add	r3, r2
 8001444:	7919      	ldrb	r1, [r3, #4]
 8001446:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8001448:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800144a:	4413      	add	r3, r2
 800144c:	331b      	adds	r3, #27
 800144e:	460a      	mov	r2, r1
 8001450:	701a      	strb	r2, [r3, #0]
                 i++, tail_offset++)
 8001452:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001454:	3301      	adds	r3, #1
 8001456:	667b      	str	r3, [r7, #100]	@ 0x64
 8001458:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800145c:	3301      	adds	r3, #1
 800145e:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                 (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
 8001462:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8001464:	2b04      	cmp	r3, #4
 8001466:	d848      	bhi.n	80014fa <canardHandleRxFrame+0x62e>
 8001468:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 800146c:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001470:	429a      	cmp	r2, r3
 8001472:	d3e3      	bcc.n	800143c <canardHandleRxFrame+0x570>
 8001474:	e041      	b.n	80014fa <canardHandleRxFrame+0x62e>
            }
        }
        else
        {
            // Like above, except that the beginning goes into the last block of the storage
            CanardBufferBlock* block = canardBufferFromIdx(&ins->allocator, rx_state->buffer_blocks);
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	f103 020c 	add.w	r2, r3, #12
 800147c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	4619      	mov	r1, r3
 8001482:	4610      	mov	r0, r2
 8001484:	f7ff fc1e 	bl	8000cc4 <canardBufferFromIdx>
 8001488:	6638      	str	r0, [r7, #96]	@ 0x60
            if (block != NULL)
 800148a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800148c:	2b00      	cmp	r3, #0
 800148e:	d034      	beq.n	80014fa <canardHandleRxFrame+0x62e>
            {
                size_t offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE;    // Payload offset of the first block
 8001490:	2305      	movs	r3, #5
 8001492:	65fb      	str	r3, [r7, #92]	@ 0x5c
                while (block->next != NULL)
 8001494:	e005      	b.n	80014a2 <canardHandleRxFrame+0x5d6>
                {
                    block = block->next;
 8001496:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	663b      	str	r3, [r7, #96]	@ 0x60
                    offset += CANARD_BUFFER_BLOCK_DATA_SIZE;
 800149c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800149e:	331c      	adds	r3, #28
 80014a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
                while (block->next != NULL)
 80014a2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f5      	bne.n	8001496 <canardHandleRxFrame+0x5ca>
                }
                CANARD_ASSERT(block != NULL);

                const size_t offset_within_block = rx_state->payload_len - offset;
 80014aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80014ac:	8adb      	ldrh	r3, [r3, #22]
 80014ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014b2:	b29b      	uxth	r3, r3
 80014b4:	461a      	mov	r2, r3
 80014b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80014b8:	1ad3      	subs	r3, r2, r3
 80014ba:	63bb      	str	r3, [r7, #56]	@ 0x38
                CANARD_ASSERT(offset_within_block <= CANARD_BUFFER_BLOCK_DATA_SIZE);

                for (size_t i = offset_within_block;
 80014bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80014be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80014c0:	e012      	b.n	80014e8 <canardHandleRxFrame+0x61c>
                     (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
                     i++, tail_offset++)
                {
                    block->data[i] = frame->data[tail_offset];
 80014c2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	4413      	add	r3, r2
 80014ca:	7919      	ldrb	r1, [r3, #4]
 80014cc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80014ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80014d0:	4413      	add	r3, r2
 80014d2:	3304      	adds	r3, #4
 80014d4:	460a      	mov	r2, r1
 80014d6:	701a      	strb	r2, [r3, #0]
                     i++, tail_offset++)
 80014d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80014da:	3301      	adds	r3, #1
 80014dc:	65bb      	str	r3, [r7, #88]	@ 0x58
 80014de:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80014e2:	3301      	adds	r3, #1
 80014e4:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                     (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
 80014e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80014ea:	2b1b      	cmp	r3, #27
 80014ec:	d805      	bhi.n	80014fa <canardHandleRxFrame+0x62e>
 80014ee:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 80014f2:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d3e3      	bcc.n	80014c2 <canardHandleRxFrame+0x5f6>
                }
            }
        }

        CanardRxTransfer rx_transfer = {
 80014fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80014fe:	e9c7 2304 	strd	r2, r3, [r7, #16]
            .timestamp_usec = timestamp_usec,
            .payload_head = rx_state->buffer_head,
 8001502:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001504:	331b      	adds	r3, #27
        CanardRxTransfer rx_transfer = {
 8001506:	61bb      	str	r3, [r7, #24]
            .payload_middle = canardBufferFromIdx(&ins->allocator, rx_state->buffer_blocks),
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f103 020c 	add.w	r2, r3, #12
 800150e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001510:	685b      	ldr	r3, [r3, #4]
 8001512:	4619      	mov	r1, r3
 8001514:	4610      	mov	r0, r2
 8001516:	f7ff fbd5 	bl	8000cc4 <canardBufferFromIdx>
 800151a:	4603      	mov	r3, r0
        CanardRxTransfer rx_transfer = {
 800151c:	61fb      	str	r3, [r7, #28]
            .payload_tail = (tail_offset >= frame_payload_size) ? NULL : (&frame->data[tail_offset]),
 800151e:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8001522:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001526:	429a      	cmp	r2, r3
 8001528:	d205      	bcs.n	8001536 <canardHandleRxFrame+0x66a>
 800152a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800152e:	68ba      	ldr	r2, [r7, #8]
 8001530:	4413      	add	r3, r2
 8001532:	3304      	adds	r3, #4
 8001534:	e000      	b.n	8001538 <canardHandleRxFrame+0x66c>
 8001536:	2300      	movs	r3, #0
        CanardRxTransfer rx_transfer = {
 8001538:	623b      	str	r3, [r7, #32]
            .payload_len = (uint16_t)(rx_state->payload_len + frame_payload_size),
 800153a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800153c:	8adb      	ldrh	r3, [r3, #22]
 800153e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001542:	b29b      	uxth	r3, r3
 8001544:	461a      	mov	r2, r3
 8001546:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800154a:	b29b      	uxth	r3, r3
 800154c:	4413      	add	r3, r2
 800154e:	b29b      	uxth	r3, r3
        CanardRxTransfer rx_transfer = {
 8001550:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001552:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8001556:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001558:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 800155c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            .data_type_id = data_type_id,
            .transfer_type = (uint8_t)transfer_type,
            .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 8001560:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001564:	f003 031f 	and.w	r3, r3, #31
 8001568:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 800156a:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 800156e:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001572:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001576:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 800157a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#elif CANARD_ENABLE_TAO_OPTION
            .tao = !ins->tao_disabled
#endif
        };

        rx_state->buffer_blocks = CANARD_BUFFER_IDX_NONE;     // Block list ownership has been transferred to rx_transfer!
 800157e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001580:	2200      	movs	r2, #0
 8001582:	605a      	str	r2, [r3, #4]

        // CRC validation
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc, frame->data, frame->data_len - 1U);
 8001584:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001586:	8a98      	ldrh	r0, [r3, #20]
 8001588:	68bb      	ldr	r3, [r7, #8]
 800158a:	1d19      	adds	r1, r3, #4
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	7b1b      	ldrb	r3, [r3, #12]
 8001590:	3b01      	subs	r3, #1
 8001592:	461a      	mov	r2, r3
 8001594:	f001 f9a0 	bl	80028d8 <crcAdd>
 8001598:	4603      	mov	r3, r0
 800159a:	461a      	mov	r2, r3
 800159c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800159e:	829a      	strh	r2, [r3, #20]
        if (rx_state->calculated_crc == rx_state->payload_crc)
 80015a0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015a2:	8a9a      	ldrh	r2, [r3, #20]
 80015a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015a6:	8b1b      	ldrh	r3, [r3, #24]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d106      	bne.n	80015ba <canardHandleRxFrame+0x6ee>
        {
            ins->on_reception(ins, &rx_transfer);
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f107 0210 	add.w	r2, r7, #16
 80015b4:	4611      	mov	r1, r2
 80015b6:	68f8      	ldr	r0, [r7, #12]
 80015b8:	4798      	blx	r3
        }

        // Making sure the payload is released even if the application didn't bother with it
        canardReleaseRxTransferPayload(ins, &rx_transfer);
 80015ba:	f107 0310 	add.w	r3, r7, #16
 80015be:	4619      	mov	r1, r3
 80015c0:	68f8      	ldr	r0, [r7, #12]
 80015c2:	f000 fa93 	bl	8001aec <canardReleaseRxTransferPayload>
        prepareForNextTransfer(rx_state);
 80015c6:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80015c8:	f000 fd36 	bl	8002038 <prepareForNextTransfer>

        if (rx_state->calculated_crc == rx_state->payload_crc)
 80015cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015ce:	8a9a      	ldrh	r2, [r3, #20]
 80015d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015d2:	8b1b      	ldrh	r3, [r3, #24]
 80015d4:	429a      	cmp	r2, r3
 80015d6:	d101      	bne.n	80015dc <canardHandleRxFrame+0x710>
        {
            return CANARD_OK;
 80015d8:	2300      	movs	r3, #0
 80015da:	e00f      	b.n	80015fc <canardHandleRxFrame+0x730>
        }
        else
        {
            return -CANARD_ERROR_RX_BAD_CRC;
 80015dc:	f06f 0310 	mvn.w	r3, #16
 80015e0:	e00c      	b.n	80015fc <canardHandleRxFrame+0x730>
        }
    }

    rx_state->next_toggle = rx_state->next_toggle ? 0 : 1;
 80015e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80015e4:	7ddb      	ldrb	r3, [r3, #23]
 80015e6:	b25b      	sxtb	r3, r3
 80015e8:	43db      	mvns	r3, r3
 80015ea:	b2db      	uxtb	r3, r3
 80015ec:	09db      	lsrs	r3, r3, #7
 80015ee:	b2d9      	uxtb	r1, r3
 80015f0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80015f2:	7dd3      	ldrb	r3, [r2, #23]
 80015f4:	f361 13c7 	bfi	r3, r1, #7, #1
 80015f8:	75d3      	strb	r3, [r2, #23]
    return CANARD_OK;
 80015fa:	2300      	movs	r3, #0
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3774      	adds	r7, #116	@ 0x74
 8001600:	46bd      	mov	sp, r7
 8001602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001606:	bf00      	nop

08001608 <canardCleanupStaleTransfers>:

void canardCleanupStaleTransfers(CanardInstance* ins, uint64_t current_time_usec)
{
 8001608:	b5b0      	push	{r4, r5, r7, lr}
 800160a:	b086      	sub	sp, #24
 800160c:	af00      	add	r7, sp, #0
 800160e:	60f8      	str	r0, [r7, #12]
 8001610:	e9c7 2300 	strd	r2, r3, [r7]
    CanardRxState* prev = ins->rx_states, * state = ins->rx_states;
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	6a1b      	ldr	r3, [r3, #32]
 8001618:	617b      	str	r3, [r7, #20]
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	613b      	str	r3, [r7, #16]

    while (state != NULL)
 8001620:	e053      	b.n	80016ca <canardCleanupStaleTransfers+0xc2>
    {
        if ((current_time_usec - state->timestamp_usec) > TRANSFER_TIMEOUT_USEC)
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001628:	e9d7 0100 	ldrd	r0, r1, [r7]
 800162c:	1a84      	subs	r4, r0, r2
 800162e:	eb61 0503 	sbc.w	r5, r1, r3
 8001632:	4b2a      	ldr	r3, [pc, #168]	@ (80016dc <canardCleanupStaleTransfers+0xd4>)
 8001634:	429c      	cmp	r4, r3
 8001636:	f175 0300 	sbcs.w	r3, r5, #0
 800163a:	d33a      	bcc.n	80016b2 <canardCleanupStaleTransfers+0xaa>
        {
            if (state == ins->rx_states)
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	693a      	ldr	r2, [r7, #16]
 8001642:	429a      	cmp	r2, r3
 8001644:	d11c      	bne.n	8001680 <canardCleanupStaleTransfers+0x78>
            {
                releaseStatePayload(ins, state);
 8001646:	6939      	ldr	r1, [r7, #16]
 8001648:	68f8      	ldr	r0, [r7, #12]
 800164a:	f000 fdf4 	bl	8002236 <releaseStatePayload>
                ins->rx_states = canardRxFromIdx(&ins->allocator, ins->rx_states->next);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	f103 020c 	add.w	r2, r3, #12
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4619      	mov	r1, r3
 800165c:	4610      	mov	r0, r2
 800165e:	f7ff fb49 	bl	8000cf4 <canardRxFromIdx>
 8001662:	4602      	mov	r2, r0
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	621a      	str	r2, [r3, #32]
                freeBlock(&ins->allocator, state);
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	330c      	adds	r3, #12
 800166c:	6939      	ldr	r1, [r7, #16]
 800166e:	4618      	mov	r0, r3
 8001670:	f001 f9af 	bl	80029d2 <freeBlock>
                state = ins->rx_states;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	6a1b      	ldr	r3, [r3, #32]
 8001678:	613b      	str	r3, [r7, #16]
                prev = state;
 800167a:	693b      	ldr	r3, [r7, #16]
 800167c:	617b      	str	r3, [r7, #20]
 800167e:	e024      	b.n	80016ca <canardCleanupStaleTransfers+0xc2>
            }
            else
            {
                releaseStatePayload(ins, state);
 8001680:	6939      	ldr	r1, [r7, #16]
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f000 fdd7 	bl	8002236 <releaseStatePayload>
                prev->next = state->next;
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	681a      	ldr	r2, [r3, #0]
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	601a      	str	r2, [r3, #0]
                freeBlock(&ins->allocator, state);
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	330c      	adds	r3, #12
 8001694:	6939      	ldr	r1, [r7, #16]
 8001696:	4618      	mov	r0, r3
 8001698:	f001 f99b 	bl	80029d2 <freeBlock>
                state = canardRxFromIdx(&ins->allocator, prev->next);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f103 020c 	add.w	r2, r3, #12
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4619      	mov	r1, r3
 80016a8:	4610      	mov	r0, r2
 80016aa:	f7ff fb23 	bl	8000cf4 <canardRxFromIdx>
 80016ae:	6138      	str	r0, [r7, #16]
 80016b0:	e00b      	b.n	80016ca <canardCleanupStaleTransfers+0xc2>
            }
        }
        else
        {
            prev = state;
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	617b      	str	r3, [r7, #20]
            state = canardRxFromIdx(&ins->allocator, state->next);
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	f103 020c 	add.w	r2, r3, #12
 80016bc:	693b      	ldr	r3, [r7, #16]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	4610      	mov	r0, r2
 80016c4:	f7ff fb16 	bl	8000cf4 <canardRxFromIdx>
 80016c8:	6138      	str	r0, [r7, #16]
    while (state != NULL)
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d1a8      	bne.n	8001622 <canardCleanupStaleTransfers+0x1a>
            prev_item = item;
            item = item->next;
        }
    }
#endif
}
 80016d0:	bf00      	nop
 80016d2:	bf00      	nop
 80016d4:	3718      	adds	r7, #24
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bdb0      	pop	{r4, r5, r7, pc}
 80016da:	bf00      	nop
 80016dc:	001e8481 	.word	0x001e8481

080016e0 <canardDecodeScalar>:
int16_t canardDecodeScalar(const CanardRxTransfer* transfer,
                           uint32_t bit_offset,
                           uint8_t bit_length,
                           bool value_is_signed,
                           void* out_value)
{
 80016e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016e4:	b08d      	sub	sp, #52	@ 0x34
 80016e6:	af00      	add	r7, sp, #0
 80016e8:	61f8      	str	r0, [r7, #28]
 80016ea:	61b9      	str	r1, [r7, #24]
 80016ec:	4611      	mov	r1, r2
 80016ee:	461a      	mov	r2, r3
 80016f0:	460b      	mov	r3, r1
 80016f2:	75fb      	strb	r3, [r7, #23]
 80016f4:	4613      	mov	r3, r2
 80016f6:	75bb      	strb	r3, [r7, #22]
    if (transfer == NULL || out_value == NULL)
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d002      	beq.n	8001704 <canardDecodeScalar+0x24>
 80016fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001700:	2b00      	cmp	r3, #0
 8001702:	d102      	bne.n	800170a <canardDecodeScalar+0x2a>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8001704:	f06f 0301 	mvn.w	r3, #1
 8001708:	e16e      	b.n	80019e8 <canardDecodeScalar+0x308>
    }

    if (bit_length < 1 || bit_length > 64)
 800170a:	7dfb      	ldrb	r3, [r7, #23]
 800170c:	2b00      	cmp	r3, #0
 800170e:	d002      	beq.n	8001716 <canardDecodeScalar+0x36>
 8001710:	7dfb      	ldrb	r3, [r7, #23]
 8001712:	2b40      	cmp	r3, #64	@ 0x40
 8001714:	d902      	bls.n	800171c <canardDecodeScalar+0x3c>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8001716:	f06f 0301 	mvn.w	r3, #1
 800171a:	e165      	b.n	80019e8 <canardDecodeScalar+0x308>
    }

    if (bit_length == 1 && value_is_signed)
 800171c:	7dfb      	ldrb	r3, [r7, #23]
 800171e:	2b01      	cmp	r3, #1
 8001720:	d105      	bne.n	800172e <canardDecodeScalar+0x4e>
 8001722:	7dbb      	ldrb	r3, [r7, #22]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d002      	beq.n	800172e <canardDecodeScalar+0x4e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8001728:	f06f 0301 	mvn.w	r3, #1
 800172c:	e15c      	b.n	80019e8 <canardDecodeScalar+0x308>
        uint64_t u64;
        int64_t  s64;           ///< Also double, possibly float, possibly long double (depends on implementation)
        uint8_t bytes[8];
    } storage;

    memset(&storage, 0, sizeof(storage));   // This is important
 800172e:	f107 0320 	add.w	r3, r7, #32
 8001732:	2208      	movs	r2, #8
 8001734:	2100      	movs	r1, #0
 8001736:	4618      	mov	r0, r3
 8001738:	f00e f8b4 	bl	800f8a4 <memset>

    const int16_t result = descatterTransferPayload(transfer, bit_offset, bit_length, &storage.bytes[0]);
 800173c:	f107 0320 	add.w	r3, r7, #32
 8001740:	7dfa      	ldrb	r2, [r7, #23]
 8001742:	69b9      	ldr	r1, [r7, #24]
 8001744:	69f8      	ldr	r0, [r7, #28]
 8001746:	f000 ff33 	bl	80025b0 <descatterTransferPayload>
 800174a:	4603      	mov	r3, r0
 800174c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if (result <= 0)
 800174e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001752:	2b00      	cmp	r3, #0
 8001754:	dc02      	bgt.n	800175c <canardDecodeScalar+0x7c>
    {
        return result;
 8001756:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800175a:	e145      	b.n	80019e8 <canardDecodeScalar+0x308>
     * The bit copy algorithm assumes that more significant bits have lower index, so we need to shift some.
     * Extra most significant bits will be filled with zeroes, which is fine.
     * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
     * not be taken if bit_length == 64, because 64 % 8 == 0.
     */
    if ((bit_length % 8) != 0)
 800175c:	7dfb      	ldrb	r3, [r7, #23]
 800175e:	f003 0307 	and.w	r3, r3, #7
 8001762:	b2db      	uxtb	r3, r3
 8001764:	2b00      	cmp	r3, #0
 8001766:	d018      	beq.n	800179a <canardDecodeScalar+0xba>
    {
        // coverity[overrun-local]
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] >> ((8U - (bit_length % 8U)) & 7U));
 8001768:	7dfb      	ldrb	r3, [r7, #23]
 800176a:	08db      	lsrs	r3, r3, #3
 800176c:	b2db      	uxtb	r3, r3
 800176e:	3320      	adds	r3, #32
 8001770:	f107 0210 	add.w	r2, r7, #16
 8001774:	4413      	add	r3, r2
 8001776:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800177a:	461a      	mov	r2, r3
 800177c:	7dfb      	ldrb	r3, [r7, #23]
 800177e:	425b      	negs	r3, r3
 8001780:	f003 0307 	and.w	r3, r3, #7
 8001784:	411a      	asrs	r2, r3
 8001786:	7dfb      	ldrb	r3, [r7, #23]
 8001788:	08db      	lsrs	r3, r3, #3
 800178a:	b2db      	uxtb	r3, r3
 800178c:	b2d2      	uxtb	r2, r2
 800178e:	3320      	adds	r3, #32
 8001790:	f107 0110 	add.w	r1, r7, #16
 8001794:	440b      	add	r3, r1
 8001796:	f803 2c10 	strb.w	r2, [r3, #-16]
    }

    /*
     * Determining the closest standard byte length - this will be needed for byte reordering and sign bit extension.
     */
    uint8_t std_byte_length = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if      (bit_length == 1)   { std_byte_length = sizeof(bool); }
 80017a0:	7dfb      	ldrb	r3, [r7, #23]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d103      	bne.n	80017ae <canardDecodeScalar+0xce>
 80017a6:	2301      	movs	r3, #1
 80017a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80017ac:	e01e      	b.n	80017ec <canardDecodeScalar+0x10c>
    else if (bit_length <= 8)   { std_byte_length = 1; }
 80017ae:	7dfb      	ldrb	r3, [r7, #23]
 80017b0:	2b08      	cmp	r3, #8
 80017b2:	d803      	bhi.n	80017bc <canardDecodeScalar+0xdc>
 80017b4:	2301      	movs	r3, #1
 80017b6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80017ba:	e017      	b.n	80017ec <canardDecodeScalar+0x10c>
    else if (bit_length <= 16)  { std_byte_length = 2; }
 80017bc:	7dfb      	ldrb	r3, [r7, #23]
 80017be:	2b10      	cmp	r3, #16
 80017c0:	d803      	bhi.n	80017ca <canardDecodeScalar+0xea>
 80017c2:	2302      	movs	r3, #2
 80017c4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80017c8:	e010      	b.n	80017ec <canardDecodeScalar+0x10c>
    else if (bit_length <= 32)  { std_byte_length = 4; }
 80017ca:	7dfb      	ldrb	r3, [r7, #23]
 80017cc:	2b20      	cmp	r3, #32
 80017ce:	d803      	bhi.n	80017d8 <canardDecodeScalar+0xf8>
 80017d0:	2304      	movs	r3, #4
 80017d2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80017d6:	e009      	b.n	80017ec <canardDecodeScalar+0x10c>
    else if (bit_length <= 64)  { std_byte_length = 8; }
 80017d8:	7dfb      	ldrb	r3, [r7, #23]
 80017da:	2b40      	cmp	r3, #64	@ 0x40
 80017dc:	d803      	bhi.n	80017e6 <canardDecodeScalar+0x106>
 80017de:	2308      	movs	r3, #8
 80017e0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80017e4:	e002      	b.n	80017ec <canardDecodeScalar+0x10c>
    else
    {
        CANARD_ASSERT(false);
        return -CANARD_ERROR_INTERNAL;
 80017e6:	f06f 0308 	mvn.w	r3, #8
 80017ea:	e0fd      	b.n	80019e8 <canardDecodeScalar+0x308>
    CANARD_ASSERT((std_byte_length > 0) && (std_byte_length <= 8));

    /*
     * Flipping the byte order if needed.
     */
    if (isBigEndian())
 80017ec:	f000 ffd5 	bl	800279a <isBigEndian>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d007      	beq.n	8001806 <canardDecodeScalar+0x126>
    {
        swapByteOrder(&storage.bytes[0], std_byte_length);
 80017f6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80017fa:	f107 0320 	add.w	r3, r7, #32
 80017fe:	4611      	mov	r1, r2
 8001800:	4618      	mov	r0, r3
 8001802:	f000 ffdb 	bl	80027bc <swapByteOrder>

    /*
     * Extending the sign bit if needed. I miss templates.
     * Note that we operate on unsigned values in order to avoid undefined behaviors.
     */
    if (value_is_signed && (std_byte_length * 8 != bit_length))
 8001806:	7dbb      	ldrb	r3, [r7, #22]
 8001808:	2b00      	cmp	r3, #0
 800180a:	f000 809b 	beq.w	8001944 <canardDecodeScalar+0x264>
 800180e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001812:	00da      	lsls	r2, r3, #3
 8001814:	7dfb      	ldrb	r3, [r7, #23]
 8001816:	429a      	cmp	r2, r3
 8001818:	f000 8094 	beq.w	8001944 <canardDecodeScalar+0x264>
    {
        if (bit_length <= 8)
 800181c:	7dfb      	ldrb	r3, [r7, #23]
 800181e:	2b08      	cmp	r3, #8
 8001820:	d819      	bhi.n	8001856 <canardDecodeScalar+0x176>
        {
            if ((storage.u8 & (1U << (bit_length - 1U))) != 0)                           // If the sign bit is set...
 8001822:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001826:	461a      	mov	r2, r3
 8001828:	7dfb      	ldrb	r3, [r7, #23]
 800182a:	3b01      	subs	r3, #1
 800182c:	fa22 f303 	lsr.w	r3, r2, r3
 8001830:	f003 0301 	and.w	r3, r3, #1
 8001834:	2b00      	cmp	r3, #0
 8001836:	f000 8085 	beq.w	8001944 <canardDecodeScalar+0x264>
            {
                storage.u8 |= (uint8_t) 0xFFU & (uint8_t) ~((1U << bit_length) - 1U);   // ...set all bits above it.
 800183a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800183e:	7dfb      	ldrb	r3, [r7, #23]
 8001840:	2101      	movs	r1, #1
 8001842:	fa01 f303 	lsl.w	r3, r1, r3
 8001846:	b2db      	uxtb	r3, r3
 8001848:	425b      	negs	r3, r3
 800184a:	b2db      	uxtb	r3, r3
 800184c:	4313      	orrs	r3, r2
 800184e:	b2db      	uxtb	r3, r3
 8001850:	f887 3020 	strb.w	r3, [r7, #32]
 8001854:	e076      	b.n	8001944 <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length <= 16)
 8001856:	7dfb      	ldrb	r3, [r7, #23]
 8001858:	2b10      	cmp	r3, #16
 800185a:	d815      	bhi.n	8001888 <canardDecodeScalar+0x1a8>
        {
            if ((storage.u16 & (1U << (bit_length - 1U))) != 0)
 800185c:	8c3b      	ldrh	r3, [r7, #32]
 800185e:	461a      	mov	r2, r3
 8001860:	7dfb      	ldrb	r3, [r7, #23]
 8001862:	3b01      	subs	r3, #1
 8001864:	fa22 f303 	lsr.w	r3, r2, r3
 8001868:	f003 0301 	and.w	r3, r3, #1
 800186c:	2b00      	cmp	r3, #0
 800186e:	d069      	beq.n	8001944 <canardDecodeScalar+0x264>
            {
                storage.u16 |= (uint16_t) 0xFFFFU & (uint16_t) ~((1U << bit_length) - 1U);
 8001870:	8c3a      	ldrh	r2, [r7, #32]
 8001872:	7dfb      	ldrb	r3, [r7, #23]
 8001874:	2101      	movs	r1, #1
 8001876:	fa01 f303 	lsl.w	r3, r1, r3
 800187a:	b29b      	uxth	r3, r3
 800187c:	425b      	negs	r3, r3
 800187e:	b29b      	uxth	r3, r3
 8001880:	4313      	orrs	r3, r2
 8001882:	b29b      	uxth	r3, r3
 8001884:	843b      	strh	r3, [r7, #32]
 8001886:	e05d      	b.n	8001944 <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length <= 32)
 8001888:	7dfb      	ldrb	r3, [r7, #23]
 800188a:	2b20      	cmp	r3, #32
 800188c:	d811      	bhi.n	80018b2 <canardDecodeScalar+0x1d2>
        {
            if ((storage.u32 & (((uint32_t) 1) << (bit_length - 1U))) != 0)
 800188e:	6a3a      	ldr	r2, [r7, #32]
 8001890:	7dfb      	ldrb	r3, [r7, #23]
 8001892:	3b01      	subs	r3, #1
 8001894:	fa22 f303 	lsr.w	r3, r2, r3
 8001898:	f003 0301 	and.w	r3, r3, #1
 800189c:	2b00      	cmp	r3, #0
 800189e:	d051      	beq.n	8001944 <canardDecodeScalar+0x264>
            {
                storage.u32 |= (uint32_t) 0xFFFFFFFFUL & (uint32_t) ~((((uint32_t) 1) << bit_length) - 1U);
 80018a0:	6a3a      	ldr	r2, [r7, #32]
 80018a2:	7dfb      	ldrb	r3, [r7, #23]
 80018a4:	2101      	movs	r1, #1
 80018a6:	fa01 f303 	lsl.w	r3, r1, r3
 80018aa:	425b      	negs	r3, r3
 80018ac:	4313      	orrs	r3, r2
 80018ae:	623b      	str	r3, [r7, #32]
 80018b0:	e048      	b.n	8001944 <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length < 64)   // Strictly less, this is not a typo
 80018b2:	7dfb      	ldrb	r3, [r7, #23]
 80018b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80018b6:	d842      	bhi.n	800193e <canardDecodeScalar+0x25e>
        {
            if ((storage.u64 & (((uint64_t) 1) << (bit_length - 1U))) != 0)
 80018b8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018bc:	7df9      	ldrb	r1, [r7, #23]
 80018be:	1e48      	subs	r0, r1, #1
 80018c0:	f1c0 0620 	rsb	r6, r0, #32
 80018c4:	f1a0 0120 	sub.w	r1, r0, #32
 80018c8:	fa22 f400 	lsr.w	r4, r2, r0
 80018cc:	fa03 f606 	lsl.w	r6, r3, r6
 80018d0:	4334      	orrs	r4, r6
 80018d2:	fa23 f101 	lsr.w	r1, r3, r1
 80018d6:	430c      	orrs	r4, r1
 80018d8:	fa23 f500 	lsr.w	r5, r3, r0
 80018dc:	f004 0301 	and.w	r3, r4, #1
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	2300      	movs	r3, #0
 80018e4:	60fb      	str	r3, [r7, #12]
 80018e6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80018ea:	460b      	mov	r3, r1
 80018ec:	4313      	orrs	r3, r2
 80018ee:	d029      	beq.n	8001944 <canardDecodeScalar+0x264>
            {
                storage.u64 |= (uint64_t) 0xFFFFFFFFFFFFFFFFULL & (uint64_t) ~((((uint64_t) 1) << bit_length) - 1U);
 80018f0:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80018f4:	7df9      	ldrb	r1, [r7, #23]
 80018f6:	f04f 0201 	mov.w	r2, #1
 80018fa:	f04f 0300 	mov.w	r3, #0
 80018fe:	f1a1 0620 	sub.w	r6, r1, #32
 8001902:	f1c1 0020 	rsb	r0, r1, #32
 8001906:	fa03 f901 	lsl.w	r9, r3, r1
 800190a:	fa02 f606 	lsl.w	r6, r2, r6
 800190e:	ea49 0906 	orr.w	r9, r9, r6
 8001912:	fa22 f000 	lsr.w	r0, r2, r0
 8001916:	ea49 0900 	orr.w	r9, r9, r0
 800191a:	fa02 f801 	lsl.w	r8, r2, r1
 800191e:	2300      	movs	r3, #0
 8001920:	f1d8 0a00 	rsbs	sl, r8, #0
 8001924:	eb63 0b09 	sbc.w	fp, r3, r9
 8001928:	ea44 030a 	orr.w	r3, r4, sl
 800192c:	603b      	str	r3, [r7, #0]
 800192e:	ea45 030b 	orr.w	r3, r5, fp
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001938:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800193c:	e002      	b.n	8001944 <canardDecodeScalar+0x264>
            }
        }
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 800193e:	f06f 0308 	mvn.w	r3, #8
 8001942:	e051      	b.n	80019e8 <canardDecodeScalar+0x308>
    }

    /*
     * Copying the result out.
     */
    if (value_is_signed)
 8001944:	7dbb      	ldrb	r3, [r7, #22]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d022      	beq.n	8001990 <canardDecodeScalar+0x2b0>
    {
        if      (bit_length <= 8)   { *( (int8_t*) out_value) = storage.s8;  }
 800194a:	7dfb      	ldrb	r3, [r7, #23]
 800194c:	2b08      	cmp	r3, #8
 800194e:	d804      	bhi.n	800195a <canardDecodeScalar+0x27a>
 8001950:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8001954:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001956:	701a      	strb	r2, [r3, #0]
 8001958:	e044      	b.n	80019e4 <canardDecodeScalar+0x304>
        else if (bit_length <= 16)  { *((int16_t*) out_value) = storage.s16; }
 800195a:	7dfb      	ldrb	r3, [r7, #23]
 800195c:	2b10      	cmp	r3, #16
 800195e:	d804      	bhi.n	800196a <canardDecodeScalar+0x28a>
 8001960:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001964:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001966:	801a      	strh	r2, [r3, #0]
 8001968:	e03c      	b.n	80019e4 <canardDecodeScalar+0x304>
        else if (bit_length <= 32)  { *((int32_t*) out_value) = storage.s32; }
 800196a:	7dfb      	ldrb	r3, [r7, #23]
 800196c:	2b20      	cmp	r3, #32
 800196e:	d803      	bhi.n	8001978 <canardDecodeScalar+0x298>
 8001970:	6a3a      	ldr	r2, [r7, #32]
 8001972:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	e035      	b.n	80019e4 <canardDecodeScalar+0x304>
        else if (bit_length <= 64)  { *((int64_t*) out_value) = storage.s64; }
 8001978:	7dfb      	ldrb	r3, [r7, #23]
 800197a:	2b40      	cmp	r3, #64	@ 0x40
 800197c:	d805      	bhi.n	800198a <canardDecodeScalar+0x2aa>
 800197e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001982:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001984:	e9c1 2300 	strd	r2, r3, [r1]
 8001988:	e02c      	b.n	80019e4 <canardDecodeScalar+0x304>
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 800198a:	f06f 0308 	mvn.w	r3, #8
 800198e:	e02b      	b.n	80019e8 <canardDecodeScalar+0x308>
        }
    }
    else
    {
        if      (bit_length == 1)   { *(    (bool*) out_value) = storage.boolean; }
 8001990:	7dfb      	ldrb	r3, [r7, #23]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d104      	bne.n	80019a0 <canardDecodeScalar+0x2c0>
 8001996:	f897 2020 	ldrb.w	r2, [r7, #32]
 800199a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800199c:	701a      	strb	r2, [r3, #0]
 800199e:	e021      	b.n	80019e4 <canardDecodeScalar+0x304>
        else if (bit_length <= 8)   { *( (uint8_t*) out_value) = storage.u8;  }
 80019a0:	7dfb      	ldrb	r3, [r7, #23]
 80019a2:	2b08      	cmp	r3, #8
 80019a4:	d804      	bhi.n	80019b0 <canardDecodeScalar+0x2d0>
 80019a6:	f897 2020 	ldrb.w	r2, [r7, #32]
 80019aa:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80019ac:	701a      	strb	r2, [r3, #0]
 80019ae:	e019      	b.n	80019e4 <canardDecodeScalar+0x304>
        else if (bit_length <= 16)  { *((uint16_t*) out_value) = storage.u16; }
 80019b0:	7dfb      	ldrb	r3, [r7, #23]
 80019b2:	2b10      	cmp	r3, #16
 80019b4:	d803      	bhi.n	80019be <canardDecodeScalar+0x2de>
 80019b6:	8c3a      	ldrh	r2, [r7, #32]
 80019b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80019ba:	801a      	strh	r2, [r3, #0]
 80019bc:	e012      	b.n	80019e4 <canardDecodeScalar+0x304>
        else if (bit_length <= 32)  { *((uint32_t*) out_value) = storage.u32; }
 80019be:	7dfb      	ldrb	r3, [r7, #23]
 80019c0:	2b20      	cmp	r3, #32
 80019c2:	d803      	bhi.n	80019cc <canardDecodeScalar+0x2ec>
 80019c4:	6a3a      	ldr	r2, [r7, #32]
 80019c6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	e00b      	b.n	80019e4 <canardDecodeScalar+0x304>
        else if (bit_length <= 64)  { *((uint64_t*) out_value) = storage.u64; }
 80019cc:	7dfb      	ldrb	r3, [r7, #23]
 80019ce:	2b40      	cmp	r3, #64	@ 0x40
 80019d0:	d805      	bhi.n	80019de <canardDecodeScalar+0x2fe>
 80019d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80019d6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80019d8:	e9c1 2300 	strd	r2, r3, [r1]
 80019dc:	e002      	b.n	80019e4 <canardDecodeScalar+0x304>
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 80019de:	f06f 0308 	mvn.w	r3, #8
 80019e2:	e001      	b.n	80019e8 <canardDecodeScalar+0x308>
        }
    }

    CANARD_ASSERT(result <= bit_length);
    CANARD_ASSERT(result > 0);
    return result;
 80019e4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
}
 80019e8:	4618      	mov	r0, r3
 80019ea:	3734      	adds	r7, #52	@ 0x34
 80019ec:	46bd      	mov	sp, r7
 80019ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080019f2 <canardEncodeScalar>:

void canardEncodeScalar(void* destination,
                        uint32_t bit_offset,
                        uint8_t bit_length,
                        const void* value)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	b08a      	sub	sp, #40	@ 0x28
 80019f6:	af02      	add	r7, sp, #8
 80019f8:	60f8      	str	r0, [r7, #12]
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	603b      	str	r3, [r7, #0]
 80019fe:	4613      	mov	r3, r2
 8001a00:	71fb      	strb	r3, [r7, #7]
     * Maybe not the best solution, but it simplifies the API.
     */
    CANARD_ASSERT(destination != NULL);
    CANARD_ASSERT(value != NULL);

    if (bit_length > 64)
 8001a02:	79fb      	ldrb	r3, [r7, #7]
 8001a04:	2b40      	cmp	r3, #64	@ 0x40
 8001a06:	d901      	bls.n	8001a0c <canardEncodeScalar+0x1a>
    {
        CANARD_ASSERT(false);
        bit_length = 64;
 8001a08:	2340      	movs	r3, #64	@ 0x40
 8001a0a:	71fb      	strb	r3, [r7, #7]
    }

    if (bit_length < 1)
 8001a0c:	79fb      	ldrb	r3, [r7, #7]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <canardEncodeScalar+0x24>
    {
        CANARD_ASSERT(false);
        bit_length = 1;
 8001a12:	2301      	movs	r3, #1
 8001a14:	71fb      	strb	r3, [r7, #7]
        uint32_t u32;
        uint64_t u64;
        uint8_t bytes[8];
    } storage;

    memset(&storage, 0, sizeof(storage));
 8001a16:	f107 0310 	add.w	r3, r7, #16
 8001a1a:	2208      	movs	r2, #8
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f00d ff40 	bl	800f8a4 <memset>

    uint8_t std_byte_length = 0;
 8001a24:	2300      	movs	r3, #0
 8001a26:	77fb      	strb	r3, [r7, #31]

    // Extra most significant bits can be safely ignored here.
    if      (bit_length == 1)   { std_byte_length = sizeof(bool);   storage.boolean = (*((bool*) value) != 0); }
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	2b01      	cmp	r3, #1
 8001a2c:	d105      	bne.n	8001a3a <canardEncodeScalar+0x48>
 8001a2e:	2301      	movs	r3, #1
 8001a30:	77fb      	strb	r3, [r7, #31]
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	743b      	strb	r3, [r7, #16]
 8001a38:	e024      	b.n	8001a84 <canardEncodeScalar+0x92>
    else if (bit_length <= 8)   { std_byte_length = 1;              storage.u8  = *((uint8_t*) value);  }
 8001a3a:	79fb      	ldrb	r3, [r7, #7]
 8001a3c:	2b08      	cmp	r3, #8
 8001a3e:	d805      	bhi.n	8001a4c <canardEncodeScalar+0x5a>
 8001a40:	2301      	movs	r3, #1
 8001a42:	77fb      	strb	r3, [r7, #31]
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	743b      	strb	r3, [r7, #16]
 8001a4a:	e01b      	b.n	8001a84 <canardEncodeScalar+0x92>
    else if (bit_length <= 16)  { std_byte_length = 2;              storage.u16 = *((uint16_t*) value); }
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	2b10      	cmp	r3, #16
 8001a50:	d805      	bhi.n	8001a5e <canardEncodeScalar+0x6c>
 8001a52:	2302      	movs	r3, #2
 8001a54:	77fb      	strb	r3, [r7, #31]
 8001a56:	683b      	ldr	r3, [r7, #0]
 8001a58:	881b      	ldrh	r3, [r3, #0]
 8001a5a:	823b      	strh	r3, [r7, #16]
 8001a5c:	e012      	b.n	8001a84 <canardEncodeScalar+0x92>
    else if (bit_length <= 32)  { std_byte_length = 4;              storage.u32 = *((uint32_t*) value); }
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	2b20      	cmp	r3, #32
 8001a62:	d805      	bhi.n	8001a70 <canardEncodeScalar+0x7e>
 8001a64:	2304      	movs	r3, #4
 8001a66:	77fb      	strb	r3, [r7, #31]
 8001a68:	683b      	ldr	r3, [r7, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	613b      	str	r3, [r7, #16]
 8001a6e:	e009      	b.n	8001a84 <canardEncodeScalar+0x92>
    else if (bit_length <= 64)  { std_byte_length = 8;              storage.u64 = *((uint64_t*) value); }
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	2b40      	cmp	r3, #64	@ 0x40
 8001a74:	d806      	bhi.n	8001a84 <canardEncodeScalar+0x92>
 8001a76:	2308      	movs	r3, #8
 8001a78:	77fb      	strb	r3, [r7, #31]
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a80:	e9c7 2304 	strd	r2, r3, [r7, #16]
            storage.bytes[i] = (temp >> (8*i)) & 0xFFU;
        }
    }
#endif

    if (isBigEndian())
 8001a84:	f000 fe89 	bl	800279a <isBigEndian>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d006      	beq.n	8001a9c <canardEncodeScalar+0xaa>
    {
        swapByteOrder(&storage.bytes[0], std_byte_length);
 8001a8e:	7ffa      	ldrb	r2, [r7, #31]
 8001a90:	f107 0310 	add.w	r3, r7, #16
 8001a94:	4611      	mov	r1, r2
 8001a96:	4618      	mov	r0, r3
 8001a98:	f000 fe90 	bl	80027bc <swapByteOrder>
     * Extra least significant bits will be filled with zeroes, which is fine.
     * Extra most significant bits will be discarded here.
     * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
     * not be taken if bit_length == 64, because 64 % 8 == 0.
     */
    if ((bit_length % 8) != 0)
 8001a9c:	79fb      	ldrb	r3, [r7, #7]
 8001a9e:	f003 0307 	and.w	r3, r3, #7
 8001aa2:	b2db      	uxtb	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d014      	beq.n	8001ad2 <canardEncodeScalar+0xe0>
    {
        // coverity[overrun-local]
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] << ((8U - (bit_length % 8U)) & 7U));
 8001aa8:	79fb      	ldrb	r3, [r7, #7]
 8001aaa:	08db      	lsrs	r3, r3, #3
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	3320      	adds	r3, #32
 8001ab0:	443b      	add	r3, r7
 8001ab2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001ab6:	461a      	mov	r2, r3
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	425b      	negs	r3, r3
 8001abc:	f003 0307 	and.w	r3, r3, #7
 8001ac0:	409a      	lsls	r2, r3
 8001ac2:	79fb      	ldrb	r3, [r7, #7]
 8001ac4:	08db      	lsrs	r3, r3, #3
 8001ac6:	b2db      	uxtb	r3, r3
 8001ac8:	b2d2      	uxtb	r2, r2
 8001aca:	3320      	adds	r3, #32
 8001acc:	443b      	add	r3, r7
 8001ace:	f803 2c10 	strb.w	r2, [r3, #-16]
    }

    /*
     * Now, the storage contains properly serialized scalar. Copying it out.
     */
    copyBitArray(&storage.bytes[0], 0, bit_length, (uint8_t*) destination, bit_offset);
 8001ad2:	79fa      	ldrb	r2, [r7, #7]
 8001ad4:	f107 0010 	add.w	r0, r7, #16
 8001ad8:	68bb      	ldr	r3, [r7, #8]
 8001ada:	9300      	str	r3, [sp, #0]
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	2100      	movs	r1, #0
 8001ae0:	f000 fcef 	bl	80024c2 <copyBitArray>
}
 8001ae4:	bf00      	nop
 8001ae6:	3720      	adds	r7, #32
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}

08001aec <canardReleaseRxTransferPayload>:

void canardReleaseRxTransferPayload(CanardInstance* ins, CanardRxTransfer* transfer)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
 8001af4:	6039      	str	r1, [r7, #0]
    while (transfer->payload_middle != NULL)
 8001af6:	e00f      	b.n	8001b18 <canardReleaseRxTransferPayload+0x2c>
    {
        CanardBufferBlock* const temp = transfer->payload_middle->next;
 8001af8:	683b      	ldr	r3, [r7, #0]
 8001afa:	68db      	ldr	r3, [r3, #12]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	60fb      	str	r3, [r7, #12]
        freeBlock(&ins->allocator, transfer->payload_middle);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	f103 020c 	add.w	r2, r3, #12
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	68db      	ldr	r3, [r3, #12]
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4610      	mov	r0, r2
 8001b0e:	f000 ff60 	bl	80029d2 <freeBlock>
        transfer->payload_middle = temp;
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	60da      	str	r2, [r3, #12]
    while (transfer->payload_middle != NULL)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1eb      	bne.n	8001af8 <canardReleaseRxTransferPayload+0xc>
    }

    transfer->payload_middle = NULL;
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	2200      	movs	r2, #0
 8001b24:	60da      	str	r2, [r3, #12]
    transfer->payload_head = NULL;
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	609a      	str	r2, [r3, #8]
    transfer->payload_tail = NULL;
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	2200      	movs	r2, #0
 8001b30:	611a      	str	r2, [r3, #16]
    transfer->payload_len = 0;
 8001b32:	683b      	ldr	r3, [r7, #0]
 8001b34:	2200      	movs	r2, #0
 8001b36:	829a      	strh	r2, [r3, #20]
}
 8001b38:	bf00      	nop
 8001b3a:	3710      	adds	r7, #16
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	bd80      	pop	{r7, pc}

08001b40 <computeTransferIDForwardDistance>:

/*
 * Internal (static functions)
 */
CANARD_INTERNAL int16_t computeTransferIDForwardDistance(uint8_t a, uint8_t b)
{
 8001b40:	b480      	push	{r7}
 8001b42:	b085      	sub	sp, #20
 8001b44:	af00      	add	r7, sp, #0
 8001b46:	4603      	mov	r3, r0
 8001b48:	460a      	mov	r2, r1
 8001b4a:	71fb      	strb	r3, [r7, #7]
 8001b4c:	4613      	mov	r3, r2
 8001b4e:	71bb      	strb	r3, [r7, #6]
    int16_t d = (int16_t)(a - b);
 8001b50:	79fb      	ldrb	r3, [r7, #7]
 8001b52:	b29a      	uxth	r2, r3
 8001b54:	79bb      	ldrb	r3, [r7, #6]
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	b29b      	uxth	r3, r3
 8001b5c:	81fb      	strh	r3, [r7, #14]
    if (d < 0)
 8001b5e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	da03      	bge.n	8001b6e <computeTransferIDForwardDistance+0x2e>
    {
        d = (int16_t)(d + (int16_t)(1U << TRANSFER_ID_BIT_LEN));
 8001b66:	89fb      	ldrh	r3, [r7, #14]
 8001b68:	3320      	adds	r3, #32
 8001b6a:	b29b      	uxth	r3, r3
 8001b6c:	81fb      	strh	r3, [r7, #14]
    }
    return d;
 8001b6e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	3714      	adds	r7, #20
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr

08001b7e <incrementTransferID>:

CANARD_INTERNAL void incrementTransferID(uint8_t* transfer_id)
{
 8001b7e:	b480      	push	{r7}
 8001b80:	b083      	sub	sp, #12
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(transfer_id != NULL);

    (*transfer_id)++;
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	b2da      	uxtb	r2, r3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	701a      	strb	r2, [r3, #0]
    if (*transfer_id >= 32)
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	781b      	ldrb	r3, [r3, #0]
 8001b96:	2b1f      	cmp	r3, #31
 8001b98:	d902      	bls.n	8001ba0 <incrementTransferID+0x22>
    {
        *transfer_id = 0;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	701a      	strb	r2, [r3, #0]
    }
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <dlcToDataLength>:

CANARD_INTERNAL uint16_t dlcToDataLength(uint16_t dlc) {
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	80fb      	strh	r3, [r7, #6]
    /*
    Data Length Code      9  10  11  12  13  14  15
    Number of data bytes 12  16  20  24  32  48  64
    */
    if (dlc <= 8) {
 8001bb6:	88fb      	ldrh	r3, [r7, #6]
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d801      	bhi.n	8001bc0 <dlcToDataLength+0x14>
        return dlc;
 8001bbc:	88fb      	ldrh	r3, [r7, #6]
 8001bbe:	e01e      	b.n	8001bfe <dlcToDataLength+0x52>
    } else if (dlc == 9) {
 8001bc0:	88fb      	ldrh	r3, [r7, #6]
 8001bc2:	2b09      	cmp	r3, #9
 8001bc4:	d101      	bne.n	8001bca <dlcToDataLength+0x1e>
        return 12;
 8001bc6:	230c      	movs	r3, #12
 8001bc8:	e019      	b.n	8001bfe <dlcToDataLength+0x52>
    } else if (dlc == 10) {
 8001bca:	88fb      	ldrh	r3, [r7, #6]
 8001bcc:	2b0a      	cmp	r3, #10
 8001bce:	d101      	bne.n	8001bd4 <dlcToDataLength+0x28>
        return 16;
 8001bd0:	2310      	movs	r3, #16
 8001bd2:	e014      	b.n	8001bfe <dlcToDataLength+0x52>
    } else if (dlc == 11) {
 8001bd4:	88fb      	ldrh	r3, [r7, #6]
 8001bd6:	2b0b      	cmp	r3, #11
 8001bd8:	d101      	bne.n	8001bde <dlcToDataLength+0x32>
        return 20;
 8001bda:	2314      	movs	r3, #20
 8001bdc:	e00f      	b.n	8001bfe <dlcToDataLength+0x52>
    } else if (dlc == 12) {
 8001bde:	88fb      	ldrh	r3, [r7, #6]
 8001be0:	2b0c      	cmp	r3, #12
 8001be2:	d101      	bne.n	8001be8 <dlcToDataLength+0x3c>
        return 24;
 8001be4:	2318      	movs	r3, #24
 8001be6:	e00a      	b.n	8001bfe <dlcToDataLength+0x52>
    } else if (dlc == 13) {
 8001be8:	88fb      	ldrh	r3, [r7, #6]
 8001bea:	2b0d      	cmp	r3, #13
 8001bec:	d101      	bne.n	8001bf2 <dlcToDataLength+0x46>
        return 32;
 8001bee:	2320      	movs	r3, #32
 8001bf0:	e005      	b.n	8001bfe <dlcToDataLength+0x52>
    } else if (dlc == 14) {
 8001bf2:	88fb      	ldrh	r3, [r7, #6]
 8001bf4:	2b0e      	cmp	r3, #14
 8001bf6:	d101      	bne.n	8001bfc <dlcToDataLength+0x50>
        return 48;
 8001bf8:	2330      	movs	r3, #48	@ 0x30
 8001bfa:	e000      	b.n	8001bfe <dlcToDataLength+0x52>
    }
    return 64;
 8001bfc:	2340      	movs	r3, #64	@ 0x40
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	370c      	adds	r7, #12
 8001c02:	46bd      	mov	sp, r7
 8001c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c08:	4770      	bx	lr

08001c0a <dataLengthToDlc>:

CANARD_INTERNAL uint16_t dataLengthToDlc(uint16_t data_length) {
 8001c0a:	b480      	push	{r7}
 8001c0c:	b083      	sub	sp, #12
 8001c0e:	af00      	add	r7, sp, #0
 8001c10:	4603      	mov	r3, r0
 8001c12:	80fb      	strh	r3, [r7, #6]
    if (data_length <= 8) {
 8001c14:	88fb      	ldrh	r3, [r7, #6]
 8001c16:	2b08      	cmp	r3, #8
 8001c18:	d801      	bhi.n	8001c1e <dataLengthToDlc+0x14>
        return data_length;
 8001c1a:	88fb      	ldrh	r3, [r7, #6]
 8001c1c:	e01e      	b.n	8001c5c <dataLengthToDlc+0x52>
    } else if (data_length <= 12) {
 8001c1e:	88fb      	ldrh	r3, [r7, #6]
 8001c20:	2b0c      	cmp	r3, #12
 8001c22:	d801      	bhi.n	8001c28 <dataLengthToDlc+0x1e>
        return 9;
 8001c24:	2309      	movs	r3, #9
 8001c26:	e019      	b.n	8001c5c <dataLengthToDlc+0x52>
    } else if (data_length <= 16) {
 8001c28:	88fb      	ldrh	r3, [r7, #6]
 8001c2a:	2b10      	cmp	r3, #16
 8001c2c:	d801      	bhi.n	8001c32 <dataLengthToDlc+0x28>
        return 10;
 8001c2e:	230a      	movs	r3, #10
 8001c30:	e014      	b.n	8001c5c <dataLengthToDlc+0x52>
    } else if (data_length <= 20) {
 8001c32:	88fb      	ldrh	r3, [r7, #6]
 8001c34:	2b14      	cmp	r3, #20
 8001c36:	d801      	bhi.n	8001c3c <dataLengthToDlc+0x32>
        return 11;
 8001c38:	230b      	movs	r3, #11
 8001c3a:	e00f      	b.n	8001c5c <dataLengthToDlc+0x52>
    } else if (data_length <= 24) {
 8001c3c:	88fb      	ldrh	r3, [r7, #6]
 8001c3e:	2b18      	cmp	r3, #24
 8001c40:	d801      	bhi.n	8001c46 <dataLengthToDlc+0x3c>
        return 12;
 8001c42:	230c      	movs	r3, #12
 8001c44:	e00a      	b.n	8001c5c <dataLengthToDlc+0x52>
    } else if (data_length <= 32) {
 8001c46:	88fb      	ldrh	r3, [r7, #6]
 8001c48:	2b20      	cmp	r3, #32
 8001c4a:	d801      	bhi.n	8001c50 <dataLengthToDlc+0x46>
        return 13;
 8001c4c:	230d      	movs	r3, #13
 8001c4e:	e005      	b.n	8001c5c <dataLengthToDlc+0x52>
    } else if (data_length <= 48) {
 8001c50:	88fb      	ldrh	r3, [r7, #6]
 8001c52:	2b30      	cmp	r3, #48	@ 0x30
 8001c54:	d801      	bhi.n	8001c5a <dataLengthToDlc+0x50>
        return 14;
 8001c56:	230e      	movs	r3, #14
 8001c58:	e000      	b.n	8001c5c <dataLengthToDlc+0x52>
    }
    return 15;
 8001c5a:	230f      	movs	r3, #15
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	370c      	adds	r7, #12
 8001c60:	46bd      	mov	sp, r7
 8001c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c66:	4770      	bx	lr

08001c68 <enqueueTxFrames>:
CANARD_INTERNAL int16_t enqueueTxFrames(CanardInstance* ins,
                                        uint32_t can_id,
                                        uint16_t crc,
                                        CanardTxTransfer* transfer
)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b08c      	sub	sp, #48	@ 0x30
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	60f8      	str	r0, [r7, #12]
 8001c70:	60b9      	str	r1, [r7, #8]
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	4613      	mov	r3, r2
 8001c76:	80fb      	strh	r3, [r7, #6]
    CANARD_ASSERT(ins != NULL);
    CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared

    if (transfer->inout_transfer_id == NULL)
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	695b      	ldr	r3, [r3, #20]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d102      	bne.n	8001c86 <enqueueTxFrames+0x1e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8001c80:	f06f 0301 	mvn.w	r3, #1
 8001c84:	e11c      	b.n	8001ec0 <enqueueTxFrames+0x258>
    }

    if ((transfer->payload_len > 0) && (transfer->payload == NULL))
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	8c1b      	ldrh	r3, [r3, #32]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d006      	beq.n	8001c9c <enqueueTxFrames+0x34>
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	69db      	ldr	r3, [r3, #28]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d102      	bne.n	8001c9c <enqueueTxFrames+0x34>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8001c96:	f06f 0301 	mvn.w	r3, #1
 8001c9a:	e111      	b.n	8001ec0 <enqueueTxFrames+0x258>
    }

    int16_t result = 0;
 8001c9c:	2300      	movs	r3, #0
 8001c9e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
#if CANARD_ENABLE_CANFD
    uint8_t frame_max_data_len = transfer->canfd ? CANARD_CANFD_FRAME_MAX_DATA_LEN:CANARD_CAN_FRAME_MAX_DATA_LEN;
#else
    uint8_t frame_max_data_len = CANARD_CAN_FRAME_MAX_DATA_LEN;
 8001ca0:	2308      	movs	r3, #8
 8001ca2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
    if (transfer->payload_len < frame_max_data_len)                        // Single frame transfer
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	8c1a      	ldrh	r2, [r3, #32]
 8001caa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d24b      	bcs.n	8001d4c <enqueueTxFrames+0xe4>
    {
        CanardTxQueueItem* queue_item = createTxItem(&ins->allocator);
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	330c      	adds	r3, #12
 8001cb8:	4618      	mov	r0, r3
 8001cba:	f000 f94a 	bl	8001f52 <createTxItem>
 8001cbe:	6178      	str	r0, [r7, #20]
        if (queue_item == NULL)
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d102      	bne.n	8001ccc <enqueueTxFrames+0x64>
        {
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8001cc6:	f06f 0302 	mvn.w	r3, #2
 8001cca:	e0f9      	b.n	8001ec0 <enqueueTxFrames+0x258>
        }

        memcpy(queue_item->frame.data, transfer->payload, transfer->payload_len);
 8001ccc:	697b      	ldr	r3, [r7, #20]
 8001cce:	f103 0008 	add.w	r0, r3, #8
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	69d9      	ldr	r1, [r3, #28]
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	8c1b      	ldrh	r3, [r3, #32]
 8001cda:	461a      	mov	r2, r3
 8001cdc:	f00d fe81 	bl	800f9e2 <memcpy>

        transfer->payload_len = dlcToDataLength(dataLengthToDlc(transfer->payload_len+1))-1;
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	8c1b      	ldrh	r3, [r3, #32]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	b29b      	uxth	r3, r3
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f7ff ff8e 	bl	8001c0a <dataLengthToDlc>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	f7ff ff5b 	bl	8001bac <dlcToDataLength>
 8001cf6:	4603      	mov	r3, r0
 8001cf8:	3b01      	subs	r3, #1
 8001cfa:	b29a      	uxth	r2, r3
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	841a      	strh	r2, [r3, #32]
        queue_item->frame.data_len = (uint8_t)(transfer->payload_len + 1);
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	8c1b      	ldrh	r3, [r3, #32]
 8001d04:	b2db      	uxtb	r3, r3
 8001d06:	3301      	adds	r3, #1
 8001d08:	b2da      	uxtb	r2, r3
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	741a      	strb	r2, [r3, #16]
        queue_item->frame.data[transfer->payload_len] = (uint8_t)(0xC0U | (*transfer->inout_transfer_id & 31U));
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	695b      	ldr	r3, [r3, #20]
 8001d12:	781b      	ldrb	r3, [r3, #0]
 8001d14:	f003 031f 	and.w	r3, r3, #31
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	683a      	ldr	r2, [r7, #0]
 8001d1c:	8c12      	ldrh	r2, [r2, #32]
 8001d1e:	4611      	mov	r1, r2
 8001d20:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	440b      	add	r3, r1
 8001d2a:	721a      	strb	r2, [r3, #8]
        queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	605a      	str	r2, [r3, #4]
        queue_item->frame.iface_mask = transfer->iface_mask;
#endif
#if CANARD_ENABLE_CANFD
        queue_item->frame.canfd = transfer->canfd;
#endif
        pushTxQueue(ins, queue_item);
 8001d36:	6979      	ldr	r1, [r7, #20]
 8001d38:	68f8      	ldr	r0, [r7, #12]
 8001d3a:	f000 f8c5 	bl	8001ec8 <pushTxQueue>
        result++;
 8001d3e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	3301      	adds	r3, #1
 8001d46:	b29b      	uxth	r3, r3
 8001d48:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001d4a:	e0b7      	b.n	8001ebc <enqueueTxFrames+0x254>
    }
    else                                                                    // Multi frame transfer
    {
        uint16_t data_index = 0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        uint8_t toggle = 0;
 8001d50:	2300      	movs	r3, #0
 8001d52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        uint8_t sot_eot = 0x80;
 8001d56:	2380      	movs	r3, #128	@ 0x80
 8001d58:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
          see if we are going to be able to allocate enough blocks for
          this transfer. If not then stop now, otherwise we will end
          up doing a partial (corrupt) transfer which will just make
          the situation worse as it will waste bus bandwidth
         */
        const uint16_t total_bytes = transfer->payload_len + 2; // including CRC
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	8c1b      	ldrh	r3, [r3, #32]
 8001d60:	3302      	adds	r3, #2
 8001d62:	84bb      	strh	r3, [r7, #36]	@ 0x24
        const uint8_t bytes_per_frame = frame_max_data_len-1; // sot/eot byte consumes one byte
 8001d64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001d68:	3b01      	subs	r3, #1
 8001d6a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        const uint16_t frames_needed = (total_bytes + (bytes_per_frame-1)) / bytes_per_frame;
 8001d6e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001d70:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d74:	3b01      	subs	r3, #1
 8001d76:	441a      	add	r2, r3
 8001d78:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001d7c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001d80:	843b      	strh	r3, [r7, #32]
        const uint16_t blocks_available = ins->allocator.statistics.capacity_blocks - ins->allocator.statistics.current_usage_blocks;
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	8a9a      	ldrh	r2, [r3, #20]
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	8adb      	ldrh	r3, [r3, #22]
 8001d8a:	1ad3      	subs	r3, r2, r3
 8001d8c:	83fb      	strh	r3, [r7, #30]
        if (blocks_available < frames_needed) {
 8001d8e:	8bfa      	ldrh	r2, [r7, #30]
 8001d90:	8c3b      	ldrh	r3, [r7, #32]
 8001d92:	429a      	cmp	r2, r3
 8001d94:	d202      	bcs.n	8001d9c <enqueueTxFrames+0x134>
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8001d96:	f06f 0302 	mvn.w	r3, #2
 8001d9a:	e091      	b.n	8001ec0 <enqueueTxFrames+0x258>
        }

        CanardTxQueueItem* queue_item = NULL;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	61bb      	str	r3, [r7, #24]

        while (transfer->payload_len - data_index != 0)
 8001da0:	e086      	b.n	8001eb0 <enqueueTxFrames+0x248>
        {
            queue_item = createTxItem(&ins->allocator);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	330c      	adds	r3, #12
 8001da6:	4618      	mov	r0, r3
 8001da8:	f000 f8d3 	bl	8001f52 <createTxItem>
 8001dac:	61b8      	str	r0, [r7, #24]
            if (queue_item == NULL)
 8001dae:	69bb      	ldr	r3, [r7, #24]
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d102      	bne.n	8001dba <enqueueTxFrames+0x152>
            {
                CANARD_ASSERT(false);
                return -CANARD_ERROR_OUT_OF_MEMORY;
 8001db4:	f06f 0302 	mvn.w	r3, #2
 8001db8:	e082      	b.n	8001ec0 <enqueueTxFrames+0x258>
            }

            uint16_t i = 0;
 8001dba:	2300      	movs	r3, #0
 8001dbc:	853b      	strh	r3, [r7, #40]	@ 0x28
            if (data_index == 0)
 8001dbe:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d10c      	bne.n	8001dde <enqueueTxFrames+0x176>
            {
                // add crc
                queue_item->frame.data[0] = (uint8_t) (crc);
 8001dc4:	88fb      	ldrh	r3, [r7, #6]
 8001dc6:	b2da      	uxtb	r2, r3
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	721a      	strb	r2, [r3, #8]
                queue_item->frame.data[1] = (uint8_t) (crc >> 8U);
 8001dcc:	88fb      	ldrh	r3, [r7, #6]
 8001dce:	0a1b      	lsrs	r3, r3, #8
 8001dd0:	b29b      	uxth	r3, r3
 8001dd2:	b2da      	uxtb	r2, r3
 8001dd4:	69bb      	ldr	r3, [r7, #24]
 8001dd6:	725a      	strb	r2, [r3, #9]
                i = 2;
 8001dd8:	2302      	movs	r3, #2
 8001dda:	853b      	strh	r3, [r7, #40]	@ 0x28
 8001ddc:	e012      	b.n	8001e04 <enqueueTxFrames+0x19c>
            }
            else
            {
                i = 0;
 8001dde:	2300      	movs	r3, #0
 8001de0:	853b      	strh	r3, [r7, #40]	@ 0x28
            }

            for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 8001de2:	e00f      	b.n	8001e04 <enqueueTxFrames+0x19c>
            {
                queue_item->frame.data[i] = transfer->payload[data_index];
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	69da      	ldr	r2, [r3, #28]
 8001de8:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001dea:	441a      	add	r2, r3
 8001dec:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001dee:	7811      	ldrb	r1, [r2, #0]
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	4413      	add	r3, r2
 8001df4:	460a      	mov	r2, r1
 8001df6:	721a      	strb	r2, [r3, #8]
            for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 8001df8:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001dfa:	3301      	adds	r3, #1
 8001dfc:	853b      	strh	r3, [r7, #40]	@ 0x28
 8001dfe:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001e00:	3301      	adds	r3, #1
 8001e02:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8001e04:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8001e06:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001e0a:	3b01      	subs	r3, #1
 8001e0c:	429a      	cmp	r2, r3
 8001e0e:	da04      	bge.n	8001e1a <enqueueTxFrames+0x1b2>
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	8c1b      	ldrh	r3, [r3, #32]
 8001e14:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d3e4      	bcc.n	8001de4 <enqueueTxFrames+0x17c>
            }
            // tail byte
            sot_eot = (data_index == transfer->payload_len) ? (uint8_t)0x40 : sot_eot;
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	8c1b      	ldrh	r3, [r3, #32]
 8001e1e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d002      	beq.n	8001e2a <enqueueTxFrames+0x1c2>
 8001e24:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001e28:	e000      	b.n	8001e2c <enqueueTxFrames+0x1c4>
 8001e2a:	2340      	movs	r3, #64	@ 0x40
 8001e2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
            
            i = dlcToDataLength(dataLengthToDlc(i+1))-1;
 8001e30:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001e32:	3301      	adds	r3, #1
 8001e34:	b29b      	uxth	r3, r3
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff fee7 	bl	8001c0a <dataLengthToDlc>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	4618      	mov	r0, r3
 8001e40:	f7ff feb4 	bl	8001bac <dlcToDataLength>
 8001e44:	4603      	mov	r3, r0
 8001e46:	3b01      	subs	r3, #1
 8001e48:	853b      	strh	r3, [r7, #40]	@ 0x28
            queue_item->frame.data[i] = (uint8_t)(sot_eot | ((uint32_t)toggle << 5U) | ((uint32_t)*transfer->inout_transfer_id & 31U));
 8001e4a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001e4e:	015b      	lsls	r3, r3, #5
 8001e50:	b2da      	uxtb	r2, r3
 8001e52:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001e56:	4313      	orrs	r3, r2
 8001e58:	b2d9      	uxtb	r1, r3
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	695b      	ldr	r3, [r3, #20]
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	f003 031f 	and.w	r3, r3, #31
 8001e64:	b2da      	uxtb	r2, r3
 8001e66:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	b2d1      	uxtb	r1, r2
 8001e6c:	69ba      	ldr	r2, [r7, #24]
 8001e6e:	4413      	add	r3, r2
 8001e70:	460a      	mov	r2, r1
 8001e72:	721a      	strb	r2, [r3, #8]
            queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001e7a:	69bb      	ldr	r3, [r7, #24]
 8001e7c:	605a      	str	r2, [r3, #4]
            queue_item->frame.data_len = (uint8_t)(i + 1);
 8001e7e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001e80:	b2db      	uxtb	r3, r3
 8001e82:	3301      	adds	r3, #1
 8001e84:	b2da      	uxtb	r2, r3
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	741a      	strb	r2, [r3, #16]
            queue_item->frame.iface_mask = transfer->iface_mask;
#endif
#if CANARD_ENABLE_CANFD
            queue_item->frame.canfd = transfer->canfd;
#endif
            pushTxQueue(ins, queue_item);
 8001e8a:	69b9      	ldr	r1, [r7, #24]
 8001e8c:	68f8      	ldr	r0, [r7, #12]
 8001e8e:	f000 f81b 	bl	8001ec8 <pushTxQueue>

            result++;
 8001e92:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001e96:	b29b      	uxth	r3, r3
 8001e98:	3301      	adds	r3, #1
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            toggle ^= 1;
 8001e9e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001ea2:	f083 0301 	eor.w	r3, r3, #1
 8001ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            sot_eot = 0;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        while (transfer->payload_len - data_index != 0)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	8c1b      	ldrh	r3, [r3, #32]
 8001eb4:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001eb6:	429a      	cmp	r2, r3
 8001eb8:	f47f af73 	bne.w	8001da2 <enqueueTxFrames+0x13a>
        }
    }

    return result;
 8001ebc:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	3730      	adds	r7, #48	@ 0x30
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}

08001ec8 <pushTxQueue>:

/**
 * Puts frame on on the TX queue. Higher priority placed first
 */
CANARD_INTERNAL void pushTxQueue(CanardInstance* ins, CanardTxQueueItem* item)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
    CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames

    if (ins->tx_queue == NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d103      	bne.n	8001ee2 <pushTxQueue+0x1a>
    {
        ins->tx_queue = item;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	625a      	str	r2, [r3, #36]	@ 0x24
        return;
 8001ee0:	e034      	b.n	8001f4c <pushTxQueue+0x84>
    }

    CanardTxQueueItem* queue = ins->tx_queue;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ee6:	60fb      	str	r3, [r7, #12]
    CanardTxQueueItem* previous = ins->tx_queue;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eec:	60bb      	str	r3, [r7, #8]

    while (queue != NULL)
 8001eee:	e02a      	b.n	8001f46 <pushTxQueue+0x7e>
    {
        if (isPriorityHigher(queue->frame.id, item->frame.id)) // lower number wins
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	685a      	ldr	r2, [r3, #4]
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	4619      	mov	r1, r3
 8001efa:	4610      	mov	r0, r2
 8001efc:	f000 f840 	bl	8001f80 <isPriorityHigher>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d012      	beq.n	8001f2c <pushTxQueue+0x64>
        {
            if (queue == ins->tx_queue)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f0a:	68fa      	ldr	r2, [r7, #12]
 8001f0c:	429a      	cmp	r2, r3
 8001f0e:	d106      	bne.n	8001f1e <pushTxQueue+0x56>
            {
                item->next = queue;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	68fa      	ldr	r2, [r7, #12]
 8001f14:	601a      	str	r2, [r3, #0]
                ins->tx_queue = item;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	683a      	ldr	r2, [r7, #0]
 8001f1a:	625a      	str	r2, [r3, #36]	@ 0x24
            else
            {
                previous->next = item;
                item->next = queue;
            }
            return;
 8001f1c:	e016      	b.n	8001f4c <pushTxQueue+0x84>
                previous->next = item;
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	601a      	str	r2, [r3, #0]
                item->next = queue;
 8001f24:	683b      	ldr	r3, [r7, #0]
 8001f26:	68fa      	ldr	r2, [r7, #12]
 8001f28:	601a      	str	r2, [r3, #0]
            return;
 8001f2a:	e00f      	b.n	8001f4c <pushTxQueue+0x84>
        }
        else
        {
            if (queue->next == NULL)
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d103      	bne.n	8001f3c <pushTxQueue+0x74>
            {
                queue->next = item;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	601a      	str	r2, [r3, #0]
                return;
 8001f3a:	e007      	b.n	8001f4c <pushTxQueue+0x84>
            }
            else
            {
                previous = queue;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	60bb      	str	r3, [r7, #8]
                queue = queue->next;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60fb      	str	r3, [r7, #12]
    while (queue != NULL)
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d1d1      	bne.n	8001ef0 <pushTxQueue+0x28>
            }
        }
    }
}
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <createTxItem>:

/**
 * Creates new tx queue item from allocator
 */
CANARD_INTERNAL CanardTxQueueItem* createTxItem(CanardPoolAllocator* allocator)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b084      	sub	sp, #16
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
    CanardTxQueueItem* item = (CanardTxQueueItem*) allocateBlock(allocator);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f000 fd10 	bl	8002980 <allocateBlock>
 8001f60:	60f8      	str	r0, [r7, #12]
    if (item == NULL)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <createTxItem+0x1a>
    {
        return NULL;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	e005      	b.n	8001f78 <createTxItem+0x26>
    }
    memset(item, 0, sizeof(*item));
 8001f6c:	2214      	movs	r2, #20
 8001f6e:	2100      	movs	r1, #0
 8001f70:	68f8      	ldr	r0, [r7, #12]
 8001f72:	f00d fc97 	bl	800f8a4 <memset>
    return item;
 8001f76:	68fb      	ldr	r3, [r7, #12]
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	3710      	adds	r7, #16
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}

08001f80 <isPriorityHigher>:

/**
 * Returns true if priority of rhs is higher than id
 */
CANARD_INTERNAL bool isPriorityHigher(uint32_t rhs, uint32_t id)
{
 8001f80:	b480      	push	{r7}
 8001f82:	b089      	sub	sp, #36	@ 0x24
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	6078      	str	r0, [r7, #4]
 8001f88:	6039      	str	r1, [r7, #0]
    const uint32_t clean_id = id & CANARD_CAN_EXT_ID_MASK;
 8001f8a:	683b      	ldr	r3, [r7, #0]
 8001f8c:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8001f90:	61fb      	str	r3, [r7, #28]
    const uint32_t rhs_clean_id = rhs & CANARD_CAN_EXT_ID_MASK;
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8001f98:	61bb      	str	r3, [r7, #24]

    /*
     * STD vs EXT - if 11 most significant bits are the same, EXT loses.
     */
    const bool ext = (id & CANARD_CAN_FRAME_EFF) != 0;
 8001f9a:	683b      	ldr	r3, [r7, #0]
 8001f9c:	0fdb      	lsrs	r3, r3, #31
 8001f9e:	75fb      	strb	r3, [r7, #23]
    const bool rhs_ext = (rhs & CANARD_CAN_FRAME_EFF) != 0;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	0fdb      	lsrs	r3, r3, #31
 8001fa4:	75bb      	strb	r3, [r7, #22]
    if (ext != rhs_ext)
 8001fa6:	7dfa      	ldrb	r2, [r7, #23]
 8001fa8:	7dbb      	ldrb	r3, [r7, #22]
 8001faa:	429a      	cmp	r2, r3
 8001fac:	d01d      	beq.n	8001fea <isPriorityHigher+0x6a>
    {
        uint32_t arb11 = ext ? (clean_id >> 18U) : clean_id;
 8001fae:	7dfb      	ldrb	r3, [r7, #23]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d002      	beq.n	8001fba <isPriorityHigher+0x3a>
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	0c9b      	lsrs	r3, r3, #18
 8001fb8:	e000      	b.n	8001fbc <isPriorityHigher+0x3c>
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	613b      	str	r3, [r7, #16]
        uint32_t rhs_arb11 = rhs_ext ? (rhs_clean_id >> 18U) : rhs_clean_id;
 8001fbe:	7dbb      	ldrb	r3, [r7, #22]
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d002      	beq.n	8001fca <isPriorityHigher+0x4a>
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	0c9b      	lsrs	r3, r3, #18
 8001fc8:	e000      	b.n	8001fcc <isPriorityHigher+0x4c>
 8001fca:	69bb      	ldr	r3, [r7, #24]
 8001fcc:	60fb      	str	r3, [r7, #12]
        if (arb11 != rhs_arb11)
 8001fce:	693a      	ldr	r2, [r7, #16]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	429a      	cmp	r2, r3
 8001fd4:	d007      	beq.n	8001fe6 <isPriorityHigher+0x66>
        {
            return arb11 < rhs_arb11;
 8001fd6:	693a      	ldr	r2, [r7, #16]
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	bf34      	ite	cc
 8001fde:	2301      	movcc	r3, #1
 8001fe0:	2300      	movcs	r3, #0
 8001fe2:	b2db      	uxtb	r3, r3
 8001fe4:	e022      	b.n	800202c <isPriorityHigher+0xac>
        }
        else
        {
            return rhs_ext;
 8001fe6:	7dbb      	ldrb	r3, [r7, #22]
 8001fe8:	e020      	b.n	800202c <isPriorityHigher+0xac>
    }

    /*
     * RTR vs Data frame - if frame identifiers and frame types are the same, RTR loses.
     */
    const bool rtr = (id & CANARD_CAN_FRAME_RTR) != 0;
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	bf14      	ite	ne
 8001ff4:	2301      	movne	r3, #1
 8001ff6:	2300      	moveq	r3, #0
 8001ff8:	757b      	strb	r3, [r7, #21]
    const bool rhs_rtr = (rhs & CANARD_CAN_FRAME_RTR) != 0;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002000:	2b00      	cmp	r3, #0
 8002002:	bf14      	ite	ne
 8002004:	2301      	movne	r3, #1
 8002006:	2300      	moveq	r3, #0
 8002008:	753b      	strb	r3, [r7, #20]
    if (clean_id == rhs_clean_id && rtr != rhs_rtr)
 800200a:	69fa      	ldr	r2, [r7, #28]
 800200c:	69bb      	ldr	r3, [r7, #24]
 800200e:	429a      	cmp	r2, r3
 8002010:	d105      	bne.n	800201e <isPriorityHigher+0x9e>
 8002012:	7d7a      	ldrb	r2, [r7, #21]
 8002014:	7d3b      	ldrb	r3, [r7, #20]
 8002016:	429a      	cmp	r2, r3
 8002018:	d001      	beq.n	800201e <isPriorityHigher+0x9e>
    {
        return rhs_rtr;
 800201a:	7d3b      	ldrb	r3, [r7, #20]
 800201c:	e006      	b.n	800202c <isPriorityHigher+0xac>
    }

    /*
     * Plain ID arbitration - greater value loses.
     */
    return clean_id < rhs_clean_id;
 800201e:	69fa      	ldr	r2, [r7, #28]
 8002020:	69bb      	ldr	r3, [r7, #24]
 8002022:	429a      	cmp	r2, r3
 8002024:	bf34      	ite	cc
 8002026:	2301      	movcc	r3, #1
 8002028:	2300      	movcs	r3, #0
 800202a:	b2db      	uxtb	r3, r3
}
 800202c:	4618      	mov	r0, r3
 800202e:	3724      	adds	r7, #36	@ 0x24
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr

08002038 <prepareForNextTransfer>:

/**
 * preps the rx state for the next transfer. does not delete the state
 */
CANARD_INTERNAL void prepareForNextTransfer(CanardRxState* state)
{
 8002038:	b480      	push	{r7}
 800203a:	b083      	sub	sp, #12
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(state->buffer_blocks == CANARD_BUFFER_IDX_NONE);
    state->transfer_id++;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	7ddb      	ldrb	r3, [r3, #23]
 8002044:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8002048:	b2db      	uxtb	r3, r3
 800204a:	3301      	adds	r3, #1
 800204c:	f003 031f 	and.w	r3, r3, #31
 8002050:	b2d9      	uxtb	r1, r3
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	7dd3      	ldrb	r3, [r2, #23]
 8002056:	f361 0386 	bfi	r3, r1, #2, #5
 800205a:	75d3      	strb	r3, [r2, #23]
    state->payload_len = 0;
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	8ad3      	ldrh	r3, [r2, #22]
 8002060:	f36f 0309 	bfc	r3, #0, #10
 8002064:	82d3      	strh	r3, [r2, #22]
    state->next_toggle = 0;
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	7dd3      	ldrb	r3, [r2, #23]
 800206a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800206e:	75d3      	strb	r3, [r2, #23]
}
 8002070:	bf00      	nop
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <extractDataType>:

/**
 * returns data type from id
 */
uint16_t extractDataType(uint32_t id)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	b084      	sub	sp, #16
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
    if (extractTransferType(id) == CanardTransferTypeBroadcast)
 8002084:	6878      	ldr	r0, [r7, #4]
 8002086:	f000 f819 	bl	80020bc <extractTransferType>
 800208a:	4603      	mov	r3, r0
 800208c:	2b02      	cmp	r3, #2
 800208e:	d10e      	bne.n	80020ae <extractDataType+0x32>
    {
        uint16_t dtid = MSG_TYPE_FROM_ID(id);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	0a1b      	lsrs	r3, r3, #8
 8002094:	81fb      	strh	r3, [r7, #14]
        if (SOURCE_ID_FROM_ID(id) == CANARD_BROADCAST_NODE_ID)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	b2db      	uxtb	r3, r3
 800209a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d103      	bne.n	80020aa <extractDataType+0x2e>
        {
            dtid &= (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;
 80020a2:	89fb      	ldrh	r3, [r7, #14]
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	81fb      	strh	r3, [r7, #14]
        }
        return dtid;
 80020aa:	89fb      	ldrh	r3, [r7, #14]
 80020ac:	e002      	b.n	80020b4 <extractDataType+0x38>
    }
    else
    {
        return (uint16_t) SRV_TYPE_FROM_ID(id);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	0c1b      	lsrs	r3, r3, #16
 80020b2:	b2db      	uxtb	r3, r3
    }
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <extractTransferType>:

/**
 * returns transfer type from id
 */
CanardTransferType extractTransferType(uint32_t id)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
    const bool is_service = SERVICE_NOT_MSG_FROM_ID(id);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	09db      	lsrs	r3, r3, #7
 80020c8:	f003 0301 	and.w	r3, r3, #1
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	bf14      	ite	ne
 80020d0:	2301      	movne	r3, #1
 80020d2:	2300      	moveq	r3, #0
 80020d4:	73fb      	strb	r3, [r7, #15]
    if (!is_service)
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	f083 0301 	eor.w	r3, r3, #1
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <extractTransferType+0x2a>
    {
        return CanardTransferTypeBroadcast;
 80020e2:	2302      	movs	r3, #2
 80020e4:	e008      	b.n	80020f8 <extractTransferType+0x3c>
    }
    else if (REQUEST_NOT_RESPONSE_FROM_ID(id) == 1)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	0bdb      	lsrs	r3, r3, #15
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d001      	beq.n	80020f6 <extractTransferType+0x3a>
    {
        return CanardTransferTypeRequest;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e000      	b.n	80020f8 <extractTransferType+0x3c>
    }
    else
    {
        return CanardTransferTypeResponse;
 80020f6:	2300      	movs	r3, #0
    }
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3714      	adds	r7, #20
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <traverseRxStates>:
/**
 * Traverses the list of CanardRxState's and returns a pointer to the CanardRxState
 * with either the Id or a new one at the end
 */
CANARD_INTERNAL CanardRxState* traverseRxStates(CanardInstance* ins, uint32_t transfer_descriptor)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
    CanardRxState* states = ins->rx_states;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	60fb      	str	r3, [r7, #12]

    if (states == NULL) // initialize CanardRxStates
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d110      	bne.n	800213c <traverseRxStates+0x38>
    {
        states = createRxState(&ins->allocator, transfer_descriptor);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	330c      	adds	r3, #12
 800211e:	6839      	ldr	r1, [r7, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f000 f865 	bl	80021f0 <createRxState>
 8002126:	60f8      	str	r0, [r7, #12]

        if(states == NULL)
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d101      	bne.n	8002132 <traverseRxStates+0x2e>
        {
            return NULL;
 800212e:	2300      	movs	r3, #0
 8002130:	e013      	b.n	800215a <traverseRxStates+0x56>
        }

        ins->rx_states = states;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68fa      	ldr	r2, [r7, #12]
 8002136:	621a      	str	r2, [r3, #32]
        return states;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	e00e      	b.n	800215a <traverseRxStates+0x56>
    }

    states = findRxState(ins, transfer_descriptor);
 800213c:	6839      	ldr	r1, [r7, #0]
 800213e:	6878      	ldr	r0, [r7, #4]
 8002140:	f000 f80f 	bl	8002162 <findRxState>
 8002144:	60f8      	str	r0, [r7, #12]
    if (states != NULL)
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d001      	beq.n	8002150 <traverseRxStates+0x4c>
    {
        return states;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	e004      	b.n	800215a <traverseRxStates+0x56>
    }
    else
    {
        return prependRxState(ins, transfer_descriptor);
 8002150:	6839      	ldr	r1, [r7, #0]
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f827 	bl	80021a6 <prependRxState>
 8002158:	4603      	mov	r3, r0
    }
}
 800215a:	4618      	mov	r0, r3
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}

08002162 <findRxState>:

/**
 * returns pointer to the rx state of transfer descriptor or null if not found
 */
CANARD_INTERNAL CanardRxState* findRxState(CanardInstance *ins, uint32_t transfer_descriptor)
{
 8002162:	b580      	push	{r7, lr}
 8002164:	b084      	sub	sp, #16
 8002166:	af00      	add	r7, sp, #0
 8002168:	6078      	str	r0, [r7, #4]
 800216a:	6039      	str	r1, [r7, #0]
    CanardRxState *state = ins->rx_states;
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6a1b      	ldr	r3, [r3, #32]
 8002170:	60fb      	str	r3, [r7, #12]
    while (state != NULL)
 8002172:	e010      	b.n	8002196 <findRxState+0x34>
    {
        if (state->dtid_tt_snid_dnid == transfer_descriptor)
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	691b      	ldr	r3, [r3, #16]
 8002178:	683a      	ldr	r2, [r7, #0]
 800217a:	429a      	cmp	r2, r3
 800217c:	d101      	bne.n	8002182 <findRxState+0x20>
        {
            return state;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	e00d      	b.n	800219e <findRxState+0x3c>
        }
        state = canardRxFromIdx(&ins->allocator, state->next);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	f103 020c 	add.w	r2, r3, #12
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	4619      	mov	r1, r3
 800218e:	4610      	mov	r0, r2
 8002190:	f7fe fdb0 	bl	8000cf4 <canardRxFromIdx>
 8002194:	60f8      	str	r0, [r7, #12]
    while (state != NULL)
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d1eb      	bne.n	8002174 <findRxState+0x12>
    }
    return NULL;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <prependRxState>:

/**
 * prepends rx state to the canard instance rx_states
 */
CANARD_INTERNAL CanardRxState* prependRxState(CanardInstance* ins, uint32_t transfer_descriptor)
{
 80021a6:	b580      	push	{r7, lr}
 80021a8:	b084      	sub	sp, #16
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
 80021ae:	6039      	str	r1, [r7, #0]
    CanardRxState* state = createRxState(&ins->allocator, transfer_descriptor);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	330c      	adds	r3, #12
 80021b4:	6839      	ldr	r1, [r7, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f000 f81a 	bl	80021f0 <createRxState>
 80021bc:	60f8      	str	r0, [r7, #12]

    if(state == NULL)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d101      	bne.n	80021c8 <prependRxState+0x22>
    {
        return NULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	e00f      	b.n	80021e8 <prependRxState+0x42>
    }

    state->next = canardRxToIdx(&ins->allocator, ins->rx_states);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f103 020c 	add.w	r2, r3, #12
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a1b      	ldr	r3, [r3, #32]
 80021d2:	4619      	mov	r1, r3
 80021d4:	4610      	mov	r0, r2
 80021d6:	f7fe fd99 	bl	8000d0c <canardRxToIdx>
 80021da:	4602      	mov	r2, r0
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	601a      	str	r2, [r3, #0]
    ins->rx_states = state;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	68fa      	ldr	r2, [r7, #12]
 80021e4:	621a      	str	r2, [r3, #32]
    return state;
 80021e6:	68fb      	ldr	r3, [r7, #12]
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <createRxState>:

CANARD_INTERNAL CanardRxState* createRxState(CanardPoolAllocator* allocator, uint32_t transfer_descriptor)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08c      	sub	sp, #48	@ 0x30
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
    CanardRxState init = {
 80021fa:	f107 0308 	add.w	r3, r7, #8
 80021fe:	2220      	movs	r2, #32
 8002200:	2100      	movs	r1, #0
 8002202:	4618      	mov	r0, r3
 8002204:	f00d fb4e 	bl	800f8a4 <memset>
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	61bb      	str	r3, [r7, #24]
        .next = CANARD_BUFFER_IDX_NONE,
        .buffer_blocks = CANARD_BUFFER_IDX_NONE,
        .dtid_tt_snid_dnid = transfer_descriptor
    };

    CanardRxState* state = (CanardRxState*) allocateBlock(allocator);
 800220c:	6878      	ldr	r0, [r7, #4]
 800220e:	f000 fbb7 	bl	8002980 <allocateBlock>
 8002212:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (state == NULL)
 8002214:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002216:	2b00      	cmp	r3, #0
 8002218:	d101      	bne.n	800221e <createRxState+0x2e>
    {
        return NULL;
 800221a:	2300      	movs	r3, #0
 800221c:	e007      	b.n	800222e <createRxState+0x3e>
    }
    memcpy(state, &init, sizeof(*state));
 800221e:	f107 0308 	add.w	r3, r7, #8
 8002222:	2220      	movs	r2, #32
 8002224:	4619      	mov	r1, r3
 8002226:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8002228:	f00d fbdb 	bl	800f9e2 <memcpy>

    return state;
 800222c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800222e:	4618      	mov	r0, r3
 8002230:	3730      	adds	r7, #48	@ 0x30
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}

08002236 <releaseStatePayload>:

CANARD_INTERNAL uint64_t releaseStatePayload(CanardInstance* ins, CanardRxState* rxstate)
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b084      	sub	sp, #16
 800223a:	af00      	add	r7, sp, #0
 800223c:	6078      	str	r0, [r7, #4]
 800223e:	6039      	str	r1, [r7, #0]
    while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 8002240:	e01b      	b.n	800227a <releaseStatePayload+0x44>
    {
        CanardBufferBlock* block = canardBufferFromIdx(&ins->allocator, rxstate->buffer_blocks);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	f103 020c 	add.w	r2, r3, #12
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	4619      	mov	r1, r3
 800224e:	4610      	mov	r0, r2
 8002250:	f7fe fd38 	bl	8000cc4 <canardBufferFromIdx>
 8002254:	60f8      	str	r0, [r7, #12]
        CanardBufferBlock* const temp = block->next;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	60bb      	str	r3, [r7, #8]
        freeBlock(&ins->allocator, block);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	330c      	adds	r3, #12
 8002260:	68f9      	ldr	r1, [r7, #12]
 8002262:	4618      	mov	r0, r3
 8002264:	f000 fbb5 	bl	80029d2 <freeBlock>
        rxstate->buffer_blocks = canardBufferToIdx(&ins->allocator, temp);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	330c      	adds	r3, #12
 800226c:	68b9      	ldr	r1, [r7, #8]
 800226e:	4618      	mov	r0, r3
 8002270:	f7fe fd34 	bl	8000cdc <canardBufferToIdx>
 8002274:	4602      	mov	r2, r0
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	605a      	str	r2, [r3, #4]
    while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	685b      	ldr	r3, [r3, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d1df      	bne.n	8002242 <releaseStatePayload+0xc>
    }
    rxstate->payload_len = 0;
 8002282:	683a      	ldr	r2, [r7, #0]
 8002284:	8ad3      	ldrh	r3, [r2, #22]
 8002286:	f36f 0309 	bfc	r3, #0, #10
 800228a:	82d3      	strh	r3, [r2, #22]
    return CANARD_OK;
 800228c:	f04f 0200 	mov.w	r2, #0
 8002290:	f04f 0300 	mov.w	r3, #0
}
 8002294:	4610      	mov	r0, r2
 8002296:	4619      	mov	r1, r3
 8002298:	3710      	adds	r7, #16
 800229a:	46bd      	mov	sp, r7
 800229c:	bd80      	pop	{r7, pc}
	...

080022a0 <bufferBlockPushBytes>:
 */
CANARD_INTERNAL int16_t bufferBlockPushBytes(CanardPoolAllocator* allocator,
                                             CanardRxState* state,
                                             const uint8_t* data,
                                             uint8_t data_len)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b08a      	sub	sp, #40	@ 0x28
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
 80022ac:	70fb      	strb	r3, [r7, #3]
    uint16_t data_index = 0;
 80022ae:	2300      	movs	r3, #0
 80022b0:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // if head is not full, add data to head
    if ((CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE - state->payload_len) > 0)
 80022b2:	68bb      	ldr	r3, [r7, #8]
 80022b4:	8adb      	ldrh	r3, [r3, #22]
 80022b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	2b05      	cmp	r3, #5
 80022be:	d036      	beq.n	800232e <bufferBlockPushBytes+0x8e>
    {
        for (uint16_t i = (uint16_t)state->payload_len;
 80022c0:	68bb      	ldr	r3, [r7, #8]
 80022c2:	8adb      	ldrh	r3, [r3, #22]
 80022c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80022c8:	b29b      	uxth	r3, r3
 80022ca:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80022cc:	e00e      	b.n	80022ec <bufferBlockPushBytes+0x4c>
             i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
             i++, data_index++)
        {
            state->buffer_head[i] = data[data_index];
 80022ce:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	441a      	add	r2, r3
 80022d4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80022d6:	7811      	ldrb	r1, [r2, #0]
 80022d8:	68ba      	ldr	r2, [r7, #8]
 80022da:	4413      	add	r3, r2
 80022dc:	460a      	mov	r2, r1
 80022de:	76da      	strb	r2, [r3, #27]
             i++, data_index++)
 80022e0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80022e2:	3301      	adds	r3, #1
 80022e4:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80022e6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80022e8:	3301      	adds	r3, #1
 80022ea:	84fb      	strh	r3, [r7, #38]	@ 0x26
             i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
 80022ec:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 80022ee:	2b04      	cmp	r3, #4
 80022f0:	d804      	bhi.n	80022fc <bufferBlockPushBytes+0x5c>
 80022f2:	78fb      	ldrb	r3, [r7, #3]
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d3e8      	bcc.n	80022ce <bufferBlockPushBytes+0x2e>
        }
        if (data_index >= data_len)
 80022fc:	78fb      	ldrb	r3, [r7, #3]
 80022fe:	b29b      	uxth	r3, r3
 8002300:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002302:	429a      	cmp	r2, r3
 8002304:	d313      	bcc.n	800232e <bufferBlockPushBytes+0x8e>
        {
            state->payload_len =
                (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 8002306:	68bb      	ldr	r3, [r7, #8]
 8002308:	8adb      	ldrh	r3, [r3, #22]
 800230a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800230e:	b29b      	uxth	r3, r3
 8002310:	461a      	mov	r2, r3
 8002312:	78fb      	ldrb	r3, [r7, #3]
 8002314:	b29b      	uxth	r3, r3
 8002316:	4413      	add	r3, r2
 8002318:	b29b      	uxth	r3, r3
 800231a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800231e:	b299      	uxth	r1, r3
            state->payload_len =
 8002320:	68ba      	ldr	r2, [r7, #8]
 8002322:	8ad3      	ldrh	r3, [r2, #22]
 8002324:	f361 0309 	bfi	r3, r1, #0, #10
 8002328:	82d3      	strh	r3, [r2, #22]
            return 1;
 800232a:	2301      	movs	r3, #1
 800232c:	e0ae      	b.n	800248c <bufferBlockPushBytes+0x1ec>
        }
    } // head is full.

    uint16_t index_at_nth_block =
        (uint16_t)(((state->payload_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) % CANARD_BUFFER_BLOCK_DATA_SIZE);
 800232e:	68bb      	ldr	r3, [r7, #8]
 8002330:	8adb      	ldrh	r3, [r3, #22]
 8002332:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002336:	b29b      	uxth	r3, r3
 8002338:	1f5a      	subs	r2, r3, #5
 800233a:	0893      	lsrs	r3, r2, #2
 800233c:	4955      	ldr	r1, [pc, #340]	@ (8002494 <bufferBlockPushBytes+0x1f4>)
 800233e:	fba1 3103 	umull	r3, r1, r1, r3
 8002342:	460b      	mov	r3, r1
 8002344:	00db      	lsls	r3, r3, #3
 8002346:	1a5b      	subs	r3, r3, r1
 8002348:	009b      	lsls	r3, r3, #2
 800234a:	1ad3      	subs	r3, r2, r3
    uint16_t index_at_nth_block =
 800234c:	847b      	strh	r3, [r7, #34]	@ 0x22

    // get to current block
    CanardBufferBlock* block = NULL;
 800234e:	2300      	movs	r3, #0
 8002350:	61fb      	str	r3, [r7, #28]

    // buffer blocks uninitialized
    if (state->buffer_blocks == CANARD_BUFFER_IDX_NONE)
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	685b      	ldr	r3, [r3, #4]
 8002356:	2b00      	cmp	r3, #0
 8002358:	d113      	bne.n	8002382 <bufferBlockPushBytes+0xe2>
    {
        block = createBufferBlock(allocator);
 800235a:	68f8      	ldr	r0, [r7, #12]
 800235c:	f000 f89c 	bl	8002498 <createBufferBlock>
 8002360:	61f8      	str	r0, [r7, #28]
        state->buffer_blocks = canardBufferToIdx(allocator, block);
 8002362:	69f9      	ldr	r1, [r7, #28]
 8002364:	68f8      	ldr	r0, [r7, #12]
 8002366:	f7fe fcb9 	bl	8000cdc <canardBufferToIdx>
 800236a:	4602      	mov	r2, r0
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	605a      	str	r2, [r3, #4]
        if (block == NULL)
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	2b00      	cmp	r3, #0
 8002374:	d102      	bne.n	800237c <bufferBlockPushBytes+0xdc>
        {
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8002376:	f06f 0302 	mvn.w	r3, #2
 800237a:	e087      	b.n	800248c <bufferBlockPushBytes+0x1ec>
        }

        index_at_nth_block = 0;
 800237c:	2300      	movs	r3, #0
 800237e:	847b      	strh	r3, [r7, #34]	@ 0x22
 8002380:	e06c      	b.n	800245c <bufferBlockPushBytes+0x1bc>
    }
    else
    {
        uint16_t nth_block = 1;
 8002382:	2301      	movs	r3, #1
 8002384:	837b      	strh	r3, [r7, #26]

        // get to block
        block = canardBufferFromIdx(allocator, state->buffer_blocks);
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	4619      	mov	r1, r3
 800238c:	68f8      	ldr	r0, [r7, #12]
 800238e:	f7fe fc99 	bl	8000cc4 <canardBufferFromIdx>
 8002392:	61f8      	str	r0, [r7, #28]
        while (block->next != NULL)
 8002394:	e005      	b.n	80023a2 <bufferBlockPushBytes+0x102>
        {
            nth_block++;
 8002396:	8b7b      	ldrh	r3, [r7, #26]
 8002398:	3301      	adds	r3, #1
 800239a:	837b      	strh	r3, [r7, #26]
            block = block->next;
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	61fb      	str	r3, [r7, #28]
        while (block->next != NULL)
 80023a2:	69fb      	ldr	r3, [r7, #28]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d1f5      	bne.n	8002396 <bufferBlockPushBytes+0xf6>
        }

        const uint16_t num_buffer_blocks =
            (uint16_t) (((((uint32_t)state->payload_len + data_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) /
 80023aa:	68bb      	ldr	r3, [r7, #8]
 80023ac:	8adb      	ldrh	r3, [r3, #22]
 80023ae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80023b2:	b29b      	uxth	r3, r3
 80023b4:	461a      	mov	r2, r3
 80023b6:	78fb      	ldrb	r3, [r7, #3]
 80023b8:	4413      	add	r3, r2
 80023ba:	3b05      	subs	r3, #5
 80023bc:	089b      	lsrs	r3, r3, #2
 80023be:	4a35      	ldr	r2, [pc, #212]	@ (8002494 <bufferBlockPushBytes+0x1f4>)
 80023c0:	fba2 2303 	umull	r2, r3, r2, r3
 80023c4:	b29b      	uxth	r3, r3
        const uint16_t num_buffer_blocks =
 80023c6:	3301      	adds	r3, #1
 80023c8:	82fb      	strh	r3, [r7, #22]
                         CANARD_BUFFER_BLOCK_DATA_SIZE) + 1U);

        if (num_buffer_blocks > nth_block && index_at_nth_block == 0)
 80023ca:	8afa      	ldrh	r2, [r7, #22]
 80023cc:	8b7b      	ldrh	r3, [r7, #26]
 80023ce:	429a      	cmp	r2, r3
 80023d0:	d944      	bls.n	800245c <bufferBlockPushBytes+0x1bc>
 80023d2:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d141      	bne.n	800245c <bufferBlockPushBytes+0x1bc>
        {
            block->next = createBufferBlock(allocator);
 80023d8:	68f8      	ldr	r0, [r7, #12]
 80023da:	f000 f85d 	bl	8002498 <createBufferBlock>
 80023de:	4602      	mov	r2, r0
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	601a      	str	r2, [r3, #0]
            if (block->next == NULL)
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d102      	bne.n	80023f2 <bufferBlockPushBytes+0x152>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 80023ec:	f06f 0302 	mvn.w	r3, #2
 80023f0:	e04c      	b.n	800248c <bufferBlockPushBytes+0x1ec>
            }
            block = block->next;
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	61fb      	str	r3, [r7, #28]
        }
    }

    // add data to current block until it becomes full, add new block if necessary
    while (data_index < data_len)
 80023f8:	e030      	b.n	800245c <bufferBlockPushBytes+0x1bc>
    {
        for (uint16_t i = index_at_nth_block;
 80023fa:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 80023fc:	833b      	strh	r3, [r7, #24]
 80023fe:	e00e      	b.n	800241e <bufferBlockPushBytes+0x17e>
             i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
             i++, data_index++)
        {
            block->data[i] = data[data_index];
 8002400:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	441a      	add	r2, r3
 8002406:	8b3b      	ldrh	r3, [r7, #24]
 8002408:	7811      	ldrb	r1, [r2, #0]
 800240a:	69fa      	ldr	r2, [r7, #28]
 800240c:	4413      	add	r3, r2
 800240e:	460a      	mov	r2, r1
 8002410:	711a      	strb	r2, [r3, #4]
             i++, data_index++)
 8002412:	8b3b      	ldrh	r3, [r7, #24]
 8002414:	3301      	adds	r3, #1
 8002416:	833b      	strh	r3, [r7, #24]
 8002418:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800241a:	3301      	adds	r3, #1
 800241c:	84fb      	strh	r3, [r7, #38]	@ 0x26
             i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
 800241e:	8b3b      	ldrh	r3, [r7, #24]
 8002420:	2b1b      	cmp	r3, #27
 8002422:	d804      	bhi.n	800242e <bufferBlockPushBytes+0x18e>
 8002424:	78fb      	ldrb	r3, [r7, #3]
 8002426:	b29b      	uxth	r3, r3
 8002428:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800242a:	429a      	cmp	r2, r3
 800242c:	d3e8      	bcc.n	8002400 <bufferBlockPushBytes+0x160>
        }

        if (data_index < data_len)
 800242e:	78fb      	ldrb	r3, [r7, #3]
 8002430:	b29b      	uxth	r3, r3
 8002432:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002434:	429a      	cmp	r2, r3
 8002436:	d211      	bcs.n	800245c <bufferBlockPushBytes+0x1bc>
        {
            block->next = createBufferBlock(allocator);
 8002438:	68f8      	ldr	r0, [r7, #12]
 800243a:	f000 f82d 	bl	8002498 <createBufferBlock>
 800243e:	4602      	mov	r2, r0
 8002440:	69fb      	ldr	r3, [r7, #28]
 8002442:	601a      	str	r2, [r3, #0]
            if (block->next == NULL)
 8002444:	69fb      	ldr	r3, [r7, #28]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d102      	bne.n	8002452 <bufferBlockPushBytes+0x1b2>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 800244c:	f06f 0302 	mvn.w	r3, #2
 8002450:	e01c      	b.n	800248c <bufferBlockPushBytes+0x1ec>
            }
            block = block->next;
 8002452:	69fb      	ldr	r3, [r7, #28]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	61fb      	str	r3, [r7, #28]
            index_at_nth_block = 0;
 8002458:	2300      	movs	r3, #0
 800245a:	847b      	strh	r3, [r7, #34]	@ 0x22
    while (data_index < data_len)
 800245c:	78fb      	ldrb	r3, [r7, #3]
 800245e:	b29b      	uxth	r3, r3
 8002460:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002462:	429a      	cmp	r2, r3
 8002464:	d3c9      	bcc.n	80023fa <bufferBlockPushBytes+0x15a>
        }
    }

    state->payload_len = (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 8002466:	68bb      	ldr	r3, [r7, #8]
 8002468:	8adb      	ldrh	r3, [r3, #22]
 800246a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800246e:	b29b      	uxth	r3, r3
 8002470:	461a      	mov	r2, r3
 8002472:	78fb      	ldrb	r3, [r7, #3]
 8002474:	b29b      	uxth	r3, r3
 8002476:	4413      	add	r3, r2
 8002478:	b29b      	uxth	r3, r3
 800247a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800247e:	b299      	uxth	r1, r3
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	8ad3      	ldrh	r3, [r2, #22]
 8002484:	f361 0309 	bfi	r3, r1, #0, #10
 8002488:	82d3      	strh	r3, [r2, #22]

    return 1;
 800248a:	2301      	movs	r3, #1
}
 800248c:	4618      	mov	r0, r3
 800248e:	3728      	adds	r7, #40	@ 0x28
 8002490:	46bd      	mov	sp, r7
 8002492:	bd80      	pop	{r7, pc}
 8002494:	24924925 	.word	0x24924925

08002498 <createBufferBlock>:

CANARD_INTERNAL CanardBufferBlock* createBufferBlock(CanardPoolAllocator* allocator)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
    CanardBufferBlock* block = (CanardBufferBlock*) allocateBlock(allocator);
 80024a0:	6878      	ldr	r0, [r7, #4]
 80024a2:	f000 fa6d 	bl	8002980 <allocateBlock>
 80024a6:	60f8      	str	r0, [r7, #12]
    if (block == NULL)
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d101      	bne.n	80024b2 <createBufferBlock+0x1a>
    {
        return NULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	e003      	b.n	80024ba <createBufferBlock+0x22>
    }
    block->next = NULL;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	2200      	movs	r2, #0
 80024b6:	601a      	str	r2, [r3, #0]
    return block;
 80024b8:	68fb      	ldr	r3, [r7, #12]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3710      	adds	r7, #16
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <copyBitArray>:
/**
 * Bit array copy routine, originally developed by Ben Dyer for Libuavcan. Thanks Ben.
 */
void copyBitArray(const uint8_t* src, uint32_t src_offset, uint32_t src_len,
                        uint8_t* dst, uint32_t dst_offset)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b089      	sub	sp, #36	@ 0x24
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	60f8      	str	r0, [r7, #12]
 80024ca:	60b9      	str	r1, [r7, #8]
 80024cc:	607a      	str	r2, [r7, #4]
 80024ce:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(src_len > 0U);

    // Normalizing inputs
    src += src_offset / 8U;
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	08db      	lsrs	r3, r3, #3
 80024d4:	68fa      	ldr	r2, [r7, #12]
 80024d6:	4413      	add	r3, r2
 80024d8:	60fb      	str	r3, [r7, #12]
    dst += dst_offset / 8U;
 80024da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024dc:	08db      	lsrs	r3, r3, #3
 80024de:	683a      	ldr	r2, [r7, #0]
 80024e0:	4413      	add	r3, r2
 80024e2:	603b      	str	r3, [r7, #0]

    src_offset %= 8U;
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	f003 0307 	and.w	r3, r3, #7
 80024ea:	60bb      	str	r3, [r7, #8]
    dst_offset %= 8U;
 80024ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	62bb      	str	r3, [r7, #40]	@ 0x28

    const size_t last_bit = src_offset + src_len;
 80024f4:	68ba      	ldr	r2, [r7, #8]
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4413      	add	r3, r2
 80024fa:	61fb      	str	r3, [r7, #28]
    while (last_bit - src_offset)
 80024fc:	e04d      	b.n	800259a <copyBitArray+0xd8>
    {
        const uint8_t src_bit_offset = (uint8_t)(src_offset % 8U);
 80024fe:	68bb      	ldr	r3, [r7, #8]
 8002500:	b2db      	uxtb	r3, r3
 8002502:	f003 0307 	and.w	r3, r3, #7
 8002506:	76fb      	strb	r3, [r7, #27]
        const uint8_t dst_bit_offset = (uint8_t)(dst_offset % 8U);
 8002508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800250a:	b2db      	uxtb	r3, r3
 800250c:	f003 0307 	and.w	r3, r3, #7
 8002510:	76bb      	strb	r3, [r7, #26]

        const uint8_t max_offset = MAX(src_bit_offset, dst_bit_offset);
 8002512:	7eba      	ldrb	r2, [r7, #26]
 8002514:	7efb      	ldrb	r3, [r7, #27]
 8002516:	4293      	cmp	r3, r2
 8002518:	bf38      	it	cc
 800251a:	4613      	movcc	r3, r2
 800251c:	767b      	strb	r3, [r7, #25]
        const uint32_t copy_bits = (uint32_t)MIN(last_bit - src_offset, 8U - max_offset);
 800251e:	7e7b      	ldrb	r3, [r7, #25]
 8002520:	f1c3 0208 	rsb	r2, r3, #8
 8002524:	69f9      	ldr	r1, [r7, #28]
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	1acb      	subs	r3, r1, r3
 800252a:	4293      	cmp	r3, r2
 800252c:	bf28      	it	cs
 800252e:	4613      	movcs	r3, r2
 8002530:	617b      	str	r3, [r7, #20]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset)&0xFF;

        dst[dst_offset / 8U] =
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask))&0xFF;
#else
        const uint8_t write_mask = (uint8_t)((uint8_t)(0xFF00U >> copy_bits) >> dst_bit_offset);
 8002532:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	fa22 f303 	lsr.w	r3, r2, r3
 800253c:	b2db      	uxtb	r3, r3
 800253e:	461a      	mov	r2, r3
 8002540:	7ebb      	ldrb	r3, [r7, #26]
 8002542:	fa42 f303 	asr.w	r3, r2, r3
 8002546:	74fb      	strb	r3, [r7, #19]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset);
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	08db      	lsrs	r3, r3, #3
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	4413      	add	r3, r2
 8002550:	781b      	ldrb	r3, [r3, #0]
 8002552:	461a      	mov	r2, r3
 8002554:	7efb      	ldrb	r3, [r7, #27]
 8002556:	409a      	lsls	r2, r3
 8002558:	7ebb      	ldrb	r3, [r7, #26]
 800255a:	fa22 f303 	lsr.w	r3, r2, r3
 800255e:	74bb      	strb	r3, [r7, #18]

        dst[dst_offset / 8U] =
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 8002560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002562:	08db      	lsrs	r3, r3, #3
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	4413      	add	r3, r2
 8002568:	781a      	ldrb	r2, [r3, #0]
 800256a:	7cfb      	ldrb	r3, [r7, #19]
 800256c:	43db      	mvns	r3, r3
 800256e:	b2db      	uxtb	r3, r3
 8002570:	4013      	ands	r3, r2
 8002572:	b2d9      	uxtb	r1, r3
 8002574:	7cba      	ldrb	r2, [r7, #18]
 8002576:	7cfb      	ldrb	r3, [r7, #19]
 8002578:	4013      	ands	r3, r2
 800257a:	b2da      	uxtb	r2, r3
        dst[dst_offset / 8U] =
 800257c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800257e:	08db      	lsrs	r3, r3, #3
 8002580:	6838      	ldr	r0, [r7, #0]
 8002582:	4403      	add	r3, r0
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 8002584:	430a      	orrs	r2, r1
 8002586:	b2d2      	uxtb	r2, r2
        dst[dst_offset / 8U] =
 8002588:	701a      	strb	r2, [r3, #0]
#endif

        src_offset += copy_bits;
 800258a:	68ba      	ldr	r2, [r7, #8]
 800258c:	697b      	ldr	r3, [r7, #20]
 800258e:	4413      	add	r3, r2
 8002590:	60bb      	str	r3, [r7, #8]
        dst_offset += copy_bits;
 8002592:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	4413      	add	r3, r2
 8002598:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (last_bit - src_offset)
 800259a:	69fa      	ldr	r2, [r7, #28]
 800259c:	68bb      	ldr	r3, [r7, #8]
 800259e:	429a      	cmp	r2, r3
 80025a0:	d1ad      	bne.n	80024fe <copyBitArray+0x3c>
    }
}
 80025a2:	bf00      	nop
 80025a4:	bf00      	nop
 80025a6:	3724      	adds	r7, #36	@ 0x24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <descatterTransferPayload>:

CANARD_INTERNAL int16_t descatterTransferPayload(const CanardRxTransfer* transfer,
                                                 uint32_t bit_offset,
                                                 uint8_t bit_length,
                                                 void* output)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b090      	sub	sp, #64	@ 0x40
 80025b4:	af02      	add	r7, sp, #8
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	603b      	str	r3, [r7, #0]
 80025bc:	4613      	mov	r3, r2
 80025be:	71fb      	strb	r3, [r7, #7]
    CANARD_ASSERT(transfer != 0);

    if (bit_offset >= transfer->payload_len * 8)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	8a9b      	ldrh	r3, [r3, #20]
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	461a      	mov	r2, r3
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d301      	bcc.n	80025d2 <descatterTransferPayload+0x22>
    {
        return 0;       // Out of range, reading zero bits
 80025ce:	2300      	movs	r3, #0
 80025d0:	e0df      	b.n	8002792 <descatterTransferPayload+0x1e2>
    }

    if (bit_offset + bit_length > transfer->payload_len * 8)
 80025d2:	79fa      	ldrb	r2, [r7, #7]
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	4413      	add	r3, r2
 80025d8:	68fa      	ldr	r2, [r7, #12]
 80025da:	8a92      	ldrh	r2, [r2, #20]
 80025dc:	00d2      	lsls	r2, r2, #3
 80025de:	4293      	cmp	r3, r2
 80025e0:	d908      	bls.n	80025f4 <descatterTransferPayload+0x44>
    {
        bit_length = (uint8_t)(transfer->payload_len * 8U - bit_offset);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8a9b      	ldrh	r3, [r3, #20]
 80025e6:	b2db      	uxtb	r3, r3
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	b2da      	uxtb	r2, r3
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	b2db      	uxtb	r3, r3
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	71fb      	strb	r3, [r7, #7]
    }

    CANARD_ASSERT(bit_length > 0);

    if ((transfer->payload_middle != NULL) || (transfer->payload_tail != NULL)) // Multi frame
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d104      	bne.n	8002606 <descatterTransferPayload+0x56>
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	2b00      	cmp	r3, #0
 8002602:	f000 80b9 	beq.w	8002778 <descatterTransferPayload+0x1c8>
        /*
         * This part is hideously complicated and probably should be redesigned.
         * The objective here is to copy the requested number of bits from scattered storage into the temporary
         * local storage. We go through great pains to ensure that all corner cases are handled correctly.
         */
        uint32_t input_bit_offset = bit_offset;
 8002606:	68bb      	ldr	r3, [r7, #8]
 8002608:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t output_bit_offset = 0;
 800260a:	2300      	movs	r3, #0
 800260c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        uint8_t remaining_bit_length = bit_length;
 8002610:	79fb      	ldrb	r3, [r7, #7]
 8002612:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

        // Reading head
        if (input_bit_offset < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8)
 8002616:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002618:	2b27      	cmp	r3, #39	@ 0x27
 800261a:	d82d      	bhi.n	8002678 <descatterTransferPayload+0xc8>
        {
            const uint8_t amount = (uint8_t)MIN(remaining_bit_length,
 800261c:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002622:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 8002626:	429a      	cmp	r2, r3
 8002628:	d305      	bcc.n	8002636 <descatterTransferPayload+0x86>
 800262a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800262c:	b2db      	uxtb	r3, r3
 800262e:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 8002632:	b2db      	uxtb	r3, r3
 8002634:	e001      	b.n	800263a <descatterTransferPayload+0x8a>
 8002636:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800263a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                                                CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U - input_bit_offset);

            copyBitArray(&transfer->payload_head[0], input_bit_offset, amount, (uint8_t*) output, 0);
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	6898      	ldr	r0, [r3, #8]
 8002642:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 8002646:	2300      	movs	r3, #0
 8002648:	9300      	str	r3, [sp, #0]
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800264e:	f7ff ff38 	bl	80024c2 <copyBitArray>

            input_bit_offset += amount;
 8002652:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002656:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002658:	4413      	add	r3, r2
 800265a:	637b      	str	r3, [r7, #52]	@ 0x34
            output_bit_offset = (uint8_t)(output_bit_offset + amount);
 800265c:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8002660:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002664:	4413      	add	r3, r2
 8002666:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 800266a:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800266e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
        }

        // Reading middle
        uint32_t remaining_bits = (uint32_t)(transfer->payload_len * 8U - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	8a9b      	ldrh	r3, [r3, #20]
 800267c:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8002680:	3b05      	subs	r3, #5
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t block_bit_offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U;
 8002686:	2328      	movs	r3, #40	@ 0x28
 8002688:	62bb      	str	r3, [r7, #40]	@ 0x28
        const CanardBufferBlock* block = transfer->payload_middle;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	68db      	ldr	r3, [r3, #12]
 800268e:	627b      	str	r3, [r7, #36]	@ 0x24

        while ((block != NULL) && (remaining_bit_length > 0))
 8002690:	e044      	b.n	800271c <descatterTransferPayload+0x16c>
        {
            CANARD_ASSERT(remaining_bits > 0);
            const uint32_t block_end_bit_offset = block_bit_offset + MIN(CANARD_BUFFER_BLOCK_DATA_SIZE * 8,
 8002692:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002694:	2be0      	cmp	r3, #224	@ 0xe0
 8002696:	bf28      	it	cs
 8002698:	23e0      	movcs	r3, #224	@ 0xe0
 800269a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800269c:	4413      	add	r3, r2
 800269e:	61fb      	str	r3, [r7, #28]
                                                                         remaining_bits);

            // Perform copy if we've reached the requested offset, otherwise jump over this block and try next
            if (block_end_bit_offset > input_bit_offset)
 80026a0:	69fa      	ldr	r2, [r7, #28]
 80026a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026a4:	429a      	cmp	r2, r3
 80026a6:	d92e      	bls.n	8002706 <descatterTransferPayload+0x156>
            {
                const uint8_t amount = (uint8_t) MIN(remaining_bit_length, block_end_bit_offset - input_bit_offset);
 80026a8:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80026ac:	69f9      	ldr	r1, [r7, #28]
 80026ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026b0:	1acb      	subs	r3, r1, r3
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d306      	bcc.n	80026c4 <descatterTransferPayload+0x114>
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	b2da      	uxtb	r2, r3
 80026ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80026bc:	b2db      	uxtb	r3, r3
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	e001      	b.n	80026c8 <descatterTransferPayload+0x118>
 80026c4:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80026c8:	76fb      	strb	r3, [r7, #27]

                CANARD_ASSERT(input_bit_offset >= block_bit_offset);
                const uint32_t bit_offset_within_block = input_bit_offset - block_bit_offset;
 80026ca:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80026cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026ce:	1ad3      	subs	r3, r2, r3
 80026d0:	617b      	str	r3, [r7, #20]

                copyBitArray(&block->data[0], bit_offset_within_block, amount, (uint8_t*) output, output_bit_offset);
 80026d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026d4:	1d18      	adds	r0, r3, #4
 80026d6:	7efa      	ldrb	r2, [r7, #27]
 80026d8:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80026dc:	9300      	str	r3, [sp, #0]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	6979      	ldr	r1, [r7, #20]
 80026e2:	f7ff feee 	bl	80024c2 <copyBitArray>

                input_bit_offset += amount;
 80026e6:	7efb      	ldrb	r3, [r7, #27]
 80026e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80026ea:	4413      	add	r3, r2
 80026ec:	637b      	str	r3, [r7, #52]	@ 0x34
                output_bit_offset = (uint8_t)(output_bit_offset + amount);
 80026ee:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80026f2:	7efb      	ldrb	r3, [r7, #27]
 80026f4:	4413      	add	r3, r2
 80026f6:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 80026fa:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80026fe:	7efb      	ldrb	r3, [r7, #27]
 8002700:	1ad3      	subs	r3, r2, r3
 8002702:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
            }

            CANARD_ASSERT(block_end_bit_offset > block_bit_offset);
            remaining_bits -= block_end_bit_offset - block_bit_offset;
 8002706:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002708:	69fb      	ldr	r3, [r7, #28]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800270e:	4413      	add	r3, r2
 8002710:	62fb      	str	r3, [r7, #44]	@ 0x2c
            block_bit_offset = block_end_bit_offset;
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	62bb      	str	r3, [r7, #40]	@ 0x28
            block = block->next;
 8002716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	627b      	str	r3, [r7, #36]	@ 0x24
        while ((block != NULL) && (remaining_bit_length > 0))
 800271c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <descatterTransferPayload+0x17a>
 8002722:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002726:	2b00      	cmp	r3, #0
 8002728:	d1b3      	bne.n	8002692 <descatterTransferPayload+0xe2>
        }

        CANARD_ASSERT(remaining_bit_length <= remaining_bits);

        // Reading tail
        if ((transfer->payload_tail != NULL) && (remaining_bit_length > 0))
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d02c      	beq.n	800278c <descatterTransferPayload+0x1dc>
 8002732:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002736:	2b00      	cmp	r3, #0
 8002738:	d028      	beq.n	800278c <descatterTransferPayload+0x1dc>
        {
            CANARD_ASSERT(input_bit_offset >= block_bit_offset);
            const uint32_t offset = input_bit_offset - block_bit_offset;
 800273a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800273c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	613b      	str	r3, [r7, #16]

            copyBitArray(&transfer->payload_tail[0], offset, remaining_bit_length, (uint8_t*) output,
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6918      	ldr	r0, [r3, #16]
 8002746:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800274a:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800274e:	9300      	str	r3, [sp, #0]
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	6939      	ldr	r1, [r7, #16]
 8002754:	f7ff feb5 	bl	80024c2 <copyBitArray>
                         output_bit_offset);

            input_bit_offset += remaining_bit_length;
 8002758:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800275c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800275e:	4413      	add	r3, r2
 8002760:	637b      	str	r3, [r7, #52]	@ 0x34
            output_bit_offset = (uint8_t)(output_bit_offset + remaining_bit_length);
 8002762:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8002766:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800276a:	4413      	add	r3, r2
 800276c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            remaining_bit_length = 0;
 8002770:	2300      	movs	r3, #0
 8002772:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    {
 8002776:	e009      	b.n	800278c <descatterTransferPayload+0x1dc>
        CANARD_ASSERT(output_bit_offset <= 64);
        CANARD_ASSERT(remaining_bit_length == 0);
    }
    else                                                                    // Single frame
    {
        copyBitArray(&transfer->payload_head[0], bit_offset, bit_length, (uint8_t*) output, 0);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	6898      	ldr	r0, [r3, #8]
 800277c:	79fa      	ldrb	r2, [r7, #7]
 800277e:	2300      	movs	r3, #0
 8002780:	9300      	str	r3, [sp, #0]
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	68b9      	ldr	r1, [r7, #8]
 8002786:	f7ff fe9c 	bl	80024c2 <copyBitArray>
 800278a:	e000      	b.n	800278e <descatterTransferPayload+0x1de>
    {
 800278c:	bf00      	nop
    }

    return bit_length;
 800278e:	79fb      	ldrb	r3, [r7, #7]
 8002790:	b21b      	sxth	r3, r3
}
 8002792:	4618      	mov	r0, r3
 8002794:	3738      	adds	r7, #56	@ 0x38
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <isBigEndian>:

CANARD_INTERNAL bool isBigEndian(void)
{
 800279a:	b480      	push	{r7}
 800279c:	b083      	sub	sp, #12
 800279e:	af00      	add	r7, sp, #0
#else
        uint16_t a;
        uint8_t b[2];
#endif
    } u;
    u.a = 1;
 80027a0:	2301      	movs	r3, #1
 80027a2:	80bb      	strh	r3, [r7, #4]
    return u.b[1] == 1;                             // Some don't...
 80027a4:	797b      	ldrb	r3, [r7, #5]
 80027a6:	2b01      	cmp	r3, #1
 80027a8:	bf0c      	ite	eq
 80027aa:	2301      	moveq	r3, #1
 80027ac:	2300      	movne	r3, #0
 80027ae:	b2db      	uxtb	r3, r3
#endif
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <swapByteOrder>:

CANARD_INTERNAL void swapByteOrder(void* data, unsigned size)
{
 80027bc:	b480      	push	{r7}
 80027be:	b087      	sub	sp, #28
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
 80027c4:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(data != NULL);

    uint8_t* const bytes = (uint8_t*) data;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	60fb      	str	r3, [r7, #12]

    size_t fwd = 0;
 80027ca:	2300      	movs	r3, #0
 80027cc:	617b      	str	r3, [r7, #20]
    size_t rev = size - 1;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	3b01      	subs	r3, #1
 80027d2:	613b      	str	r3, [r7, #16]

    while (fwd < rev)
 80027d4:	e017      	b.n	8002806 <swapByteOrder+0x4a>
    {
        const uint8_t x = bytes[fwd];
 80027d6:	68fa      	ldr	r2, [r7, #12]
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	4413      	add	r3, r2
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	72fb      	strb	r3, [r7, #11]
        bytes[fwd] = bytes[rev];
 80027e0:	68fa      	ldr	r2, [r7, #12]
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	441a      	add	r2, r3
 80027e6:	68f9      	ldr	r1, [r7, #12]
 80027e8:	697b      	ldr	r3, [r7, #20]
 80027ea:	440b      	add	r3, r1
 80027ec:	7812      	ldrb	r2, [r2, #0]
 80027ee:	701a      	strb	r2, [r3, #0]
        bytes[rev] = x;
 80027f0:	68fa      	ldr	r2, [r7, #12]
 80027f2:	693b      	ldr	r3, [r7, #16]
 80027f4:	4413      	add	r3, r2
 80027f6:	7afa      	ldrb	r2, [r7, #11]
 80027f8:	701a      	strb	r2, [r3, #0]
        fwd++;
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	3301      	adds	r3, #1
 80027fe:	617b      	str	r3, [r7, #20]
        rev--;
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	3b01      	subs	r3, #1
 8002804:	613b      	str	r3, [r7, #16]
    while (fwd < rev)
 8002806:	697a      	ldr	r2, [r7, #20]
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	429a      	cmp	r2, r3
 800280c:	d3e3      	bcc.n	80027d6 <swapByteOrder+0x1a>
    }
}
 800280e:	bf00      	nop
 8002810:	bf00      	nop
 8002812:	371c      	adds	r7, #28
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <crcAddByte>:

/*
 * CRC functions
 */
CANARD_INTERNAL uint16_t crcAddByte(uint16_t crc_val, uint8_t byte)
{
 800281c:	b480      	push	{r7}
 800281e:	b085      	sub	sp, #20
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	460a      	mov	r2, r1
 8002826:	80fb      	strh	r3, [r7, #6]
 8002828:	4613      	mov	r3, r2
 800282a:	717b      	strb	r3, [r7, #5]
    crc_val ^= (uint16_t) ((uint16_t) (byte) << 8U);
 800282c:	797b      	ldrb	r3, [r7, #5]
 800282e:	b29b      	uxth	r3, r3
 8002830:	021b      	lsls	r3, r3, #8
 8002832:	b29a      	uxth	r2, r3
 8002834:	88fb      	ldrh	r3, [r7, #6]
 8002836:	4053      	eors	r3, r2
 8002838:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 800283a:	2300      	movs	r3, #0
 800283c:	73fb      	strb	r3, [r7, #15]
 800283e:	e012      	b.n	8002866 <crcAddByte+0x4a>
    {
        if (crc_val & 0x8000U)
 8002840:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002844:	2b00      	cmp	r3, #0
 8002846:	da08      	bge.n	800285a <crcAddByte+0x3e>
        {
            crc_val = (uint16_t) ((uint16_t) (crc_val << 1U) ^ 0x1021U);
 8002848:	88fb      	ldrh	r3, [r7, #6]
 800284a:	005b      	lsls	r3, r3, #1
 800284c:	b29b      	uxth	r3, r3
 800284e:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8002852:	f083 0301 	eor.w	r3, r3, #1
 8002856:	80fb      	strh	r3, [r7, #6]
 8002858:	e002      	b.n	8002860 <crcAddByte+0x44>
        }
        else
        {
            crc_val = (uint16_t) (crc_val << 1U);
 800285a:	88fb      	ldrh	r3, [r7, #6]
 800285c:	005b      	lsls	r3, r3, #1
 800285e:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 8002860:	7bfb      	ldrb	r3, [r7, #15]
 8002862:	3301      	adds	r3, #1
 8002864:	73fb      	strb	r3, [r7, #15]
 8002866:	7bfb      	ldrb	r3, [r7, #15]
 8002868:	2b07      	cmp	r3, #7
 800286a:	d9e9      	bls.n	8002840 <crcAddByte+0x24>
        }
    }
    return crc_val;
 800286c:	88fb      	ldrh	r3, [r7, #6]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <crcAddSignature>:

CANARD_INTERNAL uint16_t crcAddSignature(uint16_t crc_val, uint64_t data_type_signature)
{
 800287a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287c:	b087      	sub	sp, #28
 800287e:	af00      	add	r7, sp, #0
 8002880:	4601      	mov	r1, r0
 8002882:	e9c7 2300 	strd	r2, r3, [r7]
 8002886:	460b      	mov	r3, r1
 8002888:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 800288a:	2300      	movs	r3, #0
 800288c:	82fb      	strh	r3, [r7, #22]
 800288e:	e01b      	b.n	80028c8 <crcAddSignature+0x4e>
    {
        crc_val = crcAddByte(crc_val, (uint8_t) (data_type_signature >> shift_val));
 8002890:	8af9      	ldrh	r1, [r7, #22]
 8002892:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002896:	f1c1 0620 	rsb	r6, r1, #32
 800289a:	f1a1 0020 	sub.w	r0, r1, #32
 800289e:	fa22 f401 	lsr.w	r4, r2, r1
 80028a2:	fa03 f606 	lsl.w	r6, r3, r6
 80028a6:	4334      	orrs	r4, r6
 80028a8:	fa23 f000 	lsr.w	r0, r3, r0
 80028ac:	4304      	orrs	r4, r0
 80028ae:	fa23 f501 	lsr.w	r5, r3, r1
 80028b2:	b2e2      	uxtb	r2, r4
 80028b4:	89fb      	ldrh	r3, [r7, #14]
 80028b6:	4611      	mov	r1, r2
 80028b8:	4618      	mov	r0, r3
 80028ba:	f7ff ffaf 	bl	800281c <crcAddByte>
 80028be:	4603      	mov	r3, r0
 80028c0:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 80028c2:	8afb      	ldrh	r3, [r7, #22]
 80028c4:	3308      	adds	r3, #8
 80028c6:	82fb      	strh	r3, [r7, #22]
 80028c8:	8afb      	ldrh	r3, [r7, #22]
 80028ca:	2b3f      	cmp	r3, #63	@ 0x3f
 80028cc:	d9e0      	bls.n	8002890 <crcAddSignature+0x16>
    }
    return crc_val;
 80028ce:	89fb      	ldrh	r3, [r7, #14]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	371c      	adds	r7, #28
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080028d8 <crcAdd>:

CANARD_INTERNAL uint16_t crcAdd(uint16_t crc_val, const uint8_t* bytes, size_t len)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	4603      	mov	r3, r0
 80028e0:	60b9      	str	r1, [r7, #8]
 80028e2:	607a      	str	r2, [r7, #4]
 80028e4:	81fb      	strh	r3, [r7, #14]
    while (len--)
 80028e6:	e00a      	b.n	80028fe <crcAdd+0x26>
    {
        crc_val = crcAddByte(crc_val, *bytes++);
 80028e8:	68bb      	ldr	r3, [r7, #8]
 80028ea:	1c5a      	adds	r2, r3, #1
 80028ec:	60ba      	str	r2, [r7, #8]
 80028ee:	781a      	ldrb	r2, [r3, #0]
 80028f0:	89fb      	ldrh	r3, [r7, #14]
 80028f2:	4611      	mov	r1, r2
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ff91 	bl	800281c <crcAddByte>
 80028fa:	4603      	mov	r3, r0
 80028fc:	81fb      	strh	r3, [r7, #14]
    while (len--)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	1e5a      	subs	r2, r3, #1
 8002902:	607a      	str	r2, [r7, #4]
 8002904:	2b00      	cmp	r3, #0
 8002906:	d1ef      	bne.n	80028e8 <crcAdd+0x10>
    }
    return crc_val;
 8002908:	89fb      	ldrh	r3, [r7, #14]
}
 800290a:	4618      	mov	r0, r3
 800290c:	3710      	adds	r7, #16
 800290e:	46bd      	mov	sp, r7
 8002910:	bd80      	pop	{r7, pc}

08002912 <initPoolAllocator>:
 *  Pool Allocator functions
 */
CANARD_INTERNAL void initPoolAllocator(CanardPoolAllocator* allocator,
                                       void* buf,
                                       uint16_t buf_len)
{
 8002912:	b480      	push	{r7}
 8002914:	b089      	sub	sp, #36	@ 0x24
 8002916:	af00      	add	r7, sp, #0
 8002918:	60f8      	str	r0, [r7, #12]
 800291a:	60b9      	str	r1, [r7, #8]
 800291c:	4613      	mov	r3, r2
 800291e:	80fb      	strh	r3, [r7, #6]
    size_t current_index = 0;
 8002920:	2300      	movs	r3, #0
 8002922:	61fb      	str	r3, [r7, #28]
    CanardPoolAllocatorBlock *abuf = buf;
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	617b      	str	r3, [r7, #20]
    allocator->arena = buf;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	611a      	str	r2, [r3, #16]
    CanardPoolAllocatorBlock** current_block = &(allocator->free_list);
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	3304      	adds	r3, #4
 8002932:	61bb      	str	r3, [r7, #24]
    while (current_index < buf_len)
 8002934:	e00b      	b.n	800294e <initPoolAllocator+0x3c>
    {
        *current_block = &abuf[current_index];
 8002936:	69fb      	ldr	r3, [r7, #28]
 8002938:	015b      	lsls	r3, r3, #5
 800293a:	697a      	ldr	r2, [r7, #20]
 800293c:	441a      	add	r2, r3
 800293e:	69bb      	ldr	r3, [r7, #24]
 8002940:	601a      	str	r2, [r3, #0]
        current_block = &((*current_block)->next);
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	61bb      	str	r3, [r7, #24]
        current_index++;
 8002948:	69fb      	ldr	r3, [r7, #28]
 800294a:	3301      	adds	r3, #1
 800294c:	61fb      	str	r3, [r7, #28]
    while (current_index < buf_len)
 800294e:	88fb      	ldrh	r3, [r7, #6]
 8002950:	69fa      	ldr	r2, [r7, #28]
 8002952:	429a      	cmp	r2, r3
 8002954:	d3ef      	bcc.n	8002936 <initPoolAllocator+0x24>
    }
    *current_block = NULL;
 8002956:	69bb      	ldr	r3, [r7, #24]
 8002958:	2200      	movs	r2, #0
 800295a:	601a      	str	r2, [r3, #0]

    allocator->statistics.capacity_blocks = buf_len;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	88fa      	ldrh	r2, [r7, #6]
 8002960:	811a      	strh	r2, [r3, #8]
    allocator->statistics.current_usage_blocks = 0;
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	2200      	movs	r2, #0
 8002966:	815a      	strh	r2, [r3, #10]
    allocator->statistics.peak_usage_blocks = 0;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2200      	movs	r2, #0
 800296c:	819a      	strh	r2, [r3, #12]
    // user should initialize semaphore after the canardInit
    // or at first call of canard_allocate_sem_take
    allocator->semaphore = NULL;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
}
 8002974:	bf00      	nop
 8002976:	3724      	adds	r7, #36	@ 0x24
 8002978:	46bd      	mov	sp, r7
 800297a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297e:	4770      	bx	lr

08002980 <allocateBlock>:

CANARD_INTERNAL void* allocateBlock(CanardPoolAllocator* allocator)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_take(allocator);
#endif
    // Check if there are any blocks available in the free list.
    if (allocator->free_list == NULL)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	685b      	ldr	r3, [r3, #4]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d101      	bne.n	8002994 <allocateBlock+0x14>
    {
#if CANARD_ALLOCATE_SEM
        canard_allocate_sem_give(allocator);
#endif
        return NULL;
 8002990:	2300      	movs	r3, #0
 8002992:	e018      	b.n	80029c6 <allocateBlock+0x46>
    }

    // Take first available block and prepares next block for use.
    void* result = allocator->free_list;
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	60fb      	str	r3, [r7, #12]
    allocator->free_list = allocator->free_list->next;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	605a      	str	r2, [r3, #4]

    // Update statistics
    allocator->statistics.current_usage_blocks++;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	895b      	ldrh	r3, [r3, #10]
 80029a8:	3301      	adds	r3, #1
 80029aa:	b29a      	uxth	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	815a      	strh	r2, [r3, #10]
    if (allocator->statistics.peak_usage_blocks < allocator->statistics.current_usage_blocks)
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	899a      	ldrh	r2, [r3, #12]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	895b      	ldrh	r3, [r3, #10]
 80029b8:	429a      	cmp	r2, r3
 80029ba:	d203      	bcs.n	80029c4 <allocateBlock+0x44>
    {
        allocator->statistics.peak_usage_blocks = allocator->statistics.current_usage_blocks;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	895a      	ldrh	r2, [r3, #10]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	819a      	strh	r2, [r3, #12]
    }
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_give(allocator);
#endif
    return result;
 80029c4:	68fb      	ldr	r3, [r7, #12]
}
 80029c6:	4618      	mov	r0, r3
 80029c8:	3714      	adds	r7, #20
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr

080029d2 <freeBlock>:

CANARD_INTERNAL void freeBlock(CanardPoolAllocator* allocator, void* p)
{
 80029d2:	b480      	push	{r7}
 80029d4:	b085      	sub	sp, #20
 80029d6:	af00      	add	r7, sp, #0
 80029d8:	6078      	str	r0, [r7, #4]
 80029da:	6039      	str	r1, [r7, #0]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_take(allocator);
#endif
    CanardPoolAllocatorBlock* block = (CanardPoolAllocatorBlock*) p;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	60fb      	str	r3, [r7, #12]

    block->next = allocator->free_list;
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685a      	ldr	r2, [r3, #4]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	601a      	str	r2, [r3, #0]
    allocator->free_list = block;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	605a      	str	r2, [r3, #4]

    CANARD_ASSERT(allocator->statistics.current_usage_blocks > 0);
    allocator->statistics.current_usage_blocks--;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	895b      	ldrh	r3, [r3, #10]
 80029f2:	3b01      	subs	r3, #1
 80029f4:	b29a      	uxth	r2, r3
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	815a      	strh	r2, [r3, #10]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_give(allocator);
#endif
}
 80029fa:	bf00      	nop
 80029fc:	3714      	adds	r7, #20
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr

08002a06 <printf>:
// Parameter system definitions
#define MAX_PARAMETERS              100
#define PARAM_NAME_MAX_LENGTH       16
#define EPOS4_POSITION_LIMIT        100000

int printf(const char* format, ...) {
 8002a06:	b40f      	push	{r0, r1, r2, r3}
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
    // Remove all the code inside and replace with:
    return 0;  // Do nothing, just return 0
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	46bd      	mov	sp, r7
 8002a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a16:	b004      	add	sp, #16
 8002a18:	4770      	bx	lr
	...

08002a1c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002a1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a20:	b098      	sub	sp, #96	@ 0x60
 8002a22:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002a24:	f003 fea8 	bl	8006778 <HAL_Init>


  /* USER CODE BEGIN Init */

 /* Check reset flags to determine reset cause */
   if ((RCC->CSR & RCC_CSR_IWDGRSTF) != 0) {
 8002a28:	4bbc      	ldr	r3, [pc, #752]	@ (8002d1c <main+0x300>)
 8002a2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a2c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d008      	beq.n	8002a46 <main+0x2a>
     printf("System reset caused by Independent Watchdog (IWDG)\r\n");
 8002a34:	48ba      	ldr	r0, [pc, #744]	@ (8002d20 <main+0x304>)
 8002a36:	f00c fe55 	bl	800f6e4 <puts>
     RCC->CSR |= RCC_CSR_RMVF; // Clear all reset flags
 8002a3a:	4bb8      	ldr	r3, [pc, #736]	@ (8002d1c <main+0x300>)
 8002a3c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a3e:	4ab7      	ldr	r2, [pc, #732]	@ (8002d1c <main+0x300>)
 8002a40:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002a44:	6753      	str	r3, [r2, #116]	@ 0x74
   }

   /* Configure IWDG with direct register access */
   // Start by writing the key to unlock IWDG registers
   IWDG->KR = 0x5555; // Enable write access to IWDG_PR and IWDG_RLR
 8002a46:	4bb7      	ldr	r3, [pc, #732]	@ (8002d24 <main+0x308>)
 8002a48:	f245 5255 	movw	r2, #21845	@ 0x5555
 8002a4c:	601a      	str	r2, [r3, #0]

   // Set prescaler to maximum value (256) using direct register access
   IWDG->PR = 0x07; // Max prescaler (divide by 256)
 8002a4e:	4bb5      	ldr	r3, [pc, #724]	@ (8002d24 <main+0x308>)
 8002a50:	2207      	movs	r2, #7
 8002a52:	605a      	str	r2, [r3, #4]

   // Set reload value to maximum (0xFFF = 4095) using direct register access
   IWDG->RLR = 0xFFF; // Max reload value
 8002a54:	4bb3      	ldr	r3, [pc, #716]	@ (8002d24 <main+0x308>)
 8002a56:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8002a5a:	609a      	str	r2, [r3, #8]

   // Reload the watchdog counter to apply settings
   IWDG->KR = 0xAAAA;
 8002a5c:	4bb1      	ldr	r3, [pc, #708]	@ (8002d24 <main+0x308>)
 8002a5e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8002a62:	601a      	str	r2, [r3, #0]

   // Start the watchdog
   IWDG->KR = 0xCCCC;
 8002a64:	4baf      	ldr	r3, [pc, #700]	@ (8002d24 <main+0x308>)
 8002a66:	f64c 42cc 	movw	r2, #52428	@ 0xcccc
 8002a6a:	601a      	str	r2, [r3, #0]

   printf("IWDG configured with maximum timeout using direct register access\r\n");
 8002a6c:	48ae      	ldr	r0, [pc, #696]	@ (8002d28 <main+0x30c>)
 8002a6e:	f00c fe39 	bl	800f6e4 <puts>

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002a72:	f000 faf3 	bl	800305c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002a76:	f000 fbf7 	bl	8003268 <MX_GPIO_Init>
  MX_CAN1_Init();
 8002a7a:	f000 fb59 	bl	8003130 <MX_CAN1_Init>
  MX_I2S3_Init();
 8002a7e:	f000 fb8d 	bl	800319c <MX_I2S3_Init>
  MX_SPI1_Init();
 8002a82:	f000 fbbb 	bl	80031fc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 8002a86:	f00c f971 	bl	800ed6c <MX_USB_HOST_Init>
  
  /* USER CODE BEGIN 2 */
  // Initialize LEDs
  HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_RESET); // Green LED off
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002a90:	48a6      	ldr	r0, [pc, #664]	@ (8002d2c <main+0x310>)
 8002a92:	f005 fb47 	bl	8008124 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_RESET); // Red LED off
 8002a96:	2200      	movs	r2, #0
 8002a98:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002a9c:	48a3      	ldr	r0, [pc, #652]	@ (8002d2c <main+0x310>)
 8002a9e:	f005 fb41 	bl	8008124 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_RESET); // Orange LED off
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002aa8:	48a0      	ldr	r0, [pc, #640]	@ (8002d2c <main+0x310>)
 8002aaa:	f005 fb3b 	bl	8008124 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_RESET); // Blue LED off
 8002aae:	2200      	movs	r2, #0
 8002ab0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002ab4:	489d      	ldr	r0, [pc, #628]	@ (8002d2c <main+0x310>)
 8002ab6:	f005 fb35 	bl	8008124 <HAL_GPIO_WritePin>

  printf("-------------------------------------\r\n");
 8002aba:	489d      	ldr	r0, [pc, #628]	@ (8002d30 <main+0x314>)
 8002abc:	f00c fe12 	bl	800f6e4 <puts>
  printf("EPOS4 UAVCAN Node - Starting up\r\n");
 8002ac0:	489c      	ldr	r0, [pc, #624]	@ (8002d34 <main+0x318>)
 8002ac2:	f00c fe0f 	bl	800f6e4 <puts>
  printf("STM32F4Discovery with CAN interface\r\n");
 8002ac6:	489c      	ldr	r0, [pc, #624]	@ (8002d38 <main+0x31c>)
 8002ac8:	f00c fe0c 	bl	800f6e4 <puts>
  printf("Node ID: %d\r\n", NODE_ID);
 8002acc:	2109      	movs	r1, #9
 8002ace:	489b      	ldr	r0, [pc, #620]	@ (8002d3c <main+0x320>)
 8002ad0:	f7ff ff99 	bl	8002a06 <printf>
  printf("-------------------------------------\r\n");
 8002ad4:	4896      	ldr	r0, [pc, #600]	@ (8002d30 <main+0x314>)
 8002ad6:	f00c fe05 	bl	800f6e4 <puts>
  
  // Configure CAN filter to accept ALL messages with no filtering
  CAN_FilterTypeDef canFilter;
  canFilter.FilterBank = 0;
 8002ada:	2300      	movs	r3, #0
 8002adc:	61bb      	str	r3, [r7, #24]
  canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	61fb      	str	r3, [r7, #28]
  canFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	623b      	str	r3, [r7, #32]
  canFilter.FilterIdHigh = 0x0000;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	607b      	str	r3, [r7, #4]
  canFilter.FilterIdLow = 0x0000;  // Accept any ID
 8002aea:	2300      	movs	r3, #0
 8002aec:	60bb      	str	r3, [r7, #8]
  canFilter.FilterMaskIdHigh = 0x0000;  // Don't mask any bits (accept everything)
 8002aee:	2300      	movs	r3, #0
 8002af0:	60fb      	str	r3, [r7, #12]
  canFilter.FilterMaskIdLow = 0x0000;   // Don't mask any bits (accept everything)
 8002af2:	2300      	movs	r3, #0
 8002af4:	613b      	str	r3, [r7, #16]
  canFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002af6:	2300      	movs	r3, #0
 8002af8:	617b      	str	r3, [r7, #20]
  canFilter.FilterActivation = CAN_FILTER_ENABLE;
 8002afa:	2301      	movs	r3, #1
 8002afc:	627b      	str	r3, [r7, #36]	@ 0x24
  
  if (HAL_CAN_ConfigFilter(&hcan1, &canFilter) != HAL_OK) {
 8002afe:	1d3b      	adds	r3, r7, #4
 8002b00:	4619      	mov	r1, r3
 8002b02:	488f      	ldr	r0, [pc, #572]	@ (8002d40 <main+0x324>)
 8002b04:	f003 ffca 	bl	8006a9c <HAL_CAN_ConfigFilter>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d001      	beq.n	8002b12 <main+0xf6>
    Error_Handler();
 8002b0e:	f001 fd7b 	bl	8004608 <Error_Handler>
  }
  
  // Enable CAN bus
  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8002b12:	488b      	ldr	r0, [pc, #556]	@ (8002d40 <main+0x324>)
 8002b14:	f004 f8a2 	bl	8006c5c <HAL_CAN_Start>
 8002b18:	4603      	mov	r3, r0
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d001      	beq.n	8002b22 <main+0x106>
    Error_Handler();
 8002b1e:	f001 fd73 	bl	8004608 <Error_Handler>
  }
  
  // Enable CAN interrupts for receive
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8002b22:	2102      	movs	r1, #2
 8002b24:	4886      	ldr	r0, [pc, #536]	@ (8002d40 <main+0x324>)
 8002b26:	f004 fb2c 	bl	8007182 <HAL_CAN_ActivateNotification>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <main+0x118>
    Error_Handler();
 8002b30:	f001 fd6a 	bl	8004608 <Error_Handler>
  }
  
  // Start libcanard
  canardInit(&canard, canard_memory_pool, sizeof(canard_memory_pool), onTransferReceived, shouldAcceptTransfer, NULL);
 8002b34:	2300      	movs	r3, #0
 8002b36:	9301      	str	r3, [sp, #4]
 8002b38:	4b82      	ldr	r3, [pc, #520]	@ (8002d44 <main+0x328>)
 8002b3a:	9300      	str	r3, [sp, #0]
 8002b3c:	4b82      	ldr	r3, [pc, #520]	@ (8002d48 <main+0x32c>)
 8002b3e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002b42:	4982      	ldr	r1, [pc, #520]	@ (8002d4c <main+0x330>)
 8002b44:	4882      	ldr	r0, [pc, #520]	@ (8002d50 <main+0x334>)
 8002b46:	f7fd ffb1 	bl	8000aac <canardInit>
  canardSetLocalNodeID(&canard, NODE_ID);
 8002b4a:	2109      	movs	r1, #9
 8002b4c:	4880      	ldr	r0, [pc, #512]	@ (8002d50 <main+0x334>)
 8002b4e:	f7fd ffe1 	bl	8000b14 <canardSetLocalNodeID>


  // Initialize EPOS4 controller for position control mode

  // Step 1: Reset communications
  CANopen_NMT_Command(&hcan1, 0x82, EPOS4_NODE_ID); // 0x82 = Reset communications
 8002b52:	2201      	movs	r2, #1
 8002b54:	2182      	movs	r1, #130	@ 0x82
 8002b56:	487a      	ldr	r0, [pc, #488]	@ (8002d40 <main+0x324>)
 8002b58:	f001 fd64 	bl	8004624 <CANopen_NMT_Command>
  HAL_Delay(100); // Wait longer for reset to complete
 8002b5c:	2064      	movs	r0, #100	@ 0x64
 8002b5e:	f003 fe7d 	bl	800685c <HAL_Delay>
  // Step 2: Start remote node
  CANopen_NMT_Command(&hcan1, 0x01, EPOS4_NODE_ID); // 0x01 = Start remote node
 8002b62:	2201      	movs	r2, #1
 8002b64:	2101      	movs	r1, #1
 8002b66:	4876      	ldr	r0, [pc, #472]	@ (8002d40 <main+0x324>)
 8002b68:	f001 fd5c 	bl	8004624 <CANopen_NMT_Command>
  HAL_Delay(100);
 8002b6c:	2064      	movs	r0, #100	@ 0x64
 8002b6e:	f003 fe75 	bl	800685c <HAL_Delay>

  // Step 3: Set operation mode to position mode
  EPOS4_SetOperationMode(&hcan1, EPOS4_NODE_ID, MODE_PROFILE_POSITION);
 8002b72:	2201      	movs	r2, #1
 8002b74:	2101      	movs	r1, #1
 8002b76:	4872      	ldr	r0, [pc, #456]	@ (8002d40 <main+0x324>)
 8002b78:	f001 fd7d 	bl	8004676 <EPOS4_SetOperationMode>
  HAL_Delay(100);
 8002b7c:	2064      	movs	r0, #100	@ 0x64
 8002b7e:	f003 fe6d 	bl	800685c <HAL_Delay>

  // Step 4: Set control word to shutdown state (prepare for enable)
  EPOS4_SetControlWord(&hcan1, EPOS4_NODE_ID, 0x0006);
 8002b82:	2206      	movs	r2, #6
 8002b84:	2101      	movs	r1, #1
 8002b86:	486e      	ldr	r0, [pc, #440]	@ (8002d40 <main+0x324>)
 8002b88:	f001 fcf6 	bl	8004578 <EPOS4_SetControlWord>
  HAL_Delay(100);
 8002b8c:	2064      	movs	r0, #100	@ 0x64
 8002b8e:	f003 fe65 	bl	800685c <HAL_Delay>

  // Step 5: Set control word to switch on state
  EPOS4_SetControlWord(&hcan1, EPOS4_NODE_ID, 0x0007);
 8002b92:	2207      	movs	r2, #7
 8002b94:	2101      	movs	r1, #1
 8002b96:	486a      	ldr	r0, [pc, #424]	@ (8002d40 <main+0x324>)
 8002b98:	f001 fcee 	bl	8004578 <EPOS4_SetControlWord>
  HAL_Delay(100);
 8002b9c:	2064      	movs	r0, #100	@ 0x64
 8002b9e:	f003 fe5d 	bl	800685c <HAL_Delay>

  // Step 6: Configure motion profile parameters for smooth tilt movement
  printf("Setting profile velocity: %lu\n", (unsigned long)profile_velocity);
 8002ba2:	4b6c      	ldr	r3, [pc, #432]	@ (8002d54 <main+0x338>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4619      	mov	r1, r3
 8002ba8:	486b      	ldr	r0, [pc, #428]	@ (8002d58 <main+0x33c>)
 8002baa:	f7ff ff2c 	bl	8002a06 <printf>
  EPOS4_SetProfileVelocity(&hcan1, EPOS4_NODE_ID, profile_velocity);
 8002bae:	4b69      	ldr	r3, [pc, #420]	@ (8002d54 <main+0x338>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	4862      	ldr	r0, [pc, #392]	@ (8002d40 <main+0x324>)
 8002bb8:	f001 fd93 	bl	80046e2 <EPOS4_SetProfileVelocity>
  HAL_Delay(100);
 8002bbc:	2064      	movs	r0, #100	@ 0x64
 8002bbe:	f003 fe4d 	bl	800685c <HAL_Delay>

  printf("Setting profile acceleration: %lu\n", (unsigned long)profile_acceleration);
 8002bc2:	4b66      	ldr	r3, [pc, #408]	@ (8002d5c <main+0x340>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	4619      	mov	r1, r3
 8002bc8:	4865      	ldr	r0, [pc, #404]	@ (8002d60 <main+0x344>)
 8002bca:	f7ff ff1c 	bl	8002a06 <printf>
  EPOS4_SetProfileAcceleration(&hcan1, EPOS4_NODE_ID, profile_acceleration);
 8002bce:	4b63      	ldr	r3, [pc, #396]	@ (8002d5c <main+0x340>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	461a      	mov	r2, r3
 8002bd4:	2101      	movs	r1, #1
 8002bd6:	485a      	ldr	r0, [pc, #360]	@ (8002d40 <main+0x324>)
 8002bd8:	f001 fdc5 	bl	8004766 <EPOS4_SetProfileAcceleration>
  HAL_Delay(100);
 8002bdc:	2064      	movs	r0, #100	@ 0x64
 8002bde:	f003 fe3d 	bl	800685c <HAL_Delay>

  printf("Setting profile deceleration: %lu\n", (unsigned long)profile_deceleration);
 8002be2:	4b60      	ldr	r3, [pc, #384]	@ (8002d64 <main+0x348>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	4619      	mov	r1, r3
 8002be8:	485f      	ldr	r0, [pc, #380]	@ (8002d68 <main+0x34c>)
 8002bea:	f7ff ff0c 	bl	8002a06 <printf>
  EPOS4_SetProfileDeceleration(&hcan1, EPOS4_NODE_ID, profile_deceleration);
 8002bee:	4b5d      	ldr	r3, [pc, #372]	@ (8002d64 <main+0x348>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	2101      	movs	r1, #1
 8002bf6:	4852      	ldr	r0, [pc, #328]	@ (8002d40 <main+0x324>)
 8002bf8:	f001 fdf7 	bl	80047ea <EPOS4_SetProfileDeceleration>
  HAL_Delay(100);
 8002bfc:	2064      	movs	r0, #100	@ 0x64
 8002bfe:	f003 fe2d 	bl	800685c <HAL_Delay>

  // Step 7: Enable operation
  EPOS4_SetControlWord(&hcan1, EPOS4_NODE_ID, 0x000F);
 8002c02:	220f      	movs	r2, #15
 8002c04:	2101      	movs	r1, #1
 8002c06:	484e      	ldr	r0, [pc, #312]	@ (8002d40 <main+0x324>)
 8002c08:	f001 fcb6 	bl	8004578 <EPOS4_SetControlWord>
  HAL_Delay(100);
 8002c0c:	2064      	movs	r0, #100	@ 0x64
 8002c0e:	f003 fe25 	bl	800685c <HAL_Delay>

  // Step 8: Configure default motion profile parameters - IMPORTANT!
  printf("Setting default motion parameters\r\n");
 8002c12:	4856      	ldr	r0, [pc, #344]	@ (8002d6c <main+0x350>)
 8002c14:	f00c fd66 	bl	800f6e4 <puts>
  printf("Position limits set to: min=%ld, mid=%ld, max=%ld\n",
 8002c18:	4b55      	ldr	r3, [pc, #340]	@ (8002d70 <main+0x354>)
 8002c1a:	6819      	ldr	r1, [r3, #0]
 8002c1c:	4b55      	ldr	r3, [pc, #340]	@ (8002d74 <main+0x358>)
 8002c1e:	681a      	ldr	r2, [r3, #0]
 8002c20:	4b55      	ldr	r3, [pc, #340]	@ (8002d78 <main+0x35c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4855      	ldr	r0, [pc, #340]	@ (8002d7c <main+0x360>)
 8002c26:	f7ff feee 	bl	8002a06 <printf>
         (long)minPosition, (long)midPosition, (long)maxPosition);
  printf("Motion profile: velocity=%lu, accel=%lu, decel=%lu\n",
 8002c2a:	4b4a      	ldr	r3, [pc, #296]	@ (8002d54 <main+0x338>)
 8002c2c:	6819      	ldr	r1, [r3, #0]
 8002c2e:	4b4b      	ldr	r3, [pc, #300]	@ (8002d5c <main+0x340>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	4b4c      	ldr	r3, [pc, #304]	@ (8002d64 <main+0x348>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4852      	ldr	r0, [pc, #328]	@ (8002d80 <main+0x364>)
 8002c38:	f7ff fee5 	bl	8002a06 <printf>
         (unsigned long)profile_velocity,
         (unsigned long)profile_acceleration,
         (unsigned long)profile_deceleration);

  // Try to restore position from flash
  position_restored = restore_position_from_flash();
 8002c3c:	f003 fa5c 	bl	80060f8 <restore_position_from_flash>
 8002c40:	4603      	mov	r3, r0
 8002c42:	461a      	mov	r2, r3
 8002c44:	4b4f      	ldr	r3, [pc, #316]	@ (8002d84 <main+0x368>)
 8002c46:	701a      	strb	r2, [r3, #0]
  if (!position_restored) {
 8002c48:	4b4e      	ldr	r3, [pc, #312]	@ (8002d84 <main+0x368>)
 8002c4a:	781b      	ldrb	r3, [r3, #0]
 8002c4c:	b2db      	uxtb	r3, r3
 8002c4e:	f083 0301 	eor.w	r3, r3, #1
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d002      	beq.n	8002c5e <main+0x242>
      printf("No saved position found - starting at current position\n");
 8002c58:	484b      	ldr	r0, [pc, #300]	@ (8002d88 <main+0x36c>)
 8002c5a:	f00c fd43 	bl	800f6e4 <puts>
  }

  /* USER CODE END 2 */

  // *** Add after the main loop initialization ***
  uint64_t last_getnodeinfo_self_request_time_ms = 0;
 8002c5e:	f04f 0200 	mov.w	r2, #0
 8002c62:	f04f 0300 	mov.w	r3, #0
 8002c66:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48


  // Initialize position parameters with defaults
  initializePositionParameters();
 8002c6a:	f002 fc49 	bl	8005500 <initializePositionParameters>

  // Broadcast parameters to improve detection speed
  broadcast_all_parameters();
 8002c6e:	f002 f9ad 	bl	8004fcc <broadcast_all_parameters>

  // Set up for initial position synchronization with ArduPilot
  printf("Waiting for first ArduPilot command to synchronize position...\n");
 8002c72:	4846      	ldr	r0, [pc, #280]	@ (8002d8c <main+0x370>)
 8002c74:	f00c fd36 	bl	800f6e4 <puts>
  initial_sync_completed = false;
 8002c78:	4b45      	ldr	r3, [pc, #276]	@ (8002d90 <main+0x374>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	701a      	strb	r2, [r3, #0]
  ardupilot_command_received = false;
 8002c7e:	4b45      	ldr	r3, [pc, #276]	@ (8002d94 <main+0x378>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8002c84:	f00c f898 	bl	800edb8 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    // Refresh the watchdog timer to prevent system reset
    IWDG->KR = 0xAAAA;
 8002c88:	4b26      	ldr	r3, [pc, #152]	@ (8002d24 <main+0x308>)
 8002c8a:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8002c8e:	601a      	str	r2, [r3, #0]

    // Get the current time
    uint64_t current_time_ms = HAL_GetTick();
 8002c90:	f003 fdd8 	bl	8006844 <HAL_GetTick>
 8002c94:	4603      	mov	r3, r0
 8002c96:	2200      	movs	r2, #0
 8002c98:	469a      	mov	sl, r3
 8002c9a:	4693      	mov	fp, r2
 8002c9c:	e9c7 ab10 	strd	sl, fp, [r7, #64]	@ 0x40
    uint64_t current_time_us = micros64();
 8002ca0:	f002 f89a 	bl	8004dd8 <micros64>
 8002ca4:	e9c7 010e 	strd	r0, r1, [r7, #56]	@ 0x38
    
    // Check if we need to perform initial position sync (only once at startup)
    if (!initial_sync_completed && ardupilot_command_received) {
 8002ca8:	4b39      	ldr	r3, [pc, #228]	@ (8002d90 <main+0x374>)
 8002caa:	781b      	ldrb	r3, [r3, #0]
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	f083 0301 	eor.w	r3, r3, #1
 8002cb2:	b2db      	uxtb	r3, r3
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	f000 810c 	beq.w	8002ed2 <main+0x4b6>
 8002cba:	4b36      	ldr	r3, [pc, #216]	@ (8002d94 <main+0x378>)
 8002cbc:	781b      	ldrb	r3, [r3, #0]
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	f000 8106 	beq.w	8002ed2 <main+0x4b6>
        // First ArduPilot command received - use it to synchronize position
        printf("Initial sync: First ArduPilot command received: %d\n", latest_ardupilot_command);
 8002cc6:	4b34      	ldr	r3, [pc, #208]	@ (8002d98 <main+0x37c>)
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	b21b      	sxth	r3, r3
 8002ccc:	4619      	mov	r1, r3
 8002cce:	4833      	ldr	r0, [pc, #204]	@ (8002d9c <main+0x380>)
 8002cd0:	f7ff fe99 	bl	8002a06 <printf>

        // Calculate position based on the command value using the same mapping logic
        int32_t sync_position;
        
        // Special handling for vectored yaw mode (values near 15360)
        if (abs(latest_ardupilot_command - 15360) < 1000) {
 8002cd4:	4b30      	ldr	r3, [pc, #192]	@ (8002d98 <main+0x37c>)
 8002cd6:	881b      	ldrh	r3, [r3, #0]
 8002cd8:	b21b      	sxth	r3, r3
 8002cda:	f5a3 5370 	sub.w	r3, r3, #15360	@ 0x3c00
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	bfb8      	it	lt
 8002ce2:	425b      	neglt	r3, r3
 8002ce4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002ce8:	da69      	bge.n	8002dbe <main+0x3a2>
            // Calculate deviation from center (15360)
            int16_t deviation = latest_ardupilot_command - 15360;
 8002cea:	4b2b      	ldr	r3, [pc, #172]	@ (8002d98 <main+0x37c>)
 8002cec:	881b      	ldrh	r3, [r3, #0]
 8002cee:	b21b      	sxth	r3, r3
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	f5a3 5370 	sub.w	r3, r3, #15360	@ 0x3c00
 8002cf6:	b29b      	uxth	r3, r3
 8002cf8:	86fb      	strh	r3, [r7, #54]	@ 0x36
            // Map to position around minPosition
            float normalized = (float)deviation / 1000.0f;  // +/-1.0 for +/-1000 deviation
 8002cfa:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8002cfe:	ee07 3a90 	vmov	s15, r3
 8002d02:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d06:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002da0 <main+0x384>
 8002d0a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d0e:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
            sync_position = minPosition - (int32_t)(normalized * 100000);
 8002d12:	4b17      	ldr	r3, [pc, #92]	@ (8002d70 <main+0x354>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8002d1a:	e045      	b.n	8002da8 <main+0x38c>
 8002d1c:	40023800 	.word	0x40023800
 8002d20:	0800fd0c 	.word	0x0800fd0c
 8002d24:	40003000 	.word	0x40003000
 8002d28:	0800fd40 	.word	0x0800fd40
 8002d2c:	40020c00 	.word	0x40020c00
 8002d30:	0800fd84 	.word	0x0800fd84
 8002d34:	0800fdac 	.word	0x0800fdac
 8002d38:	0800fdd0 	.word	0x0800fdd0
 8002d3c:	0800fdf8 	.word	0x0800fdf8
 8002d40:	200019d0 	.word	0x200019d0
 8002d44:	08003991 	.word	0x08003991
 8002d48:	08003c85 	.word	0x08003c85
 8002d4c:	20001aa0 	.word	0x20001aa0
 8002d50:	20005aa0 	.word	0x20005aa0
 8002d54:	2000190c 	.word	0x2000190c
 8002d58:	0800fe08 	.word	0x0800fe08
 8002d5c:	20001910 	.word	0x20001910
 8002d60:	0800fe28 	.word	0x0800fe28
 8002d64:	20001914 	.word	0x20001914
 8002d68:	0800fe4c 	.word	0x0800fe4c
 8002d6c:	0800fe70 	.word	0x0800fe70
 8002d70:	20001908 	.word	0x20001908
 8002d74:	20001904 	.word	0x20001904
 8002d78:	20001900 	.word	0x20001900
 8002d7c:	0800fe94 	.word	0x0800fe94
 8002d80:	0800fec8 	.word	0x0800fec8
 8002d84:	20005ace 	.word	0x20005ace
 8002d88:	0800fefc 	.word	0x0800fefc
 8002d8c:	0800ff34 	.word	0x0800ff34
 8002d90:	200019c8 	.word	0x200019c8
 8002d94:	200019cc 	.word	0x200019cc
 8002d98:	200019ca 	.word	0x200019ca
 8002d9c:	0800ff74 	.word	0x0800ff74
 8002da0:	447a0000 	.word	0x447a0000
 8002da4:	47c35000 	.word	0x47c35000
 8002da8:	ed1f 7a02 	vldr	s14, [pc, #-8]	@ 8002da4 <main+0x388>
 8002dac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002db0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002db4:	ee17 2a90 	vmov	r2, s15
 8002db8:	1a9b      	subs	r3, r3, r2
 8002dba:	657b      	str	r3, [r7, #84]	@ 0x54
 8002dbc:	e046      	b.n	8002e4c <main+0x430>

        }
        // Standard mapping for regular commands
        else if (latest_ardupilot_command <= 15000) {
 8002dbe:	4b8f      	ldr	r3, [pc, #572]	@ (8002ffc <main+0x5e0>)
 8002dc0:	881b      	ldrh	r3, [r3, #0]
 8002dc2:	b21b      	sxth	r3, r3
 8002dc4:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	dc03      	bgt.n	8002dd4 <main+0x3b8>
            sync_position = minPosition;
 8002dcc:	4b8c      	ldr	r3, [pc, #560]	@ (8003000 <main+0x5e4>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	657b      	str	r3, [r7, #84]	@ 0x54
 8002dd2:	e03b      	b.n	8002e4c <main+0x430>
        }
        else if (latest_ardupilot_command >= 48000) {
 8002dd4:	4b89      	ldr	r3, [pc, #548]	@ (8002ffc <main+0x5e0>)
 8002dd6:	881b      	ldrh	r3, [r3, #0]
            sync_position = maxPosition;
        }
        else {
            // For values in the normal range
            float normalized = (float)(latest_ardupilot_command - 15360) / (float)(48128 - 15360);
 8002dd8:	4b88      	ldr	r3, [pc, #544]	@ (8002ffc <main+0x5e0>)
 8002dda:	881b      	ldrh	r3, [r3, #0]
 8002ddc:	b21b      	sxth	r3, r3
 8002dde:	f5a3 5370 	sub.w	r3, r3, #15360	@ 0x3c00
 8002de2:	ee07 3a90 	vmov	s15, r3
 8002de6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002dea:	eddf 6a86 	vldr	s13, [pc, #536]	@ 8003004 <main+0x5e8>
 8002dee:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002df2:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
            if (normalized < 0.0f) normalized = 0.0f;
 8002df6:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002dfa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e02:	d502      	bpl.n	8002e0a <main+0x3ee>
 8002e04:	f04f 0300 	mov.w	r3, #0
 8002e08:	653b      	str	r3, [r7, #80]	@ 0x50
            if (normalized > 1.0f) normalized = 1.0f;
 8002e0a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002e0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e12:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e1a:	dd02      	ble.n	8002e22 <main+0x406>
 8002e1c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002e20:	653b      	str	r3, [r7, #80]	@ 0x50
            sync_position = minPosition + (int32_t)(normalized * (maxPosition - minPosition));
 8002e22:	4b79      	ldr	r3, [pc, #484]	@ (8003008 <main+0x5ec>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	4b76      	ldr	r3, [pc, #472]	@ (8003000 <main+0x5e4>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	ee07 3a90 	vmov	s15, r3
 8002e30:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e34:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8002e38:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002e40:	ee17 2a90 	vmov	r2, s15
 8002e44:	4b6e      	ldr	r3, [pc, #440]	@ (8003000 <main+0x5e4>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4413      	add	r3, r2
 8002e4a:	657b      	str	r3, [r7, #84]	@ 0x54

        }
        
        // Apply safety limits
        if (sync_position > maxPosition) sync_position = maxPosition;
 8002e4c:	4b6e      	ldr	r3, [pc, #440]	@ (8003008 <main+0x5ec>)
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002e52:	429a      	cmp	r2, r3
 8002e54:	dd02      	ble.n	8002e5c <main+0x440>
 8002e56:	4b6c      	ldr	r3, [pc, #432]	@ (8003008 <main+0x5ec>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	657b      	str	r3, [r7, #84]	@ 0x54
        if (sync_position < minPosition) sync_position = minPosition;
 8002e5c:	4b68      	ldr	r3, [pc, #416]	@ (8003000 <main+0x5e4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002e62:	429a      	cmp	r2, r3
 8002e64:	da02      	bge.n	8002e6c <main+0x450>
 8002e66:	4b66      	ldr	r3, [pc, #408]	@ (8003000 <main+0x5e4>)
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	657b      	str	r3, [r7, #84]	@ 0x54
        
        // Set EPOS4 position counter (object 0x2081)
        printf("Initial sync: Setting EPOS4 position counter to %ld\n", (long)sync_position);
 8002e6c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002e6e:	4867      	ldr	r0, [pc, #412]	@ (800300c <main+0x5f0>)
 8002e70:	f7ff fdc9 	bl	8002a06 <printf>
        epos4_send_sdo_write(0x2081, 0x00, sync_position, 4);
 8002e74:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002e76:	2304      	movs	r3, #4
 8002e78:	2100      	movs	r1, #0
 8002e7a:	f242 0081 	movw	r0, #8321	@ 0x2081
 8002e7e:	f002 fbdf 	bl	8005640 <epos4_send_sdo_write>
        
        // Wait for the command to process
        HAL_Delay(50);
 8002e82:	2032      	movs	r0, #50	@ 0x32
 8002e84:	f003 fcea 	bl	800685c <HAL_Delay>

        // Update internal tracking
        current_position = sync_position;
 8002e88:	4a61      	ldr	r2, [pc, #388]	@ (8003010 <main+0x5f4>)
 8002e8a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e8c:	6013      	str	r3, [r2, #0]
        targetPosition = sync_position;
 8002e8e:	4a61      	ldr	r2, [pc, #388]	@ (8003014 <main+0x5f8>)
 8002e90:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002e92:	6013      	str	r3, [r2, #0]

        // Mark sync as completed
        initial_sync_completed = true;
 8002e94:	4b60      	ldr	r3, [pc, #384]	@ (8003018 <main+0x5fc>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	701a      	strb	r2, [r3, #0]
        printf("Initial position synchronization completed\n");
 8002e9a:	4860      	ldr	r0, [pc, #384]	@ (800301c <main+0x600>)
 8002e9c:	f00c fc22 	bl	800f6e4 <puts>

        // Set following error window to 2000 increments
        printf("Setting following error window (0x6065) to 2000 increments\n");
 8002ea0:	485f      	ldr	r0, [pc, #380]	@ (8003020 <main+0x604>)
 8002ea2:	f00c fc1f 	bl	800f6e4 <puts>
        epos4_send_sdo_write(0x6065, 0x00, 100000000, 4);
 8002ea6:	2304      	movs	r3, #4
 8002ea8:	4a5e      	ldr	r2, [pc, #376]	@ (8003024 <main+0x608>)
 8002eaa:	2100      	movs	r1, #0
 8002eac:	f246 0065 	movw	r0, #24677	@ 0x6065
 8002eb0:	f002 fbc6 	bl	8005640 <epos4_send_sdo_write>

        // Also read back the value to verify it was set correctly
        printf("Reading back following error window value...\n");
 8002eb4:	485c      	ldr	r0, [pc, #368]	@ (8003028 <main+0x60c>)
 8002eb6:	f00c fc15 	bl	800f6e4 <puts>
        epos4_send_sdo_read(0x6065, 0x00);
 8002eba:	2100      	movs	r1, #0
 8002ebc:	f246 0065 	movw	r0, #24677	@ 0x6065
 8002ec0:	f001 fa98 	bl	80043f4 <epos4_send_sdo_read>
        HAL_Delay(50); // Wait for response
 8002ec4:	2032      	movs	r0, #50	@ 0x32
 8002ec6:	f003 fcc9 	bl	800685c <HAL_Delay>

        // Process any received messages to get the response
        processTxRxOnce(&canard, 10);
 8002eca:	210a      	movs	r1, #10
 8002ecc:	4857      	ldr	r0, [pc, #348]	@ (800302c <main+0x610>)
 8002ece:	f000 fca9 	bl	8003824 <processTxRxOnce>
    }

    // Simple loop counter for debugging how many cycles we've completed
    static uint32_t loop_counter = 0;
    if (loop_counter++ % 10000 == 0) {
 8002ed2:	4b57      	ldr	r3, [pc, #348]	@ (8003030 <main+0x614>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	1c5a      	adds	r2, r3, #1
 8002ed8:	4955      	ldr	r1, [pc, #340]	@ (8003030 <main+0x614>)
 8002eda:	600a      	str	r2, [r1, #0]
        // Reduced frequency to once per 10000 cycles
    }
    
    // Process CAN messages and send heartbeat every second - with timeout
    process1HzTasks(&canard);
 8002edc:	4853      	ldr	r0, [pc, #332]	@ (800302c <main+0x610>)
 8002ede:	f001 f887 	bl	8003ff0 <process1HzTasks>

    // Check for any received CAN frames (non-blocking, 10ms timeout)
    processTxRxOnce(&canard, 10);
 8002ee2:	210a      	movs	r1, #10
 8002ee4:	4851      	ldr	r0, [pc, #324]	@ (800302c <main+0x610>)
 8002ee6:	f000 fc9d 	bl	8003824 <processTxRxOnce>

    // Refresh watchdog again
    IWDG->KR = 0xAAAA;
 8002eea:	4b52      	ldr	r3, [pc, #328]	@ (8003034 <main+0x618>)
 8002eec:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8002ef0:	601a      	str	r2, [r3, #0]

    // Cleanup any stale transfers
    canardCleanupStaleTransfers(&canard, current_time_us);
 8002ef2:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002ef6:	484d      	ldr	r0, [pc, #308]	@ (800302c <main+0x610>)
 8002ef8:	f7fe fb86 	bl	8001608 <canardCleanupStaleTransfers>

    // Check if there is a pending command to process
    if (command_pending) {
 8002efc:	4b4e      	ldr	r3, [pc, #312]	@ (8003038 <main+0x61c>)
 8002efe:	781b      	ldrb	r3, [r3, #0]
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d040      	beq.n	8002f88 <main+0x56c>
        // Only log once at the start of command processing
        static bool command_logged = false;
        if (!command_logged) {
 8002f06:	4b4d      	ldr	r3, [pc, #308]	@ (800303c <main+0x620>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	f083 0301 	eor.w	r3, r3, #1
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d008      	beq.n	8002f26 <main+0x50a>
        printf("Processing command: position=%ld\r\n", (long)pending_position);
 8002f14:	4b4a      	ldr	r3, [pc, #296]	@ (8003040 <main+0x624>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4619      	mov	r1, r3
 8002f1a:	484a      	ldr	r0, [pc, #296]	@ (8003044 <main+0x628>)
 8002f1c:	f7ff fd73 	bl	8002a06 <printf>
            command_logged = true;
 8002f20:	4b46      	ldr	r3, [pc, #280]	@ (800303c <main+0x620>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	701a      	strb	r2, [r3, #0]
        }

        // Call the state machine function - it will handle timing internally
        // Return values: 0=failure, 1=success, 2=in progress
        int result = force_motor_movement(pending_position);
 8002f26:	4b46      	ldr	r3, [pc, #280]	@ (8003040 <main+0x624>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f002 fe9e 	bl	8005c6c <force_motor_movement>
 8002f30:	62f8      	str	r0, [r7, #44]	@ 0x2c

        if (result == 1) {
 8002f32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f34:	2b01      	cmp	r3, #1
 8002f36:	d115      	bne.n	8002f64 <main+0x548>
            // Command completed successfully
            printf("Motor movement successful - target position set to %ld\r\n", (long)pending_position);
 8002f38:	4b41      	ldr	r3, [pc, #260]	@ (8003040 <main+0x624>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	4619      	mov	r1, r3
 8002f3e:	4842      	ldr	r0, [pc, #264]	@ (8003048 <main+0x62c>)
 8002f40:	f7ff fd61 	bl	8002a06 <printf>
        
        // Update current position
        current_position = pending_position;
 8002f44:	4b3e      	ldr	r3, [pc, #248]	@ (8003040 <main+0x624>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	4a31      	ldr	r2, [pc, #196]	@ (8003010 <main+0x5f4>)
 8002f4a:	6013      	str	r3, [r2, #0]

        // Toggle LED to show command processed
        HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 8002f4c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002f50:	483e      	ldr	r0, [pc, #248]	@ (800304c <main+0x630>)
 8002f52:	f005 f900 	bl	8008156 <HAL_GPIO_TogglePin>

            // Clear the command pending flag and reset the log flag
            command_pending = false;
 8002f56:	4b38      	ldr	r3, [pc, #224]	@ (8003038 <main+0x61c>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	701a      	strb	r2, [r3, #0]
            command_logged = false;
 8002f5c:	4b37      	ldr	r3, [pc, #220]	@ (800303c <main+0x620>)
 8002f5e:	2200      	movs	r2, #0
 8002f60:	701a      	strb	r2, [r3, #0]
 8002f62:	e011      	b.n	8002f88 <main+0x56c>
        }
        else if (result == 0) {
 8002f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d10e      	bne.n	8002f88 <main+0x56c>
            // Command failed
            printf("Command failed - motor movement error\r\n");
 8002f6a:	4839      	ldr	r0, [pc, #228]	@ (8003050 <main+0x634>)
 8002f6c:	f00c fbba 	bl	800f6e4 <puts>

            // Turn on error LED
            HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_SET);
 8002f70:	2201      	movs	r2, #1
 8002f72:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002f76:	4835      	ldr	r0, [pc, #212]	@ (800304c <main+0x630>)
 8002f78:	f005 f8d4 	bl	8008124 <HAL_GPIO_WritePin>

            // Clear the command pending flag and reset the log flag
            command_pending = false;
 8002f7c:	4b2e      	ldr	r3, [pc, #184]	@ (8003038 <main+0x61c>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	701a      	strb	r2, [r3, #0]
            command_logged = false;
 8002f82:	4b2e      	ldr	r3, [pc, #184]	@ (800303c <main+0x620>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	701a      	strb	r2, [r3, #0]
        }
        // If result == 2, command is still in progress, keep the command_pending flag set
    }
    
    // Reduce main loop delay to minimize command latency (was 1ms)
    HAL_Delay(0);
 8002f88:	2000      	movs	r0, #0
 8002f8a:	f003 fc67 	bl	800685c <HAL_Delay>

    // Periodically check EPOS4 status and reset any faults - reduced frequency for lower latency
    static uint32_t last_epos4_check_ms = 0;
    if (current_time_ms - last_epos4_check_ms >= 500) { // Every 500ms (reduced from 1000ms)
 8002f8e:	4b31      	ldr	r3, [pc, #196]	@ (8003054 <main+0x638>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2200      	movs	r2, #0
 8002f94:	4698      	mov	r8, r3
 8002f96:	4691      	mov	r9, r2
 8002f98:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002f9c:	ebb2 0408 	subs.w	r4, r2, r8
 8002fa0:	eb63 0509 	sbc.w	r5, r3, r9
 8002fa4:	f5b4 7ffa 	cmp.w	r4, #500	@ 0x1f4
 8002fa8:	f175 0300 	sbcs.w	r3, r5, #0
 8002fac:	d322      	bcc.n	8002ff4 <main+0x5d8>
        // Send an NMT heartbeat to keep the EPOS4 in operational state
        CANopen_NMT_Command(&hcan1, 0x01, EPOS4_NODE_ID); // 0x01 = Start remote node
 8002fae:	2201      	movs	r2, #1
 8002fb0:	2101      	movs	r1, #1
 8002fb2:	4829      	ldr	r0, [pc, #164]	@ (8003058 <main+0x63c>)
 8002fb4:	f001 fb36 	bl	8004624 <CANopen_NMT_Command>
        HAL_Delay(2); // Reduced from 5ms
 8002fb8:	2002      	movs	r0, #2
 8002fba:	f003 fc4f 	bl	800685c <HAL_Delay>
        
        // Send fault reset command when not actively moving
        if (!command_pending) {
 8002fbe:	4b1e      	ldr	r3, [pc, #120]	@ (8003038 <main+0x61c>)
 8002fc0:	781b      	ldrb	r3, [r3, #0]
 8002fc2:	b2db      	uxtb	r3, r3
 8002fc4:	f083 0301 	eor.w	r3, r3, #1
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d00f      	beq.n	8002fee <main+0x5d2>
            // Reset any faults with control word 0x0080
            EPOS4_SetControlWord(&hcan1, EPOS4_NODE_ID, 0x0080);
 8002fce:	2280      	movs	r2, #128	@ 0x80
 8002fd0:	2101      	movs	r1, #1
 8002fd2:	4821      	ldr	r0, [pc, #132]	@ (8003058 <main+0x63c>)
 8002fd4:	f001 fad0 	bl	8004578 <EPOS4_SetControlWord>
            HAL_Delay(2); // Reduced from 5ms
 8002fd8:	2002      	movs	r0, #2
 8002fda:	f003 fc3f 	bl	800685c <HAL_Delay>

            // Set to operational state (0x000F)
            EPOS4_SetControlWord(&hcan1, EPOS4_NODE_ID, 0x000F);
 8002fde:	220f      	movs	r2, #15
 8002fe0:	2101      	movs	r1, #1
 8002fe2:	481d      	ldr	r0, [pc, #116]	@ (8003058 <main+0x63c>)
 8002fe4:	f001 fac8 	bl	8004578 <EPOS4_SetControlWord>
            HAL_Delay(2); // Reduced from 5ms
 8002fe8:	2002      	movs	r0, #2
 8002fea:	f003 fc37 	bl	800685c <HAL_Delay>
        }

        last_epos4_check_ms = current_time_ms;
 8002fee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002ff0:	4a18      	ldr	r2, [pc, #96]	@ (8003054 <main+0x638>)
 8002ff2:	6013      	str	r3, [r2, #0]
    }
    
    // Check if we need to save position to flash
    periodic_position_save();
 8002ff4:	f003 f8d6 	bl	80061a4 <periodic_position_save>
  {
 8002ff8:	e644      	b.n	8002c84 <main+0x268>
 8002ffa:	bf00      	nop
 8002ffc:	200019ca 	.word	0x200019ca
 8003000:	20001908 	.word	0x20001908
 8003004:	47000000 	.word	0x47000000
 8003008:	20001900 	.word	0x20001900
 800300c:	0800ffa8 	.word	0x0800ffa8
 8003010:	20001a98 	.word	0x20001a98
 8003014:	200019bc 	.word	0x200019bc
 8003018:	200019c8 	.word	0x200019c8
 800301c:	0800ffe0 	.word	0x0800ffe0
 8003020:	0801000c 	.word	0x0801000c
 8003024:	05f5e100 	.word	0x05f5e100
 8003028:	08010048 	.word	0x08010048
 800302c:	20005aa0 	.word	0x20005aa0
 8003030:	20005ad0 	.word	0x20005ad0
 8003034:	40003000 	.word	0x40003000
 8003038:	200019c0 	.word	0x200019c0
 800303c:	20005ad4 	.word	0x20005ad4
 8003040:	200019c4 	.word	0x200019c4
 8003044:	08010078 	.word	0x08010078
 8003048:	0801009c 	.word	0x0801009c
 800304c:	40020c00 	.word	0x40020c00
 8003050:	080100d8 	.word	0x080100d8
 8003054:	20005ad8 	.word	0x20005ad8
 8003058:	200019d0 	.word	0x200019d0

0800305c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	b094      	sub	sp, #80	@ 0x50
 8003060:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003062:	f107 0320 	add.w	r3, r7, #32
 8003066:	2230      	movs	r2, #48	@ 0x30
 8003068:	2100      	movs	r1, #0
 800306a:	4618      	mov	r0, r3
 800306c:	f00c fc1a 	bl	800f8a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003070:	f107 030c 	add.w	r3, r7, #12
 8003074:	2200      	movs	r2, #0
 8003076:	601a      	str	r2, [r3, #0]
 8003078:	605a      	str	r2, [r3, #4]
 800307a:	609a      	str	r2, [r3, #8]
 800307c:	60da      	str	r2, [r3, #12]
 800307e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003080:	2300      	movs	r3, #0
 8003082:	60bb      	str	r3, [r7, #8]
 8003084:	4b28      	ldr	r3, [pc, #160]	@ (8003128 <SystemClock_Config+0xcc>)
 8003086:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003088:	4a27      	ldr	r2, [pc, #156]	@ (8003128 <SystemClock_Config+0xcc>)
 800308a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800308e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003090:	4b25      	ldr	r3, [pc, #148]	@ (8003128 <SystemClock_Config+0xcc>)
 8003092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003094:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800309c:	2300      	movs	r3, #0
 800309e:	607b      	str	r3, [r7, #4]
 80030a0:	4b22      	ldr	r3, [pc, #136]	@ (800312c <SystemClock_Config+0xd0>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a21      	ldr	r2, [pc, #132]	@ (800312c <SystemClock_Config+0xd0>)
 80030a6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030aa:	6013      	str	r3, [r2, #0]
 80030ac:	4b1f      	ldr	r3, [pc, #124]	@ (800312c <SystemClock_Config+0xd0>)
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030b4:	607b      	str	r3, [r7, #4]
 80030b6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80030b8:	2301      	movs	r3, #1
 80030ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80030bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80030c0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80030c2:	2302      	movs	r3, #2
 80030c4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80030c6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80030ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80030cc:	2308      	movs	r3, #8
 80030ce:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80030d0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80030d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80030d6:	2302      	movs	r3, #2
 80030d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80030da:	2307      	movs	r3, #7
 80030dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80030de:	f107 0320 	add.w	r3, r7, #32
 80030e2:	4618      	mov	r0, r3
 80030e4:	f007 fe26 	bl	800ad34 <HAL_RCC_OscConfig>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d001      	beq.n	80030f2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80030ee:	f001 fa8b 	bl	8004608 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80030f2:	230f      	movs	r3, #15
 80030f4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80030f6:	2302      	movs	r3, #2
 80030f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80030fe:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003102:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003104:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003108:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800310a:	f107 030c 	add.w	r3, r7, #12
 800310e:	2105      	movs	r1, #5
 8003110:	4618      	mov	r0, r3
 8003112:	f008 f887 	bl	800b224 <HAL_RCC_ClockConfig>
 8003116:	4603      	mov	r3, r0
 8003118:	2b00      	cmp	r3, #0
 800311a:	d001      	beq.n	8003120 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800311c:	f001 fa74 	bl	8004608 <Error_Handler>
  }
}
 8003120:	bf00      	nop
 8003122:	3750      	adds	r7, #80	@ 0x50
 8003124:	46bd      	mov	sp, r7
 8003126:	bd80      	pop	{r7, pc}
 8003128:	40023800 	.word	0x40023800
 800312c:	40007000 	.word	0x40007000

08003130 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8003134:	4b17      	ldr	r3, [pc, #92]	@ (8003194 <MX_CAN1_Init+0x64>)
 8003136:	4a18      	ldr	r2, [pc, #96]	@ (8003198 <MX_CAN1_Init+0x68>)
 8003138:	601a      	str	r2, [r3, #0]

  // Configure for 1Mbps with 168MHz clock (APB1 = 42MHz)
  hcan1.Init.Prescaler = 3;
 800313a:	4b16      	ldr	r3, [pc, #88]	@ (8003194 <MX_CAN1_Init+0x64>)
 800313c:	2203      	movs	r2, #3
 800313e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003140:	4b14      	ldr	r3, [pc, #80]	@ (8003194 <MX_CAN1_Init+0x64>)
 8003142:	2200      	movs	r2, #0
 8003144:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8003146:	4b13      	ldr	r3, [pc, #76]	@ (8003194 <MX_CAN1_Init+0x64>)
 8003148:	2200      	movs	r2, #0
 800314a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;  // Changed from 12TQ to 11TQ
 800314c:	4b11      	ldr	r3, [pc, #68]	@ (8003194 <MX_CAN1_Init+0x64>)
 800314e:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 8003152:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;   // Changed from 1TQ to 2TQ
 8003154:	4b0f      	ldr	r3, [pc, #60]	@ (8003194 <MX_CAN1_Init+0x64>)
 8003156:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800315a:	615a      	str	r2, [r3, #20]

  hcan1.Init.TimeTriggeredMode = DISABLE;
 800315c:	4b0d      	ldr	r3, [pc, #52]	@ (8003194 <MX_CAN1_Init+0x64>)
 800315e:	2200      	movs	r2, #0
 8003160:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;      // Enable auto recovery from bus-off state
 8003162:	4b0c      	ldr	r3, [pc, #48]	@ (8003194 <MX_CAN1_Init+0x64>)
 8003164:	2201      	movs	r2, #1
 8003166:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8003168:	4b0a      	ldr	r3, [pc, #40]	@ (8003194 <MX_CAN1_Init+0x64>)
 800316a:	2200      	movs	r2, #0
 800316c:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800316e:	4b09      	ldr	r3, [pc, #36]	@ (8003194 <MX_CAN1_Init+0x64>)
 8003170:	2201      	movs	r2, #1
 8003172:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8003174:	4b07      	ldr	r3, [pc, #28]	@ (8003194 <MX_CAN1_Init+0x64>)
 8003176:	2200      	movs	r2, #0
 8003178:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 800317a:	4b06      	ldr	r3, [pc, #24]	@ (8003194 <MX_CAN1_Init+0x64>)
 800317c:	2200      	movs	r2, #0
 800317e:	775a      	strb	r2, [r3, #29]

  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8003180:	4804      	ldr	r0, [pc, #16]	@ (8003194 <MX_CAN1_Init+0x64>)
 8003182:	f003 fb8f 	bl	80068a4 <HAL_CAN_Init>
 8003186:	4603      	mov	r3, r0
 8003188:	2b00      	cmp	r3, #0
 800318a:	d001      	beq.n	8003190 <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 800318c:	f001 fa3c 	bl	8004608 <Error_Handler>
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

 
}
 8003190:	bf00      	nop
 8003192:	bd80      	pop	{r7, pc}
 8003194:	200019d0 	.word	0x200019d0
 8003198:	40006400 	.word	0x40006400

0800319c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800319c:	b580      	push	{r7, lr}
 800319e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80031a0:	4b13      	ldr	r3, [pc, #76]	@ (80031f0 <MX_I2S3_Init+0x54>)
 80031a2:	4a14      	ldr	r2, [pc, #80]	@ (80031f4 <MX_I2S3_Init+0x58>)
 80031a4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80031a6:	4b12      	ldr	r3, [pc, #72]	@ (80031f0 <MX_I2S3_Init+0x54>)
 80031a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031ac:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80031ae:	4b10      	ldr	r3, [pc, #64]	@ (80031f0 <MX_I2S3_Init+0x54>)
 80031b0:	2200      	movs	r2, #0
 80031b2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80031b4:	4b0e      	ldr	r3, [pc, #56]	@ (80031f0 <MX_I2S3_Init+0x54>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80031ba:	4b0d      	ldr	r3, [pc, #52]	@ (80031f0 <MX_I2S3_Init+0x54>)
 80031bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80031c0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80031c2:	4b0b      	ldr	r3, [pc, #44]	@ (80031f0 <MX_I2S3_Init+0x54>)
 80031c4:	4a0c      	ldr	r2, [pc, #48]	@ (80031f8 <MX_I2S3_Init+0x5c>)
 80031c6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80031c8:	4b09      	ldr	r3, [pc, #36]	@ (80031f0 <MX_I2S3_Init+0x54>)
 80031ca:	2200      	movs	r2, #0
 80031cc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80031ce:	4b08      	ldr	r3, [pc, #32]	@ (80031f0 <MX_I2S3_Init+0x54>)
 80031d0:	2200      	movs	r2, #0
 80031d2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80031d4:	4b06      	ldr	r3, [pc, #24]	@ (80031f0 <MX_I2S3_Init+0x54>)
 80031d6:	2200      	movs	r2, #0
 80031d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80031da:	4805      	ldr	r0, [pc, #20]	@ (80031f0 <MX_I2S3_Init+0x54>)
 80031dc:	f007 f90a 	bl	800a3f4 <HAL_I2S_Init>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d001      	beq.n	80031ea <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80031e6:	f001 fa0f 	bl	8004608 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80031ea:	bf00      	nop
 80031ec:	bd80      	pop	{r7, pc}
 80031ee:	bf00      	nop
 80031f0:	200019f8 	.word	0x200019f8
 80031f4:	40003c00 	.word	0x40003c00
 80031f8:	00017700 	.word	0x00017700

080031fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003200:	4b17      	ldr	r3, [pc, #92]	@ (8003260 <MX_SPI1_Init+0x64>)
 8003202:	4a18      	ldr	r2, [pc, #96]	@ (8003264 <MX_SPI1_Init+0x68>)
 8003204:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8003206:	4b16      	ldr	r3, [pc, #88]	@ (8003260 <MX_SPI1_Init+0x64>)
 8003208:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800320c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800320e:	4b14      	ldr	r3, [pc, #80]	@ (8003260 <MX_SPI1_Init+0x64>)
 8003210:	2200      	movs	r2, #0
 8003212:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003214:	4b12      	ldr	r3, [pc, #72]	@ (8003260 <MX_SPI1_Init+0x64>)
 8003216:	2200      	movs	r2, #0
 8003218:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800321a:	4b11      	ldr	r3, [pc, #68]	@ (8003260 <MX_SPI1_Init+0x64>)
 800321c:	2200      	movs	r2, #0
 800321e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003220:	4b0f      	ldr	r3, [pc, #60]	@ (8003260 <MX_SPI1_Init+0x64>)
 8003222:	2200      	movs	r2, #0
 8003224:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8003226:	4b0e      	ldr	r3, [pc, #56]	@ (8003260 <MX_SPI1_Init+0x64>)
 8003228:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800322c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800322e:	4b0c      	ldr	r3, [pc, #48]	@ (8003260 <MX_SPI1_Init+0x64>)
 8003230:	2200      	movs	r2, #0
 8003232:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003234:	4b0a      	ldr	r3, [pc, #40]	@ (8003260 <MX_SPI1_Init+0x64>)
 8003236:	2200      	movs	r2, #0
 8003238:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800323a:	4b09      	ldr	r3, [pc, #36]	@ (8003260 <MX_SPI1_Init+0x64>)
 800323c:	2200      	movs	r2, #0
 800323e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003240:	4b07      	ldr	r3, [pc, #28]	@ (8003260 <MX_SPI1_Init+0x64>)
 8003242:	2200      	movs	r2, #0
 8003244:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8003246:	4b06      	ldr	r3, [pc, #24]	@ (8003260 <MX_SPI1_Init+0x64>)
 8003248:	220a      	movs	r2, #10
 800324a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800324c:	4804      	ldr	r0, [pc, #16]	@ (8003260 <MX_SPI1_Init+0x64>)
 800324e:	f008 fb17 	bl	800b880 <HAL_SPI_Init>
 8003252:	4603      	mov	r3, r0
 8003254:	2b00      	cmp	r3, #0
 8003256:	d001      	beq.n	800325c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003258:	f001 f9d6 	bl	8004608 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800325c:	bf00      	nop
 800325e:	bd80      	pop	{r7, pc}
 8003260:	20001a40 	.word	0x20001a40
 8003264:	40013000 	.word	0x40013000

08003268 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003268:	b580      	push	{r7, lr}
 800326a:	b08c      	sub	sp, #48	@ 0x30
 800326c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800326e:	f107 031c 	add.w	r3, r7, #28
 8003272:	2200      	movs	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	605a      	str	r2, [r3, #4]
 8003278:	609a      	str	r2, [r3, #8]
 800327a:	60da      	str	r2, [r3, #12]
 800327c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 800327e:	2300      	movs	r3, #0
 8003280:	61bb      	str	r3, [r7, #24]
 8003282:	4b7a      	ldr	r3, [pc, #488]	@ (800346c <MX_GPIO_Init+0x204>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003286:	4a79      	ldr	r2, [pc, #484]	@ (800346c <MX_GPIO_Init+0x204>)
 8003288:	f043 0310 	orr.w	r3, r3, #16
 800328c:	6313      	str	r3, [r2, #48]	@ 0x30
 800328e:	4b77      	ldr	r3, [pc, #476]	@ (800346c <MX_GPIO_Init+0x204>)
 8003290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003292:	f003 0310 	and.w	r3, r3, #16
 8003296:	61bb      	str	r3, [r7, #24]
 8003298:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800329a:	2300      	movs	r3, #0
 800329c:	617b      	str	r3, [r7, #20]
 800329e:	4b73      	ldr	r3, [pc, #460]	@ (800346c <MX_GPIO_Init+0x204>)
 80032a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032a2:	4a72      	ldr	r2, [pc, #456]	@ (800346c <MX_GPIO_Init+0x204>)
 80032a4:	f043 0304 	orr.w	r3, r3, #4
 80032a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80032aa:	4b70      	ldr	r3, [pc, #448]	@ (800346c <MX_GPIO_Init+0x204>)
 80032ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ae:	f003 0304 	and.w	r3, r3, #4
 80032b2:	617b      	str	r3, [r7, #20]
 80032b4:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 80032b6:	2300      	movs	r3, #0
 80032b8:	613b      	str	r3, [r7, #16]
 80032ba:	4b6c      	ldr	r3, [pc, #432]	@ (800346c <MX_GPIO_Init+0x204>)
 80032bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032be:	4a6b      	ldr	r2, [pc, #428]	@ (800346c <MX_GPIO_Init+0x204>)
 80032c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80032c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80032c6:	4b69      	ldr	r3, [pc, #420]	@ (800346c <MX_GPIO_Init+0x204>)
 80032c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ce:	613b      	str	r3, [r7, #16]
 80032d0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032d2:	2300      	movs	r3, #0
 80032d4:	60fb      	str	r3, [r7, #12]
 80032d6:	4b65      	ldr	r3, [pc, #404]	@ (800346c <MX_GPIO_Init+0x204>)
 80032d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032da:	4a64      	ldr	r2, [pc, #400]	@ (800346c <MX_GPIO_Init+0x204>)
 80032dc:	f043 0301 	orr.w	r3, r3, #1
 80032e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80032e2:	4b62      	ldr	r3, [pc, #392]	@ (800346c <MX_GPIO_Init+0x204>)
 80032e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	60fb      	str	r3, [r7, #12]
 80032ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032ee:	2300      	movs	r3, #0
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	4b5e      	ldr	r3, [pc, #376]	@ (800346c <MX_GPIO_Init+0x204>)
 80032f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032f6:	4a5d      	ldr	r2, [pc, #372]	@ (800346c <MX_GPIO_Init+0x204>)
 80032f8:	f043 0302 	orr.w	r3, r3, #2
 80032fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80032fe:	4b5b      	ldr	r3, [pc, #364]	@ (800346c <MX_GPIO_Init+0x204>)
 8003300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003302:	f003 0302 	and.w	r3, r3, #2
 8003306:	60bb      	str	r3, [r7, #8]
 8003308:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800330a:	2300      	movs	r3, #0
 800330c:	607b      	str	r3, [r7, #4]
 800330e:	4b57      	ldr	r3, [pc, #348]	@ (800346c <MX_GPIO_Init+0x204>)
 8003310:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003312:	4a56      	ldr	r2, [pc, #344]	@ (800346c <MX_GPIO_Init+0x204>)
 8003314:	f043 0308 	orr.w	r3, r3, #8
 8003318:	6313      	str	r3, [r2, #48]	@ 0x30
 800331a:	4b54      	ldr	r3, [pc, #336]	@ (800346c <MX_GPIO_Init+0x204>)
 800331c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800331e:	f003 0308 	and.w	r3, r3, #8
 8003322:	607b      	str	r3, [r7, #4]
 8003324:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8003326:	2200      	movs	r2, #0
 8003328:	2108      	movs	r1, #8
 800332a:	4851      	ldr	r0, [pc, #324]	@ (8003470 <MX_GPIO_Init+0x208>)
 800332c:	f004 fefa 	bl	8008124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8003330:	2201      	movs	r2, #1
 8003332:	2101      	movs	r1, #1
 8003334:	484f      	ldr	r0, [pc, #316]	@ (8003474 <MX_GPIO_Init+0x20c>)
 8003336:	f004 fef5 	bl	8008124 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800333a:	2200      	movs	r2, #0
 800333c:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8003340:	484d      	ldr	r0, [pc, #308]	@ (8003478 <MX_GPIO_Init+0x210>)
 8003342:	f004 feef 	bl	8008124 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

    /*Configure GPIO pin : CS_I2C_SPI_Pin */
    GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8003346:	2308      	movs	r3, #8
 8003348:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800334a:	2301      	movs	r3, #1
 800334c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800334e:	2300      	movs	r3, #0
 8003350:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003352:	2300      	movs	r3, #0
 8003354:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8003356:	f107 031c 	add.w	r3, r7, #28
 800335a:	4619      	mov	r1, r3
 800335c:	4844      	ldr	r0, [pc, #272]	@ (8003470 <MX_GPIO_Init+0x208>)
 800335e:	f004 fd45 	bl	8007dec <HAL_GPIO_Init>

    /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
    GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8003362:	2301      	movs	r3, #1
 8003364:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003366:	2301      	movs	r3, #1
 8003368:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800336a:	2300      	movs	r3, #0
 800336c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336e:	2300      	movs	r3, #0
 8003370:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8003372:	f107 031c 	add.w	r3, r7, #28
 8003376:	4619      	mov	r1, r3
 8003378:	483e      	ldr	r0, [pc, #248]	@ (8003474 <MX_GPIO_Init+0x20c>)
 800337a:	f004 fd37 	bl	8007dec <HAL_GPIO_Init>

    /*Configure GPIO pin : PDM_OUT_Pin */
    GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800337e:	2308      	movs	r3, #8
 8003380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003382:	2302      	movs	r3, #2
 8003384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003386:	2300      	movs	r3, #0
 8003388:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800338a:	2300      	movs	r3, #0
 800338c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800338e:	2305      	movs	r3, #5
 8003390:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8003392:	f107 031c 	add.w	r3, r7, #28
 8003396:	4619      	mov	r1, r3
 8003398:	4836      	ldr	r0, [pc, #216]	@ (8003474 <MX_GPIO_Init+0x20c>)
 800339a:	f004 fd27 	bl	8007dec <HAL_GPIO_Init>

    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 800339e:	2301      	movs	r3, #1
 80033a0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80033a2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80033a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033a8:	2300      	movs	r3, #0
 80033aa:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80033ac:	f107 031c 	add.w	r3, r7, #28
 80033b0:	4619      	mov	r1, r3
 80033b2:	4832      	ldr	r0, [pc, #200]	@ (800347c <MX_GPIO_Init+0x214>)
 80033b4:	f004 fd1a 	bl	8007dec <HAL_GPIO_Init>

    /*Configure GPIO pin : BOOT1_Pin */
    GPIO_InitStruct.Pin = BOOT1_Pin;
 80033b8:	2304      	movs	r3, #4
 80033ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80033bc:	2300      	movs	r3, #0
 80033be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033c0:	2300      	movs	r3, #0
 80033c2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80033c4:	f107 031c 	add.w	r3, r7, #28
 80033c8:	4619      	mov	r1, r3
 80033ca:	482d      	ldr	r0, [pc, #180]	@ (8003480 <MX_GPIO_Init+0x218>)
 80033cc:	f004 fd0e 	bl	8007dec <HAL_GPIO_Init>

    /*Configure GPIO pin : CLK_IN_Pin */
    GPIO_InitStruct.Pin = CLK_IN_Pin;
 80033d0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80033d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033d6:	2302      	movs	r3, #2
 80033d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033da:	2300      	movs	r3, #0
 80033dc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033de:	2300      	movs	r3, #0
 80033e0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80033e2:	2305      	movs	r3, #5
 80033e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80033e6:	f107 031c 	add.w	r3, r7, #28
 80033ea:	4619      	mov	r1, r3
 80033ec:	4824      	ldr	r0, [pc, #144]	@ (8003480 <MX_GPIO_Init+0x218>)
 80033ee:	f004 fcfd 	bl	8007dec <HAL_GPIO_Init>

    /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                             Audio_RST_Pin */
    GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80033f2:	f24f 0310 	movw	r3, #61456	@ 0xf010
 80033f6:	61fb      	str	r3, [r7, #28]
                            |Audio_RST_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80033f8:	2301      	movs	r3, #1
 80033fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033fc:	2300      	movs	r3, #0
 80033fe:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003400:	2300      	movs	r3, #0
 8003402:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003404:	f107 031c 	add.w	r3, r7, #28
 8003408:	4619      	mov	r1, r3
 800340a:	481b      	ldr	r0, [pc, #108]	@ (8003478 <MX_GPIO_Init+0x210>)
 800340c:	f004 fcee 	bl	8007dec <HAL_GPIO_Init>

    /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
    GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8003410:	2320      	movs	r3, #32
 8003412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003414:	2300      	movs	r3, #0
 8003416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003418:	2300      	movs	r3, #0
 800341a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800341c:	f107 031c 	add.w	r3, r7, #28
 8003420:	4619      	mov	r1, r3
 8003422:	4815      	ldr	r0, [pc, #84]	@ (8003478 <MX_GPIO_Init+0x210>)
 8003424:	f004 fce2 	bl	8007dec <HAL_GPIO_Init>

    /*Configure GPIO pin : Audio_SCL_Pin */
    GPIO_InitStruct.Pin = Audio_SCL_Pin;
 8003428:	2340      	movs	r3, #64	@ 0x40
 800342a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800342c:	2312      	movs	r3, #18
 800342e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003430:	2301      	movs	r3, #1
 8003432:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003434:	2300      	movs	r3, #0
 8003436:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003438:	2304      	movs	r3, #4
 800343a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(Audio_SCL_GPIO_Port, &GPIO_InitStruct);
 800343c:	f107 031c 	add.w	r3, r7, #28
 8003440:	4619      	mov	r1, r3
 8003442:	480f      	ldr	r0, [pc, #60]	@ (8003480 <MX_GPIO_Init+0x218>)
 8003444:	f004 fcd2 	bl	8007dec <HAL_GPIO_Init>

    /*Configure GPIO pin : MEMS_INT2_Pin */
    GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8003448:	2302      	movs	r3, #2
 800344a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800344c:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8003450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003452:	2300      	movs	r3, #0
 8003454:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8003456:	f107 031c 	add.w	r3, r7, #28
 800345a:	4619      	mov	r1, r3
 800345c:	4804      	ldr	r0, [pc, #16]	@ (8003470 <MX_GPIO_Init+0x208>)
 800345e:	f004 fcc5 	bl	8007dec <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */

    /* USER CODE END MX_GPIO_Init_2 */
}
 8003462:	bf00      	nop
 8003464:	3730      	adds	r7, #48	@ 0x30
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	40023800 	.word	0x40023800
 8003470:	40021000 	.word	0x40021000
 8003474:	40020800 	.word	0x40020800
 8003478:	40020c00 	.word	0x40020c00
 800347c:	40020000 	.word	0x40020000
 8003480:	40020400 	.word	0x40020400

08003484 <HAL_CAN_RxFifo0MsgPendingCallback>:
}



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003484:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003486:	b09d      	sub	sp, #116	@ 0x74
 8003488:	af06      	add	r7, sp, #24
 800348a:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data) != HAL_OK) {
 800348c:	f107 0318 	add.w	r3, r7, #24
 8003490:	f107 0220 	add.w	r2, r7, #32
 8003494:	2100      	movs	r1, #0
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f003 fd29 	bl	8006eee <HAL_CAN_GetRxMessage>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	f040 8198 	bne.w	80037d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x350>
        return;
    }

    // Toggle orange LED (LD3) to show RX activity
    can_rx_led = !can_rx_led;
 80034a4:	4b9e      	ldr	r3, [pc, #632]	@ (8003720 <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	bf0c      	ite	eq
 80034ac:	2301      	moveq	r3, #1
 80034ae:	2300      	movne	r3, #0
 80034b0:	b2db      	uxtb	r3, r3
 80034b2:	461a      	mov	r2, r3
 80034b4:	4b9a      	ldr	r3, [pc, #616]	@ (8003720 <HAL_CAN_RxFifo0MsgPendingCallback+0x29c>)
 80034b6:	701a      	strb	r2, [r3, #0]

    // Record reception timestamp
    uint64_t timestamp_usec = micros64();
 80034b8:	f001 fc8e 	bl	8004dd8 <micros64>
 80034bc:	e9c7 0114 	strd	r0, r1, [r7, #80]	@ 0x50

    // Prepare the frame structure for Canard
    CanardCANFrame frame;

    // Set ID and flags
    if (rx_header.IDE == CAN_ID_EXT) {
 80034c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034c2:	2b04      	cmp	r3, #4
 80034c4:	d104      	bne.n	80034d0 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
        // Extended ID frame with the CANARD_CAN_FRAME_EFF flag set
        frame.id = rx_header.ExtId | CANARD_CAN_FRAME_EFF;
 80034c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80034cc:	60bb      	str	r3, [r7, #8]
 80034ce:	e001      	b.n	80034d4 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
    } else {
        // Standard ID frame
        frame.id = rx_header.StdId;
 80034d0:	6a3b      	ldr	r3, [r7, #32]
 80034d2:	60bb      	str	r3, [r7, #8]
    }

    // Set RTR flag if this is a remote frame
    if (rx_header.RTR == CAN_RTR_REMOTE) {
 80034d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d103      	bne.n	80034e2 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
        frame.id |= CANARD_CAN_FRAME_RTR;
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80034e0:	60bb      	str	r3, [r7, #8]
    }

    // Copy data and set timestamp
    frame.data_len = rx_header.DLC;
 80034e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80034e4:	b2db      	uxtb	r3, r3
 80034e6:	753b      	strb	r3, [r7, #20]
    memcpy(frame.data, rx_data, frame.data_len);
 80034e8:	7d3b      	ldrb	r3, [r7, #20]
 80034ea:	461a      	mov	r2, r3
 80034ec:	f107 0118 	add.w	r1, r7, #24
 80034f0:	f107 0308 	add.w	r3, r7, #8
 80034f4:	3304      	adds	r3, #4
 80034f6:	4618      	mov	r0, r3
 80034f8:	f00c fa73 	bl	800f9e2 <memcpy>

    // Process the received frame with Canard
    int result = canardHandleRxFrame(&canard, &frame, timestamp_usec);
 80034fc:	f107 0108 	add.w	r1, r7, #8
 8003500:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003504:	4887      	ldr	r0, [pc, #540]	@ (8003724 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a0>)
 8003506:	f7fd fce1 	bl	8000ecc <canardHandleRxFrame>
 800350a:	4603      	mov	r3, r0
 800350c:	64fb      	str	r3, [r7, #76]	@ 0x4c

    // Check if this is a SDO read response for position
    if (rx_header.StdId == (EPOS4_SDO_READ_REPLY + EPOS4_NODE_ID)) {
 800350e:	6a3b      	ldr	r3, [r7, #32]
 8003510:	f240 5281 	movw	r2, #1409	@ 0x581
 8003514:	4293      	cmp	r3, r2
 8003516:	f040 8162 	bne.w	80037de <HAL_CAN_RxFifo0MsgPendingCallback+0x35a>
        // Feed watchdog during message processing
        IWDG->KR = 0xAAAA;
 800351a:	4b83      	ldr	r3, [pc, #524]	@ (8003728 <HAL_CAN_RxFifo0MsgPendingCallback+0x2a4>)
 800351c:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8003520:	601a      	str	r2, [r3, #0]

        // IMPROVED DEBUGGING: Print all SDO responses with their index and data
        printf("SDO_RESPONSE: Command=0x%02X, Index=0x%02X%02X, Subindex=0x%02X, Data=0x%02X%02X%02X%02X\n",
            rx_data[0], rx_data[1], rx_data[2], rx_data[3],
 8003522:	7e3b      	ldrb	r3, [r7, #24]
        printf("SDO_RESPONSE: Command=0x%02X, Index=0x%02X%02X, Subindex=0x%02X, Data=0x%02X%02X%02X%02X\n",
 8003524:	461d      	mov	r5, r3
            rx_data[0], rx_data[1], rx_data[2], rx_data[3],
 8003526:	7e7b      	ldrb	r3, [r7, #25]
        printf("SDO_RESPONSE: Command=0x%02X, Index=0x%02X%02X, Subindex=0x%02X, Data=0x%02X%02X%02X%02X\n",
 8003528:	461e      	mov	r6, r3
            rx_data[0], rx_data[1], rx_data[2], rx_data[3],
 800352a:	7ebb      	ldrb	r3, [r7, #26]
        printf("SDO_RESPONSE: Command=0x%02X, Index=0x%02X%02X, Subindex=0x%02X, Data=0x%02X%02X%02X%02X\n",
 800352c:	469c      	mov	ip, r3
            rx_data[0], rx_data[1], rx_data[2], rx_data[3],
 800352e:	7efb      	ldrb	r3, [r7, #27]
            rx_data[4], rx_data[5], rx_data[6], rx_data[7]);
 8003530:	7f3a      	ldrb	r2, [r7, #28]
 8003532:	7f79      	ldrb	r1, [r7, #29]
 8003534:	7fb8      	ldrb	r0, [r7, #30]
 8003536:	7ffc      	ldrb	r4, [r7, #31]
        printf("SDO_RESPONSE: Command=0x%02X, Index=0x%02X%02X, Subindex=0x%02X, Data=0x%02X%02X%02X%02X\n",
 8003538:	9404      	str	r4, [sp, #16]
 800353a:	9003      	str	r0, [sp, #12]
 800353c:	9102      	str	r1, [sp, #8]
 800353e:	9201      	str	r2, [sp, #4]
 8003540:	9300      	str	r3, [sp, #0]
 8003542:	4663      	mov	r3, ip
 8003544:	4632      	mov	r2, r6
 8003546:	4629      	mov	r1, r5
 8003548:	4878      	ldr	r0, [pc, #480]	@ (800372c <HAL_CAN_RxFifo0MsgPendingCallback+0x2a8>)
 800354a:	f7ff fa5c 	bl	8002a06 <printf>

        // Check for actual position response
        if (rx_data[0] == 0x43 &&  // Read response
 800354e:	7e3b      	ldrb	r3, [r7, #24]
 8003550:	2b43      	cmp	r3, #67	@ 0x43
 8003552:	d130      	bne.n	80035b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x132>
            rx_data[1] == (EPOS4_ACTUAL_POSITION_INDEX & 0xFF) &&
 8003554:	7e7b      	ldrb	r3, [r7, #25]
        if (rx_data[0] == 0x43 &&  // Read response
 8003556:	2b64      	cmp	r3, #100	@ 0x64
 8003558:	d12d      	bne.n	80035b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x132>
            rx_data[2] == ((EPOS4_ACTUAL_POSITION_INDEX >> 8) & 0xFF) &&
 800355a:	7ebb      	ldrb	r3, [r7, #26]
            rx_data[1] == (EPOS4_ACTUAL_POSITION_INDEX & 0xFF) &&
 800355c:	2b60      	cmp	r3, #96	@ 0x60
 800355e:	d12a      	bne.n	80035b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x132>
            rx_data[3] == EPOS4_ACTUAL_POSITION_SUBINDEX) {
 8003560:	7efb      	ldrb	r3, [r7, #27]
            rx_data[2] == ((EPOS4_ACTUAL_POSITION_INDEX >> 8) & 0xFF) &&
 8003562:	2b00      	cmp	r3, #0
 8003564:	d127      	bne.n	80035b6 <HAL_CAN_RxFifo0MsgPendingCallback+0x132>

            // Extract position value (4 bytes, little-endian)
            int32_t position_value = (int32_t)rx_data[4] |
 8003566:	7f3b      	ldrb	r3, [r7, #28]
 8003568:	461a      	mov	r2, r3
                                  ((int32_t)rx_data[5] << 8) |
 800356a:	7f7b      	ldrb	r3, [r7, #29]
 800356c:	021b      	lsls	r3, r3, #8
            int32_t position_value = (int32_t)rx_data[4] |
 800356e:	431a      	orrs	r2, r3
                                  ((int32_t)rx_data[6] << 16) |
 8003570:	7fbb      	ldrb	r3, [r7, #30]
 8003572:	041b      	lsls	r3, r3, #16
                                  ((int32_t)rx_data[5] << 8) |
 8003574:	431a      	orrs	r2, r3
                                  ((int32_t)rx_data[7] << 24);
 8003576:	7ffb      	ldrb	r3, [r7, #31]
 8003578:	061b      	lsls	r3, r3, #24
            int32_t position_value = (int32_t)rx_data[4] |
 800357a:	4313      	orrs	r3, r2
 800357c:	64bb      	str	r3, [r7, #72]	@ 0x48

            // Update global position variable
            current_position = position_value;
 800357e:	4a6c      	ldr	r2, [pc, #432]	@ (8003730 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8003580:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003582:	6013      	str	r3, [r2, #0]

            // Print position more prominently for debugging
            printf("CURRENT POSITION: %ld\n", (long)current_position);
 8003584:	4b6a      	ldr	r3, [pc, #424]	@ (8003730 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	4619      	mov	r1, r3
 800358a:	486a      	ldr	r0, [pc, #424]	@ (8003734 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b0>)
 800358c:	f7ff fa3b 	bl	8002a06 <printf>

            // Update position parameter with normalized value
            param_t* pos_param = getParamByName("epos4.pos");
 8003590:	4869      	ldr	r0, [pc, #420]	@ (8003738 <HAL_CAN_RxFifo0MsgPendingCallback+0x2b4>)
 8003592:	f001 fcf7 	bl	8004f84 <getParamByName>
 8003596:	6478      	str	r0, [r7, #68]	@ 0x44
            if (pos_param != NULL) {
 8003598:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800359a:	2b00      	cmp	r3, #0
 800359c:	f000 811c 	beq.w	80037d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x354>
                pos_param->value.f = translateEPOS4Position(current_position);
 80035a0:	4b63      	ldr	r3, [pc, #396]	@ (8003730 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ac>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f001 fc85 	bl	8004eb4 <translateEPOS4Position>
 80035aa:	eef0 7a40 	vmov.f32	s15, s0
 80035ae:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035b0:	edc3 7a05 	vstr	s15, [r3, #20]
            rx_data[3] == EPOS4_ACTUAL_POSITION_SUBINDEX) {
 80035b4:	e110      	b.n	80037d8 <HAL_CAN_RxFifo0MsgPendingCallback+0x354>
            }
        }
        // Check for statusword response (improved debugging)
        else if ((rx_data[0] & 0x7F) == 0x4B &&  // Read response (2 bytes)
 80035b6:	7e3b      	ldrb	r3, [r7, #24]
 80035b8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80035bc:	2b4b      	cmp	r3, #75	@ 0x4b
 80035be:	d12c      	bne.n	800361a <HAL_CAN_RxFifo0MsgPendingCallback+0x196>
                rx_data[1] == (EPOS4_STATUSWORD_INDEX & 0xFF) &&
 80035c0:	7e7b      	ldrb	r3, [r7, #25]
        else if ((rx_data[0] & 0x7F) == 0x4B &&  // Read response (2 bytes)
 80035c2:	2b41      	cmp	r3, #65	@ 0x41
 80035c4:	d129      	bne.n	800361a <HAL_CAN_RxFifo0MsgPendingCallback+0x196>
                rx_data[2] == ((EPOS4_STATUSWORD_INDEX >> 8) & 0xFF) &&
 80035c6:	7ebb      	ldrb	r3, [r7, #26]
                rx_data[1] == (EPOS4_STATUSWORD_INDEX & 0xFF) &&
 80035c8:	2b60      	cmp	r3, #96	@ 0x60
 80035ca:	d126      	bne.n	800361a <HAL_CAN_RxFifo0MsgPendingCallback+0x196>
                rx_data[3] == 0x00) {  // Subindex 0
 80035cc:	7efb      	ldrb	r3, [r7, #27]
                rx_data[2] == ((EPOS4_STATUSWORD_INDEX >> 8) & 0xFF) &&
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d123      	bne.n	800361a <HAL_CAN_RxFifo0MsgPendingCallback+0x196>

            // Extract the statusword (2 bytes, little-endian)
            uint16_t statusword = (uint16_t)rx_data[4] | ((uint16_t)rx_data[5] << 8);
 80035d2:	7f3b      	ldrb	r3, [r7, #28]
 80035d4:	b21a      	sxth	r2, r3
 80035d6:	7f7b      	ldrb	r3, [r7, #29]
 80035d8:	b21b      	sxth	r3, r3
 80035da:	021b      	lsls	r3, r3, #8
 80035dc:	b21b      	sxth	r3, r3
 80035de:	4313      	orrs	r3, r2
 80035e0:	b21b      	sxth	r3, r3
 80035e2:	f8a7 3042 	strh.w	r3, [r7, #66]	@ 0x42

            // Detailed status interpretation
            
            
            // Detailed response based on status
            if (statusword & 0x0008) {
 80035e6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d009      	beq.n	8003606 <HAL_CAN_RxFifo0MsgPendingCallback+0x182>
                // Try to reset fault
                epos4_send_sdo_write(EPOS4_CONTROLWORD_INDEX, 0x00, 0x0080, 2); // Fault reset
 80035f2:	2302      	movs	r3, #2
 80035f4:	2280      	movs	r2, #128	@ 0x80
 80035f6:	2100      	movs	r1, #0
 80035f8:	f246 0040 	movw	r0, #24640	@ 0x6040
 80035fc:	f002 f820 	bl	8005640 <epos4_send_sdo_write>
                // Turn on red LED to indicate error
                // Then try to re-enable
                epos4_enable_motor();
 8003600:	f000 ff38 	bl	8004474 <epos4_enable_motor>
                rx_data[3] == 0x00) {  // Subindex 0
 8003604:	e0ea      	b.n	80037dc <HAL_CAN_RxFifo0MsgPendingCallback+0x358>
            } else if (!(statusword & 0x0004)) {
 8003606:	f8b7 3042 	ldrh.w	r3, [r7, #66]	@ 0x42
 800360a:	f003 0304 	and.w	r3, r3, #4
 800360e:	2b00      	cmp	r3, #0
 8003610:	f040 80e4 	bne.w	80037dc <HAL_CAN_RxFifo0MsgPendingCallback+0x358>
                // Attempt to enable operation
                epos4_enable_motor();
 8003614:	f000 ff2e 	bl	8004474 <epos4_enable_motor>
                rx_data[3] == 0x00) {  // Subindex 0
 8003618:	e0e0      	b.n	80037dc <HAL_CAN_RxFifo0MsgPendingCallback+0x358>
            } else {
                // Operation enabled - turn off error LED
            }
        }
        // Also check for generic SDO responses to handle errors
        else if ((rx_data[0] & 0x80) == 0x80) {
 800361a:	7e3b      	ldrb	r3, [r7, #24]
 800361c:	b25b      	sxtb	r3, r3
 800361e:	2b00      	cmp	r3, #0
 8003620:	f280 80dd 	bge.w	80037de <HAL_CAN_RxFifo0MsgPendingCallback+0x35a>
            // This is an SDO abort message
            uint32_t abort_code = (uint32_t)rx_data[4] |
 8003624:	7f3b      	ldrb	r3, [r7, #28]
 8003626:	461a      	mov	r2, r3
                              ((uint32_t)rx_data[5] << 8) |
 8003628:	7f7b      	ldrb	r3, [r7, #29]
 800362a:	021b      	lsls	r3, r3, #8
            uint32_t abort_code = (uint32_t)rx_data[4] |
 800362c:	431a      	orrs	r2, r3
                              ((uint32_t)rx_data[6] << 16) |
 800362e:	7fbb      	ldrb	r3, [r7, #30]
 8003630:	041b      	lsls	r3, r3, #16
                              ((uint32_t)rx_data[5] << 8) |
 8003632:	431a      	orrs	r2, r3
                              ((uint32_t)rx_data[7] << 24);
 8003634:	7ffb      	ldrb	r3, [r7, #31]
 8003636:	061b      	lsls	r3, r3, #24
            uint32_t abort_code = (uint32_t)rx_data[4] |
 8003638:	4313      	orrs	r3, r2
 800363a:	63fb      	str	r3, [r7, #60]	@ 0x3c

            
            // Set the global error flag to trigger error handling in state machine
            last_sdo_error = true;
 800363c:	4b3f      	ldr	r3, [pc, #252]	@ (800373c <HAL_CAN_RxFifo0MsgPendingCallback+0x2b8>)
 800363e:	2201      	movs	r2, #1
 8003640:	701a      	strb	r2, [r3, #0]
            
            // Provide more detail on common error codes
            switch (abort_code) {
 8003642:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003644:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003648:	f000 80b6 	beq.w	80037b8 <HAL_CAN_RxFifo0MsgPendingCallback+0x334>
 800364c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800364e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003652:	f200 80b5 	bhi.w	80037c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x33c>
 8003656:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003658:	4a39      	ldr	r2, [pc, #228]	@ (8003740 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 800365a:	4293      	cmp	r3, r2
 800365c:	f000 80a8 	beq.w	80037b0 <HAL_CAN_RxFifo0MsgPendingCallback+0x32c>
 8003660:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003662:	4a37      	ldr	r2, [pc, #220]	@ (8003740 <HAL_CAN_RxFifo0MsgPendingCallback+0x2bc>)
 8003664:	4293      	cmp	r3, r2
 8003666:	f200 80ab 	bhi.w	80037c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x33c>
 800366a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800366c:	4a35      	ldr	r2, [pc, #212]	@ (8003744 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 800366e:	4293      	cmp	r3, r2
 8003670:	f000 809a 	beq.w	80037a8 <HAL_CAN_RxFifo0MsgPendingCallback+0x324>
 8003674:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003676:	4a33      	ldr	r2, [pc, #204]	@ (8003744 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c0>)
 8003678:	4293      	cmp	r3, r2
 800367a:	f200 80a1 	bhi.w	80037c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x33c>
 800367e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003680:	4a31      	ldr	r2, [pc, #196]	@ (8003748 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 8003682:	4293      	cmp	r3, r2
 8003684:	f000 808c 	beq.w	80037a0 <HAL_CAN_RxFifo0MsgPendingCallback+0x31c>
 8003688:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800368a:	4a2f      	ldr	r2, [pc, #188]	@ (8003748 <HAL_CAN_RxFifo0MsgPendingCallback+0x2c4>)
 800368c:	4293      	cmp	r3, r2
 800368e:	f200 8097 	bhi.w	80037c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x33c>
 8003692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003694:	4a2d      	ldr	r2, [pc, #180]	@ (800374c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d07e      	beq.n	8003798 <HAL_CAN_RxFifo0MsgPendingCallback+0x314>
 800369a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800369c:	4a2b      	ldr	r2, [pc, #172]	@ (800374c <HAL_CAN_RxFifo0MsgPendingCallback+0x2c8>)
 800369e:	4293      	cmp	r3, r2
 80036a0:	f200 808e 	bhi.w	80037c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x33c>
 80036a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036a6:	4a2a      	ldr	r2, [pc, #168]	@ (8003750 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 80036a8:	4293      	cmp	r3, r2
 80036aa:	d071      	beq.n	8003790 <HAL_CAN_RxFifo0MsgPendingCallback+0x30c>
 80036ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036ae:	4a28      	ldr	r2, [pc, #160]	@ (8003750 <HAL_CAN_RxFifo0MsgPendingCallback+0x2cc>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	f200 8085 	bhi.w	80037c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x33c>
 80036b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036b8:	4a26      	ldr	r2, [pc, #152]	@ (8003754 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d064      	beq.n	8003788 <HAL_CAN_RxFifo0MsgPendingCallback+0x304>
 80036be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036c0:	4a24      	ldr	r2, [pc, #144]	@ (8003754 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d0>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d87c      	bhi.n	80037c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x33c>
 80036c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036c8:	4a23      	ldr	r2, [pc, #140]	@ (8003758 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d058      	beq.n	8003780 <HAL_CAN_RxFifo0MsgPendingCallback+0x2fc>
 80036ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036d0:	4a21      	ldr	r2, [pc, #132]	@ (8003758 <HAL_CAN_RxFifo0MsgPendingCallback+0x2d4>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d874      	bhi.n	80037c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x33c>
 80036d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036d8:	4a20      	ldr	r2, [pc, #128]	@ (800375c <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d04c      	beq.n	8003778 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f4>
 80036de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036e0:	4a1e      	ldr	r2, [pc, #120]	@ (800375c <HAL_CAN_RxFifo0MsgPendingCallback+0x2d8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d86c      	bhi.n	80037c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x33c>
 80036e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036e8:	4a1d      	ldr	r2, [pc, #116]	@ (8003760 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d014      	beq.n	8003718 <HAL_CAN_RxFifo0MsgPendingCallback+0x294>
 80036ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036f0:	4a1b      	ldr	r2, [pc, #108]	@ (8003760 <HAL_CAN_RxFifo0MsgPendingCallback+0x2dc>)
 80036f2:	4293      	cmp	r3, r2
 80036f4:	d864      	bhi.n	80037c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x33c>
 80036f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80036f8:	4a1a      	ldr	r2, [pc, #104]	@ (8003764 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d004      	beq.n	8003708 <HAL_CAN_RxFifo0MsgPendingCallback+0x284>
 80036fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003700:	4a19      	ldr	r2, [pc, #100]	@ (8003768 <HAL_CAN_RxFifo0MsgPendingCallback+0x2e4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d004      	beq.n	8003710 <HAL_CAN_RxFifo0MsgPendingCallback+0x28c>
 8003706:	e05b      	b.n	80037c0 <HAL_CAN_RxFifo0MsgPendingCallback+0x33c>
                case 0x05030000:
                    printf("  Toggle bit not alternated\n");
 8003708:	4818      	ldr	r0, [pc, #96]	@ (800376c <HAL_CAN_RxFifo0MsgPendingCallback+0x2e8>)
 800370a:	f00b ffeb 	bl	800f6e4 <puts>
                    break;
 800370e:	e05b      	b.n	80037c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>
                case 0x05040001:
                    printf("  Client/server command specifier not valid or unknown\n");
 8003710:	4817      	ldr	r0, [pc, #92]	@ (8003770 <HAL_CAN_RxFifo0MsgPendingCallback+0x2ec>)
 8003712:	f00b ffe7 	bl	800f6e4 <puts>
                    break;
 8003716:	e057      	b.n	80037c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>
                case 0x06010000:
                    printf("  Unsupported access to an object\n");
 8003718:	4816      	ldr	r0, [pc, #88]	@ (8003774 <HAL_CAN_RxFifo0MsgPendingCallback+0x2f0>)
 800371a:	f00b ffe3 	bl	800f6e4 <puts>
                    break;
 800371e:	e053      	b.n	80037c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>
 8003720:	20005acc 	.word	0x20005acc
 8003724:	20005aa0 	.word	0x20005aa0
 8003728:	40003000 	.word	0x40003000
 800372c:	08010100 	.word	0x08010100
 8003730:	20001a98 	.word	0x20001a98
 8003734:	0801015c 	.word	0x0801015c
 8003738:	08010174 	.word	0x08010174
 800373c:	20005acd 	.word	0x20005acd
 8003740:	06090030 	.word	0x06090030
 8003744:	06090011 	.word	0x06090011
 8003748:	06070010 	.word	0x06070010
 800374c:	06060000 	.word	0x06060000
 8003750:	06040042 	.word	0x06040042
 8003754:	06020000 	.word	0x06020000
 8003758:	06010002 	.word	0x06010002
 800375c:	06010001 	.word	0x06010001
 8003760:	06010000 	.word	0x06010000
 8003764:	05030000 	.word	0x05030000
 8003768:	05040001 	.word	0x05040001
 800376c:	08010180 	.word	0x08010180
 8003770:	0801019c 	.word	0x0801019c
 8003774:	080101d4 	.word	0x080101d4
                case 0x06010001:
                    printf("  Attempt to read a write only object\n");
 8003778:	481a      	ldr	r0, [pc, #104]	@ (80037e4 <HAL_CAN_RxFifo0MsgPendingCallback+0x360>)
 800377a:	f00b ffb3 	bl	800f6e4 <puts>
                    break;
 800377e:	e023      	b.n	80037c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>
                case 0x06010002:
                    printf("  Attempt to write a read only object\n");
 8003780:	4819      	ldr	r0, [pc, #100]	@ (80037e8 <HAL_CAN_RxFifo0MsgPendingCallback+0x364>)
 8003782:	f00b ffaf 	bl	800f6e4 <puts>
                    break;
 8003786:	e01f      	b.n	80037c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>
                case 0x06020000:
                    printf("  Object does not exist in the object dictionary\n");
 8003788:	4818      	ldr	r0, [pc, #96]	@ (80037ec <HAL_CAN_RxFifo0MsgPendingCallback+0x368>)
 800378a:	f00b ffab 	bl	800f6e4 <puts>
                    break;
 800378e:	e01b      	b.n	80037c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>
                case 0x06040042:
                    printf("  PDO length exceeded\n");
 8003790:	4817      	ldr	r0, [pc, #92]	@ (80037f0 <HAL_CAN_RxFifo0MsgPendingCallback+0x36c>)
 8003792:	f00b ffa7 	bl	800f6e4 <puts>
                    break;
 8003796:	e017      	b.n	80037c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>
                case 0x06060000:
                    printf("  Access failed due to a hardware error\n");
 8003798:	4816      	ldr	r0, [pc, #88]	@ (80037f4 <HAL_CAN_RxFifo0MsgPendingCallback+0x370>)
 800379a:	f00b ffa3 	bl	800f6e4 <puts>
                    break;
 800379e:	e013      	b.n	80037c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>
                case 0x06070010:
                    printf("  Data type does not match, length does not match\n");
 80037a0:	4815      	ldr	r0, [pc, #84]	@ (80037f8 <HAL_CAN_RxFifo0MsgPendingCallback+0x374>)
 80037a2:	f00b ff9f 	bl	800f6e4 <puts>
                    break;
 80037a6:	e00f      	b.n	80037c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>
                case 0x06090011:
                    printf("  Subindex does not exist\n");
 80037a8:	4814      	ldr	r0, [pc, #80]	@ (80037fc <HAL_CAN_RxFifo0MsgPendingCallback+0x378>)
 80037aa:	f00b ff9b 	bl	800f6e4 <puts>
                    break;
 80037ae:	e00b      	b.n	80037c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>
                case 0x06090030:
                    printf("  Value range of parameter exceeded\n");
 80037b0:	4813      	ldr	r0, [pc, #76]	@ (8003800 <HAL_CAN_RxFifo0MsgPendingCallback+0x37c>)
 80037b2:	f00b ff97 	bl	800f6e4 <puts>
                    break;
 80037b6:	e007      	b.n	80037c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>
                case 0x08000000:
                    printf("  General error\n");
 80037b8:	4812      	ldr	r0, [pc, #72]	@ (8003804 <HAL_CAN_RxFifo0MsgPendingCallback+0x380>)
 80037ba:	f00b ff93 	bl	800f6e4 <puts>
                    break;
 80037be:	e003      	b.n	80037c8 <HAL_CAN_RxFifo0MsgPendingCallback+0x344>
                default:
                    printf("  Unknown error code\n");
 80037c0:	4811      	ldr	r0, [pc, #68]	@ (8003808 <HAL_CAN_RxFifo0MsgPendingCallback+0x384>)
 80037c2:	f00b ff8f 	bl	800f6e4 <puts>
                    break;
 80037c6:	bf00      	nop
            }

            // Blink red LED to indicate error
            HAL_GPIO_TogglePin(LD5_GPIO_Port, LD5_Pin);
 80037c8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80037cc:	480f      	ldr	r0, [pc, #60]	@ (800380c <HAL_CAN_RxFifo0MsgPendingCallback+0x388>)
 80037ce:	f004 fcc2 	bl	8008156 <HAL_GPIO_TogglePin>
 80037d2:	e004      	b.n	80037de <HAL_CAN_RxFifo0MsgPendingCallback+0x35a>
        return;
 80037d4:	bf00      	nop
 80037d6:	e002      	b.n	80037de <HAL_CAN_RxFifo0MsgPendingCallback+0x35a>
            rx_data[3] == EPOS4_ACTUAL_POSITION_SUBINDEX) {
 80037d8:	bf00      	nop
 80037da:	e000      	b.n	80037de <HAL_CAN_RxFifo0MsgPendingCallback+0x35a>
                rx_data[3] == 0x00) {  // Subindex 0
 80037dc:	bf00      	nop
        }
    }
}
 80037de:	375c      	adds	r7, #92	@ 0x5c
 80037e0:	46bd      	mov	sp, r7
 80037e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80037e4:	080101f8 	.word	0x080101f8
 80037e8:	08010220 	.word	0x08010220
 80037ec:	08010248 	.word	0x08010248
 80037f0:	0801027c 	.word	0x0801027c
 80037f4:	08010294 	.word	0x08010294
 80037f8:	080102bc 	.word	0x080102bc
 80037fc:	080102f0 	.word	0x080102f0
 8003800:	0801030c 	.word	0x0801030c
 8003804:	08010330 	.word	0x08010330
 8003808:	08010340 	.word	0x08010340
 800380c:	40020c00 	.word	0x40020c00

08003810 <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8003810:	b480      	push	{r7}
 8003812:	b083      	sub	sp, #12
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
    // Similar to FIFO0 callback if needed
}
 8003818:	bf00      	nop
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr

08003824 <processTxRxOnce>:

// Change this from static to non-static to match declaration
void processTxRxOnce(CanardInstance *ins, uint32_t timeout_ms)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b08e      	sub	sp, #56	@ 0x38
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
 800382c:	6039      	str	r1, [r7, #0]
    // Feed the watchdog before starting
    IWDG->KR = 0xAAAA;
 800382e:	4b33      	ldr	r3, [pc, #204]	@ (80038fc <processTxRxOnce+0xd8>)
 8003830:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8003834:	601a      	str	r2, [r3, #0]

    // Set timeout for processing
    uint32_t start_time = HAL_GetTick();
 8003836:	f003 f805 	bl	8006844 <HAL_GetTick>
 800383a:	6338      	str	r0, [r7, #48]	@ 0x30


    // Process outgoing transfers (from library to CAN driver)
    int tx_attempts = 0;  // Limit TX attempts to avoid getting stuck
 800383c:	2300      	movs	r3, #0
 800383e:	637b      	str	r3, [r7, #52]	@ 0x34
    for (const CanardCANFrame* txf = NULL; tx_attempts < 5 && (txf = canardPeekTxQueue(ins)) != NULL; tx_attempts++)
 8003840:	2300      	movs	r3, #0
 8003842:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003844:	e036      	b.n	80038b4 <processTxRxOnce+0x90>
    {
        // Check if we've exceeded the timeout
        if (timeout_ms > 0 && HAL_GetTick() - start_time > timeout_ms) {
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	2b00      	cmp	r3, #0
 800384a:	d007      	beq.n	800385c <processTxRxOnce+0x38>
 800384c:	f002 fffa 	bl	8006844 <HAL_GetTick>
 8003850:	4602      	mov	r2, r0
 8003852:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d336      	bcc.n	80038ca <processTxRxOnce+0xa6>
            break;
        }

        // Feed watchdog during processing
        IWDG->KR = 0xAAAA;
 800385c:	4b27      	ldr	r3, [pc, #156]	@ (80038fc <processTxRxOnce+0xd8>)
 800385e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8003862:	601a      	str	r2, [r3, #0]

        // Process an outbound CAN frame using the STM32 HAL
        CAN_TxHeaderTypeDef tx_header;
        uint32_t tx_mailbox;

        tx_header.StdId = 0;
 8003864:	2300      	movs	r3, #0
 8003866:	613b      	str	r3, [r7, #16]
        tx_header.ExtId = txf->id & CANARD_CAN_EXT_ID_MASK;
 8003868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8003870:	617b      	str	r3, [r7, #20]
        tx_header.IDE = CAN_ID_EXT;
 8003872:	2304      	movs	r3, #4
 8003874:	61bb      	str	r3, [r7, #24]
        tx_header.RTR = CAN_RTR_DATA;
 8003876:	2300      	movs	r3, #0
 8003878:	61fb      	str	r3, [r7, #28]
        tx_header.DLC = txf->data_len;
 800387a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800387c:	7b1b      	ldrb	r3, [r3, #12]
 800387e:	623b      	str	r3, [r7, #32]

        // Print detailed information about the CAN message being sent
        uint16_t data_type_id = (txf->id >> 8) & 0xFFFF;
 8003880:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	0a1b      	lsrs	r3, r3, #8
 8003886:	857b      	strh	r3, [r7, #42]	@ 0x2a

        // Short timeout attempt to send message
        HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan1, &tx_header, (uint8_t*)txf->data, &tx_mailbox);
 8003888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800388a:	1d1a      	adds	r2, r3, #4
 800388c:	f107 030c 	add.w	r3, r7, #12
 8003890:	f107 0110 	add.w	r1, r7, #16
 8003894:	481a      	ldr	r0, [pc, #104]	@ (8003900 <processTxRxOnce+0xdc>)
 8003896:	f003 fa25 	bl	8006ce4 <HAL_CAN_AddTxMessage>
 800389a:	4603      	mov	r3, r0
 800389c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29

        if (status == HAL_OK) {
 80038a0:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d112      	bne.n	80038ce <processTxRxOnce+0xaa>
            // Remove from queue only if sent successfully
            canardPopTxQueue(ins);
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f7fd fafa 	bl	8000ea2 <canardPopTxQueue>
    for (const CanardCANFrame* txf = NULL; tx_attempts < 5 && (txf = canardPeekTxQueue(ins)) != NULL; tx_attempts++)
 80038ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b0:	3301      	adds	r3, #1
 80038b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80038b4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80038b6:	2b04      	cmp	r3, #4
 80038b8:	dc0a      	bgt.n	80038d0 <processTxRxOnce+0xac>
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f7fd fade 	bl	8000e7c <canardPeekTxQueue>
 80038c0:	62f8      	str	r0, [r7, #44]	@ 0x2c
 80038c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d1be      	bne.n	8003846 <processTxRxOnce+0x22>
 80038c8:	e002      	b.n	80038d0 <processTxRxOnce+0xac>
            break;
 80038ca:	bf00      	nop
 80038cc:	e000      	b.n	80038d0 <processTxRxOnce+0xac>
        } else {
            // Break out if TX mailboxes are full
            break;
 80038ce:	bf00      	nop
        }
    }

    // Feed watchdog again
    IWDG->KR = 0xAAAA;
 80038d0:	4b0a      	ldr	r3, [pc, #40]	@ (80038fc <processTxRxOnce+0xd8>)
 80038d2:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80038d6:	601a      	str	r2, [r3, #0]

    // Check for received CAN frames
    {
        // Check if there are pending messages
        if (HAL_CAN_GetRxFifoFillLevel(&hcan1, CAN_RX_FIFO0) > 0)
 80038d8:	2100      	movs	r1, #0
 80038da:	4809      	ldr	r0, [pc, #36]	@ (8003900 <processTxRxOnce+0xdc>)
 80038dc:	f003 fc29 	bl	8007132 <HAL_CAN_GetRxFifoFillLevel>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d002      	beq.n	80038ec <processTxRxOnce+0xc8>
        {
            // Process the pending message
            HAL_CAN_RxFifo0MsgPendingCallback(&hcan1);
 80038e6:	4806      	ldr	r0, [pc, #24]	@ (8003900 <processTxRxOnce+0xdc>)
 80038e8:	f7ff fdcc 	bl	8003484 <HAL_CAN_RxFifo0MsgPendingCallback>
        }
    }

    // Feed watchdog one more time
    IWDG->KR = 0xAAAA;
 80038ec:	4b03      	ldr	r3, [pc, #12]	@ (80038fc <processTxRxOnce+0xd8>)
 80038ee:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80038f2:	601a      	str	r2, [r3, #0]
}
 80038f4:	bf00      	nop
 80038f6:	3738      	adds	r7, #56	@ 0x38
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}
 80038fc:	40003000 	.word	0x40003000
 8003900:	200019d0 	.word	0x200019d0
 8003904:	00000000 	.word	0x00000000

08003908 <send_NodeStatus>:

// Change this from static to non-static to match declaration
void send_NodeStatus(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b08a      	sub	sp, #40	@ 0x28
 800390c:	af06      	add	r7, sp, #24
    // Prepare the message
    uint8_t buffer[UAVCAN_NODE_STATUS_MESSAGE_SIZE];
    memset(buffer, 0, UAVCAN_NODE_STATUS_MESSAGE_SIZE);
 800390e:	1d3b      	adds	r3, r7, #4
 8003910:	2207      	movs	r2, #7
 8003912:	2100      	movs	r1, #0
 8003914:	4618      	mov	r0, r3
 8003916:	f00b ffc5 	bl	800f8a4 <memset>

    // Set the status fields
    uint32_t uptime_sec = HAL_GetTick() / 1000;
 800391a:	f002 ff93 	bl	8006844 <HAL_GetTick>
 800391e:	4603      	mov	r3, r0
 8003920:	4a17      	ldr	r2, [pc, #92]	@ (8003980 <send_NodeStatus+0x78>)
 8003922:	fba2 2303 	umull	r2, r3, r2, r3
 8003926:	099b      	lsrs	r3, r3, #6
 8003928:	603b      	str	r3, [r7, #0]
    memcpy(&buffer[0], &uptime_sec, 4);
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	607b      	str	r3, [r7, #4]

    // Health: 0 = NOMINAL, no health alerts
    buffer[4] = UAVCAN_NODE_HEALTH_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	723b      	strb	r3, [r7, #8]

    // Mode: 0 = OPERATIONAL, we're running fine
    buffer[5] = UAVCAN_NODE_MODE_OPERATIONAL;
 8003932:	2300      	movs	r3, #0
 8003934:	727b      	strb	r3, [r7, #9]

    // Sub-mode is unused (0)
    buffer[6] = 0;
 8003936:	2300      	movs	r3, #0
 8003938:	72bb      	strb	r3, [r7, #10]

    // Vendor-specific status code - use to indicate EPOS4 status
    buffer[7] = 0;  // Default to 0 for normal operation
 800393a:	2300      	movs	r3, #0
 800393c:	72fb      	strb	r3, [r7, #11]

    // Send as broadcast with minimal output
    static uint8_t transfer_id = 0;
    int result = canardBroadcast(&canard,
 800393e:	2307      	movs	r3, #7
 8003940:	9304      	str	r3, [sp, #16]
 8003942:	1d3b      	adds	r3, r7, #4
 8003944:	9303      	str	r3, [sp, #12]
 8003946:	2310      	movs	r3, #16
 8003948:	9302      	str	r3, [sp, #8]
 800394a:	4b0e      	ldr	r3, [pc, #56]	@ (8003984 <send_NodeStatus+0x7c>)
 800394c:	9301      	str	r3, [sp, #4]
 800394e:	f240 1355 	movw	r3, #341	@ 0x155
 8003952:	9300      	str	r3, [sp, #0]
 8003954:	a308      	add	r3, pc, #32	@ (adr r3, 8003978 <send_NodeStatus+0x70>)
 8003956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395a:	480b      	ldr	r0, [pc, #44]	@ (8003988 <send_NodeStatus+0x80>)
 800395c:	f7fd f900 	bl	8000b60 <canardBroadcast>
 8003960:	4603      	mov	r3, r0
 8003962:	60fb      	str	r3, [r7, #12]
    // Only log heartbeat occasionally
    static uint32_t heartbeat_count = 0;
    

    // Add delay after sending heartbeat
    HAL_Delay(1);  // Small delay to allow transmission
 8003964:	2001      	movs	r0, #1
 8003966:	f002 ff79 	bl	800685c <HAL_Delay>
}
 800396a:	bf00      	nop
 800396c:	3710      	adds	r7, #16
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
 8003972:	bf00      	nop
 8003974:	f3af 8000 	nop.w
 8003978:	c1a7c6f1 	.word	0xc1a7c6f1
 800397c:	0f0868d0 	.word	0x0f0868d0
 8003980:	10624dd3 	.word	0x10624dd3
 8003984:	20005adc 	.word	0x20005adc
 8003988:	20005aa0 	.word	0x20005aa0
 800398c:	00000000 	.word	0x00000000

08003990 <shouldAcceptTransfer>:
static bool shouldAcceptTransfer(const CanardInstance* ins,
                                  uint64_t* out_data_type_signature,
                                  uint16_t data_type_id,
                                  CanardTransferType transfer_type,
                                  uint8_t source_node_id)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b084      	sub	sp, #16
 8003994:	af00      	add	r7, sp, #0
 8003996:	60f8      	str	r0, [r7, #12]
 8003998:	60b9      	str	r1, [r7, #8]
 800399a:	4611      	mov	r1, r2
 800399c:	461a      	mov	r2, r3
 800399e:	460b      	mov	r3, r1
 80039a0:	80fb      	strh	r3, [r7, #6]
 80039a2:	4613      	mov	r3, r2
 80039a4:	717b      	strb	r3, [r7, #5]
    // Debug print for all received transfers


    // Accept messages from our own node ID
    if (source_node_id == NODE_ID) {
 80039a6:	7e3b      	ldrb	r3, [r7, #24]
 80039a8:	2b09      	cmp	r3, #9
 80039aa:	d101      	bne.n	80039b0 <shouldAcceptTransfer+0x20>
        return true;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e061      	b.n	8003a74 <shouldAcceptTransfer+0xe4>
    }

    // Skip messages with ID 0x4e27 (ArduPilot GNSS status) as they cause -17 errors
    if (data_type_id == ARDUPILOT_GNSS_STATUS_ID) {
 80039b0:	88fb      	ldrh	r3, [r7, #6]
 80039b2:	f644 6227 	movw	r2, #20007	@ 0x4e27
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d101      	bne.n	80039be <shouldAcceptTransfer+0x2e>
        // Return false to completely skip processing this message
        return false;
 80039ba:	2300      	movs	r3, #0
 80039bc:	e05a      	b.n	8003a74 <shouldAcceptTransfer+0xe4>
    }

    // Accept GetNodeInfo request/response
    if (transfer_type == CanardTransferTypeRequest &&
 80039be:	797b      	ldrb	r3, [r7, #5]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d11f      	bne.n	8003a04 <shouldAcceptTransfer+0x74>
 80039c4:	88fb      	ldrh	r3, [r7, #6]
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d11c      	bne.n	8003a04 <shouldAcceptTransfer+0x74>
        data_type_id == UAVCAN_PROTOCOL_GETNODEINFO_ID) {
        printf("  GetNodeInfo request detected from node %d (data_type_id=0x%04x)\r\n",
 80039ca:	7e3b      	ldrb	r3, [r7, #24]
 80039cc:	88fa      	ldrh	r2, [r7, #6]
 80039ce:	4619      	mov	r1, r3
 80039d0:	4833      	ldr	r0, [pc, #204]	@ (8003aa0 <shouldAcceptTransfer+0x110>)
 80039d2:	f7ff f818 	bl	8002a06 <printf>
               source_node_id, data_type_id);

        // Handle broadcast address specially (commonly used by Mission Planner)
        if (source_node_id == 127) {
 80039d6:	7e3b      	ldrb	r3, [r7, #24]
 80039d8:	2b7f      	cmp	r3, #127	@ 0x7f
 80039da:	d102      	bne.n	80039e2 <shouldAcceptTransfer+0x52>
            printf("  Detected GetNodeInfo from broadcast address (ID 127) - likely Mission Planner discovery\r\n");
 80039dc:	4831      	ldr	r0, [pc, #196]	@ (8003aa4 <shouldAcceptTransfer+0x114>)
 80039de:	f00b fe81 	bl	800f6e4 <puts>
        }

        // Use the correct signature value defined in the header
        *out_data_type_signature = UAVCAN_PROTOCOL_GETNODEINFO_SIGNATURE;
 80039e2:	68b9      	ldr	r1, [r7, #8]
 80039e4:	a326      	add	r3, pc, #152	@ (adr r3, 8003a80 <shouldAcceptTransfer+0xf0>)
 80039e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ea:	e9c1 2300 	strd	r2, r3, [r1]

        // Print the actual value to verify it's not zero
        printf("  Using GetNodeInfo signature: 0x%llx\r\n",
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039f4:	482c      	ldr	r0, [pc, #176]	@ (8003aa8 <shouldAcceptTransfer+0x118>)
 80039f6:	f7ff f806 	bl	8002a06 <printf>
               (unsigned long long)*out_data_type_signature);

        printf("  ACCEPTING GetNodeInfo transfer\r\n");
 80039fa:	482c      	ldr	r0, [pc, #176]	@ (8003aac <shouldAcceptTransfer+0x11c>)
 80039fc:	f00b fe72 	bl	800f6e4 <puts>
        return true;
 8003a00:	2301      	movs	r3, #1
 8003a02:	e037      	b.n	8003a74 <shouldAcceptTransfer+0xe4>
    }

    // Accept parameter get/set requests
    if (transfer_type == CanardTransferTypeRequest &&
 8003a04:	797b      	ldrb	r3, [r7, #5]
 8003a06:	2b01      	cmp	r3, #1
 8003a08:	d113      	bne.n	8003a32 <shouldAcceptTransfer+0xa2>
 8003a0a:	88fb      	ldrh	r3, [r7, #6]
 8003a0c:	2b0b      	cmp	r3, #11
 8003a0e:	d110      	bne.n	8003a32 <shouldAcceptTransfer+0xa2>
        data_type_id == UAVCAN_PROTOCOL_PARAM_GETSET_ID) {
        printf("  Parameter get/set request from node %d (data_type_id=0x%04x)\r\n",
 8003a10:	7e3b      	ldrb	r3, [r7, #24]
 8003a12:	88fa      	ldrh	r2, [r7, #6]
 8003a14:	4619      	mov	r1, r3
 8003a16:	4826      	ldr	r0, [pc, #152]	@ (8003ab0 <shouldAcceptTransfer+0x120>)
 8003a18:	f7fe fff5 	bl	8002a06 <printf>
               source_node_id, data_type_id);
        *out_data_type_signature = UAVCAN_PARAM_GETSET_SIGNATURE;
 8003a1c:	68b9      	ldr	r1, [r7, #8]
 8003a1e:	a31a      	add	r3, pc, #104	@ (adr r3, 8003a88 <shouldAcceptTransfer+0xf8>)
 8003a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a24:	e9c1 2300 	strd	r2, r3, [r1]
        printf("  ACCEPTING parameter get/set transfer\r\n");
 8003a28:	4822      	ldr	r0, [pc, #136]	@ (8003ab4 <shouldAcceptTransfer+0x124>)
 8003a2a:	f00b fe5b 	bl	800f6e4 <puts>
        return true;
 8003a2e:	2301      	movs	r3, #1
 8003a30:	e020      	b.n	8003a74 <shouldAcceptTransfer+0xe4>
    }

    // Accept NodeStatus messages from any node for monitoring
    if (transfer_type == CanardTransferTypeMessage &&
 8003a32:	797b      	ldrb	r3, [r7, #5]
 8003a34:	2b02      	cmp	r3, #2
 8003a36:	d10c      	bne.n	8003a52 <shouldAcceptTransfer+0xc2>
 8003a38:	88fb      	ldrh	r3, [r7, #6]
 8003a3a:	f240 1255 	movw	r2, #341	@ 0x155
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d107      	bne.n	8003a52 <shouldAcceptTransfer+0xc2>
        data_type_id == UAVCAN_PROTOCOL_NODE_STATUS_MESSAGE_ID) {
        *out_data_type_signature = UAVCAN_NODE_STATUS_DATA_TYPE_SIGNATURE;
 8003a42:	68b9      	ldr	r1, [r7, #8]
 8003a44:	a312      	add	r3, pc, #72	@ (adr r3, 8003a90 <shouldAcceptTransfer+0x100>)
 8003a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a4a:	e9c1 2300 	strd	r2, r3, [r1]
        return true;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	e010      	b.n	8003a74 <shouldAcceptTransfer+0xe4>
    }
    
    // Accept actuator array command messages with correct signature
    if (transfer_type == CanardTransferTypeMessage && data_type_id == UAVCAN_EQUIPMENT_ACTUATOR_ARRAYCOMMAND_ID) {
 8003a52:	797b      	ldrb	r3, [r7, #5]
 8003a54:	2b02      	cmp	r3, #2
 8003a56:	d10c      	bne.n	8003a72 <shouldAcceptTransfer+0xe2>
 8003a58:	88fb      	ldrh	r3, [r7, #6]
 8003a5a:	f240 32f2 	movw	r2, #1010	@ 0x3f2
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d107      	bne.n	8003a72 <shouldAcceptTransfer+0xe2>
        *out_data_type_signature = UAVCAN_EQUIPMENT_ACTUATOR_ARRAYCOMMAND_SIGNATURE;
 8003a62:	68b9      	ldr	r1, [r7, #8]
 8003a64:	a30c      	add	r3, pc, #48	@ (adr r3, 8003a98 <shouldAcceptTransfer+0x108>)
 8003a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a6a:	e9c1 2300 	strd	r2, r3, [r1]
        return true;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e000      	b.n	8003a74 <shouldAcceptTransfer+0xe4>
    }
    
    return false;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	f3af 8000 	nop.w
 8003a80:	21c46a9e 	.word	0x21c46a9e
 8003a84:	ee468a81 	.word	0xee468a81
 8003a88:	39d1a4d5 	.word	0x39d1a4d5
 8003a8c:	a7b622f9 	.word	0xa7b622f9
 8003a90:	c1a7c6f1 	.word	0xc1a7c6f1
 8003a94:	0f0868d0 	.word	0x0f0868d0
 8003a98:	38ec3af3 	.word	0x38ec3af3
 8003a9c:	d8a74862 	.word	0xd8a74862
 8003aa0:	08010358 	.word	0x08010358
 8003aa4:	0801039c 	.word	0x0801039c
 8003aa8:	080103f8 	.word	0x080103f8
 8003aac:	08010420 	.word	0x08010420
 8003ab0:	08010444 	.word	0x08010444
 8003ab4:	08010488 	.word	0x08010488

08003ab8 <readUniqueID>:
void readUniqueID(uint8_t* out_uid)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
    for (uint8_t i = 0; i < UNIQUE_ID_LENGTH_BYTES; i++)
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	73fb      	strb	r3, [r7, #15]
 8003ac4:	e007      	b.n	8003ad6 <readUniqueID+0x1e>
    {
        out_uid[i] = i;
 8003ac6:	7bfb      	ldrb	r3, [r7, #15]
 8003ac8:	687a      	ldr	r2, [r7, #4]
 8003aca:	4413      	add	r3, r2
 8003acc:	7bfa      	ldrb	r2, [r7, #15]
 8003ace:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < UNIQUE_ID_LENGTH_BYTES; i++)
 8003ad0:	7bfb      	ldrb	r3, [r7, #15]
 8003ad2:	3301      	adds	r3, #1
 8003ad4:	73fb      	strb	r3, [r7, #15]
 8003ad6:	7bfb      	ldrb	r3, [r7, #15]
 8003ad8:	2b0f      	cmp	r3, #15
 8003ada:	d9f4      	bls.n	8003ac6 <readUniqueID+0xe>
    }
}
 8003adc:	bf00      	nop
 8003ade:	bf00      	nop
 8003ae0:	3714      	adds	r7, #20
 8003ae2:	46bd      	mov	sp, r7
 8003ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ae8:	4770      	bx	lr
 8003aea:	0000      	movs	r0, r0
 8003aec:	0000      	movs	r0, r0
	...

08003af0 <handle_get_node_info>:
// Handle GetNodeInfo service request
void handle_get_node_info(CanardInstance* ins, CanardRxTransfer* transfer)
{
 8003af0:	b590      	push	{r4, r7, lr}
 8003af2:	b0eb      	sub	sp, #428	@ 0x1ac
 8003af4:	af06      	add	r7, sp, #24
 8003af6:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8003afa:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003afe:	6018      	str	r0, [r3, #0]
 8003b00:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8003b04:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003b08:	6019      	str	r1, [r3, #0]
    printf("Processing GetNodeInfo request from node %d\r\n", transfer->source_node_id);
 8003b0a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8003b0e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	7edb      	ldrb	r3, [r3, #27]
 8003b16:	4619      	mov	r1, r3
 8003b18:	4823      	ldr	r0, [pc, #140]	@ (8003ba8 <handle_get_node_info+0xb8>)
 8003b1a:	f7fe ff74 	bl	8002a06 <printf>

     uint8_t buffer[UAVCAN_GET_NODE_INFO_RESPONSE_MAX_SIZE];
        memset(buffer,0,UAVCAN_GET_NODE_INFO_RESPONSE_MAX_SIZE);
 8003b1e:	f107 030c 	add.w	r3, r7, #12
 8003b22:	f240 1279 	movw	r2, #377	@ 0x179
 8003b26:	2100      	movs	r1, #0
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f00b febb 	bl	800f8a4 <memset>
        uint16_t len = makeNodeInfoMessage(buffer);
 8003b2e:	f107 030c 	add.w	r3, r7, #12
 8003b32:	4618      	mov	r0, r3
 8003b34:	f000 f83a 	bl	8003bac <makeNodeInfoMessage>
 8003b38:	4603      	mov	r3, r0
 8003b3a:	f8a7 318e 	strh.w	r3, [r7, #398]	@ 0x18e
        int result = canardRequestOrRespond(ins,
 8003b3e:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8003b42:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	7edc      	ldrb	r4, [r3, #27]
 8003b4a:	f507 73c8 	add.w	r3, r7, #400	@ 0x190
 8003b4e:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	3319      	adds	r3, #25
 8003b56:	f507 72c8 	add.w	r2, r7, #400	@ 0x190
 8003b5a:	f5a2 72c8 	sub.w	r2, r2, #400	@ 0x190
 8003b5e:	6812      	ldr	r2, [r2, #0]
 8003b60:	7e92      	ldrb	r2, [r2, #26]
 8003b62:	f507 71c8 	add.w	r1, r7, #400	@ 0x190
 8003b66:	f5a1 70c6 	sub.w	r0, r1, #396	@ 0x18c
 8003b6a:	f8b7 118e 	ldrh.w	r1, [r7, #398]	@ 0x18e
 8003b6e:	9105      	str	r1, [sp, #20]
 8003b70:	f107 010c 	add.w	r1, r7, #12
 8003b74:	9104      	str	r1, [sp, #16]
 8003b76:	2100      	movs	r1, #0
 8003b78:	9103      	str	r1, [sp, #12]
 8003b7a:	9202      	str	r2, [sp, #8]
 8003b7c:	9301      	str	r3, [sp, #4]
 8003b7e:	2301      	movs	r3, #1
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	a307      	add	r3, pc, #28	@ (adr r3, 8003ba0 <handle_get_node_info+0xb0>)
 8003b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b88:	4621      	mov	r1, r4
 8003b8a:	6800      	ldr	r0, [r0, #0]
 8003b8c:	f7fd f8ee 	bl	8000d6c <canardRequestOrRespond>
 8003b90:	4603      	mov	r3, r0
 8003b92:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
                                            &transfer->transfer_id,
                                            transfer->priority,
                                            CanardResponse,
                                            &buffer[0],
                                            (uint16_t)len);
}
 8003b96:	bf00      	nop
 8003b98:	f507 77ca 	add.w	r7, r7, #404	@ 0x194
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd90      	pop	{r4, r7, pc}
 8003ba0:	21c46a9e 	.word	0x21c46a9e
 8003ba4:	ee468a81 	.word	0xee468a81
 8003ba8:	080104b0 	.word	0x080104b0

08003bac <makeNodeInfoMessage>:
uint16_t makeNodeInfoMessage(uint8_t buffer[UAVCAN_GET_NODE_INFO_RESPONSE_MAX_SIZE])
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b084      	sub	sp, #16
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
    memset(buffer, 0, UAVCAN_GET_NODE_INFO_RESPONSE_MAX_SIZE);
 8003bb4:	f240 1279 	movw	r2, #377	@ 0x179
 8003bb8:	2100      	movs	r1, #0
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f00b fe72 	bl	800f8a4 <memset>
    makeNodeStatusMessage(buffer);
 8003bc0:	6878      	ldr	r0, [r7, #4]
 8003bc2:	f000 f82f 	bl	8003c24 <makeNodeStatusMessage>

    buffer[7] = APP_VERSION_MAJOR;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	3307      	adds	r3, #7
 8003bca:	2201      	movs	r2, #1
 8003bcc:	701a      	strb	r2, [r3, #0]
    buffer[8] = APP_VERSION_MINOR;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	3308      	adds	r3, #8
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	701a      	strb	r2, [r3, #0]
    buffer[9] = 1;                          // Optional field flags, VCS commit is set
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	3309      	adds	r3, #9
 8003bda:	2201      	movs	r2, #1
 8003bdc:	701a      	strb	r2, [r3, #0]
    uint32_t u32 = GIT_HASH;
 8003bde:	4b0f      	ldr	r3, [pc, #60]	@ (8003c1c <makeNodeInfoMessage+0x70>)
 8003be0:	60bb      	str	r3, [r7, #8]
    canardEncodeScalar(buffer, 80, 32, &u32);
 8003be2:	f107 0308 	add.w	r3, r7, #8
 8003be6:	2220      	movs	r2, #32
 8003be8:	2150      	movs	r1, #80	@ 0x50
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f7fd ff01 	bl	80019f2 <canardEncodeScalar>

    readUniqueID(&buffer[24]);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	3318      	adds	r3, #24
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	f7ff ff5f 	bl	8003ab8 <readUniqueID>
    const size_t name_len = strlen(APP_NODE_NAME);
 8003bfa:	230e      	movs	r3, #14
 8003bfc:	60fb      	str	r3, [r7, #12]
    memcpy(&buffer[41], APP_NODE_NAME, name_len);
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	3329      	adds	r3, #41	@ 0x29
 8003c02:	68fa      	ldr	r2, [r7, #12]
 8003c04:	4906      	ldr	r1, [pc, #24]	@ (8003c20 <makeNodeInfoMessage+0x74>)
 8003c06:	4618      	mov	r0, r3
 8003c08:	f00b feeb 	bl	800f9e2 <memcpy>
    return 41 + name_len ;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	3329      	adds	r3, #41	@ 0x29
 8003c12:	b29b      	uxth	r3, r3
}
 8003c14:	4618      	mov	r0, r3
 8003c16:	3710      	adds	r7, #16
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	bd80      	pop	{r7, pc}
 8003c1c:	badc0ffe 	.word	0xbadc0ffe
 8003c20:	080104e0 	.word	0x080104e0

08003c24 <makeNodeStatusMessage>:
void makeNodeStatusMessage(uint8_t buffer[UAVCAN_NODE_STATUS_MESSAGE_SIZE])
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
    uint8_t node_health = UAVCAN_NODE_HEALTH_OK;
 8003c2c:	2300      	movs	r3, #0
 8003c2e:	73fb      	strb	r3, [r7, #15]
    uint8_t node_mode   = UAVCAN_NODE_MODE_OPERATIONAL;
 8003c30:	2300      	movs	r3, #0
 8003c32:	73bb      	strb	r3, [r7, #14]
    memset(buffer, 0, UAVCAN_NODE_STATUS_MESSAGE_SIZE);
 8003c34:	2207      	movs	r2, #7
 8003c36:	2100      	movs	r1, #0
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f00b fe33 	bl	800f8a4 <memset>
    uint32_t uptime_sec = (HAL_GetTick() / 1000);
 8003c3e:	f002 fe01 	bl	8006844 <HAL_GetTick>
 8003c42:	4603      	mov	r3, r0
 8003c44:	4a0e      	ldr	r2, [pc, #56]	@ (8003c80 <makeNodeStatusMessage+0x5c>)
 8003c46:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4a:	099b      	lsrs	r3, r3, #6
 8003c4c:	60bb      	str	r3, [r7, #8]
    canardEncodeScalar(buffer,  0, 32, &uptime_sec);
 8003c4e:	f107 0308 	add.w	r3, r7, #8
 8003c52:	2220      	movs	r2, #32
 8003c54:	2100      	movs	r1, #0
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7fd fecb 	bl	80019f2 <canardEncodeScalar>
    canardEncodeScalar(buffer, 32,  2, &node_health);
 8003c5c:	f107 030f 	add.w	r3, r7, #15
 8003c60:	2202      	movs	r2, #2
 8003c62:	2120      	movs	r1, #32
 8003c64:	6878      	ldr	r0, [r7, #4]
 8003c66:	f7fd fec4 	bl	80019f2 <canardEncodeScalar>
    canardEncodeScalar(buffer, 34,  3, &node_mode);
 8003c6a:	f107 030e 	add.w	r3, r7, #14
 8003c6e:	2203      	movs	r2, #3
 8003c70:	2122      	movs	r1, #34	@ 0x22
 8003c72:	6878      	ldr	r0, [r7, #4]
 8003c74:	f7fd febd 	bl	80019f2 <canardEncodeScalar>
}
 8003c78:	bf00      	nop
 8003c7a:	3710      	adds	r7, #16
 8003c7c:	46bd      	mov	sp, r7
 8003c7e:	bd80      	pop	{r7, pc}
 8003c80:	10624dd3 	.word	0x10624dd3

08003c84 <onTransferReceived>:

void onTransferReceived(CanardInstance* ins, CanardRxTransfer* transfer)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b08e      	sub	sp, #56	@ 0x38
 8003c88:	af02      	add	r7, sp, #8
 8003c8a:	6078      	str	r0, [r7, #4]
 8003c8c:	6039      	str	r1, [r7, #0]
    // Feed the watchdog during message processing to prevent resets
    IWDG->KR = 0xAAAA;
 8003c8e:	4bb1      	ldr	r3, [pc, #708]	@ (8003f54 <onTransferReceived+0x2d0>)
 8003c90:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8003c94:	601a      	str	r2, [r3, #0]
    


    // Handle GetNodeInfo request
    if ((transfer->transfer_type == CanardTransferTypeRequest) &&
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	7e1b      	ldrb	r3, [r3, #24]
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d113      	bne.n	8003cc6 <onTransferReceived+0x42>
        (transfer->data_type_id == UAVCAN_PROTOCOL_GETNODEINFO_ID))
 8003c9e:	683b      	ldr	r3, [r7, #0]
 8003ca0:	8adb      	ldrh	r3, [r3, #22]
    if ((transfer->transfer_type == CanardTransferTypeRequest) &&
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d10f      	bne.n	8003cc6 <onTransferReceived+0x42>
    {


        // Special handling for broadcast requests (typically from Mission Planner)
        if (transfer->source_node_id == 127) {
 8003ca6:	683b      	ldr	r3, [r7, #0]
 8003ca8:	7edb      	ldrb	r3, [r3, #27]
 8003caa:	2b7f      	cmp	r3, #127	@ 0x7f
 8003cac:	d106      	bne.n	8003cbc <onTransferReceived+0x38>
            printf("INFO: Received broadcast GetNodeInfo request - normal for Mission Planner\r\n");
 8003cae:	48aa      	ldr	r0, [pc, #680]	@ (8003f58 <onTransferReceived+0x2d4>)
 8003cb0:	f00b fd18 	bl	800f6e4 <puts>
            printf("INFO: Will respond with node info (node_id=%d)\r\n", NODE_ID);
 8003cb4:	2109      	movs	r1, #9
 8003cb6:	48a9      	ldr	r0, [pc, #676]	@ (8003f5c <onTransferReceived+0x2d8>)
 8003cb8:	f7fe fea5 	bl	8002a06 <printf>
        }

        handle_get_node_info(ins, transfer);
 8003cbc:	6839      	ldr	r1, [r7, #0]
 8003cbe:	6878      	ldr	r0, [r7, #4]
 8003cc0:	f7ff ff16 	bl	8003af0 <handle_get_node_info>
 8003cc4:	e18d      	b.n	8003fe2 <onTransferReceived+0x35e>
    }
    // Handle GetNodeInfo response
    else if ((transfer->transfer_type == CanardTransferTypeResponse) &&
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	7e1b      	ldrb	r3, [r3, #24]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	f040 809c 	bne.w	8003e08 <onTransferReceived+0x184>
             (transfer->data_type_id == UAVCAN_PROTOCOL_GETNODEINFO_ID))
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	8adb      	ldrh	r3, [r3, #22]
    else if ((transfer->transfer_type == CanardTransferTypeResponse) &&
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	f040 8097 	bne.w	8003e08 <onTransferReceived+0x184>
    {
        
        // Parse the response if we have enough data
        if (transfer->payload_len >= 7)  // Minimum size for node status
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	8a9b      	ldrh	r3, [r3, #20]
 8003cde:	2b06      	cmp	r3, #6
 8003ce0:	f240 817c 	bls.w	8003fdc <onTransferReceived+0x358>
        {
            uint32_t uptime_sec = 0;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	627b      	str	r3, [r7, #36]	@ 0x24
            uint8_t health = 0;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            uint8_t mode = 0;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
            uint8_t sub_mode = 0;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21

            canardDecodeScalar(transfer, 0, 32, false, &uptime_sec);
 8003cfa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	2300      	movs	r3, #0
 8003d02:	2220      	movs	r2, #32
 8003d04:	2100      	movs	r1, #0
 8003d06:	6838      	ldr	r0, [r7, #0]
 8003d08:	f7fd fcea 	bl	80016e0 <canardDecodeScalar>
            canardDecodeScalar(transfer, 32, 8, false, &health);
 8003d0c:	f107 0323 	add.w	r3, r7, #35	@ 0x23
 8003d10:	9300      	str	r3, [sp, #0]
 8003d12:	2300      	movs	r3, #0
 8003d14:	2208      	movs	r2, #8
 8003d16:	2120      	movs	r1, #32
 8003d18:	6838      	ldr	r0, [r7, #0]
 8003d1a:	f7fd fce1 	bl	80016e0 <canardDecodeScalar>
            canardDecodeScalar(transfer, 40, 8, false, &mode);
 8003d1e:	f107 0322 	add.w	r3, r7, #34	@ 0x22
 8003d22:	9300      	str	r3, [sp, #0]
 8003d24:	2300      	movs	r3, #0
 8003d26:	2208      	movs	r2, #8
 8003d28:	2128      	movs	r1, #40	@ 0x28
 8003d2a:	6838      	ldr	r0, [r7, #0]
 8003d2c:	f7fd fcd8 	bl	80016e0 <canardDecodeScalar>
            canardDecodeScalar(transfer, 48, 8, false, &sub_mode);
 8003d30:	f107 0321 	add.w	r3, r7, #33	@ 0x21
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	2300      	movs	r3, #0
 8003d38:	2208      	movs	r2, #8
 8003d3a:	2130      	movs	r1, #48	@ 0x30
 8003d3c:	6838      	ldr	r0, [r7, #0]
 8003d3e:	f7fd fccf 	bl	80016e0 <canardDecodeScalar>

            printf("  Node Status:\r\n");
 8003d42:	4887      	ldr	r0, [pc, #540]	@ (8003f60 <onTransferReceived+0x2dc>)
 8003d44:	f00b fcce 	bl	800f6e4 <puts>
            printf("    Uptime: %lu seconds\r\n", uptime_sec);
 8003d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4a:	4619      	mov	r1, r3
 8003d4c:	4885      	ldr	r0, [pc, #532]	@ (8003f64 <onTransferReceived+0x2e0>)
 8003d4e:	f7fe fe5a 	bl	8002a06 <printf>
            printf("    Health: %u\r\n", health);
 8003d52:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8003d56:	4619      	mov	r1, r3
 8003d58:	4883      	ldr	r0, [pc, #524]	@ (8003f68 <onTransferReceived+0x2e4>)
 8003d5a:	f7fe fe54 	bl	8002a06 <printf>
            printf("    Mode: %u\r\n", mode);
 8003d5e:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8003d62:	4619      	mov	r1, r3
 8003d64:	4881      	ldr	r0, [pc, #516]	@ (8003f6c <onTransferReceived+0x2e8>)
 8003d66:	f7fe fe4e 	bl	8002a06 <printf>
            printf("    Sub-mode: %u\r\n", sub_mode);
 8003d6a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8003d6e:	4619      	mov	r1, r3
 8003d70:	487f      	ldr	r0, [pc, #508]	@ (8003f70 <onTransferReceived+0x2ec>)
 8003d72:	f7fe fe48 	bl	8002a06 <printf>

            // Try to parse version info if available
            if (transfer->payload_len >= 17)  // +10 bytes for version info
 8003d76:	683b      	ldr	r3, [r7, #0]
 8003d78:	8a9b      	ldrh	r3, [r3, #20]
 8003d7a:	2b10      	cmp	r3, #16
 8003d7c:	f240 812e 	bls.w	8003fdc <onTransferReceived+0x358>
            {
                uint8_t protocol_version = 0;
 8003d80:	2300      	movs	r3, #0
 8003d82:	f887 3020 	strb.w	r3, [r7, #32]
                uint8_t hw_version_major = 0;
 8003d86:	2300      	movs	r3, #0
 8003d88:	77fb      	strb	r3, [r7, #31]
                uint8_t hw_version_minor = 0;
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	77bb      	strb	r3, [r7, #30]
                uint8_t sw_version_major = 0;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	777b      	strb	r3, [r7, #29]
                uint8_t sw_version_minor = 0;
 8003d92:	2300      	movs	r3, #0
 8003d94:	773b      	strb	r3, [r7, #28]
                uint32_t sw_vcs_commit = 0;
 8003d96:	2300      	movs	r3, #0
 8003d98:	61bb      	str	r3, [r7, #24]

                canardDecodeScalar(transfer, 56, 8, false, &protocol_version);
 8003d9a:	f107 0320 	add.w	r3, r7, #32
 8003d9e:	9300      	str	r3, [sp, #0]
 8003da0:	2300      	movs	r3, #0
 8003da2:	2208      	movs	r2, #8
 8003da4:	2138      	movs	r1, #56	@ 0x38
 8003da6:	6838      	ldr	r0, [r7, #0]
 8003da8:	f7fd fc9a 	bl	80016e0 <canardDecodeScalar>
                canardDecodeScalar(transfer, 64, 8, false, &hw_version_major);
 8003dac:	f107 031f 	add.w	r3, r7, #31
 8003db0:	9300      	str	r3, [sp, #0]
 8003db2:	2300      	movs	r3, #0
 8003db4:	2208      	movs	r2, #8
 8003db6:	2140      	movs	r1, #64	@ 0x40
 8003db8:	6838      	ldr	r0, [r7, #0]
 8003dba:	f7fd fc91 	bl	80016e0 <canardDecodeScalar>
                canardDecodeScalar(transfer, 72, 8, false, &hw_version_minor);
 8003dbe:	f107 031e 	add.w	r3, r7, #30
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	2208      	movs	r2, #8
 8003dc8:	2148      	movs	r1, #72	@ 0x48
 8003dca:	6838      	ldr	r0, [r7, #0]
 8003dcc:	f7fd fc88 	bl	80016e0 <canardDecodeScalar>
                canardDecodeScalar(transfer, 80, 8, false, &sw_version_major);
 8003dd0:	f107 031d 	add.w	r3, r7, #29
 8003dd4:	9300      	str	r3, [sp, #0]
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	2208      	movs	r2, #8
 8003dda:	2150      	movs	r1, #80	@ 0x50
 8003ddc:	6838      	ldr	r0, [r7, #0]
 8003dde:	f7fd fc7f 	bl	80016e0 <canardDecodeScalar>
                canardDecodeScalar(transfer, 88, 8, false, &sw_version_minor);
 8003de2:	f107 031c 	add.w	r3, r7, #28
 8003de6:	9300      	str	r3, [sp, #0]
 8003de8:	2300      	movs	r3, #0
 8003dea:	2208      	movs	r2, #8
 8003dec:	2158      	movs	r1, #88	@ 0x58
 8003dee:	6838      	ldr	r0, [r7, #0]
 8003df0:	f7fd fc76 	bl	80016e0 <canardDecodeScalar>
                canardDecodeScalar(transfer, 96, 32, false, &sw_vcs_commit);
 8003df4:	f107 0318 	add.w	r3, r7, #24
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	2220      	movs	r2, #32
 8003dfe:	2160      	movs	r1, #96	@ 0x60
 8003e00:	6838      	ldr	r0, [r7, #0]
 8003e02:	f7fd fc6d 	bl	80016e0 <canardDecodeScalar>
        if (transfer->payload_len >= 7)  // Minimum size for node status
 8003e06:	e0e9      	b.n	8003fdc <onTransferReceived+0x358>

        }
    }

    // Handle NodeStatus messages
    else if ((transfer->transfer_type == CanardTransferTypeMessage) &&
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	7e1b      	ldrb	r3, [r3, #24]
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	f040 8092 	bne.w	8003f36 <onTransferReceived+0x2b2>
             (transfer->data_type_id == UAVCAN_PROTOCOL_NODE_STATUS_MESSAGE_ID))
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	8adb      	ldrh	r3, [r3, #22]
    else if ((transfer->transfer_type == CanardTransferTypeMessage) &&
 8003e16:	f240 1255 	movw	r2, #341	@ 0x155
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	f040 808b 	bne.w	8003f36 <onTransferReceived+0x2b2>
        // - Uptime (32 bits)
        // - Health (8 bits)
        // - Mode (8 bits)
        // - Sub-mode (8 bits)
        // - Vendor-specific status code (16 bits)
        if (transfer->payload_len >= 7)
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	8a9b      	ldrh	r3, [r3, #20]
 8003e24:	2b06      	cmp	r3, #6
 8003e26:	d97e      	bls.n	8003f26 <onTransferReceived+0x2a2>
        {
            uint32_t uptime = 0;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	617b      	str	r3, [r7, #20]
            uint8_t health = 0;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	74fb      	strb	r3, [r7, #19]
            uint8_t mode = 0;
 8003e30:	2300      	movs	r3, #0
 8003e32:	74bb      	strb	r3, [r7, #18]
            uint8_t sub_mode = 0;
 8003e34:	2300      	movs	r3, #0
 8003e36:	747b      	strb	r3, [r7, #17]
            uint16_t vendor_status = 0;
 8003e38:	2300      	movs	r3, #0
 8003e3a:	81fb      	strh	r3, [r7, #14]

            // Extract data using canardDecodeScalar
            canardDecodeScalar(transfer, 0, 32, false, &uptime);
 8003e3c:	f107 0314 	add.w	r3, r7, #20
 8003e40:	9300      	str	r3, [sp, #0]
 8003e42:	2300      	movs	r3, #0
 8003e44:	2220      	movs	r2, #32
 8003e46:	2100      	movs	r1, #0
 8003e48:	6838      	ldr	r0, [r7, #0]
 8003e4a:	f7fd fc49 	bl	80016e0 <canardDecodeScalar>
            canardDecodeScalar(transfer, 32, 8, false, &health);
 8003e4e:	f107 0313 	add.w	r3, r7, #19
 8003e52:	9300      	str	r3, [sp, #0]
 8003e54:	2300      	movs	r3, #0
 8003e56:	2208      	movs	r2, #8
 8003e58:	2120      	movs	r1, #32
 8003e5a:	6838      	ldr	r0, [r7, #0]
 8003e5c:	f7fd fc40 	bl	80016e0 <canardDecodeScalar>
            canardDecodeScalar(transfer, 40, 8, false, &mode);
 8003e60:	f107 0312 	add.w	r3, r7, #18
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	2300      	movs	r3, #0
 8003e68:	2208      	movs	r2, #8
 8003e6a:	2128      	movs	r1, #40	@ 0x28
 8003e6c:	6838      	ldr	r0, [r7, #0]
 8003e6e:	f7fd fc37 	bl	80016e0 <canardDecodeScalar>
            canardDecodeScalar(transfer, 48, 8, false, &sub_mode);
 8003e72:	f107 0311 	add.w	r3, r7, #17
 8003e76:	9300      	str	r3, [sp, #0]
 8003e78:	2300      	movs	r3, #0
 8003e7a:	2208      	movs	r2, #8
 8003e7c:	2130      	movs	r1, #48	@ 0x30
 8003e7e:	6838      	ldr	r0, [r7, #0]
 8003e80:	f7fd fc2e 	bl	80016e0 <canardDecodeScalar>

            if (transfer->payload_len >= 9)
 8003e84:	683b      	ldr	r3, [r7, #0]
 8003e86:	8a9b      	ldrh	r3, [r3, #20]
 8003e88:	2b08      	cmp	r3, #8
 8003e8a:	d908      	bls.n	8003e9e <onTransferReceived+0x21a>
            {
                canardDecodeScalar(transfer, 56, 16, false, &vendor_status);
 8003e8c:	f107 030e 	add.w	r3, r7, #14
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	2300      	movs	r3, #0
 8003e94:	2210      	movs	r2, #16
 8003e96:	2138      	movs	r1, #56	@ 0x38
 8003e98:	6838      	ldr	r0, [r7, #0]
 8003e9a:	f7fd fc21 	bl	80016e0 <canardDecodeScalar>
            }

            // Interpret the health field
            const char* health_str = "UNKNOWN";
 8003e9e:	4b35      	ldr	r3, [pc, #212]	@ (8003f74 <onTransferReceived+0x2f0>)
 8003ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            switch (health)
 8003ea2:	7cfb      	ldrb	r3, [r7, #19]
 8003ea4:	2b03      	cmp	r3, #3
 8003ea6:	d817      	bhi.n	8003ed8 <onTransferReceived+0x254>
 8003ea8:	a201      	add	r2, pc, #4	@ (adr r2, 8003eb0 <onTransferReceived+0x22c>)
 8003eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eae:	bf00      	nop
 8003eb0:	08003ec1 	.word	0x08003ec1
 8003eb4:	08003ec7 	.word	0x08003ec7
 8003eb8:	08003ecd 	.word	0x08003ecd
 8003ebc:	08003ed3 	.word	0x08003ed3
            {
                case 0: health_str = "NOMINAL"; break;
 8003ec0:	4b2d      	ldr	r3, [pc, #180]	@ (8003f78 <onTransferReceived+0x2f4>)
 8003ec2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ec4:	e008      	b.n	8003ed8 <onTransferReceived+0x254>
                case 1: health_str = "WARNING"; break;
 8003ec6:	4b2d      	ldr	r3, [pc, #180]	@ (8003f7c <onTransferReceived+0x2f8>)
 8003ec8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003eca:	e005      	b.n	8003ed8 <onTransferReceived+0x254>
                case 2: health_str = "ERROR"; break;
 8003ecc:	4b2c      	ldr	r3, [pc, #176]	@ (8003f80 <onTransferReceived+0x2fc>)
 8003ece:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ed0:	e002      	b.n	8003ed8 <onTransferReceived+0x254>
                case 3: health_str = "CRITICAL"; break;
 8003ed2:	4b2c      	ldr	r3, [pc, #176]	@ (8003f84 <onTransferReceived+0x300>)
 8003ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ed6:	bf00      	nop
            }

            // Interpret the mode field
            const char* mode_str = "UNKNOWN";
 8003ed8:	4b26      	ldr	r3, [pc, #152]	@ (8003f74 <onTransferReceived+0x2f0>)
 8003eda:	62bb      	str	r3, [r7, #40]	@ 0x28
            switch (mode)
 8003edc:	7cbb      	ldrb	r3, [r7, #18]
 8003ede:	2b07      	cmp	r3, #7
 8003ee0:	d87e      	bhi.n	8003fe0 <onTransferReceived+0x35c>
 8003ee2:	a201      	add	r2, pc, #4	@ (adr r2, 8003ee8 <onTransferReceived+0x264>)
 8003ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee8:	08003f09 	.word	0x08003f09
 8003eec:	08003f0f 	.word	0x08003f0f
 8003ef0:	08003f15 	.word	0x08003f15
 8003ef4:	08003f1b 	.word	0x08003f1b
 8003ef8:	08003fe1 	.word	0x08003fe1
 8003efc:	08003fe1 	.word	0x08003fe1
 8003f00:	08003fe1 	.word	0x08003fe1
 8003f04:	08003f21 	.word	0x08003f21
            {
                case 0: mode_str = "OPERATIONAL"; break;
 8003f08:	4b1f      	ldr	r3, [pc, #124]	@ (8003f88 <onTransferReceived+0x304>)
 8003f0a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f0c:	e012      	b.n	8003f34 <onTransferReceived+0x2b0>
                case 1: mode_str = "INITIALIZATION"; break;
 8003f0e:	4b1f      	ldr	r3, [pc, #124]	@ (8003f8c <onTransferReceived+0x308>)
 8003f10:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f12:	e00f      	b.n	8003f34 <onTransferReceived+0x2b0>
                case 2: mode_str = "MAINTENANCE"; break;
 8003f14:	4b1e      	ldr	r3, [pc, #120]	@ (8003f90 <onTransferReceived+0x30c>)
 8003f16:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f18:	e00c      	b.n	8003f34 <onTransferReceived+0x2b0>
                case 3: mode_str = "SOFTWARE_UPDATE"; break;
 8003f1a:	4b1e      	ldr	r3, [pc, #120]	@ (8003f94 <onTransferReceived+0x310>)
 8003f1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f1e:	e009      	b.n	8003f34 <onTransferReceived+0x2b0>
                case 7: mode_str = "OFFLINE"; break;
 8003f20:	4b1d      	ldr	r3, [pc, #116]	@ (8003f98 <onTransferReceived+0x314>)
 8003f22:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003f24:	e006      	b.n	8003f34 <onTransferReceived+0x2b0>

        }
        else
        {
            printf("WARNING: Received a truncated NodeStatus message from node %d\r\n",
                   transfer->source_node_id);
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	7edb      	ldrb	r3, [r3, #27]
            printf("WARNING: Received a truncated NodeStatus message from node %d\r\n",
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	481b      	ldr	r0, [pc, #108]	@ (8003f9c <onTransferReceived+0x318>)
 8003f2e:	f7fe fd6a 	bl	8002a06 <printf>
        if (transfer->payload_len >= 7)
 8003f32:	e055      	b.n	8003fe0 <onTransferReceived+0x35c>
 8003f34:	e054      	b.n	8003fe0 <onTransferReceived+0x35c>
        }
    }

    // Handle custom message ID 1010 (UAVCAN_LOCAL_NODE_STATUS)
    else if ((transfer->transfer_type == CanardTransferTypeMessage) &&
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	7e1b      	ldrb	r3, [r3, #24]
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d130      	bne.n	8003fa0 <onTransferReceived+0x31c>
             (transfer->data_type_id == UAVCAN_EQUIPMENT_ACTUATOR_ARRAYCOMMAND_ID))
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	8adb      	ldrh	r3, [r3, #22]
    else if ((transfer->transfer_type == CanardTransferTypeMessage) &&
 8003f42:	f240 32f2 	movw	r2, #1010	@ 0x3f2
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d12a      	bne.n	8003fa0 <onTransferReceived+0x31c>
    {

        // Process the actuator command message
        handleActuatorArrayCommand(ins, transfer);
 8003f4a:	6839      	ldr	r1, [r7, #0]
 8003f4c:	6878      	ldr	r0, [r7, #4]
 8003f4e:	f001 f8a5 	bl	800509c <handleActuatorArrayCommand>
 8003f52:	e046      	b.n	8003fe2 <onTransferReceived+0x35e>
 8003f54:	40003000 	.word	0x40003000
 8003f58:	080104f0 	.word	0x080104f0
 8003f5c:	0801053c 	.word	0x0801053c
 8003f60:	08010570 	.word	0x08010570
 8003f64:	08010580 	.word	0x08010580
 8003f68:	0801059c 	.word	0x0801059c
 8003f6c:	080105b0 	.word	0x080105b0
 8003f70:	080105c0 	.word	0x080105c0
 8003f74:	080105d4 	.word	0x080105d4
 8003f78:	080105dc 	.word	0x080105dc
 8003f7c:	080105e4 	.word	0x080105e4
 8003f80:	080105ec 	.word	0x080105ec
 8003f84:	080105f4 	.word	0x080105f4
 8003f88:	08010600 	.word	0x08010600
 8003f8c:	0801060c 	.word	0x0801060c
 8003f90:	0801061c 	.word	0x0801061c
 8003f94:	08010628 	.word	0x08010628
 8003f98:	08010638 	.word	0x08010638
 8003f9c:	08010640 	.word	0x08010640
    }

    // Handle parameter get/set requests
    else if ((transfer->transfer_type == CanardTransferTypeRequest) &&
 8003fa0:	683b      	ldr	r3, [r7, #0]
 8003fa2:	7e1b      	ldrb	r3, [r3, #24]
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d108      	bne.n	8003fba <onTransferReceived+0x336>
             (transfer->data_type_id == UAVCAN_PROTOCOL_PARAM_GETSET_ID))
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	8adb      	ldrh	r3, [r3, #22]
    else if ((transfer->transfer_type == CanardTransferTypeRequest) &&
 8003fac:	2b0b      	cmp	r3, #11
 8003fae:	d104      	bne.n	8003fba <onTransferReceived+0x336>
    {
        handle_param_getset(ins, transfer);
 8003fb0:	6839      	ldr	r1, [r7, #0]
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fc5c 	bl	8004870 <handle_param_getset>
 8003fb8:	e013      	b.n	8003fe2 <onTransferReceived+0x35e>
    }

    // Handle ArduPilot GNSS status message - Fix for message type 0x4e27 (20007)
    else if ((transfer->transfer_type == CanardTransferTypeMessage) &&
 8003fba:	683b      	ldr	r3, [r7, #0]
 8003fbc:	7e1b      	ldrb	r3, [r3, #24]
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d10f      	bne.n	8003fe2 <onTransferReceived+0x35e>
             (transfer->data_type_id == ARDUPILOT_GNSS_STATUS_ID))
 8003fc2:	683b      	ldr	r3, [r7, #0]
 8003fc4:	8adb      	ldrh	r3, [r3, #22]
    else if ((transfer->transfer_type == CanardTransferTypeMessage) &&
 8003fc6:	f644 6227 	movw	r2, #20007	@ 0x4e27
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d109      	bne.n	8003fe2 <onTransferReceived+0x35e>
    {
        // Skip detailed processing of this message type to avoid issues
        // Just acknowledge receipt and don't try to decode it
        printf("Received ArduPilot GNSS status from node %d (skipping detailed processing)\r\n",
               transfer->source_node_id);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	7edb      	ldrb	r3, [r3, #27]
        printf("Received ArduPilot GNSS status from node %d (skipping detailed processing)\r\n",
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4805      	ldr	r0, [pc, #20]	@ (8003fec <onTransferReceived+0x368>)
 8003fd6:	f7fe fd16 	bl	8002a06 <printf>
    }


}
 8003fda:	e002      	b.n	8003fe2 <onTransferReceived+0x35e>
        if (transfer->payload_len >= 7)  // Minimum size for node status
 8003fdc:	bf00      	nop
 8003fde:	e000      	b.n	8003fe2 <onTransferReceived+0x35e>
        if (transfer->payload_len >= 7)
 8003fe0:	bf00      	nop
}
 8003fe2:	bf00      	nop
 8003fe4:	3730      	adds	r7, #48	@ 0x30
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	08010680 	.word	0x08010680

08003ff0 <process1HzTasks>:

/**
 * Tasks to run at 1Hz (and other low frequencies)
 */
void process1HzTasks(CanardInstance* ins)
{
 8003ff0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ff4:	b0ac      	sub	sp, #176	@ 0xb0
 8003ff6:	af06      	add	r7, sp, #24
 8003ff8:	60f8      	str	r0, [r7, #12]
    static uint64_t last_position_read_ms = 0;
    static uint64_t last_param_broadcast_ms = 0;
    static uint8_t param_broadcast_counter = 0;

    // Get current time in milliseconds
    uint64_t current_ms = HAL_GetTick();
 8003ffa:	f002 fc23 	bl	8006844 <HAL_GetTick>
 8003ffe:	4603      	mov	r3, r0
 8004000:	2200      	movs	r2, #0
 8004002:	603b      	str	r3, [r7, #0]
 8004004:	607a      	str	r2, [r7, #4]
 8004006:	e9d7 2300 	ldrd	r2, r3, [r7]
 800400a:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88


    // 1Hz tasks
    if (current_ms - last_1hz_task_ms >= 1000) {
 800400e:	4ba4      	ldr	r3, [pc, #656]	@ (80042a0 <process1HzTasks+0x2b0>)
 8004010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004014:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8004018:	ebb0 0802 	subs.w	r8, r0, r2
 800401c:	eb61 0903 	sbc.w	r9, r1, r3
 8004020:	f5b8 7f7a 	cmp.w	r8, #1000	@ 0x3e8
 8004024:	f179 0300 	sbcs.w	r3, r9, #0
 8004028:	f0c0 81b5 	bcc.w	8004396 <process1HzTasks+0x3a6>
        // Send node status message
        send_NodeStatus();
 800402c:	f7ff fc6c 	bl	8003908 <send_NodeStatus>
        


            // Create parameter response buffer
            uint8_t buffer[UAVCAN_PROTOCOL_PARAM_VALUE_SIZE] = {0};
 8004030:	f107 0314 	add.w	r3, r7, #20
 8004034:	223c      	movs	r2, #60	@ 0x3c
 8004036:	2100      	movs	r1, #0
 8004038:	4618      	mov	r0, r3
 800403a:	f00b fc33 	bl	800f8a4 <memset>
            int offset = 0;
 800403e:	2300      	movs	r3, #0
 8004040:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            param_t* p = &parameters[param_broadcast_counter];
 8004044:	4b97      	ldr	r3, [pc, #604]	@ (80042a4 <process1HzTasks+0x2b4>)
 8004046:	781b      	ldrb	r3, [r3, #0]
 8004048:	019b      	lsls	r3, r3, #6
 800404a:	4a97      	ldr	r2, [pc, #604]	@ (80042a8 <process1HzTasks+0x2b8>)
 800404c:	4413      	add	r3, r2
 800404e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

            // Encode based on type
            switch (p->type) {
 8004052:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004056:	7c1b      	ldrb	r3, [r3, #16]
 8004058:	2b04      	cmp	r3, #4
 800405a:	f000 80c6 	beq.w	80041ea <process1HzTasks+0x1fa>
 800405e:	2b04      	cmp	r3, #4
 8004060:	f300 8124 	bgt.w	80042ac <process1HzTasks+0x2bc>
 8004064:	2b01      	cmp	r3, #1
 8004066:	d002      	beq.n	800406e <process1HzTasks+0x7e>
 8004068:	2b03      	cmp	r3, #3
 800406a:	d05f      	beq.n	800412c <process1HzTasks+0x13c>
 800406c:	e11e      	b.n	80042ac <process1HzTasks+0x2bc>
                case PARAM_TYPE_INTEGER:
                    buffer[offset++] = PARAM_TYPE_INTEGER;  // Integer type tag
 800406e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004072:	1c5a      	adds	r2, r3, #1
 8004074:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004078:	3390      	adds	r3, #144	@ 0x90
 800407a:	f107 0208 	add.w	r2, r7, #8
 800407e:	4413      	add	r3, r2
 8004080:	2201      	movs	r2, #1
 8004082:	f803 2c84 	strb.w	r2, [r3, #-132]
                    int64_t int_val = (int64_t)p->value.i;
 8004086:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	17da      	asrs	r2, r3, #31
 800408e:	469a      	mov	sl, r3
 8004090:	4693      	mov	fp, r2
 8004092:	e9c7 ab1e 	strd	sl, fp, [r7, #120]	@ 0x78
                    memcpy(&buffer[offset], &int_val, sizeof(int64_t));
 8004096:	f107 0214 	add.w	r2, r7, #20
 800409a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800409e:	18d1      	adds	r1, r2, r3
 80040a0:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 80040a4:	600a      	str	r2, [r1, #0]
 80040a6:	604b      	str	r3, [r1, #4]
                    offset += sizeof(int64_t);
 80040a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040ac:	3308      	adds	r3, #8
 80040ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                    int64_t default_val = (int64_t)p->defval;
 80040b2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80040b6:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80040ba:	e9c7 231c 	strd	r2, r3, [r7, #112]	@ 0x70
                    memcpy(&buffer[offset], &default_val, sizeof(int64_t));
 80040be:	f107 0214 	add.w	r2, r7, #20
 80040c2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040c6:	18d1      	adds	r1, r2, r3
 80040c8:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80040cc:	600a      	str	r2, [r1, #0]
 80040ce:	604b      	str	r3, [r1, #4]
                    offset += sizeof(int64_t);
 80040d0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040d4:	3308      	adds	r3, #8
 80040d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                    int64_t min_val = (int64_t)p->min;
 80040da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80040de:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80040e2:	e9c7 231a 	strd	r2, r3, [r7, #104]	@ 0x68
                    memcpy(&buffer[offset], &min_val, sizeof(int64_t));
 80040e6:	f107 0214 	add.w	r2, r7, #20
 80040ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040ee:	18d1      	adds	r1, r2, r3
 80040f0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 80040f4:	600a      	str	r2, [r1, #0]
 80040f6:	604b      	str	r3, [r1, #4]
                    offset += sizeof(int64_t);
 80040f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80040fc:	3308      	adds	r3, #8
 80040fe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                    int64_t max_val = (int64_t)p->max;
 8004102:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004106:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800410a:	e9c7 2318 	strd	r2, r3, [r7, #96]	@ 0x60
                    memcpy(&buffer[offset], &max_val, sizeof(int64_t));
 800410e:	f107 0214 	add.w	r2, r7, #20
 8004112:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004116:	18d1      	adds	r1, r2, r3
 8004118:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800411c:	600a      	str	r2, [r1, #0]
 800411e:	604b      	str	r3, [r1, #4]
                    offset += sizeof(int64_t);
 8004120:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004124:	3308      	adds	r3, #8
 8004126:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                    break;
 800412a:	e0cc      	b.n	80042c6 <process1HzTasks+0x2d6>

                case PARAM_TYPE_REAL:
                    buffer[offset++] = PARAM_TYPE_REAL;  // Real type tag
 800412c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004130:	1c5a      	adds	r2, r3, #1
 8004132:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004136:	3390      	adds	r3, #144	@ 0x90
 8004138:	f107 0208 	add.w	r2, r7, #8
 800413c:	4413      	add	r3, r2
 800413e:	2203      	movs	r2, #3
 8004140:	f803 2c84 	strb.w	r2, [r3, #-132]
                    float real_val = p->value.f;
 8004144:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                    memcpy(&buffer[offset], &real_val, sizeof(float));
 800414c:	f107 0214 	add.w	r2, r7, #20
 8004150:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004154:	4413      	add	r3, r2
 8004156:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8004158:	601a      	str	r2, [r3, #0]
                    offset += sizeof(float);
 800415a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800415e:	3304      	adds	r3, #4
 8004160:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                    float def_val_f = (float)p->defval;
 8004164:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004168:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800416c:	4610      	mov	r0, r2
 800416e:	4619      	mov	r1, r3
 8004170:	f7fc fac8 	bl	8000704 <__aeabi_l2f>
 8004174:	4603      	mov	r3, r0
 8004176:	65bb      	str	r3, [r7, #88]	@ 0x58
                    memcpy(&buffer[offset], &def_val_f, sizeof(float));
 8004178:	f107 0214 	add.w	r2, r7, #20
 800417c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004180:	4413      	add	r3, r2
 8004182:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004184:	601a      	str	r2, [r3, #0]
                    offset += sizeof(float);
 8004186:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800418a:	3304      	adds	r3, #4
 800418c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                    float min_val_f = (float)p->min;
 8004190:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004194:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 8004198:	4610      	mov	r0, r2
 800419a:	4619      	mov	r1, r3
 800419c:	f7fc fab2 	bl	8000704 <__aeabi_l2f>
 80041a0:	4603      	mov	r3, r0
 80041a2:	657b      	str	r3, [r7, #84]	@ 0x54
                    memcpy(&buffer[offset], &min_val_f, sizeof(float));
 80041a4:	f107 0214 	add.w	r2, r7, #20
 80041a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041ac:	4413      	add	r3, r2
 80041ae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80041b0:	601a      	str	r2, [r3, #0]
                    offset += sizeof(float);
 80041b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041b6:	3304      	adds	r3, #4
 80041b8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                    float max_val_f = (float)p->max;
 80041bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80041c0:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80041c4:	4610      	mov	r0, r2
 80041c6:	4619      	mov	r1, r3
 80041c8:	f7fc fa9c 	bl	8000704 <__aeabi_l2f>
 80041cc:	4603      	mov	r3, r0
 80041ce:	653b      	str	r3, [r7, #80]	@ 0x50
                    memcpy(&buffer[offset], &max_val_f, sizeof(float));
 80041d0:	f107 0214 	add.w	r2, r7, #20
 80041d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041d8:	4413      	add	r3, r2
 80041da:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80041dc:	601a      	str	r2, [r3, #0]
                    offset += sizeof(float);
 80041de:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041e2:	3304      	adds	r3, #4
 80041e4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                    break;
 80041e8:	e06d      	b.n	80042c6 <process1HzTasks+0x2d6>

                case PARAM_TYPE_STRING: {
                    buffer[offset++] = PARAM_TYPE_STRING;
 80041ea:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80041ee:	1c5a      	adds	r2, r3, #1
 80041f0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80041f4:	3390      	adds	r3, #144	@ 0x90
 80041f6:	f107 0208 	add.w	r2, r7, #8
 80041fa:	4413      	add	r3, r2
 80041fc:	2204      	movs	r2, #4
 80041fe:	f803 2c84 	strb.w	r2, [r3, #-132]

                    // First string is empty (default value)
                    buffer[offset++] = 0;
 8004202:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004206:	1c5a      	adds	r2, r3, #1
 8004208:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800420c:	3390      	adds	r3, #144	@ 0x90
 800420e:	f107 0208 	add.w	r2, r7, #8
 8004212:	4413      	add	r3, r2
 8004214:	2200      	movs	r2, #0
 8004216:	f803 2c84 	strb.w	r2, [r3, #-132]

                    // Second string is the actual value
                    uint8_t str_len = strlen(p->value.str);
 800421a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800421e:	3314      	adds	r3, #20
 8004220:	4618      	mov	r0, r3
 8004222:	f7fb ffdb 	bl	80001dc <strlen>
 8004226:	4603      	mov	r3, r0
 8004228:	f887 3083 	strb.w	r3, [r7, #131]	@ 0x83
                    buffer[offset++] = str_len;
 800422c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004230:	1c5a      	adds	r2, r3, #1
 8004232:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004236:	3390      	adds	r3, #144	@ 0x90
 8004238:	f107 0208 	add.w	r2, r7, #8
 800423c:	4413      	add	r3, r2
 800423e:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 8004242:	f803 2c84 	strb.w	r2, [r3, #-132]
                    memcpy(&buffer[offset], p->value.str, str_len);
 8004246:	f107 0214 	add.w	r2, r7, #20
 800424a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800424e:	18d0      	adds	r0, r2, r3
 8004250:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004254:	3314      	adds	r3, #20
 8004256:	f897 2083 	ldrb.w	r2, [r7, #131]	@ 0x83
 800425a:	4619      	mov	r1, r3
 800425c:	f00b fbc1 	bl	800f9e2 <memcpy>
                    offset += str_len;
 8004260:	f897 3083 	ldrb.w	r3, [r7, #131]	@ 0x83
 8004264:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004268:	4413      	add	r3, r2
 800426a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

                    // Third string is empty (min value - not used for strings)
                    buffer[offset++] = 0;
 800426e:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004272:	1c5a      	adds	r2, r3, #1
 8004274:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004278:	3390      	adds	r3, #144	@ 0x90
 800427a:	f107 0208 	add.w	r2, r7, #8
 800427e:	4413      	add	r3, r2
 8004280:	2200      	movs	r2, #0
 8004282:	f803 2c84 	strb.w	r2, [r3, #-132]

                    // Fourth string is empty (max value - not used for strings)
                    buffer[offset++] = 0;
 8004286:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800428a:	1c5a      	adds	r2, r3, #1
 800428c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004290:	3390      	adds	r3, #144	@ 0x90
 8004292:	f107 0208 	add.w	r2, r7, #8
 8004296:	4413      	add	r3, r2
 8004298:	2200      	movs	r2, #0
 800429a:	f803 2c84 	strb.w	r2, [r3, #-132]
                    break;
 800429e:	e012      	b.n	80042c6 <process1HzTasks+0x2d6>
 80042a0:	20005ae0 	.word	0x20005ae0
 80042a4:	20005ae8 	.word	0x20005ae8
 80042a8:	20000000 	.word	0x20000000
                }

                default:
                    buffer[offset++] = PARAM_TYPE_EMPTY;  // Empty type tag
 80042ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80042b0:	1c5a      	adds	r2, r3, #1
 80042b2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042b6:	3390      	adds	r3, #144	@ 0x90
 80042b8:	f107 0208 	add.w	r2, r7, #8
 80042bc:	4413      	add	r3, r2
 80042be:	2200      	movs	r2, #0
 80042c0:	f803 2c84 	strb.w	r2, [r3, #-132]
                    break;
 80042c4:	bf00      	nop
            }

            // Add parameter name at the end
            uint8_t name_len = strlen(p->name);
 80042c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7fb ff86 	bl	80001dc <strlen>
 80042d0:	4603      	mov	r3, r0
 80042d2:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
            buffer[offset++] = name_len;
 80042d6:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80042da:	1c5a      	adds	r2, r3, #1
 80042dc:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80042e0:	3390      	adds	r3, #144	@ 0x90
 80042e2:	f107 0208 	add.w	r2, r7, #8
 80042e6:	4413      	add	r3, r2
 80042e8:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 80042ec:	f803 2c84 	strb.w	r2, [r3, #-132]
            memcpy(&buffer[offset], p->name, name_len);
 80042f0:	f107 0214 	add.w	r2, r7, #20
 80042f4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80042f8:	4413      	add	r3, r2
 80042fa:	f8d7 1084 	ldr.w	r1, [r7, #132]	@ 0x84
 80042fe:	f897 2082 	ldrb.w	r2, [r7, #130]	@ 0x82
 8004302:	4618      	mov	r0, r3
 8004304:	f00b fb6d 	bl	800f9e2 <memcpy>
            offset += name_len;
 8004308:	f897 3082 	ldrb.w	r3, [r7, #130]	@ 0x82
 800430c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004310:	4413      	add	r3, r2
 8004312:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

            // Add parameter index
            buffer[offset++] = param_broadcast_counter & 0xFF;
 8004316:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800431a:	1c5a      	adds	r2, r3, #1
 800431c:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004320:	4a2f      	ldr	r2, [pc, #188]	@ (80043e0 <process1HzTasks+0x3f0>)
 8004322:	7812      	ldrb	r2, [r2, #0]
 8004324:	3390      	adds	r3, #144	@ 0x90
 8004326:	f107 0108 	add.w	r1, r7, #8
 800432a:	440b      	add	r3, r1
 800432c:	f803 2c84 	strb.w	r2, [r3, #-132]
            buffer[offset++] = (param_broadcast_counter >> 8) & 0xFF;
 8004330:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8004334:	1c5a      	adds	r2, r3, #1
 8004336:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800433a:	3390      	adds	r3, #144	@ 0x90
 800433c:	f107 0208 	add.w	r2, r7, #8
 8004340:	4413      	add	r3, r2
 8004342:	2200      	movs	r2, #0
 8004344:	f803 2c84 	strb.w	r2, [r3, #-132]

            // Send parameter with high priority
            static uint8_t transfer_id = 0;
            canardRequestOrRespond(&canard,
 8004348:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800434c:	b29b      	uxth	r3, r3
 800434e:	9305      	str	r3, [sp, #20]
 8004350:	f107 0314 	add.w	r3, r7, #20
 8004354:	9304      	str	r3, [sp, #16]
 8004356:	2300      	movs	r3, #0
 8004358:	9303      	str	r3, [sp, #12]
 800435a:	2308      	movs	r3, #8
 800435c:	9302      	str	r3, [sp, #8]
 800435e:	4b21      	ldr	r3, [pc, #132]	@ (80043e4 <process1HzTasks+0x3f4>)
 8004360:	9301      	str	r3, [sp, #4]
 8004362:	230b      	movs	r3, #11
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	a31c      	add	r3, pc, #112	@ (adr r3, 80043d8 <process1HzTasks+0x3e8>)
 8004368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800436c:	2100      	movs	r1, #0
 800436e:	481e      	ldr	r0, [pc, #120]	@ (80043e8 <process1HzTasks+0x3f8>)
 8004370:	f7fc fcfc 	bl	8000d6c <canardRequestOrRespond>
                                  CanardResponse,
                                  buffer,
                                  offset);

            // Process TX queue to ensure it's sent
            processTxRxOnce(&canard, 0);
 8004374:	2100      	movs	r1, #0
 8004376:	481c      	ldr	r0, [pc, #112]	@ (80043e8 <process1HzTasks+0x3f8>)
 8004378:	f7ff fa54 	bl	8003824 <processTxRxOnce>

            // Move to next parameter
            param_broadcast_counter++;
 800437c:	4b18      	ldr	r3, [pc, #96]	@ (80043e0 <process1HzTasks+0x3f0>)
 800437e:	781b      	ldrb	r3, [r3, #0]
 8004380:	3301      	adds	r3, #1
 8004382:	b2da      	uxtb	r2, r3
 8004384:	4b16      	ldr	r3, [pc, #88]	@ (80043e0 <process1HzTasks+0x3f0>)
 8004386:	701a      	strb	r2, [r3, #0]

            // Reset counter if we've gone through all parameters
            if (param_broadcast_counter >= MAX_PARAMETERS) {
 8004388:	4b15      	ldr	r3, [pc, #84]	@ (80043e0 <process1HzTasks+0x3f0>)
 800438a:	781b      	ldrb	r3, [r3, #0]
 800438c:	2b63      	cmp	r3, #99	@ 0x63
 800438e:	d902      	bls.n	8004396 <process1HzTasks+0x3a6>
                param_broadcast_counter = 0;
 8004390:	4b13      	ldr	r3, [pc, #76]	@ (80043e0 <process1HzTasks+0x3f0>)
 8004392:	2200      	movs	r2, #0
 8004394:	701a      	strb	r2, [r3, #0]
            }
        }

        last_1hz_task_ms = current_ms;
 8004396:	4915      	ldr	r1, [pc, #84]	@ (80043ec <process1HzTasks+0x3fc>)
 8004398:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 800439c:	e9c1 2300 	strd	r2, r3, [r1]
        last_actuator_status_ms = current_ms;
    }
    */

    // Periodically broadcast parameters every 5 seconds to help with discovery
    if (current_ms - last_param_broadcast_ms >= 5000) {
 80043a0:	4b13      	ldr	r3, [pc, #76]	@ (80043f0 <process1HzTasks+0x400>)
 80043a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a6:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 80043aa:	1a84      	subs	r4, r0, r2
 80043ac:	eb61 0503 	sbc.w	r5, r1, r3
 80043b0:	f241 3388 	movw	r3, #5000	@ 0x1388
 80043b4:	429c      	cmp	r4, r3
 80043b6:	f175 0300 	sbcs.w	r3, r5, #0
 80043ba:	d306      	bcc.n	80043ca <process1HzTasks+0x3da>
        // Full parameter broadcast every 5 seconds
        broadcast_all_parameters();
 80043bc:	f000 fe06 	bl	8004fcc <broadcast_all_parameters>
        last_param_broadcast_ms = current_ms;
 80043c0:	490b      	ldr	r1, [pc, #44]	@ (80043f0 <process1HzTasks+0x400>)
 80043c2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80043c6:	e9c1 2300 	strd	r2, r3, [r1]
    }
}
 80043ca:	bf00      	nop
 80043cc:	3798      	adds	r7, #152	@ 0x98
 80043ce:	46bd      	mov	sp, r7
 80043d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043d4:	f3af 8000 	nop.w
 80043d8:	39d1a4d5 	.word	0x39d1a4d5
 80043dc:	a7b622f9 	.word	0xa7b622f9
 80043e0:	20005ae8 	.word	0x20005ae8
 80043e4:	20005ae9 	.word	0x20005ae9
 80043e8:	20005aa0 	.word	0x20005aa0
 80043ec:	20005ae0 	.word	0x20005ae0
 80043f0:	20005af0 	.word	0x20005af0

080043f4 <epos4_send_sdo_read>:



void epos4_send_sdo_read(uint16_t index, uint8_t subindex)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b08c      	sub	sp, #48	@ 0x30
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	4603      	mov	r3, r0
 80043fc:	460a      	mov	r2, r1
 80043fe:	80fb      	strh	r3, [r7, #6]
 8004400:	4613      	mov	r3, r2
 8004402:	717b      	strb	r3, [r7, #5]
    CAN_TxHeaderTypeDef tx_header;
    uint32_t tx_mailbox;
    uint8_t tx_data[8] = {0};
 8004404:	f107 030c 	add.w	r3, r7, #12
 8004408:	2200      	movs	r2, #0
 800440a:	601a      	str	r2, [r3, #0]
 800440c:	605a      	str	r2, [r3, #4]

    // Prepare SDO read message
    tx_data[0] = 0x40;  // Command to read
 800440e:	2340      	movs	r3, #64	@ 0x40
 8004410:	733b      	strb	r3, [r7, #12]
    tx_data[1] = (uint8_t)(index & 0xFF);         // Index LSB
 8004412:	88fb      	ldrh	r3, [r7, #6]
 8004414:	b2db      	uxtb	r3, r3
 8004416:	737b      	strb	r3, [r7, #13]
    tx_data[2] = (uint8_t)((index >> 8) & 0xFF);  // Index MSB
 8004418:	88fb      	ldrh	r3, [r7, #6]
 800441a:	0a1b      	lsrs	r3, r3, #8
 800441c:	b29b      	uxth	r3, r3
 800441e:	b2db      	uxtb	r3, r3
 8004420:	73bb      	strb	r3, [r7, #14]
    tx_data[3] = subindex;
 8004422:	797b      	ldrb	r3, [r7, #5]
 8004424:	73fb      	strb	r3, [r7, #15]
    // Bytes 4-7 are reserved and should be 0

    tx_header.StdId = EPOS4_SDO_WRITE + EPOS4_NODE_ID;
 8004426:	f240 6301 	movw	r3, #1537	@ 0x601
 800442a:	61bb      	str	r3, [r7, #24]
    tx_header.ExtId = 0;
 800442c:	2300      	movs	r3, #0
 800442e:	61fb      	str	r3, [r7, #28]
    tx_header.IDE = CAN_ID_STD;  // Standard ID, not extended
 8004430:	2300      	movs	r3, #0
 8004432:	623b      	str	r3, [r7, #32]
    tx_header.RTR = CAN_RTR_DATA;
 8004434:	2300      	movs	r3, #0
 8004436:	627b      	str	r3, [r7, #36]	@ 0x24
    tx_header.DLC = 8;  // Always 8 bytes for SDO
 8004438:	2308      	movs	r3, #8
 800443a:	62bb      	str	r3, [r7, #40]	@ 0x28

    // Add delay before sending
        HAL_Delay(1);
 800443c:	2001      	movs	r0, #1
 800443e:	f002 fa0d 	bl	800685c <HAL_Delay>

    // Send the message
    HAL_CAN_AddTxMessage(&hcan1, &tx_header, tx_data, &tx_mailbox);
 8004442:	f107 0314 	add.w	r3, r7, #20
 8004446:	f107 020c 	add.w	r2, r7, #12
 800444a:	f107 0118 	add.w	r1, r7, #24
 800444e:	4807      	ldr	r0, [pc, #28]	@ (800446c <epos4_send_sdo_read+0x78>)
 8004450:	f002 fc48 	bl	8006ce4 <HAL_CAN_AddTxMessage>

    // Add delay after sending
    HAL_Delay(1);
 8004454:	2001      	movs	r0, #1
 8004456:	f002 fa01 	bl	800685c <HAL_Delay>

    // Blink orange LED (LD3) to indicate EPOS4 communication
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800445a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800445e:	4804      	ldr	r0, [pc, #16]	@ (8004470 <epos4_send_sdo_read+0x7c>)
 8004460:	f003 fe79 	bl	8008156 <HAL_GPIO_TogglePin>
}
 8004464:	bf00      	nop
 8004466:	3730      	adds	r7, #48	@ 0x30
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}
 800446c:	200019d0 	.word	0x200019d0
 8004470:	40020c00 	.word	0x40020c00

08004474 <epos4_enable_motor>:
    // Feed watchdog
    IWDG->KR = 0xAAAA;
}

void epos4_enable_motor(void)
{
 8004474:	b580      	push	{r7, lr}
 8004476:	af00      	add	r7, sp, #0
    printf("ENABLE_MOTOR: Starting sequence\n");
 8004478:	4834      	ldr	r0, [pc, #208]	@ (800454c <epos4_enable_motor+0xd8>)
 800447a:	f00b f933 	bl	800f6e4 <puts>

    // Step 1: Reset any faults
    printf("ENABLE_MOTOR: Sending fault reset command\n");
 800447e:	4834      	ldr	r0, [pc, #208]	@ (8004550 <epos4_enable_motor+0xdc>)
 8004480:	f00b f930 	bl	800f6e4 <puts>
    epos4_send_sdo_write(EPOS4_CONTROLWORD_INDEX, 0x00, 0x0080, 2);
 8004484:	2302      	movs	r3, #2
 8004486:	2280      	movs	r2, #128	@ 0x80
 8004488:	2100      	movs	r1, #0
 800448a:	f246 0040 	movw	r0, #24640	@ 0x6040
 800448e:	f001 f8d7 	bl	8005640 <epos4_send_sdo_write>
    HAL_Delay(10);
 8004492:	200a      	movs	r0, #10
 8004494:	f002 f9e2 	bl	800685c <HAL_Delay>

    // Step 2: Shutdown command (prepare for switch on)
    printf("ENABLE_MOTOR: Sending shutdown command\n");
 8004498:	482e      	ldr	r0, [pc, #184]	@ (8004554 <epos4_enable_motor+0xe0>)
 800449a:	f00b f923 	bl	800f6e4 <puts>
    epos4_send_sdo_write(EPOS4_CONTROLWORD_INDEX, 0x00, 0x0006, 2);
 800449e:	2302      	movs	r3, #2
 80044a0:	2206      	movs	r2, #6
 80044a2:	2100      	movs	r1, #0
 80044a4:	f246 0040 	movw	r0, #24640	@ 0x6040
 80044a8:	f001 f8ca 	bl	8005640 <epos4_send_sdo_write>
    HAL_Delay(50);
 80044ac:	2032      	movs	r0, #50	@ 0x32
 80044ae:	f002 f9d5 	bl	800685c <HAL_Delay>
    
    // Process any responses
    processTxRxOnce(&canard, 10);
 80044b2:	210a      	movs	r1, #10
 80044b4:	4828      	ldr	r0, [pc, #160]	@ (8004558 <epos4_enable_motor+0xe4>)
 80044b6:	f7ff f9b5 	bl	8003824 <processTxRxOnce>
    
    // Step 3: Switch on (but don't enable operation yet)
    printf("ENABLE_MOTOR: Sending switch on command\n");
 80044ba:	4828      	ldr	r0, [pc, #160]	@ (800455c <epos4_enable_motor+0xe8>)
 80044bc:	f00b f912 	bl	800f6e4 <puts>
    epos4_send_sdo_write(EPOS4_CONTROLWORD_INDEX, 0x00, 0x0007, 2);
 80044c0:	2302      	movs	r3, #2
 80044c2:	2207      	movs	r2, #7
 80044c4:	2100      	movs	r1, #0
 80044c6:	f246 0040 	movw	r0, #24640	@ 0x6040
 80044ca:	f001 f8b9 	bl	8005640 <epos4_send_sdo_write>
    HAL_Delay(50);
 80044ce:	2032      	movs	r0, #50	@ 0x32
 80044d0:	f002 f9c4 	bl	800685c <HAL_Delay>
    
    // Process any responses
    processTxRxOnce(&canard, 10);
 80044d4:	210a      	movs	r1, #10
 80044d6:	4820      	ldr	r0, [pc, #128]	@ (8004558 <epos4_enable_motor+0xe4>)
 80044d8:	f7ff f9a4 	bl	8003824 <processTxRxOnce>
    
    // Step 4: Enable operation
    printf("ENABLE_MOTOR: Sending enable operation command\n");
 80044dc:	4820      	ldr	r0, [pc, #128]	@ (8004560 <epos4_enable_motor+0xec>)
 80044de:	f00b f901 	bl	800f6e4 <puts>
    epos4_send_sdo_write(EPOS4_CONTROLWORD_INDEX, 0x00, 0x000F, 2);
 80044e2:	2302      	movs	r3, #2
 80044e4:	220f      	movs	r2, #15
 80044e6:	2100      	movs	r1, #0
 80044e8:	f246 0040 	movw	r0, #24640	@ 0x6040
 80044ec:	f001 f8a8 	bl	8005640 <epos4_send_sdo_write>
    HAL_Delay(50);
 80044f0:	2032      	movs	r0, #50	@ 0x32
 80044f2:	f002 f9b3 	bl	800685c <HAL_Delay>
    
    // Process any responses
    processTxRxOnce(&canard, 10);
 80044f6:	210a      	movs	r1, #10
 80044f8:	4817      	ldr	r0, [pc, #92]	@ (8004558 <epos4_enable_motor+0xe4>)
 80044fa:	f7ff f993 	bl	8003824 <processTxRxOnce>

    // Set following error window to 2000 increments
    printf("CHANGE_ERROR_WINDOW: Setting following error window to 2000 increments\n");
 80044fe:	4819      	ldr	r0, [pc, #100]	@ (8004564 <epos4_enable_motor+0xf0>)
 8004500:	f00b f8f0 	bl	800f6e4 <puts>
    epos4_send_sdo_write(0x6065, 0x00, 1000000, 4);  // 4 bytes for Uint32
 8004504:	2304      	movs	r3, #4
 8004506:	4a18      	ldr	r2, [pc, #96]	@ (8004568 <epos4_enable_motor+0xf4>)
 8004508:	2100      	movs	r1, #0
 800450a:	f246 0065 	movw	r0, #24677	@ 0x6065
 800450e:	f001 f897 	bl	8005640 <epos4_send_sdo_write>

    // Process any responses
    processTxRxOnce(&canard, 10);
 8004512:	210a      	movs	r1, #10
 8004514:	4810      	ldr	r0, [pc, #64]	@ (8004558 <epos4_enable_motor+0xe4>)
 8004516:	f7ff f985 	bl	8003824 <processTxRxOnce>
    
    // Step 5: Check status
    printf("ENABLE_MOTOR: Checking motor status\n");
 800451a:	4814      	ldr	r0, [pc, #80]	@ (800456c <epos4_enable_motor+0xf8>)
 800451c:	f00b f8e2 	bl	800f6e4 <puts>
    check_epos4_status();
 8004520:	f001 fcf0 	bl	8005f04 <check_epos4_status>
    
    // Visual indication
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8004524:	2201      	movs	r2, #1
 8004526:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800452a:	4811      	ldr	r0, [pc, #68]	@ (8004570 <epos4_enable_motor+0xfc>)
 800452c:	f003 fdfa 	bl	8008124 <HAL_GPIO_WritePin>
    HAL_Delay(50);
 8004530:	2032      	movs	r0, #50	@ 0x32
 8004532:	f002 f993 	bl	800685c <HAL_Delay>
    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8004536:	2200      	movs	r2, #0
 8004538:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800453c:	480c      	ldr	r0, [pc, #48]	@ (8004570 <epos4_enable_motor+0xfc>)
 800453e:	f003 fdf1 	bl	8008124 <HAL_GPIO_WritePin>
    
    printf("ENABLE_MOTOR: Sequence completed\n");
 8004542:	480c      	ldr	r0, [pc, #48]	@ (8004574 <epos4_enable_motor+0x100>)
 8004544:	f00b f8ce 	bl	800f6e4 <puts>
}
 8004548:	bf00      	nop
 800454a:	bd80      	pop	{r7, pc}
 800454c:	080106f4 	.word	0x080106f4
 8004550:	08010714 	.word	0x08010714
 8004554:	08010740 	.word	0x08010740
 8004558:	20005aa0 	.word	0x20005aa0
 800455c:	08010768 	.word	0x08010768
 8004560:	08010790 	.word	0x08010790
 8004564:	080107c0 	.word	0x080107c0
 8004568:	000f4240 	.word	0x000f4240
 800456c:	08010808 	.word	0x08010808
 8004570:	40020c00 	.word	0x40020c00
 8004574:	0801082c 	.word	0x0801082c

08004578 <EPOS4_SetControlWord>:
    printf("Sending position command: %ld\n", (long)target_position);
    force_motor_movement(target_position);
}

void EPOS4_SetControlWord(CAN_HandleTypeDef* hcan, uint8_t node_id, uint16_t control_word)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b08e      	sub	sp, #56	@ 0x38
 800457c:	af00      	add	r7, sp, #0
 800457e:	6078      	str	r0, [r7, #4]
 8004580:	460b      	mov	r3, r1
 8004582:	70fb      	strb	r3, [r7, #3]
 8004584:	4613      	mov	r3, r2
 8004586:	803b      	strh	r3, [r7, #0]
    uint8_t dlc = 2;
 8004588:	2302      	movs	r3, #2
 800458a:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t data[8] = {0};
 800458e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004592:	2200      	movs	r2, #0
 8004594:	601a      	str	r2, [r3, #0]
 8004596:	605a      	str	r2, [r3, #4]
    uint32_t can_id = 0x600 + node_id;  // SDO request ID
 8004598:	78fb      	ldrb	r3, [r7, #3]
 800459a:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800459e:	633b      	str	r3, [r7, #48]	@ 0x30

    // Command to write to object dictionary at 0x6040 (control word)
    data[0] = 0x2B;  // Write command (2=write, B=2 bytes)
 80045a0:	232b      	movs	r3, #43	@ 0x2b
 80045a2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    data[1] = 0x40;  // Object index low byte
 80045a6:	2340      	movs	r3, #64	@ 0x40
 80045a8:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    data[2] = 0x60;  // Object index high byte
 80045ac:	2360      	movs	r3, #96	@ 0x60
 80045ae:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    data[3] = 0x00;  // Subindex
 80045b2:	2300      	movs	r3, #0
 80045b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

    // Control word value in little-endian format
    data[4] = (uint8_t)(control_word & 0xFF);
 80045b8:	883b      	ldrh	r3, [r7, #0]
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    data[5] = (uint8_t)((control_word >> 8) & 0xFF);
 80045c0:	883b      	ldrh	r3, [r7, #0]
 80045c2:	0a1b      	lsrs	r3, r3, #8
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	b2db      	uxtb	r3, r3
 80045c8:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    CAN_TxHeaderTypeDef TxHeader;
    TxHeader.StdId = can_id;
 80045cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045ce:	613b      	str	r3, [r7, #16]
    TxHeader.ExtId = 0;
 80045d0:	2300      	movs	r3, #0
 80045d2:	617b      	str	r3, [r7, #20]
    TxHeader.RTR = CAN_RTR_DATA;
 80045d4:	2300      	movs	r3, #0
 80045d6:	61fb      	str	r3, [r7, #28]
    TxHeader.IDE = CAN_ID_STD;
 80045d8:	2300      	movs	r3, #0
 80045da:	61bb      	str	r3, [r7, #24]
    TxHeader.DLC = 8;
 80045dc:	2308      	movs	r3, #8
 80045de:	623b      	str	r3, [r7, #32]
    TxHeader.TransmitGlobalTime = DISABLE;
 80045e0:	2300      	movs	r3, #0
 80045e2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    uint32_t mailbox;
    HAL_CAN_AddTxMessage(hcan, &TxHeader, data, &mailbox);
 80045e6:	f107 030c 	add.w	r3, r7, #12
 80045ea:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80045ee:	f107 0110 	add.w	r1, r7, #16
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f002 fb76 	bl	8006ce4 <HAL_CAN_AddTxMessage>

    // Small delay to ensure message transmission
    HAL_Delay(5);
 80045f8:	2005      	movs	r0, #5
 80045fa:	f002 f92f 	bl	800685c <HAL_Delay>
}
 80045fe:	bf00      	nop
 8004600:	3738      	adds	r7, #56	@ 0x38
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}
	...

08004608 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004608:	b580      	push	{r7, lr}
 800460a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800460c:	b672      	cpsid	i
}
 800460e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();

  // In case of error, turn on red LED (LD5) and keep it on
  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8004610:	2201      	movs	r2, #1
 8004612:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8004616:	4802      	ldr	r0, [pc, #8]	@ (8004620 <Error_Handler+0x18>)
 8004618:	f003 fd84 	bl	8008124 <HAL_GPIO_WritePin>

  while (1)
 800461c:	bf00      	nop
 800461e:	e7fd      	b.n	800461c <Error_Handler+0x14>
 8004620:	40020c00 	.word	0x40020c00

08004624 <CANopen_NMT_Command>:
 * @param hcan CAN handle
 * @param command NMT command (e.g., 0x01 = start, 0x02 = stop, 0x80 = pre-operational, 0x81 = reset node, 0x82 = reset communication)
 * @param node_id Target node ID or 0 for all nodes
 */
void CANopen_NMT_Command(CAN_HandleTypeDef* hcan, uint8_t command, uint8_t node_id)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b08a      	sub	sp, #40	@ 0x28
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	460b      	mov	r3, r1
 800462e:	70fb      	strb	r3, [r7, #3]
 8004630:	4613      	mov	r3, r2
 8004632:	70bb      	strb	r3, [r7, #2]
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t TxMailbox;
    uint8_t TxData[2];

    // NMT message is always ID 0x000
    TxHeader.StdId = 0x000;
 8004634:	2300      	movs	r3, #0
 8004636:	613b      	str	r3, [r7, #16]
    TxHeader.ExtId = 0;
 8004638:	2300      	movs	r3, #0
 800463a:	617b      	str	r3, [r7, #20]
    TxHeader.IDE = CAN_ID_STD;
 800463c:	2300      	movs	r3, #0
 800463e:	61bb      	str	r3, [r7, #24]
    TxHeader.RTR = CAN_RTR_DATA;
 8004640:	2300      	movs	r3, #0
 8004642:	61fb      	str	r3, [r7, #28]
    TxHeader.DLC = 2;
 8004644:	2302      	movs	r3, #2
 8004646:	623b      	str	r3, [r7, #32]
    TxHeader.TransmitGlobalTime = DISABLE;
 8004648:	2300      	movs	r3, #0
 800464a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24

    // First byte is the command
    TxData[0] = command;
 800464e:	78fb      	ldrb	r3, [r7, #3]
 8004650:	723b      	strb	r3, [r7, #8]
    // Second byte is the node ID (0 means all nodes)
    TxData[1] = node_id;
 8004652:	78bb      	ldrb	r3, [r7, #2]
 8004654:	727b      	strb	r3, [r7, #9]

    // Send the NMT command
    HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox);
 8004656:	f107 030c 	add.w	r3, r7, #12
 800465a:	f107 0208 	add.w	r2, r7, #8
 800465e:	f107 0110 	add.w	r1, r7, #16
 8004662:	6878      	ldr	r0, [r7, #4]
 8004664:	f002 fb3e 	bl	8006ce4 <HAL_CAN_AddTxMessage>

    // Short delay to ensure message is processed
    HAL_Delay(10);
 8004668:	200a      	movs	r0, #10
 800466a:	f002 f8f7 	bl	800685c <HAL_Delay>
}
 800466e:	bf00      	nop
 8004670:	3728      	adds	r7, #40	@ 0x28
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <EPOS4_SetOperationMode>:
 * @param hcan CAN handle
 * @param node_id EPOS4 node ID
 * @param mode Operation mode (e.g., MODE_PROFILE_POSITION)
 */
void EPOS4_SetOperationMode(CAN_HandleTypeDef* hcan, uint8_t node_id, uint8_t mode)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b08c      	sub	sp, #48	@ 0x30
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
 800467e:	460b      	mov	r3, r1
 8004680:	70fb      	strb	r3, [r7, #3]
 8004682:	4613      	mov	r3, r2
 8004684:	70bb      	strb	r3, [r7, #2]
    // Send SDO command to set operation mode
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t TxMailbox;
    uint8_t TxData[8] = {0};
 8004686:	f107 030c 	add.w	r3, r7, #12
 800468a:	2200      	movs	r2, #0
 800468c:	601a      	str	r2, [r3, #0]
 800468e:	605a      	str	r2, [r3, #4]

    TxHeader.StdId = 0x600 + node_id; // SDO transmit ID
 8004690:	78fb      	ldrb	r3, [r7, #3]
 8004692:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8004696:	61bb      	str	r3, [r7, #24]
    TxHeader.ExtId = 0;
 8004698:	2300      	movs	r3, #0
 800469a:	61fb      	str	r3, [r7, #28]
    TxHeader.IDE = CAN_ID_STD;
 800469c:	2300      	movs	r3, #0
 800469e:	623b      	str	r3, [r7, #32]
    TxHeader.RTR = CAN_RTR_DATA;
 80046a0:	2300      	movs	r3, #0
 80046a2:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.DLC = 8;
 80046a4:	2308      	movs	r3, #8
 80046a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.TransmitGlobalTime = DISABLE;
 80046a8:	2300      	movs	r3, #0
 80046aa:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c

    // Command to write 1 byte to object 0x6060 (modes of operation) subindex 0
    TxData[0] = 0x2F;  // Write 1 byte (expedited)
 80046ae:	232f      	movs	r3, #47	@ 0x2f
 80046b0:	733b      	strb	r3, [r7, #12]
    TxData[1] = 0x60;  // Index LSB
 80046b2:	2360      	movs	r3, #96	@ 0x60
 80046b4:	737b      	strb	r3, [r7, #13]
    TxData[2] = 0x60;  // Index MSB
 80046b6:	2360      	movs	r3, #96	@ 0x60
 80046b8:	73bb      	strb	r3, [r7, #14]
    TxData[3] = 0x00;  // Subindex
 80046ba:	2300      	movs	r3, #0
 80046bc:	73fb      	strb	r3, [r7, #15]
    TxData[4] = mode;  // Mode value
 80046be:	78bb      	ldrb	r3, [r7, #2]
 80046c0:	743b      	strb	r3, [r7, #16]
    // Bytes 5-7 are padding (0)

    // Send message
    HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox);
 80046c2:	f107 0314 	add.w	r3, r7, #20
 80046c6:	f107 020c 	add.w	r2, r7, #12
 80046ca:	f107 0118 	add.w	r1, r7, #24
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f002 fb08 	bl	8006ce4 <HAL_CAN_AddTxMessage>

    // Wait for message to be processed
    HAL_Delay(10);
 80046d4:	200a      	movs	r0, #10
 80046d6:	f002 f8c1 	bl	800685c <HAL_Delay>
}
 80046da:	bf00      	nop
 80046dc:	3730      	adds	r7, #48	@ 0x30
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}

080046e2 <EPOS4_SetProfileVelocity>:
 * @param hcan CAN handle
 * @param node_id EPOS4 node ID
 * @param velocity Velocity value (encoder counts/sec)
 */
void EPOS4_SetProfileVelocity(CAN_HandleTypeDef* hcan, uint8_t node_id, uint32_t velocity)
{
 80046e2:	b580      	push	{r7, lr}
 80046e4:	b08e      	sub	sp, #56	@ 0x38
 80046e6:	af00      	add	r7, sp, #0
 80046e8:	60f8      	str	r0, [r7, #12]
 80046ea:	460b      	mov	r3, r1
 80046ec:	607a      	str	r2, [r7, #4]
 80046ee:	72fb      	strb	r3, [r7, #11]
    // Send SDO command to set profile velocity
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t TxMailbox;
    uint8_t TxData[8] = {0};
 80046f0:	f107 0314 	add.w	r3, r7, #20
 80046f4:	2200      	movs	r2, #0
 80046f6:	601a      	str	r2, [r3, #0]
 80046f8:	605a      	str	r2, [r3, #4]

    TxHeader.StdId = 0x600 + node_id; // SDO transmit ID
 80046fa:	7afb      	ldrb	r3, [r7, #11]
 80046fc:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8004700:	623b      	str	r3, [r7, #32]
    TxHeader.ExtId = 0;
 8004702:	2300      	movs	r3, #0
 8004704:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.IDE = CAN_ID_STD;
 8004706:	2300      	movs	r3, #0
 8004708:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.RTR = CAN_RTR_DATA;
 800470a:	2300      	movs	r3, #0
 800470c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TxHeader.DLC = 8;
 800470e:	2308      	movs	r3, #8
 8004710:	633b      	str	r3, [r7, #48]	@ 0x30
    TxHeader.TransmitGlobalTime = DISABLE;
 8004712:	2300      	movs	r3, #0
 8004714:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    // Command to write 4 bytes to object 0x6081 (profile velocity) subindex 0
    TxData[0] = 0x23;  // Write 4 bytes (expedited)
 8004718:	2323      	movs	r3, #35	@ 0x23
 800471a:	753b      	strb	r3, [r7, #20]
    TxData[1] = 0x81;  // Index LSB
 800471c:	2381      	movs	r3, #129	@ 0x81
 800471e:	757b      	strb	r3, [r7, #21]
    TxData[2] = 0x60;  // Index MSB
 8004720:	2360      	movs	r3, #96	@ 0x60
 8004722:	75bb      	strb	r3, [r7, #22]
    TxData[3] = 0x00;  // Subindex
 8004724:	2300      	movs	r3, #0
 8004726:	75fb      	strb	r3, [r7, #23]

    // Velocity value in little-endian format
    TxData[4] = (uint8_t)(velocity & 0xFF);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	b2db      	uxtb	r3, r3
 800472c:	763b      	strb	r3, [r7, #24]
    TxData[5] = (uint8_t)((velocity >> 8) & 0xFF);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	0a1b      	lsrs	r3, r3, #8
 8004732:	b2db      	uxtb	r3, r3
 8004734:	767b      	strb	r3, [r7, #25]
    TxData[6] = (uint8_t)((velocity >> 16) & 0xFF);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	0c1b      	lsrs	r3, r3, #16
 800473a:	b2db      	uxtb	r3, r3
 800473c:	76bb      	strb	r3, [r7, #26]
    TxData[7] = (uint8_t)((velocity >> 24) & 0xFF);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	0e1b      	lsrs	r3, r3, #24
 8004742:	b2db      	uxtb	r3, r3
 8004744:	76fb      	strb	r3, [r7, #27]

    // Send message
    HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox);
 8004746:	f107 031c 	add.w	r3, r7, #28
 800474a:	f107 0214 	add.w	r2, r7, #20
 800474e:	f107 0120 	add.w	r1, r7, #32
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f002 fac6 	bl	8006ce4 <HAL_CAN_AddTxMessage>

    // Wait for message to be processed
    HAL_Delay(10);
 8004758:	200a      	movs	r0, #10
 800475a:	f002 f87f 	bl	800685c <HAL_Delay>
}
 800475e:	bf00      	nop
 8004760:	3738      	adds	r7, #56	@ 0x38
 8004762:	46bd      	mov	sp, r7
 8004764:	bd80      	pop	{r7, pc}

08004766 <EPOS4_SetProfileAcceleration>:
 * @param hcan CAN handle
 * @param node_id EPOS4 node ID
 * @param acceleration Acceleration value (encoder counts/sec²)
 */
void EPOS4_SetProfileAcceleration(CAN_HandleTypeDef* hcan, uint8_t node_id, uint32_t acceleration)
{
 8004766:	b580      	push	{r7, lr}
 8004768:	b08e      	sub	sp, #56	@ 0x38
 800476a:	af00      	add	r7, sp, #0
 800476c:	60f8      	str	r0, [r7, #12]
 800476e:	460b      	mov	r3, r1
 8004770:	607a      	str	r2, [r7, #4]
 8004772:	72fb      	strb	r3, [r7, #11]
    // Send SDO command to set profile acceleration
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t TxMailbox;
    uint8_t TxData[8] = {0};
 8004774:	f107 0314 	add.w	r3, r7, #20
 8004778:	2200      	movs	r2, #0
 800477a:	601a      	str	r2, [r3, #0]
 800477c:	605a      	str	r2, [r3, #4]

    TxHeader.StdId = 0x600 + node_id; // SDO transmit ID
 800477e:	7afb      	ldrb	r3, [r7, #11]
 8004780:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8004784:	623b      	str	r3, [r7, #32]
    TxHeader.ExtId = 0;
 8004786:	2300      	movs	r3, #0
 8004788:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.IDE = CAN_ID_STD;
 800478a:	2300      	movs	r3, #0
 800478c:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.RTR = CAN_RTR_DATA;
 800478e:	2300      	movs	r3, #0
 8004790:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TxHeader.DLC = 8;
 8004792:	2308      	movs	r3, #8
 8004794:	633b      	str	r3, [r7, #48]	@ 0x30
    TxHeader.TransmitGlobalTime = DISABLE;
 8004796:	2300      	movs	r3, #0
 8004798:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    // Command to write 4 bytes to object 0x6083 (profile acceleration) subindex 0
    TxData[0] = 0x23;  // Write 4 bytes (expedited)
 800479c:	2323      	movs	r3, #35	@ 0x23
 800479e:	753b      	strb	r3, [r7, #20]
    TxData[1] = 0x83;  // Index LSB
 80047a0:	2383      	movs	r3, #131	@ 0x83
 80047a2:	757b      	strb	r3, [r7, #21]
    TxData[2] = 0x60;  // Index MSB
 80047a4:	2360      	movs	r3, #96	@ 0x60
 80047a6:	75bb      	strb	r3, [r7, #22]
    TxData[3] = 0x00;  // Subindex
 80047a8:	2300      	movs	r3, #0
 80047aa:	75fb      	strb	r3, [r7, #23]

    // Acceleration value in little-endian format
    TxData[4] = (uint8_t)(acceleration & 0xFF);
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	763b      	strb	r3, [r7, #24]
    TxData[5] = (uint8_t)((acceleration >> 8) & 0xFF);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	0a1b      	lsrs	r3, r3, #8
 80047b6:	b2db      	uxtb	r3, r3
 80047b8:	767b      	strb	r3, [r7, #25]
    TxData[6] = (uint8_t)((acceleration >> 16) & 0xFF);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	0c1b      	lsrs	r3, r3, #16
 80047be:	b2db      	uxtb	r3, r3
 80047c0:	76bb      	strb	r3, [r7, #26]
    TxData[7] = (uint8_t)((acceleration >> 24) & 0xFF);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	0e1b      	lsrs	r3, r3, #24
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	76fb      	strb	r3, [r7, #27]

    // Send message
    HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox);
 80047ca:	f107 031c 	add.w	r3, r7, #28
 80047ce:	f107 0214 	add.w	r2, r7, #20
 80047d2:	f107 0120 	add.w	r1, r7, #32
 80047d6:	68f8      	ldr	r0, [r7, #12]
 80047d8:	f002 fa84 	bl	8006ce4 <HAL_CAN_AddTxMessage>

    // Wait for message to be processed
    HAL_Delay(10);
 80047dc:	200a      	movs	r0, #10
 80047de:	f002 f83d 	bl	800685c <HAL_Delay>
}
 80047e2:	bf00      	nop
 80047e4:	3738      	adds	r7, #56	@ 0x38
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}

080047ea <EPOS4_SetProfileDeceleration>:
 * @param hcan CAN handle
 * @param node_id EPOS4 node ID
 * @param deceleration Deceleration value (encoder counts/sec²)
 */
void EPOS4_SetProfileDeceleration(CAN_HandleTypeDef* hcan, uint8_t node_id, uint32_t deceleration)
{
 80047ea:	b580      	push	{r7, lr}
 80047ec:	b08e      	sub	sp, #56	@ 0x38
 80047ee:	af00      	add	r7, sp, #0
 80047f0:	60f8      	str	r0, [r7, #12]
 80047f2:	460b      	mov	r3, r1
 80047f4:	607a      	str	r2, [r7, #4]
 80047f6:	72fb      	strb	r3, [r7, #11]
    // Send SDO command to set profile deceleration
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t TxMailbox;
    uint8_t TxData[8] = {0};
 80047f8:	f107 0314 	add.w	r3, r7, #20
 80047fc:	2200      	movs	r2, #0
 80047fe:	601a      	str	r2, [r3, #0]
 8004800:	605a      	str	r2, [r3, #4]

    TxHeader.StdId = 0x600 + node_id; // SDO transmit ID
 8004802:	7afb      	ldrb	r3, [r7, #11]
 8004804:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8004808:	623b      	str	r3, [r7, #32]
    TxHeader.ExtId = 0;
 800480a:	2300      	movs	r3, #0
 800480c:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.IDE = CAN_ID_STD;
 800480e:	2300      	movs	r3, #0
 8004810:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.RTR = CAN_RTR_DATA;
 8004812:	2300      	movs	r3, #0
 8004814:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TxHeader.DLC = 8;
 8004816:	2308      	movs	r3, #8
 8004818:	633b      	str	r3, [r7, #48]	@ 0x30
    TxHeader.TransmitGlobalTime = DISABLE;
 800481a:	2300      	movs	r3, #0
 800481c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34

    // Command to write 4 bytes to object 0x6084 (profile deceleration) subindex 0
    TxData[0] = 0x23;  // Write 4 bytes (expedited)
 8004820:	2323      	movs	r3, #35	@ 0x23
 8004822:	753b      	strb	r3, [r7, #20]
    TxData[1] = 0x84;  // Index LSB
 8004824:	2384      	movs	r3, #132	@ 0x84
 8004826:	757b      	strb	r3, [r7, #21]
    TxData[2] = 0x60;  // Index MSB
 8004828:	2360      	movs	r3, #96	@ 0x60
 800482a:	75bb      	strb	r3, [r7, #22]
    TxData[3] = 0x00;  // Subindex
 800482c:	2300      	movs	r3, #0
 800482e:	75fb      	strb	r3, [r7, #23]

    // Deceleration value in little-endian format
    TxData[4] = (uint8_t)(deceleration & 0xFF);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	b2db      	uxtb	r3, r3
 8004834:	763b      	strb	r3, [r7, #24]
    TxData[5] = (uint8_t)((deceleration >> 8) & 0xFF);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	0a1b      	lsrs	r3, r3, #8
 800483a:	b2db      	uxtb	r3, r3
 800483c:	767b      	strb	r3, [r7, #25]
    TxData[6] = (uint8_t)((deceleration >> 16) & 0xFF);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	0c1b      	lsrs	r3, r3, #16
 8004842:	b2db      	uxtb	r3, r3
 8004844:	76bb      	strb	r3, [r7, #26]
    TxData[7] = (uint8_t)((deceleration >> 24) & 0xFF);
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	0e1b      	lsrs	r3, r3, #24
 800484a:	b2db      	uxtb	r3, r3
 800484c:	76fb      	strb	r3, [r7, #27]

    // Send message
    HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox);
 800484e:	f107 031c 	add.w	r3, r7, #28
 8004852:	f107 0214 	add.w	r2, r7, #20
 8004856:	f107 0120 	add.w	r1, r7, #32
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f002 fa42 	bl	8006ce4 <HAL_CAN_AddTxMessage>

    // Wait for message to be processed
    HAL_Delay(10);
 8004860:	200a      	movs	r0, #10
 8004862:	f001 fffb 	bl	800685c <HAL_Delay>
}
 8004866:	bf00      	nop
 8004868:	3738      	adds	r7, #56	@ 0x38
 800486a:	46bd      	mov	sp, r7
 800486c:	bd80      	pop	{r7, pc}
	...

08004870 <handle_param_getset>:
    // 4. Lock flash
}

// Parameter get/set handler for UAVCAN
void handle_param_getset(CanardInstance* ins, CanardRxTransfer* transfer)
{
 8004870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004874:	b0b4      	sub	sp, #208	@ 0xd0
 8004876:	af06      	add	r7, sp, #24
 8004878:	6178      	str	r0, [r7, #20]
 800487a:	6139      	str	r1, [r7, #16]
    // Feed the watchdog during parameter processing to prevent resets
    IWDG->KR = 0xAAAA;
 800487c:	4bbd      	ldr	r3, [pc, #756]	@ (8004b74 <handle_param_getset+0x304>)
 800487e:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8004882:	601a      	str	r2, [r3, #0]

    uint16_t index = 0xFFFF;
 8004884:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004888:	f8a7 3098 	strh.w	r3, [r7, #152]	@ 0x98
    uint8_t tag = 0;
 800488c:	2300      	movs	r3, #0
 800488e:	f887 3097 	strb.w	r3, [r7, #151]	@ 0x97
    int offset = 0;
 8004892:	2300      	movs	r3, #0
 8004894:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    int64_t val = 0;
 8004898:	f04f 0200 	mov.w	r2, #0
 800489c:	f04f 0300 	mov.w	r3, #0
 80048a0:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
    uint8_t buffer[UAVCAN_PROTOCOL_PARAM_VALUE_SIZE] = {0};
 80048a4:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80048a8:	223c      	movs	r2, #60	@ 0x3c
 80048aa:	2100      	movs	r1, #0
 80048ac:	4618      	mov	r0, r3
 80048ae:	f00a fff9 	bl	800f8a4 <memset>
    param_t* p = NULL;
 80048b2:	2300      	movs	r3, #0
 80048b4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    bool param_value_changed = false;  // Track if parameter value changed
 80048b8:	2300      	movs	r3, #0
 80048ba:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf

    // Clear buffer
    memset(buffer, 0, sizeof(buffer));
 80048be:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80048c2:	223c      	movs	r2, #60	@ 0x3c
 80048c4:	2100      	movs	r1, #0
 80048c6:	4618      	mov	r0, r3
 80048c8:	f00a ffec 	bl	800f8a4 <memset>
    
    // Decode the request
    canardDecodeScalar(transfer, offset, 13, false, &index);
 80048cc:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 80048d0:	f107 0398 	add.w	r3, r7, #152	@ 0x98
 80048d4:	9300      	str	r3, [sp, #0]
 80048d6:	2300      	movs	r3, #0
 80048d8:	220d      	movs	r2, #13
 80048da:	6938      	ldr	r0, [r7, #16]
 80048dc:	f7fc ff00 	bl	80016e0 <canardDecodeScalar>
    offset += 13;
 80048e0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80048e4:	330d      	adds	r3, #13
 80048e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    canardDecodeScalar(transfer, offset, 3, false, &tag);
 80048ea:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 80048ee:	f107 0397 	add.w	r3, r7, #151	@ 0x97
 80048f2:	9300      	str	r3, [sp, #0]
 80048f4:	2300      	movs	r3, #0
 80048f6:	2203      	movs	r2, #3
 80048f8:	6938      	ldr	r0, [r7, #16]
 80048fa:	f7fc fef1 	bl	80016e0 <canardDecodeScalar>
    offset += 3;
 80048fe:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004902:	3303      	adds	r3, #3
 8004904:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

    if (tag == 1) {
 8004908:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 800490c:	2b01      	cmp	r3, #1
 800490e:	d10e      	bne.n	800492e <handle_param_getset+0xbe>
        canardDecodeScalar(transfer, offset, 64, false, &val);
 8004910:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8004914:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8004918:	9300      	str	r3, [sp, #0]
 800491a:	2300      	movs	r3, #0
 800491c:	2240      	movs	r2, #64	@ 0x40
 800491e:	6938      	ldr	r0, [r7, #16]
 8004920:	f7fc fede 	bl	80016e0 <canardDecodeScalar>
        offset += 64;
 8004924:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004928:	3340      	adds	r3, #64	@ 0x40
 800492a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    }

    // Check if request includes a parameter name (with safety checks)
    uint16_t n = 0;
 800492e:	2300      	movs	r3, #0
 8004930:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
    if (transfer->payload_len > (offset / 8)) {
 8004934:	693b      	ldr	r3, [r7, #16]
 8004936:	8a9b      	ldrh	r3, [r3, #20]
 8004938:	461a      	mov	r2, r3
 800493a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800493e:	2b00      	cmp	r3, #0
 8004940:	da00      	bge.n	8004944 <handle_param_getset+0xd4>
 8004942:	3307      	adds	r3, #7
 8004944:	10db      	asrs	r3, r3, #3
 8004946:	429a      	cmp	r2, r3
 8004948:	dd0c      	ble.n	8004964 <handle_param_getset+0xf4>
        n = (transfer->payload_len - (offset / 8));
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	8a9a      	ldrh	r2, [r3, #20]
 800494e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004952:	2b00      	cmp	r3, #0
 8004954:	da00      	bge.n	8004958 <handle_param_getset+0xe8>
 8004956:	3307      	adds	r3, #7
 8004958:	10db      	asrs	r3, r3, #3
 800495a:	425b      	negs	r3, r3
 800495c:	b29b      	uxth	r3, r3
 800495e:	4413      	add	r3, r2
 8004960:	f8a7 30ac 	strh.w	r3, [r7, #172]	@ 0xac
    }
    
    uint8_t name[PARAM_NAME_MAX_LENGTH + 1] = {0};
 8004964:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]
 800496c:	605a      	str	r2, [r3, #4]
 800496e:	609a      	str	r2, [r3, #8]
 8004970:	60da      	str	r2, [r3, #12]
 8004972:	741a      	strb	r2, [r3, #16]
    if (n > 0) {
 8004974:	f8b7 30ac 	ldrh.w	r3, [r7, #172]	@ 0xac
 8004978:	2b00      	cmp	r3, #0
 800497a:	d053      	beq.n	8004a24 <handle_param_getset+0x1b4>
        uint8_t name_len = 0;
 800497c:	2300      	movs	r3, #0
 800497e:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        if (canardDecodeScalar(transfer, offset, 8, false, &name_len)) {
 8004982:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 8004986:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 800498a:	9300      	str	r3, [sp, #0]
 800498c:	2300      	movs	r3, #0
 800498e:	2208      	movs	r2, #8
 8004990:	6938      	ldr	r0, [r7, #16]
 8004992:	f7fc fea5 	bl	80016e0 <canardDecodeScalar>
 8004996:	4603      	mov	r3, r0
 8004998:	2b00      	cmp	r3, #0
 800499a:	d043      	beq.n	8004a24 <handle_param_getset+0x1b4>
            offset += 8;
 800499c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049a0:	3308      	adds	r3, #8
 80049a2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
            
            // Ensure name_len is within bounds to prevent buffer overflow
            if (name_len > 0 && name_len < PARAM_NAME_MAX_LENGTH) {
 80049a6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d03a      	beq.n	8004a24 <handle_param_getset+0x1b4>
 80049ae:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80049b2:	2b0f      	cmp	r3, #15
 80049b4:	d836      	bhi.n	8004a24 <handle_param_getset+0x1b4>
                for (int i = 0; i < name_len && i < PARAM_NAME_MAX_LENGTH && ((offset + 8) <= (transfer->payload_len * 8)); i++) {
 80049b6:	2300      	movs	r3, #0
 80049b8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80049bc:	e016      	b.n	80049ec <handle_param_getset+0x17c>
                    canardDecodeScalar(transfer, offset, 8, false, &name[i]);
 80049be:	f8d7 10b4 	ldr.w	r1, [r7, #180]	@ 0xb4
 80049c2:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80049c6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80049ca:	4413      	add	r3, r2
 80049cc:	9300      	str	r3, [sp, #0]
 80049ce:	2300      	movs	r3, #0
 80049d0:	2208      	movs	r2, #8
 80049d2:	6938      	ldr	r0, [r7, #16]
 80049d4:	f7fc fe84 	bl	80016e0 <canardDecodeScalar>
                    offset += 8;
 80049d8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80049dc:	3308      	adds	r3, #8
 80049de:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
                for (int i = 0; i < name_len && i < PARAM_NAME_MAX_LENGTH && ((offset + 8) <= (transfer->payload_len * 8)); i++) {
 80049e2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80049e6:	3301      	adds	r3, #1
 80049e8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80049ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80049f0:	461a      	mov	r2, r3
 80049f2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80049f6:	4293      	cmp	r3, r2
 80049f8:	da0b      	bge.n	8004a12 <handle_param_getset+0x1a2>
 80049fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80049fe:	2b0f      	cmp	r3, #15
 8004a00:	dc07      	bgt.n	8004a12 <handle_param_getset+0x1a2>
 8004a02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004a06:	1dda      	adds	r2, r3, #7
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	8a9b      	ldrh	r3, [r3, #20]
 8004a0c:	00db      	lsls	r3, r3, #3
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	dbd5      	blt.n	80049be <handle_param_getset+0x14e>
                }
                name[name_len] = '\0'; // Ensure null termination
 8004a12:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8004a16:	33a8      	adds	r3, #168	@ 0xa8
 8004a18:	f107 0210 	add.w	r2, r7, #16
 8004a1c:	4413      	add	r3, r2
 8004a1e:	2200      	movs	r2, #0
 8004a20:	f803 2c80 	strb.w	r2, [r3, #-128]
            }
        }
    }

    // Find the parameter
    if (strlen((char const*)name) > 0) {
 8004a24:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004a28:	781b      	ldrb	r3, [r3, #0]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00d      	beq.n	8004a4a <handle_param_getset+0x1da>
        p = getParamByName((const char*)name);
 8004a2e:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 faa6 	bl	8004f84 <getParamByName>
 8004a38:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        printf("Parameter request by name: %s\r\n", name);
 8004a3c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8004a40:	4619      	mov	r1, r3
 8004a42:	484d      	ldr	r0, [pc, #308]	@ (8004b78 <handle_param_getset+0x308>)
 8004a44:	f7fd ffdf 	bl	8002a06 <printf>
 8004a48:	e00c      	b.n	8004a64 <handle_param_getset+0x1f4>
    } else {
        p = getParamByIndex(index);
 8004a4a:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 8004a4e:	4618      	mov	r0, r3
 8004a50:	f000 fa82 	bl	8004f58 <getParamByIndex>
 8004a54:	f8c7 00b0 	str.w	r0, [r7, #176]	@ 0xb0
        printf("Parameter request by index: %d\r\n", index);
 8004a58:	f8b7 3098 	ldrh.w	r3, [r7, #152]	@ 0x98
 8004a5c:	4619      	mov	r1, r3
 8004a5e:	4847      	ldr	r0, [pc, #284]	@ (8004b7c <handle_param_getset+0x30c>)
 8004a60:	f7fd ffd1 	bl	8002a06 <printf>
    }
    
    // If this is a set request and we found the parameter, update its value
    if ((p) && (tag == 1)) {
 8004a64:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	f000 80cf 	beq.w	8004c0c <handle_param_getset+0x39c>
 8004a6e:	f897 3097 	ldrb.w	r3, [r7, #151]	@ 0x97
 8004a72:	2b01      	cmp	r3, #1
 8004a74:	f040 80ca 	bne.w	8004c0c <handle_param_getset+0x39c>
        // Store old value to detect changes
        int64_t old_int_val = 0;
 8004a78:	f04f 0200 	mov.w	r2, #0
 8004a7c:	f04f 0300 	mov.w	r3, #0
 8004a80:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
        float old_float_val = 0.0f;
 8004a84:	f04f 0300 	mov.w	r3, #0
 8004a88:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        bool old_bool_val = false;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b

        // Save old value based on parameter type
        switch (p->type) {
 8004a92:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004a96:	7c1b      	ldrb	r3, [r3, #16]
 8004a98:	2b03      	cmp	r3, #3
 8004a9a:	d011      	beq.n	8004ac0 <handle_param_getset+0x250>
 8004a9c:	2b03      	cmp	r3, #3
 8004a9e:	dc1b      	bgt.n	8004ad8 <handle_param_getset+0x268>
 8004aa0:	2b01      	cmp	r3, #1
 8004aa2:	d002      	beq.n	8004aaa <handle_param_getset+0x23a>
 8004aa4:	2b02      	cmp	r3, #2
 8004aa6:	d011      	beq.n	8004acc <handle_param_getset+0x25c>
                break;
            case PARAM_TYPE_BOOLEAN:
                old_bool_val = p->value.b;
                break;
            default:
                break;
 8004aa8:	e016      	b.n	8004ad8 <handle_param_getset+0x268>
                old_int_val = p->value.i;
 8004aaa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004aae:	695b      	ldr	r3, [r3, #20]
 8004ab0:	17da      	asrs	r2, r3, #31
 8004ab2:	603b      	str	r3, [r7, #0]
 8004ab4:	607a      	str	r2, [r7, #4]
 8004ab6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004aba:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
                break;
 8004abe:	e00c      	b.n	8004ada <handle_param_getset+0x26a>
                old_float_val = p->value.f;
 8004ac0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004ac4:	695b      	ldr	r3, [r3, #20]
 8004ac6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
                break;
 8004aca:	e006      	b.n	8004ada <handle_param_getset+0x26a>
                old_bool_val = p->value.b;
 8004acc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004ad0:	7d1b      	ldrb	r3, [r3, #20]
 8004ad2:	f887 309b 	strb.w	r3, [r7, #155]	@ 0x9b
                break;
 8004ad6:	e000      	b.n	8004ada <handle_param_getset+0x26a>
                break;
 8004ad8:	bf00      	nop
        }

        // Update based on parameter type
        switch (p->type) {
 8004ada:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004ade:	7c1b      	ldrb	r3, [r3, #16]
 8004ae0:	3b01      	subs	r3, #1
 8004ae2:	2b03      	cmp	r3, #3
 8004ae4:	d87c      	bhi.n	8004be0 <handle_param_getset+0x370>
 8004ae6:	a201      	add	r2, pc, #4	@ (adr r2, 8004aec <handle_param_getset+0x27c>)
 8004ae8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aec:	08004afd 	.word	0x08004afd
 8004af0:	08004b85 	.word	0x08004b85
 8004af4:	08004b33 	.word	0x08004b33
 8004af8:	08004bcf 	.word	0x08004bcf
            case PARAM_TYPE_INTEGER:
                p->value.i = (int32_t)val;
 8004afc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004b00:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004b04:	615a      	str	r2, [r3, #20]
                p->val = (int32_t)val;
 8004b06:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004b0a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004b0e:	625a      	str	r2, [r3, #36]	@ 0x24
                param_value_changed = (old_int_val != p->value.i);
 8004b10:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004b14:	695b      	ldr	r3, [r3, #20]
 8004b16:	17da      	asrs	r2, r3, #31
 8004b18:	461c      	mov	r4, r3
 8004b1a:	4615      	mov	r5, r2
 8004b1c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8004b20:	42ab      	cmp	r3, r5
 8004b22:	bf08      	it	eq
 8004b24:	42a2      	cmpeq	r2, r4
 8004b26:	bf14      	ite	ne
 8004b28:	2301      	movne	r3, #1
 8004b2a:	2300      	moveq	r3, #0
 8004b2c:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
                break;
 8004b30:	e057      	b.n	8004be2 <handle_param_getset+0x372>
            case PARAM_TYPE_REAL:
                p->value.f = *((float*)&val); // Cast int64 bits to float
 8004b32:	f107 0388 	add.w	r3, r7, #136	@ 0x88
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004b3c:	615a      	str	r2, [r3, #20]
                p->val = (int32_t)val;
 8004b3e:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004b42:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004b46:	625a      	str	r2, [r3, #36]	@ 0x24
                param_value_changed = (fabsf(old_float_val - p->value.f) > 0.0001f);
 8004b48:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004b4c:	edd3 7a05 	vldr	s15, [r3, #20]
 8004b50:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 8004b54:	ee77 7a67 	vsub.f32	s15, s14, s15
 8004b58:	eef0 7ae7 	vabs.f32	s15, s15
 8004b5c:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8004b80 <handle_param_getset+0x310>
 8004b60:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004b64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b68:	bfcc      	ite	gt
 8004b6a:	2301      	movgt	r3, #1
 8004b6c:	2300      	movle	r3, #0
 8004b6e:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
                break;
 8004b72:	e036      	b.n	8004be2 <handle_param_getset+0x372>
 8004b74:	40003000 	.word	0x40003000
 8004b78:	080108f0 	.word	0x080108f0
 8004b7c:	08010910 	.word	0x08010910
 8004b80:	38d1b717 	.word	0x38d1b717
            case PARAM_TYPE_BOOLEAN:
                p->value.b = (val > 0);
 8004b84:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004b88:	2a01      	cmp	r2, #1
 8004b8a:	f173 0300 	sbcs.w	r3, r3, #0
 8004b8e:	bfac      	ite	ge
 8004b90:	2301      	movge	r3, #1
 8004b92:	2300      	movlt	r3, #0
 8004b94:	b2da      	uxtb	r2, r3
 8004b96:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004b9a:	751a      	strb	r2, [r3, #20]
                p->val = (val > 0) ? 1 : 0;
 8004b9c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004ba0:	2a01      	cmp	r2, #1
 8004ba2:	f173 0300 	sbcs.w	r3, r3, #0
 8004ba6:	bfac      	ite	ge
 8004ba8:	2301      	movge	r3, #1
 8004baa:	2300      	movlt	r3, #0
 8004bac:	b2db      	uxtb	r3, r3
 8004bae:	461a      	mov	r2, r3
 8004bb0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004bb4:	625a      	str	r2, [r3, #36]	@ 0x24
                param_value_changed = (old_bool_val != p->value.b);
 8004bb6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004bba:	7d1b      	ldrb	r3, [r3, #20]
 8004bbc:	f897 209b 	ldrb.w	r2, [r7, #155]	@ 0x9b
 8004bc0:	429a      	cmp	r2, r3
 8004bc2:	bf14      	ite	ne
 8004bc4:	2301      	movne	r3, #1
 8004bc6:	2300      	moveq	r3, #0
 8004bc8:	f887 30af 	strb.w	r3, [r7, #175]	@ 0xaf
                break;
 8004bcc:	e009      	b.n	8004be2 <handle_param_getset+0x372>
            case PARAM_TYPE_STRING: {
                // Keep this simple for now
                strncpy(p->value.str, "param", PARAM_NAME_MAX_LENGTH-1);
 8004bce:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004bd2:	3314      	adds	r3, #20
 8004bd4:	220f      	movs	r2, #15
 8004bd6:	4978      	ldr	r1, [pc, #480]	@ (8004db8 <handle_param_getset+0x548>)
 8004bd8:	4618      	mov	r0, r3
 8004bda:	f00a fe6b 	bl	800f8b4 <strncpy>
                break;
 8004bde:	e000      	b.n	8004be2 <handle_param_getset+0x372>
            }
            default:
                break;
 8004be0:	bf00      	nop
        }
        printf("Setting parameter value to: %ld\r\n", (long)val);
 8004be2:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8004be6:	4613      	mov	r3, r2
 8004be8:	4619      	mov	r1, r3
 8004bea:	4874      	ldr	r0, [pc, #464]	@ (8004dbc <handle_param_getset+0x54c>)
 8004bec:	f7fd ff0b 	bl	8002a06 <printf>
        
        // If parameter value changed, broadcast the updated parameter immediately
        if (param_value_changed) {
 8004bf0:	f897 30af 	ldrb.w	r3, [r7, #175]	@ 0xaf
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d009      	beq.n	8004c0c <handle_param_getset+0x39c>
            printf("Parameter %s changed - broadcasting update\r\n", p->name);
 8004bf8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	4870      	ldr	r0, [pc, #448]	@ (8004dc0 <handle_param_getset+0x550>)
 8004c00:	f7fd ff01 	bl	8002a06 <printf>

            // Broadcast only the changed parameter
            broadcast_parameter(p);
 8004c04:	f8d7 00b0 	ldr.w	r0, [r7, #176]	@ 0xb0
 8004c08:	f000 fdee 	bl	80057e8 <broadcast_parameter>
            // save_settings();
        }
    }
    
    // For simplicity, just create a minimal response that won't cause issues
    offset = 0;
 8004c0c:	2300      	movs	r3, #0
 8004c0e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

    if (p != NULL) {
 8004c12:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	f000 8085 	beq.w	8004d26 <handle_param_getset+0x4b6>
        // Just encode the parameter value as an integer (simplest approach)
        buffer[offset++] = PARAM_TYPE_INTEGER;  // Integer type tag
 8004c1c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004c20:	1c5a      	adds	r2, r3, #1
 8004c22:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8004c26:	33a8      	adds	r3, #168	@ 0xa8
 8004c28:	f107 0210 	add.w	r2, r7, #16
 8004c2c:	4413      	add	r3, r2
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f803 2c6c 	strb.w	r2, [r3, #-108]
        int64_t resp_val = p->val;
 8004c34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004c38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3a:	17da      	asrs	r2, r3, #31
 8004c3c:	60bb      	str	r3, [r7, #8]
 8004c3e:	60fa      	str	r2, [r7, #12]
 8004c40:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8004c44:	e9c7 340a 	strd	r3, r4, [r7, #40]	@ 0x28
        memcpy(&buffer[offset], &resp_val, sizeof(int64_t));
 8004c48:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8004c4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004c50:	18d1      	adds	r1, r2, r3
 8004c52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c56:	600a      	str	r2, [r1, #0]
 8004c58:	604b      	str	r3, [r1, #4]
        offset += sizeof(int64_t);
 8004c5a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004c5e:	3308      	adds	r3, #8
 8004c60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

        // Default value
        memcpy(&buffer[offset], &resp_val, sizeof(int64_t));
 8004c64:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8004c68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004c6c:	18d1      	adds	r1, r2, r3
 8004c6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004c72:	600a      	str	r2, [r1, #0]
 8004c74:	604b      	str	r3, [r1, #4]
        offset += sizeof(int64_t);
 8004c76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004c7a:	3308      	adds	r3, #8
 8004c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

        // Min value
        int64_t min_val = minPosition;
 8004c80:	4b50      	ldr	r3, [pc, #320]	@ (8004dc4 <handle_param_getset+0x554>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	17da      	asrs	r2, r3, #31
 8004c86:	469a      	mov	sl, r3
 8004c88:	4693      	mov	fp, r2
 8004c8a:	e9c7 ab08 	strd	sl, fp, [r7, #32]
        memcpy(&buffer[offset], &min_val, sizeof(int64_t));
 8004c8e:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8004c92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004c96:	18d1      	adds	r1, r2, r3
 8004c98:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004c9c:	600a      	str	r2, [r1, #0]
 8004c9e:	604b      	str	r3, [r1, #4]
        offset += sizeof(int64_t);
 8004ca0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004ca4:	3308      	adds	r3, #8
 8004ca6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

        // Max value
        int64_t max_val = maxPosition;
 8004caa:	4b47      	ldr	r3, [pc, #284]	@ (8004dc8 <handle_param_getset+0x558>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	17da      	asrs	r2, r3, #31
 8004cb0:	4698      	mov	r8, r3
 8004cb2:	4691      	mov	r9, r2
 8004cb4:	e9c7 8906 	strd	r8, r9, [r7, #24]
        memcpy(&buffer[offset], &max_val, sizeof(int64_t));
 8004cb8:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8004cbc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004cc0:	18d1      	adds	r1, r2, r3
 8004cc2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004cc6:	600a      	str	r2, [r1, #0]
 8004cc8:	604b      	str	r3, [r1, #4]
        offset += sizeof(int64_t);
 8004cca:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004cce:	3308      	adds	r3, #8
 8004cd0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
        
        // Parameter name
        uint8_t name_len = strlen(p->name);
 8004cd4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8004cd8:	4618      	mov	r0, r3
 8004cda:	f7fb fa7f 	bl	80001dc <strlen>
 8004cde:	4603      	mov	r3, r0
 8004ce0:	f887 309a 	strb.w	r3, [r7, #154]	@ 0x9a
        buffer[offset++] = name_len;
 8004ce4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004ce8:	1c5a      	adds	r2, r3, #1
 8004cea:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8004cee:	33a8      	adds	r3, #168	@ 0xa8
 8004cf0:	f107 0210 	add.w	r2, r7, #16
 8004cf4:	4413      	add	r3, r2
 8004cf6:	f897 209a 	ldrb.w	r2, [r7, #154]	@ 0x9a
 8004cfa:	f803 2c6c 	strb.w	r2, [r3, #-108]
        memcpy(&buffer[offset], p->name, name_len);
 8004cfe:	f107 024c 	add.w	r2, r7, #76	@ 0x4c
 8004d02:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004d06:	4413      	add	r3, r2
 8004d08:	f8d7 10b0 	ldr.w	r1, [r7, #176]	@ 0xb0
 8004d0c:	f897 209a 	ldrb.w	r2, [r7, #154]	@ 0x9a
 8004d10:	4618      	mov	r0, r3
 8004d12:	f00a fe66 	bl	800f9e2 <memcpy>
        offset += name_len;
 8004d16:	f897 309a 	ldrb.w	r3, [r7, #154]	@ 0x9a
 8004d1a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d1e:	4413      	add	r3, r2
 8004d20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d24:	e017      	b.n	8004d56 <handle_param_getset+0x4e6>
    } else {
        // Parameter not found - send empty response
        buffer[offset++] = PARAM_TYPE_EMPTY;
 8004d26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004d2a:	1c5a      	adds	r2, r3, #1
 8004d2c:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8004d30:	33a8      	adds	r3, #168	@ 0xa8
 8004d32:	f107 0210 	add.w	r2, r7, #16
 8004d36:	4413      	add	r3, r2
 8004d38:	2200      	movs	r2, #0
 8004d3a:	f803 2c6c 	strb.w	r2, [r3, #-108]
        buffer[offset++] = 0; // Empty name
 8004d3e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004d42:	1c5a      	adds	r2, r3, #1
 8004d44:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8004d48:	33a8      	adds	r3, #168	@ 0xa8
 8004d4a:	f107 0210 	add.w	r2, r7, #16
 8004d4e:	4413      	add	r3, r2
 8004d50:	2200      	movs	r2, #0
 8004d52:	f803 2c6c 	strb.w	r2, [r3, #-108]
    }

    // Ensure we don't exceed buffer size
    if (offset > UAVCAN_PROTOCOL_PARAM_VALUE_SIZE) {
 8004d56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004d5a:	2b3c      	cmp	r3, #60	@ 0x3c
 8004d5c:	dd02      	ble.n	8004d64 <handle_param_getset+0x4f4>
        offset = UAVCAN_PROTOCOL_PARAM_VALUE_SIZE;
 8004d5e:	233c      	movs	r3, #60	@ 0x3c
 8004d60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    }

    // Send response - simple direct approach
    static uint8_t param_transfer_id = 0;
    canardRequestOrRespond(ins,
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	7ed9      	ldrb	r1, [r3, #27]
 8004d68:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8004d6c:	b29b      	uxth	r3, r3
 8004d6e:	9305      	str	r3, [sp, #20]
 8004d70:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004d74:	9304      	str	r3, [sp, #16]
 8004d76:	2300      	movs	r3, #0
 8004d78:	9303      	str	r3, [sp, #12]
 8004d7a:	2308      	movs	r3, #8
 8004d7c:	9302      	str	r3, [sp, #8]
 8004d7e:	4b13      	ldr	r3, [pc, #76]	@ (8004dcc <handle_param_getset+0x55c>)
 8004d80:	9301      	str	r3, [sp, #4]
 8004d82:	230b      	movs	r3, #11
 8004d84:	9300      	str	r3, [sp, #0]
 8004d86:	a30a      	add	r3, pc, #40	@ (adr r3, 8004db0 <handle_param_getset+0x540>)
 8004d88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8c:	6978      	ldr	r0, [r7, #20]
 8004d8e:	f7fb ffed 	bl	8000d6c <canardRequestOrRespond>
                          CanardResponse,
                          buffer,
                          offset);

    // Feed watchdog again
    IWDG->KR = 0xAAAA;
 8004d92:	4b0f      	ldr	r3, [pc, #60]	@ (8004dd0 <handle_param_getset+0x560>)
 8004d94:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8004d98:	601a      	str	r2, [r3, #0]
        
    printf("Parameter response sent\r\n");
 8004d9a:	480e      	ldr	r0, [pc, #56]	@ (8004dd4 <handle_param_getset+0x564>)
 8004d9c:	f00a fca2 	bl	800f6e4 <puts>
}
 8004da0:	bf00      	nop
 8004da2:	37b8      	adds	r7, #184	@ 0xb8
 8004da4:	46bd      	mov	sp, r7
 8004da6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004daa:	bf00      	nop
 8004dac:	f3af 8000 	nop.w
 8004db0:	39d1a4d5 	.word	0x39d1a4d5
 8004db4:	a7b622f9 	.word	0xa7b622f9
 8004db8:	08010934 	.word	0x08010934
 8004dbc:	0801093c 	.word	0x0801093c
 8004dc0:	08010960 	.word	0x08010960
 8004dc4:	20001908 	.word	0x20001908
 8004dc8:	20001900 	.word	0x20001900
 8004dcc:	20005af8 	.word	0x20005af8
 8004dd0:	40003000 	.word	0x40003000
 8004dd4:	08010990 	.word	0x08010990

08004dd8 <micros64>:

    printf("Sent GetNodeInfo request to node %d, result: %d\r\n", target_node_id, result);
}

// Add this function to get microsecond timestamps
uint64_t micros64(void) {
 8004dd8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ddc:	b086      	sub	sp, #24
 8004dde:	af00      	add	r7, sp, #0
    static uint32_t last_tick = 0;
    static uint64_t overflow_count = 0;

    uint32_t tick = HAL_GetTick();
 8004de0:	f001 fd30 	bl	8006844 <HAL_GetTick>
 8004de4:	6178      	str	r0, [r7, #20]

    // Handle overflow
    if (tick < last_tick) {
 8004de6:	4b31      	ldr	r3, [pc, #196]	@ (8004eac <micros64+0xd4>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	697a      	ldr	r2, [r7, #20]
 8004dec:	429a      	cmp	r2, r3
 8004dee:	d20c      	bcs.n	8004e0a <micros64+0x32>
        overflow_count += 1;
 8004df0:	4b2f      	ldr	r3, [pc, #188]	@ (8004eb0 <micros64+0xd8>)
 8004df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df6:	1c51      	adds	r1, r2, #1
 8004df8:	60b9      	str	r1, [r7, #8]
 8004dfa:	f143 0300 	adc.w	r3, r3, #0
 8004dfe:	60fb      	str	r3, [r7, #12]
 8004e00:	4b2b      	ldr	r3, [pc, #172]	@ (8004eb0 <micros64+0xd8>)
 8004e02:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004e06:	e9c3 1200 	strd	r1, r2, [r3]
    }
    last_tick = tick;
 8004e0a:	4a28      	ldr	r2, [pc, #160]	@ (8004eac <micros64+0xd4>)
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	6013      	str	r3, [r2, #0]

    // Return microseconds (tick is in milliseconds, so multiply by 1000)
    return (overflow_count << 32) | (tick * 1000ULL);
 8004e10:	4b27      	ldr	r3, [pc, #156]	@ (8004eb0 <micros64+0xd8>)
 8004e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e16:	f04f 0000 	mov.w	r0, #0
 8004e1a:	f04f 0100 	mov.w	r1, #0
 8004e1e:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004e22:	0013      	movs	r3, r2
 8004e24:	60fb      	str	r3, [r7, #12]
 8004e26:	2300      	movs	r3, #0
 8004e28:	60bb      	str	r3, [r7, #8]
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	4698      	mov	r8, r3
 8004e30:	4691      	mov	r9, r2
 8004e32:	4642      	mov	r2, r8
 8004e34:	464b      	mov	r3, r9
 8004e36:	f04f 0000 	mov.w	r0, #0
 8004e3a:	f04f 0100 	mov.w	r1, #0
 8004e3e:	0159      	lsls	r1, r3, #5
 8004e40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e44:	0150      	lsls	r0, r2, #5
 8004e46:	4602      	mov	r2, r0
 8004e48:	460b      	mov	r3, r1
 8004e4a:	ebb2 0408 	subs.w	r4, r2, r8
 8004e4e:	eb63 0509 	sbc.w	r5, r3, r9
 8004e52:	f04f 0200 	mov.w	r2, #0
 8004e56:	f04f 0300 	mov.w	r3, #0
 8004e5a:	00ab      	lsls	r3, r5, #2
 8004e5c:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8004e60:	00a2      	lsls	r2, r4, #2
 8004e62:	4614      	mov	r4, r2
 8004e64:	461d      	mov	r5, r3
 8004e66:	eb14 0a08 	adds.w	sl, r4, r8
 8004e6a:	eb45 0b09 	adc.w	fp, r5, r9
 8004e6e:	f04f 0200 	mov.w	r2, #0
 8004e72:	f04f 0300 	mov.w	r3, #0
 8004e76:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004e7a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004e7e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004e82:	4692      	mov	sl, r2
 8004e84:	469b      	mov	fp, r3
 8004e86:	4652      	mov	r2, sl
 8004e88:	465b      	mov	r3, fp
 8004e8a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e8e:	4621      	mov	r1, r4
 8004e90:	4311      	orrs	r1, r2
 8004e92:	6039      	str	r1, [r7, #0]
 8004e94:	4629      	mov	r1, r5
 8004e96:	430b      	orrs	r3, r1
 8004e98:	607b      	str	r3, [r7, #4]
 8004e9a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 8004e9e:	4610      	mov	r0, r2
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	3718      	adds	r7, #24
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004eaa:	bf00      	nop
 8004eac:	20005afc 	.word	0x20005afc
 8004eb0:	20005b00 	.word	0x20005b00

08004eb4 <translateEPOS4Position>:
 * Translate EPOS4 raw position to normalized position (-1.0 to 1.0)
 * @param position Raw EPOS4 position value
 * @return Normalized position (-1.0 to 1.0)
 */
float translateEPOS4Position(int32_t position)
{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
    // Clamp position to the defined range
    if (position > maxPosition) position = maxPosition;
 8004ebc:	4b22      	ldr	r3, [pc, #136]	@ (8004f48 <translateEPOS4Position+0x94>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	429a      	cmp	r2, r3
 8004ec4:	dd02      	ble.n	8004ecc <translateEPOS4Position+0x18>
 8004ec6:	4b20      	ldr	r3, [pc, #128]	@ (8004f48 <translateEPOS4Position+0x94>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	607b      	str	r3, [r7, #4]
    if (position < minPosition) position = minPosition;
 8004ecc:	4b1f      	ldr	r3, [pc, #124]	@ (8004f4c <translateEPOS4Position+0x98>)
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	687a      	ldr	r2, [r7, #4]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	da02      	bge.n	8004edc <translateEPOS4Position+0x28>
 8004ed6:	4b1d      	ldr	r3, [pc, #116]	@ (8004f4c <translateEPOS4Position+0x98>)
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	607b      	str	r3, [r7, #4]
    // Convert to normalized value (-1.0 to 1.0)
    // Our physical range is:
    // maxPosition (100000) = command -10000 = normalized -1.0
    // midPosition (0) = command 0 = normalized 0.0
    // minPosition (-100000) = command 10000 = normalized 1.0
    float normalized = (float)(midPosition - position) / (float)(midPosition - minPosition);
 8004edc:	4b1c      	ldr	r3, [pc, #112]	@ (8004f50 <translateEPOS4Position+0x9c>)
 8004ede:	681a      	ldr	r2, [r3, #0]
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	1ad3      	subs	r3, r2, r3
 8004ee4:	ee07 3a90 	vmov	s15, r3
 8004ee8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004eec:	4b18      	ldr	r3, [pc, #96]	@ (8004f50 <translateEPOS4Position+0x9c>)
 8004eee:	681a      	ldr	r2, [r3, #0]
 8004ef0:	4b16      	ldr	r3, [pc, #88]	@ (8004f4c <translateEPOS4Position+0x98>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	1ad3      	subs	r3, r2, r3
 8004ef6:	ee07 3a90 	vmov	s15, r3
 8004efa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004efe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f02:	edc7 7a03 	vstr	s15, [r7, #12]

    // Clamp to valid range
    if (normalized < -1.0f) normalized = -1.0f;
 8004f06:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f0a:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8004f0e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f16:	d501      	bpl.n	8004f1c <translateEPOS4Position+0x68>
 8004f18:	4b0e      	ldr	r3, [pc, #56]	@ (8004f54 <translateEPOS4Position+0xa0>)
 8004f1a:	60fb      	str	r3, [r7, #12]
    if (normalized > 1.0f) normalized = 1.0f;
 8004f1c:	edd7 7a03 	vldr	s15, [r7, #12]
 8004f20:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8004f24:	eef4 7ac7 	vcmpe.f32	s15, s14
 8004f28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f2c:	dd02      	ble.n	8004f34 <translateEPOS4Position+0x80>
 8004f2e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8004f32:	60fb      	str	r3, [r7, #12]

    return normalized;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	ee07 3a90 	vmov	s15, r3
}
 8004f3a:	eeb0 0a67 	vmov.f32	s0, s15
 8004f3e:	3714      	adds	r7, #20
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr
 8004f48:	20001900 	.word	0x20001900
 8004f4c:	20001908 	.word	0x20001908
 8004f50:	20001904 	.word	0x20001904
 8004f54:	bf800000 	.word	0xbf800000

08004f58 <getParamByIndex>:

// ... existing code ...

// Parameter handling function implementations
static inline param_t * getParamByIndex(uint16_t index)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	4603      	mov	r3, r0
 8004f60:	80fb      	strh	r3, [r7, #6]
    if(index >= ARRAY_SIZE(parameters))
 8004f62:	88fb      	ldrh	r3, [r7, #6]
 8004f64:	2b63      	cmp	r3, #99	@ 0x63
 8004f66:	d901      	bls.n	8004f6c <getParamByIndex+0x14>
    {
        return NULL;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	e003      	b.n	8004f74 <getParamByIndex+0x1c>
    }

    return &parameters[index];
 8004f6c:	88fb      	ldrh	r3, [r7, #6]
 8004f6e:	019b      	lsls	r3, r3, #6
 8004f70:	4a03      	ldr	r2, [pc, #12]	@ (8004f80 <getParamByIndex+0x28>)
 8004f72:	4413      	add	r3, r2
}
 8004f74:	4618      	mov	r0, r3
 8004f76:	370c      	adds	r7, #12
 8004f78:	46bd      	mov	sp, r7
 8004f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7e:	4770      	bx	lr
 8004f80:	20000000 	.word	0x20000000

08004f84 <getParamByName>:

static inline param_t * getParamByName(const char * name)
{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b084      	sub	sp, #16
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	6078      	str	r0, [r7, #4]
    for(uint16_t i = 0; i < ARRAY_SIZE(parameters); i++)
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	81fb      	strh	r3, [r7, #14]
 8004f90:	e012      	b.n	8004fb8 <getParamByName+0x34>
    {
        if(strcmp(name, parameters[i].name) == 0)
 8004f92:	89fb      	ldrh	r3, [r7, #14]
 8004f94:	019b      	lsls	r3, r3, #6
 8004f96:	4a0c      	ldr	r2, [pc, #48]	@ (8004fc8 <getParamByName+0x44>)
 8004f98:	4413      	add	r3, r2
 8004f9a:	4619      	mov	r1, r3
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7fb f913 	bl	80001c8 <strcmp>
 8004fa2:	4603      	mov	r3, r0
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d104      	bne.n	8004fb2 <getParamByName+0x2e>
        {
            return &parameters[i];
 8004fa8:	89fb      	ldrh	r3, [r7, #14]
 8004faa:	019b      	lsls	r3, r3, #6
 8004fac:	4a06      	ldr	r2, [pc, #24]	@ (8004fc8 <getParamByName+0x44>)
 8004fae:	4413      	add	r3, r2
 8004fb0:	e006      	b.n	8004fc0 <getParamByName+0x3c>
    for(uint16_t i = 0; i < ARRAY_SIZE(parameters); i++)
 8004fb2:	89fb      	ldrh	r3, [r7, #14]
 8004fb4:	3301      	adds	r3, #1
 8004fb6:	81fb      	strh	r3, [r7, #14]
 8004fb8:	89fb      	ldrh	r3, [r7, #14]
 8004fba:	2b63      	cmp	r3, #99	@ 0x63
 8004fbc:	d9e9      	bls.n	8004f92 <getParamByName+0xe>
        }
    }
    return NULL;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	20000000 	.word	0x20000000

08004fcc <broadcast_all_parameters>:

/**
 * Broadcast all parameters to speed up parameter detection
 */
void broadcast_all_parameters(void)
{
 8004fcc:	b580      	push	{r7, lr}
 8004fce:	b086      	sub	sp, #24
 8004fd0:	af00      	add	r7, sp, #0

    // First, broadcast a heartbeat to ensure our node is visible
    send_NodeStatus();
 8004fd2:	f7fe fc99 	bl	8003908 <send_NodeStatus>

    // Small delay before sending parameters
    HAL_Delay(20);
 8004fd6:	2014      	movs	r0, #20
 8004fd8:	f001 fc40 	bl	800685c <HAL_Delay>

    // Count of valid parameters
    int param_count = 0;
 8004fdc:	2300      	movs	r3, #0
 8004fde:	617b      	str	r3, [r7, #20]

    // Loop through all parameters and broadcast each one
    for (uint16_t i = 0; i < MAX_PARAMETERS; i++) {
 8004fe0:	2300      	movs	r3, #0
 8004fe2:	827b      	strh	r3, [r7, #18]
 8004fe4:	e035      	b.n	8005052 <broadcast_all_parameters+0x86>
        // Skip empty parameters
        if (parameters[i].name[0] == '\0') {
 8004fe6:	8a7b      	ldrh	r3, [r7, #18]
 8004fe8:	4a28      	ldr	r2, [pc, #160]	@ (800508c <broadcast_all_parameters+0xc0>)
 8004fea:	019b      	lsls	r3, r3, #6
 8004fec:	4413      	add	r3, r2
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d02a      	beq.n	800504a <broadcast_all_parameters+0x7e>
            continue;
        }

        param_count++;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	3301      	adds	r3, #1
 8004ff8:	617b      	str	r3, [r7, #20]

        // Broadcast this parameter with retries for reliability
        for (int retry = 0; retry < 2; retry++) {
 8004ffa:	2300      	movs	r3, #0
 8004ffc:	60fb      	str	r3, [r7, #12]
 8004ffe:	e019      	b.n	8005034 <broadcast_all_parameters+0x68>
            // Use our broadcast_parameter function
            broadcast_parameter(&parameters[i]);
 8005000:	8a7b      	ldrh	r3, [r7, #18]
 8005002:	019b      	lsls	r3, r3, #6
 8005004:	4a21      	ldr	r2, [pc, #132]	@ (800508c <broadcast_all_parameters+0xc0>)
 8005006:	4413      	add	r3, r2
 8005008:	4618      	mov	r0, r3
 800500a:	f000 fbed 	bl	80057e8 <broadcast_parameter>

            // Process queue to ensure it's sent
            for (int j = 0; j < 3; j++) {
 800500e:	2300      	movs	r3, #0
 8005010:	60bb      	str	r3, [r7, #8]
 8005012:	e006      	b.n	8005022 <broadcast_all_parameters+0x56>
                processTxRxOnce(&canard, 0);
 8005014:	2100      	movs	r1, #0
 8005016:	481e      	ldr	r0, [pc, #120]	@ (8005090 <broadcast_all_parameters+0xc4>)
 8005018:	f7fe fc04 	bl	8003824 <processTxRxOnce>
            for (int j = 0; j < 3; j++) {
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	3301      	adds	r3, #1
 8005020:	60bb      	str	r3, [r7, #8]
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	2b02      	cmp	r3, #2
 8005026:	ddf5      	ble.n	8005014 <broadcast_all_parameters+0x48>
            }

            // Small delay between retries and parameters
            HAL_Delay(10);
 8005028:	200a      	movs	r0, #10
 800502a:	f001 fc17 	bl	800685c <HAL_Delay>
        for (int retry = 0; retry < 2; retry++) {
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	3301      	adds	r3, #1
 8005032:	60fb      	str	r3, [r7, #12]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	2b01      	cmp	r3, #1
 8005038:	dde2      	ble.n	8005000 <broadcast_all_parameters+0x34>
        }

        // Feed watchdog to prevent reset during broadcast
        IWDG->KR = 0xAAAA;
 800503a:	4b16      	ldr	r3, [pc, #88]	@ (8005094 <broadcast_all_parameters+0xc8>)
 800503c:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8005040:	601a      	str	r2, [r3, #0]

        // Short delay between parameters
        HAL_Delay(20);
 8005042:	2014      	movs	r0, #20
 8005044:	f001 fc0a 	bl	800685c <HAL_Delay>
 8005048:	e000      	b.n	800504c <broadcast_all_parameters+0x80>
            continue;
 800504a:	bf00      	nop
    for (uint16_t i = 0; i < MAX_PARAMETERS; i++) {
 800504c:	8a7b      	ldrh	r3, [r7, #18]
 800504e:	3301      	adds	r3, #1
 8005050:	827b      	strh	r3, [r7, #18]
 8005052:	8a7b      	ldrh	r3, [r7, #18]
 8005054:	2b63      	cmp	r3, #99	@ 0x63
 8005056:	d9c6      	bls.n	8004fe6 <broadcast_all_parameters+0x1a>
    }

    // Mark that we've broadcast all parameters
    all_params_broadcast = true;
 8005058:	4b0f      	ldr	r3, [pc, #60]	@ (8005098 <broadcast_all_parameters+0xcc>)
 800505a:	2201      	movs	r2, #1
 800505c:	701a      	strb	r2, [r3, #0]

    // Final heartbeat at end of parameter broadcast
    send_NodeStatus();
 800505e:	f7fe fc53 	bl	8003908 <send_NodeStatus>

    // Process any pending messages
    for (int i = 0; i < 5; i++) {
 8005062:	2300      	movs	r3, #0
 8005064:	607b      	str	r3, [r7, #4]
 8005066:	e009      	b.n	800507c <broadcast_all_parameters+0xb0>
        processTxRxOnce(&canard, 0);
 8005068:	2100      	movs	r1, #0
 800506a:	4809      	ldr	r0, [pc, #36]	@ (8005090 <broadcast_all_parameters+0xc4>)
 800506c:	f7fe fbda 	bl	8003824 <processTxRxOnce>
        HAL_Delay(2);
 8005070:	2002      	movs	r0, #2
 8005072:	f001 fbf3 	bl	800685c <HAL_Delay>
    for (int i = 0; i < 5; i++) {
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	3301      	adds	r3, #1
 800507a:	607b      	str	r3, [r7, #4]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b04      	cmp	r3, #4
 8005080:	ddf2      	ble.n	8005068 <broadcast_all_parameters+0x9c>
    }

}
 8005082:	bf00      	nop
 8005084:	bf00      	nop
 8005086:	3718      	adds	r7, #24
 8005088:	46bd      	mov	sp, r7
 800508a:	bd80      	pop	{r7, pc}
 800508c:	20000000 	.word	0x20000000
 8005090:	20005aa0 	.word	0x20005aa0
 8005094:	40003000 	.word	0x40003000
 8005098:	20001a9c 	.word	0x20001a9c

0800509c <handleActuatorArrayCommand>:
/**
 * Handle UAVCAN Equipment Actuator ArrayCommand
 * This receives commands from ArduPilot for servo/motor control
 */
void handleActuatorArrayCommand(CanardInstance* ins, CanardRxTransfer* transfer)
{
 800509c:	b5b0      	push	{r4, r5, r7, lr}
 800509e:	b090      	sub	sp, #64	@ 0x40
 80050a0:	af04      	add	r7, sp, #16
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
    // Add command latency tracking
    static uint32_t last_command_time = 0;
    uint32_t current_time = HAL_GetTick();
 80050a6:	f001 fbcd 	bl	8006844 <HAL_GetTick>
 80050aa:	6238      	str	r0, [r7, #32]
    if (last_command_time > 0) {
 80050ac:	4b8f      	ldr	r3, [pc, #572]	@ (80052ec <handleActuatorArrayCommand+0x250>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d007      	beq.n	80050c4 <handleActuatorArrayCommand+0x28>
        // Only print latency after first command to have a valid measurement
        printf("Command latency: %lu ms\n", current_time - last_command_time);
 80050b4:	4b8d      	ldr	r3, [pc, #564]	@ (80052ec <handleActuatorArrayCommand+0x250>)
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6a3a      	ldr	r2, [r7, #32]
 80050ba:	1ad3      	subs	r3, r2, r3
 80050bc:	4619      	mov	r1, r3
 80050be:	488c      	ldr	r0, [pc, #560]	@ (80052f0 <handleActuatorArrayCommand+0x254>)
 80050c0:	f7fd fca1 	bl	8002a06 <printf>
    }
    last_command_time = current_time;
 80050c4:	4a89      	ldr	r2, [pc, #548]	@ (80052ec <handleActuatorArrayCommand+0x250>)
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	6013      	str	r3, [r2, #0]
    // Feed the watchdog during command processing to prevent resets
    IWDG->KR = 0xAAAA;
 80050ca:	4b8a      	ldr	r3, [pc, #552]	@ (80052f4 <handleActuatorArrayCommand+0x258>)
 80050cc:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 80050d0:	601a      	str	r2, [r3, #0]

    // Check for a valid message size - ArduPilot sends custom 4-byte format
    if (transfer->payload_len < 4) {
 80050d2:	683b      	ldr	r3, [r7, #0]
 80050d4:	8a9b      	ldrh	r3, [r3, #20]
 80050d6:	2b03      	cmp	r3, #3
 80050d8:	d803      	bhi.n	80050e2 <handleActuatorArrayCommand+0x46>
        printf("ERROR: Message too short for command (4 bytes needed)\n");
 80050da:	4887      	ldr	r0, [pc, #540]	@ (80052f8 <handleActuatorArrayCommand+0x25c>)
 80050dc:	f00a fb02 	bl	800f6e4 <puts>
        return;
 80050e0:	e1e5      	b.n	80054ae <handleActuatorArrayCommand+0x412>
    }

    // Process short messages from ArduPilot (their custom format)
    if (transfer->payload_len == 4) {
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	8a9b      	ldrh	r3, [r3, #20]
 80050e6:	2b04      	cmp	r3, #4
 80050e8:	f040 81db 	bne.w	80054a2 <handleActuatorArrayCommand+0x406>
        // Extract command value from the message
        uint16_t command_value = 0;
 80050ec:	2300      	movs	r3, #0
 80050ee:	83fb      	strh	r3, [r7, #30]
        
        // ArduPilot format: bytes 2-3 contain the command value (little-endian)
        uint8_t lsb = 0, msb = 0;
 80050f0:	2300      	movs	r3, #0
 80050f2:	72fb      	strb	r3, [r7, #11]
 80050f4:	2300      	movs	r3, #0
 80050f6:	72bb      	strb	r3, [r7, #10]
        canardDecodeScalar(transfer, 16, 8, false, &lsb);  // 3rd byte (16-bit offset)
 80050f8:	f107 030b 	add.w	r3, r7, #11
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	2300      	movs	r3, #0
 8005100:	2208      	movs	r2, #8
 8005102:	2110      	movs	r1, #16
 8005104:	6838      	ldr	r0, [r7, #0]
 8005106:	f7fc faeb 	bl	80016e0 <canardDecodeScalar>
        canardDecodeScalar(transfer, 24, 8, false, &msb);  // 4th byte (24-bit offset)
 800510a:	f107 030a 	add.w	r3, r7, #10
 800510e:	9300      	str	r3, [sp, #0]
 8005110:	2300      	movs	r3, #0
 8005112:	2208      	movs	r2, #8
 8005114:	2118      	movs	r1, #24
 8005116:	6838      	ldr	r0, [r7, #0]
 8005118:	f7fc fae2 	bl	80016e0 <canardDecodeScalar>
        command_value = (uint16_t)lsb | ((uint16_t)msb << 8);
 800511c:	7afb      	ldrb	r3, [r7, #11]
 800511e:	b21a      	sxth	r2, r3
 8005120:	7abb      	ldrb	r3, [r7, #10]
 8005122:	b21b      	sxth	r3, r3
 8005124:	021b      	lsls	r3, r3, #8
 8005126:	b21b      	sxth	r3, r3
 8005128:	4313      	orrs	r3, r2
 800512a:	b21b      	sxth	r3, r3
 800512c:	83fb      	strh	r3, [r7, #30]
        
        // Store the command value for initial synchronization
        latest_ardupilot_command = command_value;
 800512e:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8005132:	4b72      	ldr	r3, [pc, #456]	@ (80052fc <handleActuatorArrayCommand+0x260>)
 8005134:	801a      	strh	r2, [r3, #0]
        ardupilot_command_received = true;
 8005136:	4b72      	ldr	r3, [pc, #456]	@ (8005300 <handleActuatorArrayCommand+0x264>)
 8005138:	2201      	movs	r2, #1
 800513a:	701a      	strb	r2, [r3, #0]
        
        // Print the command value for debugging with more detail for vectored yaw
        if (command_value < 15360 && command_value > 14000) {
 800513c:	8bfb      	ldrh	r3, [r7, #30]
 800513e:	f5b3 5f70 	cmp.w	r3, #15360	@ 0x3c00
 8005142:	d20d      	bcs.n	8005160 <handleActuatorArrayCommand+0xc4>
 8005144:	8bfb      	ldrh	r3, [r7, #30]
 8005146:	f243 62b0 	movw	r2, #14000	@ 0x36b0
 800514a:	4293      	cmp	r3, r2
 800514c:	d908      	bls.n	8005160 <handleActuatorArrayCommand+0xc4>
            // This is likely a vectored yaw command - print more detail
            printf("VECTORED YAW COMMAND: %u (0x%04X), deviation from center: %d\n", 
 800514e:	8bf9      	ldrh	r1, [r7, #30]
 8005150:	8bfa      	ldrh	r2, [r7, #30]
 8005152:	8bfb      	ldrh	r3, [r7, #30]
 8005154:	f5c3 5370 	rsb	r3, r3, #15360	@ 0x3c00
 8005158:	486a      	ldr	r0, [pc, #424]	@ (8005304 <handleActuatorArrayCommand+0x268>)
 800515a:	f7fd fc54 	bl	8002a06 <printf>
 800515e:	e005      	b.n	800516c <handleActuatorArrayCommand+0xd0>
                   command_value, command_value, 15360 - command_value);
        } else {
            printf("ACTUATOR COMMAND: %u (0x%04X)\n", command_value, command_value);
 8005160:	8bfb      	ldrh	r3, [r7, #30]
 8005162:	8bfa      	ldrh	r2, [r7, #30]
 8005164:	4619      	mov	r1, r3
 8005166:	4868      	ldr	r0, [pc, #416]	@ (8005308 <handleActuatorArrayCommand+0x26c>)
 8005168:	f7fd fc4d 	bl	8002a06 <printf>
        }
        
        // Track command changes to optimize movement
        static uint16_t last_command = 0;
        static uint32_t last_command_time = 0;
        uint32_t current_time = HAL_GetTick();
 800516c:	f001 fb6a 	bl	8006844 <HAL_GetTick>
 8005170:	61b8      	str	r0, [r7, #24]
        
        // Calculate command delta - used to determine if this is a small adjustment
        int16_t command_delta = abs((int16_t)command_value - (int16_t)last_command);
 8005172:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8005176:	461a      	mov	r2, r3
 8005178:	4b64      	ldr	r3, [pc, #400]	@ (800530c <handleActuatorArrayCommand+0x270>)
 800517a:	881b      	ldrh	r3, [r3, #0]
 800517c:	b21b      	sxth	r3, r3
 800517e:	1ad3      	subs	r3, r2, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	bfb8      	it	lt
 8005184:	425b      	neglt	r3, r3
 8005186:	82fb      	strh	r3, [r7, #22]
        
        // Check if this is a significantly new command or if enough time has passed
        // Process all commands immediately for vectored yaw
        bool should_process = false;
 8005188:	2300      	movs	r3, #0
 800518a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
        
        // Always process vectored yaw commands immediately (near 15360 range)
        if (abs(command_value - 15360) < 1000) {
 800518e:	8bfb      	ldrh	r3, [r7, #30]
 8005190:	f5a3 5370 	sub.w	r3, r3, #15360	@ 0x3c00
 8005194:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8005198:	dd0c      	ble.n	80051b4 <handleActuatorArrayCommand+0x118>
 800519a:	8bfb      	ldrh	r3, [r7, #30]
 800519c:	f5a3 5370 	sub.w	r3, r3, #15360	@ 0x3c00
 80051a0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80051a4:	da06      	bge.n	80051b4 <handleActuatorArrayCommand+0x118>
            should_process = true;
 80051a6:	2301      	movs	r3, #1
 80051a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            printf("Processing vectored yaw command immediately\n");
 80051ac:	4858      	ldr	r0, [pc, #352]	@ (8005310 <handleActuatorArrayCommand+0x274>)
 80051ae:	f00a fa99 	bl	800f6e4 <puts>
 80051b2:	e02c      	b.n	800520e <handleActuatorArrayCommand+0x172>
        }
        // For small changes (under 50 units), process immediately with no debounce
        else if (command_delta <= 50) {
 80051b4:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80051b8:	2b32      	cmp	r3, #50	@ 0x32
 80051ba:	dc09      	bgt.n	80051d0 <handleActuatorArrayCommand+0x134>
            should_process = true;
 80051bc:	2301      	movs	r3, #1
 80051be:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            printf("Processing small command adjustment (delta=%d)\n", command_delta);
 80051c2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80051c6:	4619      	mov	r1, r3
 80051c8:	4852      	ldr	r0, [pc, #328]	@ (8005314 <handleActuatorArrayCommand+0x278>)
 80051ca:	f7fd fc1c 	bl	8002a06 <printf>
 80051ce:	e01e      	b.n	800520e <handleActuatorArrayCommand+0x172>
        } 
        // For larger changes, use a very short debounce time of 50ms
        else if (command_delta > 50 && (current_time - last_command_time) > 50) {
 80051d0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80051d4:	2b32      	cmp	r3, #50	@ 0x32
 80051d6:	dd0f      	ble.n	80051f8 <handleActuatorArrayCommand+0x15c>
 80051d8:	4b4f      	ldr	r3, [pc, #316]	@ (8005318 <handleActuatorArrayCommand+0x27c>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	69ba      	ldr	r2, [r7, #24]
 80051de:	1ad3      	subs	r3, r2, r3
 80051e0:	2b32      	cmp	r3, #50	@ 0x32
 80051e2:	d909      	bls.n	80051f8 <handleActuatorArrayCommand+0x15c>
            should_process = true;
 80051e4:	2301      	movs	r3, #1
 80051e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            printf("Processing regular command (delta=%d)\n", command_delta);
 80051ea:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80051ee:	4619      	mov	r1, r3
 80051f0:	484a      	ldr	r0, [pc, #296]	@ (800531c <handleActuatorArrayCommand+0x280>)
 80051f2:	f7fd fc08 	bl	8002a06 <printf>
 80051f6:	e00a      	b.n	800520e <handleActuatorArrayCommand+0x172>
        }
        else if (command_value != last_command) {
 80051f8:	4b44      	ldr	r3, [pc, #272]	@ (800530c <handleActuatorArrayCommand+0x270>)
 80051fa:	881b      	ldrh	r3, [r3, #0]
 80051fc:	8bfa      	ldrh	r2, [r7, #30]
 80051fe:	429a      	cmp	r2, r3
 8005200:	d005      	beq.n	800520e <handleActuatorArrayCommand+0x172>
            printf("Command change detected but debounce active (delta=%d)\n", command_delta);
 8005202:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005206:	4619      	mov	r1, r3
 8005208:	4845      	ldr	r0, [pc, #276]	@ (8005320 <handleActuatorArrayCommand+0x284>)
 800520a:	f7fd fbfc 	bl	8002a06 <printf>
        }
        
        if (should_process) {
 800520e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005212:	2b00      	cmp	r3, #0
 8005214:	f000 814b 	beq.w	80054ae <handleActuatorArrayCommand+0x412>
            // Map the command to a position in our safe range
            int32_t position;
            
            // Special handling for vectored yaw mode (values near 15360)
            if (abs(command_value - 15360) < 1000) {
 8005218:	8bfb      	ldrh	r3, [r7, #30]
 800521a:	f5a3 5370 	sub.w	r3, r3, #15360	@ 0x3c00
 800521e:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 8005222:	dd48      	ble.n	80052b6 <handleActuatorArrayCommand+0x21a>
 8005224:	8bfb      	ldrh	r3, [r7, #30]
 8005226:	f5a3 5370 	sub.w	r3, r3, #15360	@ 0x3c00
 800522a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800522e:	da42      	bge.n	80052b6 <handleActuatorArrayCommand+0x21a>
                // 15360 = center yaw position (should be near minPosition)
                // 14360 = max right yaw
                // 16360 = max left yaw
                
                // Calculate deviation from center (15360)
                int16_t deviation = command_value - 15360;
 8005230:	8bfb      	ldrh	r3, [r7, #30]
 8005232:	f5a3 5370 	sub.w	r3, r3, #15360	@ 0x3c00
 8005236:	b29b      	uxth	r3, r3
 8005238:	82bb      	strh	r3, [r7, #20]
                

                // Map the deviation to a position range around minPosition
                // For VTOL mode, 15360 corresponds to minPosition (negative numbers)
                int32_t base_position = minPosition;
 800523a:	4b3a      	ldr	r3, [pc, #232]	@ (8005324 <handleActuatorArrayCommand+0x288>)
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	613b      	str	r3, [r7, #16]
                
                // Apply the deviation - negative deviation (< 15360) increases position 
                // positive deviation (> 15360) decreases position
                float normalized = (float)deviation / 1000.0f;  // +/-1.0 for +/-1000 deviation
 8005240:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8005244:	ee07 3a90 	vmov	s15, r3
 8005248:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800524c:	eddf 6a36 	vldr	s13, [pc, #216]	@ 8005328 <handleActuatorArrayCommand+0x28c>
 8005250:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005254:	edc7 7a03 	vstr	s15, [r7, #12]
                
                // Calculate position with more smoothing for small changes
                position = base_position - (int32_t)(normalized * 100000);
 8005258:	edd7 7a03 	vldr	s15, [r7, #12]
 800525c:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 800532c <handleActuatorArrayCommand+0x290>
 8005260:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005264:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005268:	ee17 2a90 	vmov	r2, s15
 800526c:	693b      	ldr	r3, [r7, #16]
 800526e:	1a9b      	subs	r3, r3, r2
 8005270:	62bb      	str	r3, [r7, #40]	@ 0x28
                
                // Ensure position stays within limits
                if (position < minPosition) position = minPosition;
 8005272:	4b2c      	ldr	r3, [pc, #176]	@ (8005324 <handleActuatorArrayCommand+0x288>)
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005278:	429a      	cmp	r2, r3
 800527a:	da02      	bge.n	8005282 <handleActuatorArrayCommand+0x1e6>
 800527c:	4b29      	ldr	r3, [pc, #164]	@ (8005324 <handleActuatorArrayCommand+0x288>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	62bb      	str	r3, [r7, #40]	@ 0x28
                if (position > maxPosition) position = maxPosition;
 8005282:	4b2b      	ldr	r3, [pc, #172]	@ (8005330 <handleActuatorArrayCommand+0x294>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005288:	429a      	cmp	r2, r3
 800528a:	dd02      	ble.n	8005292 <handleActuatorArrayCommand+0x1f6>
 800528c:	4b28      	ldr	r3, [pc, #160]	@ (8005330 <handleActuatorArrayCommand+0x294>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	62bb      	str	r3, [r7, #40]	@ 0x28
                
                printf("VTOL Yaw command: value=%d, deviation=%d, normalized=%.4f, position=%ld\n", 
 8005292:	8bfc      	ldrh	r4, [r7, #30]
 8005294:	f9b7 5014 	ldrsh.w	r5, [r7, #20]
 8005298:	68f8      	ldr	r0, [r7, #12]
 800529a:	f7fb f90b 	bl	80004b4 <__aeabi_f2d>
 800529e:	4602      	mov	r2, r0
 80052a0:	460b      	mov	r3, r1
 80052a2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052a4:	9102      	str	r1, [sp, #8]
 80052a6:	e9cd 2300 	strd	r2, r3, [sp]
 80052aa:	462a      	mov	r2, r5
 80052ac:	4621      	mov	r1, r4
 80052ae:	4821      	ldr	r0, [pc, #132]	@ (8005334 <handleActuatorArrayCommand+0x298>)
 80052b0:	f7fd fba9 	bl	8002a06 <printf>
            if (abs(command_value - 15360) < 1000) {
 80052b4:	e087      	b.n	80053c6 <handleActuatorArrayCommand+0x32a>
                       command_value, deviation, normalized, (long)position);
            }
            // Standard mapping for regular commands
            else if (command_value <= 15000) {
 80052b6:	8bfb      	ldrh	r3, [r7, #30]
 80052b8:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80052bc:	4293      	cmp	r3, r2
 80052be:	d807      	bhi.n	80052d0 <handleActuatorArrayCommand+0x234>
                // Handle minimum bound
                position = minPosition;
 80052c0:	4b18      	ldr	r3, [pc, #96]	@ (8005324 <handleActuatorArrayCommand+0x288>)
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	62bb      	str	r3, [r7, #40]	@ 0x28
                printf("Command at lower bound - using min position: %ld\n", (long)position);
 80052c6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052c8:	481b      	ldr	r0, [pc, #108]	@ (8005338 <handleActuatorArrayCommand+0x29c>)
 80052ca:	f7fd fb9c 	bl	8002a06 <printf>
 80052ce:	e07a      	b.n	80053c6 <handleActuatorArrayCommand+0x32a>
            }
            else if (command_value >= 48000) {
 80052d0:	8bfb      	ldrh	r3, [r7, #30]
 80052d2:	f64b 327f 	movw	r2, #47999	@ 0xbb7f
 80052d6:	4293      	cmp	r3, r2
 80052d8:	d934      	bls.n	8005344 <handleActuatorArrayCommand+0x2a8>
                // Handle maximum bound
                position = maxPosition;
 80052da:	4b15      	ldr	r3, [pc, #84]	@ (8005330 <handleActuatorArrayCommand+0x294>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	62bb      	str	r3, [r7, #40]	@ 0x28
                printf("Command at upper bound - using max position: %ld\n", (long)position);
 80052e0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80052e2:	4816      	ldr	r0, [pc, #88]	@ (800533c <handleActuatorArrayCommand+0x2a0>)
 80052e4:	f7fd fb8f 	bl	8002a06 <printf>
 80052e8:	e06d      	b.n	80053c6 <handleActuatorArrayCommand+0x32a>
 80052ea:	bf00      	nop
 80052ec:	20005b08 	.word	0x20005b08
 80052f0:	08010a00 	.word	0x08010a00
 80052f4:	40003000 	.word	0x40003000
 80052f8:	08010a1c 	.word	0x08010a1c
 80052fc:	200019ca 	.word	0x200019ca
 8005300:	200019cc 	.word	0x200019cc
 8005304:	08010a54 	.word	0x08010a54
 8005308:	08010a94 	.word	0x08010a94
 800530c:	20005b0c 	.word	0x20005b0c
 8005310:	08010ab4 	.word	0x08010ab4
 8005314:	08010ae0 	.word	0x08010ae0
 8005318:	20005b10 	.word	0x20005b10
 800531c:	08010b10 	.word	0x08010b10
 8005320:	08010b38 	.word	0x08010b38
 8005324:	20001908 	.word	0x20001908
 8005328:	447a0000 	.word	0x447a0000
 800532c:	47c35000 	.word	0x47c35000
 8005330:	20001900 	.word	0x20001900
 8005334:	08010b70 	.word	0x08010b70
 8005338:	08010bbc 	.word	0x08010bbc
 800533c:	08010bf0 	.word	0x08010bf0
 8005340:	47000000 	.word	0x47000000
            }
            else {
                // For values in the normal range
                float normalized = (float)(command_value - 15360) / (float)(48128 - 15360);
 8005344:	8bfb      	ldrh	r3, [r7, #30]
 8005346:	f5a3 5370 	sub.w	r3, r3, #15360	@ 0x3c00
 800534a:	ee07 3a90 	vmov	s15, r3
 800534e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005352:	ed5f 6a05 	vldr	s13, [pc, #-20]	@ 8005340 <handleActuatorArrayCommand+0x2a4>
 8005356:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800535a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
                
                // Ensure we're in the valid range [0,1]
                if (normalized < 0.0f) normalized = 0.0f;
 800535e:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005362:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8005366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800536a:	d502      	bpl.n	8005372 <handleActuatorArrayCommand+0x2d6>
 800536c:	f04f 0300 	mov.w	r3, #0
 8005370:	627b      	str	r3, [r7, #36]	@ 0x24
                if (normalized > 1.0f) normalized = 1.0f;
 8005372:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005376:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800537a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800537e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005382:	dd02      	ble.n	800538a <handleActuatorArrayCommand+0x2ee>
 8005384:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8005388:	627b      	str	r3, [r7, #36]	@ 0x24
                
                // Apply mapping from normalized to physical position
                position = minPosition + (int32_t)(normalized * (maxPosition - minPosition));
 800538a:	4b4a      	ldr	r3, [pc, #296]	@ (80054b4 <handleActuatorArrayCommand+0x418>)
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	4b4a      	ldr	r3, [pc, #296]	@ (80054b8 <handleActuatorArrayCommand+0x41c>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	ee07 3a90 	vmov	s15, r3
 8005398:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800539c:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80053a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80053a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053a8:	ee17 2a90 	vmov	r2, s15
 80053ac:	4b42      	ldr	r3, [pc, #264]	@ (80054b8 <handleActuatorArrayCommand+0x41c>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4413      	add	r3, r2
 80053b2:	62bb      	str	r3, [r7, #40]	@ 0x28
                
                printf("Command mapped to position: %ld (normalized: %.2f)\n",
 80053b4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80053b6:	f7fb f87d 	bl	80004b4 <__aeabi_f2d>
 80053ba:	4602      	mov	r2, r0
 80053bc:	460b      	mov	r3, r1
 80053be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053c0:	483e      	ldr	r0, [pc, #248]	@ (80054bc <handleActuatorArrayCommand+0x420>)
 80053c2:	f7fd fb20 	bl	8002a06 <printf>
                       (long)position, normalized);
            }
            
            // Optimize motion parameters based on command delta and mode
            if (abs(command_value - 15360) < 1000) {
 80053c6:	8bfb      	ldrh	r3, [r7, #30]
 80053c8:	f5a3 5370 	sub.w	r3, r3, #15360	@ 0x3c00
 80053cc:	f513 7f7a 	cmn.w	r3, #1000	@ 0x3e8
 80053d0:	dd19      	ble.n	8005406 <handleActuatorArrayCommand+0x36a>
 80053d2:	8bfb      	ldrh	r3, [r7, #30]
 80053d4:	f5a3 5370 	sub.w	r3, r3, #15360	@ 0x3c00
 80053d8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80053dc:	da13      	bge.n	8005406 <handleActuatorArrayCommand+0x36a>
                // Vectored yaw mode - maximum responsiveness
                profile_velocity = 100000;     // Extreme velocity for yaw movements
 80053de:	4b38      	ldr	r3, [pc, #224]	@ (80054c0 <handleActuatorArrayCommand+0x424>)
 80053e0:	4a38      	ldr	r2, [pc, #224]	@ (80054c4 <handleActuatorArrayCommand+0x428>)
 80053e2:	601a      	str	r2, [r3, #0]
                profile_acceleration = 100000; // Extreme acceleration for instant response
 80053e4:	4b38      	ldr	r3, [pc, #224]	@ (80054c8 <handleActuatorArrayCommand+0x42c>)
 80053e6:	4a37      	ldr	r2, [pc, #220]	@ (80054c4 <handleActuatorArrayCommand+0x428>)
 80053e8:	601a      	str	r2, [r3, #0]
                profile_deceleration = 100000; // Matching deceleration
 80053ea:	4b38      	ldr	r3, [pc, #224]	@ (80054cc <handleActuatorArrayCommand+0x430>)
 80053ec:	4a35      	ldr	r2, [pc, #212]	@ (80054c4 <handleActuatorArrayCommand+0x428>)
 80053ee:	601a      	str	r2, [r3, #0]
                printf("Using MAXIMUM RESPONSE profile for vectored yaw control\n");
 80053f0:	4837      	ldr	r0, [pc, #220]	@ (80054d0 <handleActuatorArrayCommand+0x434>)
 80053f2:	f00a f977 	bl	800f6e4 <puts>
                
                // If it's a very small change, make sure we don't skip it
                if (command_delta < 10) {
 80053f6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80053fa:	2b09      	cmp	r3, #9
 80053fc:	dc3a      	bgt.n	8005474 <handleActuatorArrayCommand+0x3d8>
                    printf("Small vectored yaw adjustment - forcing movement\n");
 80053fe:	4835      	ldr	r0, [pc, #212]	@ (80054d4 <handleActuatorArrayCommand+0x438>)
 8005400:	f00a f970 	bl	800f6e4 <puts>
                if (command_delta < 10) {
 8005404:	e036      	b.n	8005474 <handleActuatorArrayCommand+0x3d8>
                }
            }
            else if (command_delta <= 20) {
 8005406:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800540a:	2b14      	cmp	r3, #20
 800540c:	dc0f      	bgt.n	800542e <handleActuatorArrayCommand+0x392>
                // Very small adjustment - use highest velocity
                profile_velocity = 10000;     // Maximum velocity for smallest moves
 800540e:	4b2c      	ldr	r3, [pc, #176]	@ (80054c0 <handleActuatorArrayCommand+0x424>)
 8005410:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005414:	601a      	str	r2, [r3, #0]
                profile_acceleration = 10000; // Higher acceleration for instant response
 8005416:	4b2c      	ldr	r3, [pc, #176]	@ (80054c8 <handleActuatorArrayCommand+0x42c>)
 8005418:	f242 7210 	movw	r2, #10000	@ 0x2710
 800541c:	601a      	str	r2, [r3, #0]
                profile_deceleration = 10000; // Matching deceleration
 800541e:	4b2b      	ldr	r3, [pc, #172]	@ (80054cc <handleActuatorArrayCommand+0x430>)
 8005420:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005424:	601a      	str	r2, [r3, #0]
                printf("Using max speed profile for tiny adjustment\n");
 8005426:	482c      	ldr	r0, [pc, #176]	@ (80054d8 <handleActuatorArrayCommand+0x43c>)
 8005428:	f00a f95c 	bl	800f6e4 <puts>
 800542c:	e022      	b.n	8005474 <handleActuatorArrayCommand+0x3d8>
            }
            else if (command_delta <= 100) {
 800542e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8005432:	2b64      	cmp	r3, #100	@ 0x64
 8005434:	dc0f      	bgt.n	8005456 <handleActuatorArrayCommand+0x3ba>
                // Small to medium adjustment - high performance profile
                profile_velocity = 10000;
 8005436:	4b22      	ldr	r3, [pc, #136]	@ (80054c0 <handleActuatorArrayCommand+0x424>)
 8005438:	f242 7210 	movw	r2, #10000	@ 0x2710
 800543c:	601a      	str	r2, [r3, #0]
                profile_acceleration = 10000;
 800543e:	4b22      	ldr	r3, [pc, #136]	@ (80054c8 <handleActuatorArrayCommand+0x42c>)
 8005440:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005444:	601a      	str	r2, [r3, #0]
                profile_deceleration = 10000;
 8005446:	4b21      	ldr	r3, [pc, #132]	@ (80054cc <handleActuatorArrayCommand+0x430>)
 8005448:	f242 7210 	movw	r2, #10000	@ 0x2710
 800544c:	601a      	str	r2, [r3, #0]
                printf("Using high-speed profile for small adjustment\n");
 800544e:	4823      	ldr	r0, [pc, #140]	@ (80054dc <handleActuatorArrayCommand+0x440>)
 8005450:	f00a f948 	bl	800f6e4 <puts>
 8005454:	e00e      	b.n	8005474 <handleActuatorArrayCommand+0x3d8>
            }
            else {
                // Large movement - balanced profile
                profile_velocity = 10000;
 8005456:	4b1a      	ldr	r3, [pc, #104]	@ (80054c0 <handleActuatorArrayCommand+0x424>)
 8005458:	f242 7210 	movw	r2, #10000	@ 0x2710
 800545c:	601a      	str	r2, [r3, #0]
                profile_acceleration = 10000;
 800545e:	4b1a      	ldr	r3, [pc, #104]	@ (80054c8 <handleActuatorArrayCommand+0x42c>)
 8005460:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005464:	601a      	str	r2, [r3, #0]
                profile_deceleration = 10000;
 8005466:	4b19      	ldr	r3, [pc, #100]	@ (80054cc <handleActuatorArrayCommand+0x430>)
 8005468:	f242 7210 	movw	r2, #10000	@ 0x2710
 800546c:	601a      	str	r2, [r3, #0]
                printf("Using balanced profile for larger movement\n");
 800546e:	481c      	ldr	r0, [pc, #112]	@ (80054e0 <handleActuatorArrayCommand+0x444>)
 8005470:	f00a f938 	bl	800f6e4 <puts>
            }
            
            // Remember this command
            last_command = command_value;
 8005474:	4a1b      	ldr	r2, [pc, #108]	@ (80054e4 <handleActuatorArrayCommand+0x448>)
 8005476:	8bfb      	ldrh	r3, [r7, #30]
 8005478:	8013      	strh	r3, [r2, #0]
            last_command_time = current_time;
 800547a:	4a1b      	ldr	r2, [pc, #108]	@ (80054e8 <handleActuatorArrayCommand+0x44c>)
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	6013      	str	r3, [r2, #0]
            
            // Set the pending position and flag for processing in main loop
            pending_position = position;
 8005480:	4a1a      	ldr	r2, [pc, #104]	@ (80054ec <handleActuatorArrayCommand+0x450>)
 8005482:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005484:	6013      	str	r3, [r2, #0]
            command_pending = true;
 8005486:	4b1a      	ldr	r3, [pc, #104]	@ (80054f0 <handleActuatorArrayCommand+0x454>)
 8005488:	2201      	movs	r2, #1
 800548a:	701a      	strb	r2, [r3, #0]
            
            // Also echo the current and target positions for debugging
            printf("POSITION INFO: Current=%ld, Target=%ld, Delta=%ld\n", 
 800548c:	4b19      	ldr	r3, [pc, #100]	@ (80054f4 <handleActuatorArrayCommand+0x458>)
 800548e:	6819      	ldr	r1, [r3, #0]
 8005490:	4b18      	ldr	r3, [pc, #96]	@ (80054f4 <handleActuatorArrayCommand+0x458>)
 8005492:	681b      	ldr	r3, [r3, #0]
                   (long)current_position, (long)position, 
                   (long)(position - current_position));
 8005494:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005496:	1ad3      	subs	r3, r2, r3
            printf("POSITION INFO: Current=%ld, Target=%ld, Delta=%ld\n", 
 8005498:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800549a:	4817      	ldr	r0, [pc, #92]	@ (80054f8 <handleActuatorArrayCommand+0x45c>)
 800549c:	f7fd fab3 	bl	8002a06 <printf>
 80054a0:	e005      	b.n	80054ae <handleActuatorArrayCommand+0x412>
        }
    }
    else {
        // For standard format messages (future support)
        printf("WARNING: Unsupported command format (length=%u)\n", 
               (unsigned int)transfer->payload_len);
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	8a9b      	ldrh	r3, [r3, #20]
        printf("WARNING: Unsupported command format (length=%u)\n", 
 80054a6:	4619      	mov	r1, r3
 80054a8:	4814      	ldr	r0, [pc, #80]	@ (80054fc <handleActuatorArrayCommand+0x460>)
 80054aa:	f7fd faac 	bl	8002a06 <printf>
    }
}
 80054ae:	3730      	adds	r7, #48	@ 0x30
 80054b0:	46bd      	mov	sp, r7
 80054b2:	bdb0      	pop	{r4, r5, r7, pc}
 80054b4:	20001900 	.word	0x20001900
 80054b8:	20001908 	.word	0x20001908
 80054bc:	08010c24 	.word	0x08010c24
 80054c0:	2000190c 	.word	0x2000190c
 80054c4:	000186a0 	.word	0x000186a0
 80054c8:	20001910 	.word	0x20001910
 80054cc:	20001914 	.word	0x20001914
 80054d0:	08010c58 	.word	0x08010c58
 80054d4:	08010c90 	.word	0x08010c90
 80054d8:	08010cc4 	.word	0x08010cc4
 80054dc:	08010cf0 	.word	0x08010cf0
 80054e0:	08010d20 	.word	0x08010d20
 80054e4:	20005b0c 	.word	0x20005b0c
 80054e8:	20005b10 	.word	0x20005b10
 80054ec:	200019c4 	.word	0x200019c4
 80054f0:	200019c0 	.word	0x200019c0
 80054f4:	20001a98 	.word	0x20001a98
 80054f8:	08010d4c 	.word	0x08010d4c
 80054fc:	08010d80 	.word	0x08010d80

08005500 <initializePositionParameters>:

/**
 * Initialize position parameters with sensible defaults for servo control
 */
void initializePositionParameters(void)
{
 8005500:	b580      	push	{r7, lr}
 8005502:	b08a      	sub	sp, #40	@ 0x28
 8005504:	af00      	add	r7, sp, #0
    // Update parameters if they exist in parameter array
    param_t* min_param = getParamByName("epos4.min_pos");
 8005506:	483c      	ldr	r0, [pc, #240]	@ (80055f8 <initializePositionParameters+0xf8>)
 8005508:	f7ff fd3c 	bl	8004f84 <getParamByName>
 800550c:	6278      	str	r0, [r7, #36]	@ 0x24
    if (min_param != NULL) {
 800550e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005510:	2b00      	cmp	r3, #0
 8005512:	d002      	beq.n	800551a <initializePositionParameters+0x1a>
        min_param->value.f = -1.0f;  // Minimum normalized position
 8005514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005516:	4a39      	ldr	r2, [pc, #228]	@ (80055fc <initializePositionParameters+0xfc>)
 8005518:	615a      	str	r2, [r3, #20]
    }

    param_t* max_param = getParamByName("epos4.max_pos");
 800551a:	4839      	ldr	r0, [pc, #228]	@ (8005600 <initializePositionParameters+0x100>)
 800551c:	f7ff fd32 	bl	8004f84 <getParamByName>
 8005520:	6238      	str	r0, [r7, #32]
    if (max_param != NULL) {
 8005522:	6a3b      	ldr	r3, [r7, #32]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d003      	beq.n	8005530 <initializePositionParameters+0x30>
        max_param->value.f = 1.0f;   // Maximum normalized position
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800552e:	615a      	str	r2, [r3, #20]
    }

    param_t* center_param = getParamByName("epos4.center");
 8005530:	4834      	ldr	r0, [pc, #208]	@ (8005604 <initializePositionParameters+0x104>)
 8005532:	f7ff fd27 	bl	8004f84 <getParamByName>
 8005536:	61f8      	str	r0, [r7, #28]
    if (center_param != NULL) {
 8005538:	69fb      	ldr	r3, [r7, #28]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d003      	beq.n	8005546 <initializePositionParameters+0x46>
        center_param->value.f = 0.0f; // Center position
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	f04f 0200 	mov.w	r2, #0
 8005544:	615a      	str	r2, [r3, #20]
    }
    
    // Update parameters if they exist
    param_t* velocity_param = getParamByName("epos4.velocity");
 8005546:	4830      	ldr	r0, [pc, #192]	@ (8005608 <initializePositionParameters+0x108>)
 8005548:	f7ff fd1c 	bl	8004f84 <getParamByName>
 800554c:	61b8      	str	r0, [r7, #24]
    if (velocity_param != NULL) {
 800554e:	69bb      	ldr	r3, [r7, #24]
 8005550:	2b00      	cmp	r3, #0
 8005552:	d003      	beq.n	800555c <initializePositionParameters+0x5c>
        velocity_param->value.i = 1000;  // Very conservative velocity
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800555a:	615a      	str	r2, [r3, #20]
    }
    
    param_t* accel_param = getParamByName("epos4.accel_rate");
 800555c:	482b      	ldr	r0, [pc, #172]	@ (800560c <initializePositionParameters+0x10c>)
 800555e:	f7ff fd11 	bl	8004f84 <getParamByName>
 8005562:	6178      	str	r0, [r7, #20]
    if (accel_param != NULL) {
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d003      	beq.n	8005572 <initializePositionParameters+0x72>
        accel_param->value.i = 500;  // Very conservative acceleration
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8005570:	615a      	str	r2, [r3, #20]
    }
    
    param_t* decel_param = getParamByName("epos4.decel_rate");
 8005572:	4827      	ldr	r0, [pc, #156]	@ (8005610 <initializePositionParameters+0x110>)
 8005574:	f7ff fd06 	bl	8004f84 <getParamByName>
 8005578:	6138      	str	r0, [r7, #16]
    if (decel_param != NULL) {
 800557a:	693b      	ldr	r3, [r7, #16]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d003      	beq.n	8005588 <initializePositionParameters+0x88>
        decel_param->value.i = 500;  // Very conservative deceleration
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8005586:	615a      	str	r2, [r3, #20]
    }
    
    // Initialize mode-specific parameters with conservative values
    param_t* mode_vel_param = getParamByName("epos4.mode_vel");
 8005588:	4822      	ldr	r0, [pc, #136]	@ (8005614 <initializePositionParameters+0x114>)
 800558a:	f7ff fcfb 	bl	8004f84 <getParamByName>
 800558e:	60f8      	str	r0, [r7, #12]
    if (mode_vel_param != NULL) {
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	2b00      	cmp	r3, #0
 8005594:	d003      	beq.n	800559e <initializePositionParameters+0x9e>
        mode_vel_param->value.i = 1000; // Conservative for mode changes
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800559c:	615a      	str	r2, [r3, #20]
    }
    
    // Initialize ArduPilot flight mode parameters
    param_t* fbwa_vel_param = getParamByName("epos4.fbwa_vel");
 800559e:	481e      	ldr	r0, [pc, #120]	@ (8005618 <initializePositionParameters+0x118>)
 80055a0:	f7ff fcf0 	bl	8004f84 <getParamByName>
 80055a4:	60b8      	str	r0, [r7, #8]
    if (fbwa_vel_param != NULL) {
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d003      	beq.n	80055b4 <initializePositionParameters+0xb4>
        fbwa_vel_param->value.i = 1000; // Conservative for FBWA mode
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80055b2:	615a      	str	r2, [r3, #20]
    }
    
    param_t* qhover_vel_param = getParamByName("epos4.qhover_vel");
 80055b4:	4819      	ldr	r0, [pc, #100]	@ (800561c <initializePositionParameters+0x11c>)
 80055b6:	f7ff fce5 	bl	8004f84 <getParamByName>
 80055ba:	6078      	str	r0, [r7, #4]
    if (qhover_vel_param != NULL) {
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d003      	beq.n	80055ca <initializePositionParameters+0xca>
        qhover_vel_param->value.i = 1000; // Conservative for QHover mode
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80055c8:	615a      	str	r2, [r3, #20]
    }
    
    // Print initialization values
    printf("Position limits set to: min=%ld, mid=%ld, max=%ld\n",
 80055ca:	4b15      	ldr	r3, [pc, #84]	@ (8005620 <initializePositionParameters+0x120>)
 80055cc:	6819      	ldr	r1, [r3, #0]
 80055ce:	4b15      	ldr	r3, [pc, #84]	@ (8005624 <initializePositionParameters+0x124>)
 80055d0:	681a      	ldr	r2, [r3, #0]
 80055d2:	4b15      	ldr	r3, [pc, #84]	@ (8005628 <initializePositionParameters+0x128>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	4815      	ldr	r0, [pc, #84]	@ (800562c <initializePositionParameters+0x12c>)
 80055d8:	f7fd fa15 	bl	8002a06 <printf>
           (long)minPosition, (long)midPosition, (long)maxPosition);
    printf("Motion profile: velocity=%lu, accel=%lu, decel=%lu\n",
 80055dc:	4b14      	ldr	r3, [pc, #80]	@ (8005630 <initializePositionParameters+0x130>)
 80055de:	6819      	ldr	r1, [r3, #0]
 80055e0:	4b14      	ldr	r3, [pc, #80]	@ (8005634 <initializePositionParameters+0x134>)
 80055e2:	681a      	ldr	r2, [r3, #0]
 80055e4:	4b14      	ldr	r3, [pc, #80]	@ (8005638 <initializePositionParameters+0x138>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	4814      	ldr	r0, [pc, #80]	@ (800563c <initializePositionParameters+0x13c>)
 80055ea:	f7fd fa0c 	bl	8002a06 <printf>
           (unsigned long)profile_velocity, 
           (unsigned long)profile_acceleration,
           (unsigned long)profile_deceleration);
}
 80055ee:	bf00      	nop
 80055f0:	3728      	adds	r7, #40	@ 0x28
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	08010db4 	.word	0x08010db4
 80055fc:	bf800000 	.word	0xbf800000
 8005600:	08010dc4 	.word	0x08010dc4
 8005604:	08010dd4 	.word	0x08010dd4
 8005608:	08010de4 	.word	0x08010de4
 800560c:	08010df4 	.word	0x08010df4
 8005610:	08010e08 	.word	0x08010e08
 8005614:	08010e1c 	.word	0x08010e1c
 8005618:	08010e2c 	.word	0x08010e2c
 800561c:	08010e3c 	.word	0x08010e3c
 8005620:	20001908 	.word	0x20001908
 8005624:	20001904 	.word	0x20001904
 8005628:	20001900 	.word	0x20001900
 800562c:	0800fe94 	.word	0x0800fe94
 8005630:	2000190c 	.word	0x2000190c
 8005634:	20001910 	.word	0x20001910
 8005638:	20001914 	.word	0x20001914
 800563c:	0800fec8 	.word	0x0800fec8

08005640 <epos4_send_sdo_write>:

// EPOS4 SDO write function
void epos4_send_sdo_write(uint16_t index, uint8_t subindex, uint32_t data, uint32_t data_length)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b092      	sub	sp, #72	@ 0x48
 8005644:	af02      	add	r7, sp, #8
 8005646:	60ba      	str	r2, [r7, #8]
 8005648:	607b      	str	r3, [r7, #4]
 800564a:	4603      	mov	r3, r0
 800564c:	81fb      	strh	r3, [r7, #14]
 800564e:	460b      	mov	r3, r1
 8005650:	737b      	strb	r3, [r7, #13]
    // Feed watchdog
    IWDG->KR = 0xAAAA;
 8005652:	4b5e      	ldr	r3, [pc, #376]	@ (80057cc <epos4_send_sdo_write+0x18c>)
 8005654:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8005658:	601a      	str	r2, [r3, #0]

    printf("Sending SDO write: idx=%04x:%02x, data=%08lx, len=%lu\r\n",
 800565a:	89f9      	ldrh	r1, [r7, #14]
 800565c:	7b7a      	ldrb	r2, [r7, #13]
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	9300      	str	r3, [sp, #0]
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	485a      	ldr	r0, [pc, #360]	@ (80057d0 <epos4_send_sdo_write+0x190>)
 8005666:	f7fd f9ce 	bl	8002a06 <printf>
           index, subindex, (unsigned long)data, (unsigned long)data_length);

    // Configure header for SDO message
    CAN_TxHeaderTypeDef tx_header;
    uint8_t tx_data[8] = {0};
 800566a:	f107 0314 	add.w	r3, r7, #20
 800566e:	2200      	movs	r2, #0
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	605a      	str	r2, [r3, #4]
    uint32_t tx_mailbox;

    tx_header.StdId = 0x600 + EPOS4_NODE_ID;  // SDO client -> server
 8005674:	f240 6301 	movw	r3, #1537	@ 0x601
 8005678:	61fb      	str	r3, [r7, #28]
    tx_header.ExtId = 0;
 800567a:	2300      	movs	r3, #0
 800567c:	623b      	str	r3, [r7, #32]
    tx_header.IDE = CAN_ID_STD;
 800567e:	2300      	movs	r3, #0
 8005680:	627b      	str	r3, [r7, #36]	@ 0x24
    tx_header.RTR = CAN_RTR_DATA;
 8005682:	2300      	movs	r3, #0
 8005684:	62bb      	str	r3, [r7, #40]	@ 0x28
    tx_header.DLC = 8;
 8005686:	2308      	movs	r3, #8
 8005688:	62fb      	str	r3, [r7, #44]	@ 0x2c
    tx_header.TransmitGlobalTime = DISABLE;
 800568a:	2300      	movs	r3, #0
 800568c:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30

    // Set command specifier based on data length
    // 0x2F = write 1 byte, 0x2B = write 2 bytes, 0x27 = write 3 bytes, 0x23 = write 4 bytes
    uint8_t command;
    switch (data_length) {
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	2b03      	cmp	r3, #3
 8005694:	d011      	beq.n	80056ba <epos4_send_sdo_write+0x7a>
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2b03      	cmp	r3, #3
 800569a:	d812      	bhi.n	80056c2 <epos4_send_sdo_write+0x82>
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d003      	beq.n	80056aa <epos4_send_sdo_write+0x6a>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d004      	beq.n	80056b2 <epos4_send_sdo_write+0x72>
 80056a8:	e00b      	b.n	80056c2 <epos4_send_sdo_write+0x82>
        case 1: command = 0x2F; break;
 80056aa:	232f      	movs	r3, #47	@ 0x2f
 80056ac:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80056b0:	e00b      	b.n	80056ca <epos4_send_sdo_write+0x8a>
        case 2: command = 0x2B; break;
 80056b2:	232b      	movs	r3, #43	@ 0x2b
 80056b4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80056b8:	e007      	b.n	80056ca <epos4_send_sdo_write+0x8a>
        case 3: command = 0x27; break;
 80056ba:	2327      	movs	r3, #39	@ 0x27
 80056bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80056c0:	e003      	b.n	80056ca <epos4_send_sdo_write+0x8a>
        default: command = 0x23; break; // Default to 4-byte write
 80056c2:	2323      	movs	r3, #35	@ 0x23
 80056c4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
 80056c8:	bf00      	nop
    }

    // Fill in the SDO message
    tx_data[0] = command;
 80056ca:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80056ce:	753b      	strb	r3, [r7, #20]
    tx_data[1] = index & 0xFF;         // Low byte of index
 80056d0:	89fb      	ldrh	r3, [r7, #14]
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	757b      	strb	r3, [r7, #21]
    tx_data[2] = (index >> 8) & 0xFF;  // High byte of index
 80056d6:	89fb      	ldrh	r3, [r7, #14]
 80056d8:	0a1b      	lsrs	r3, r3, #8
 80056da:	b29b      	uxth	r3, r3
 80056dc:	b2db      	uxtb	r3, r3
 80056de:	75bb      	strb	r3, [r7, #22]
    tx_data[3] = subindex;             // Subindex
 80056e0:	7b7b      	ldrb	r3, [r7, #13]
 80056e2:	75fb      	strb	r3, [r7, #23]

    // Add data in little-endian format
    for (uint8_t i = 0; i < data_length && i < 4; i++) {
 80056e4:	2300      	movs	r3, #0
 80056e6:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 80056ea:	e011      	b.n	8005710 <epos4_send_sdo_write+0xd0>
        tx_data[4 + i] = (data >> (i * 8)) & 0xFF;
 80056ec:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80056f0:	00db      	lsls	r3, r3, #3
 80056f2:	68ba      	ldr	r2, [r7, #8]
 80056f4:	40da      	lsrs	r2, r3
 80056f6:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 80056fa:	3304      	adds	r3, #4
 80056fc:	b2d2      	uxtb	r2, r2
 80056fe:	3340      	adds	r3, #64	@ 0x40
 8005700:	443b      	add	r3, r7
 8005702:	f803 2c2c 	strb.w	r2, [r3, #-44]
    for (uint8_t i = 0; i < data_length && i < 4; i++) {
 8005706:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800570a:	3301      	adds	r3, #1
 800570c:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
 8005710:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	429a      	cmp	r2, r3
 8005718:	d903      	bls.n	8005722 <epos4_send_sdo_write+0xe2>
 800571a:	f897 303e 	ldrb.w	r3, [r7, #62]	@ 0x3e
 800571e:	2b03      	cmp	r3, #3
 8005720:	d9e4      	bls.n	80056ec <epos4_send_sdo_write+0xac>
    }

    // Try to send the message with retry logic (up to 3 attempts)
    HAL_StatusTypeDef status = HAL_ERROR;
 8005722:	2301      	movs	r3, #1
 8005724:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    for (int retry = 0; retry < 3; retry++) {
 8005728:	2300      	movs	r3, #0
 800572a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800572c:	e043      	b.n	80057b6 <epos4_send_sdo_write+0x176>
        // Wait for a transmit mailbox to be free
        if (!wait_for_tx_complete(50)) {
 800572e:	2032      	movs	r0, #50	@ 0x32
 8005730:	f000 fbb6 	bl	8005ea0 <wait_for_tx_complete>
 8005734:	4603      	mov	r3, r0
 8005736:	f083 0301 	eor.w	r3, r3, #1
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	d00f      	beq.n	8005760 <epos4_send_sdo_write+0x120>
            printf("TX buffer full, retry %d\r\n", retry + 1);
 8005740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005742:	3301      	adds	r3, #1
 8005744:	4619      	mov	r1, r3
 8005746:	4823      	ldr	r0, [pc, #140]	@ (80057d4 <epos4_send_sdo_write+0x194>)
 8005748:	f7fd f95d 	bl	8002a06 <printf>
            HAL_Delay(10 * (retry + 1)); // Progressive delay for retries
 800574c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800574e:	1c5a      	adds	r2, r3, #1
 8005750:	4613      	mov	r3, r2
 8005752:	009b      	lsls	r3, r3, #2
 8005754:	4413      	add	r3, r2
 8005756:	005b      	lsls	r3, r3, #1
 8005758:	4618      	mov	r0, r3
 800575a:	f001 f87f 	bl	800685c <HAL_Delay>
            continue;
 800575e:	e027      	b.n	80057b0 <epos4_send_sdo_write+0x170>
        }

        // Attempt to send the message
        status = HAL_CAN_AddTxMessage(&hcan1, &tx_header, tx_data, &tx_mailbox);
 8005760:	f107 0310 	add.w	r3, r7, #16
 8005764:	f107 0214 	add.w	r2, r7, #20
 8005768:	f107 011c 	add.w	r1, r7, #28
 800576c:	481a      	ldr	r0, [pc, #104]	@ (80057d8 <epos4_send_sdo_write+0x198>)
 800576e:	f001 fab9 	bl	8006ce4 <HAL_CAN_AddTxMessage>
 8005772:	4603      	mov	r3, r0
 8005774:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        if (status == HAL_OK) {
 8005778:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800577c:	2b00      	cmp	r3, #0
 800577e:	d106      	bne.n	800578e <epos4_send_sdo_write+0x14e>
            printf("SDO write command sent successfully (attempt %d)\r\n", retry + 1);
 8005780:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005782:	3301      	adds	r3, #1
 8005784:	4619      	mov	r1, r3
 8005786:	4815      	ldr	r0, [pc, #84]	@ (80057dc <epos4_send_sdo_write+0x19c>)
 8005788:	f7fd f93d 	bl	8002a06 <printf>
            break; // Exit retry loop if successful
 800578c:	e016      	b.n	80057bc <epos4_send_sdo_write+0x17c>
        } else {
            printf("Failed to send SDO command, status=%d, retry %d\r\n", status, retry + 1);
 800578e:	f897 1037 	ldrb.w	r1, [r7, #55]	@ 0x37
 8005792:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005794:	3301      	adds	r3, #1
 8005796:	461a      	mov	r2, r3
 8005798:	4811      	ldr	r0, [pc, #68]	@ (80057e0 <epos4_send_sdo_write+0x1a0>)
 800579a:	f7fd f934 	bl	8002a06 <printf>
            HAL_Delay(10 * (retry + 1)); // Progressive delay for retries
 800579e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057a0:	1c5a      	adds	r2, r3, #1
 80057a2:	4613      	mov	r3, r2
 80057a4:	009b      	lsls	r3, r3, #2
 80057a6:	4413      	add	r3, r2
 80057a8:	005b      	lsls	r3, r3, #1
 80057aa:	4618      	mov	r0, r3
 80057ac:	f001 f856 	bl	800685c <HAL_Delay>
    for (int retry = 0; retry < 3; retry++) {
 80057b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b2:	3301      	adds	r3, #1
 80057b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80057b6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057b8:	2b02      	cmp	r3, #2
 80057ba:	ddb8      	ble.n	800572e <epos4_send_sdo_write+0xee>
        }
    }

    // Process any pending transmit/receive operations
    processTxRxOnce(&canard, 10);
 80057bc:	210a      	movs	r1, #10
 80057be:	4809      	ldr	r0, [pc, #36]	@ (80057e4 <epos4_send_sdo_write+0x1a4>)
 80057c0:	f7fe f830 	bl	8003824 <processTxRxOnce>
}
 80057c4:	bf00      	nop
 80057c6:	3740      	adds	r7, #64	@ 0x40
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bd80      	pop	{r7, pc}
 80057cc:	40003000 	.word	0x40003000
 80057d0:	08010e50 	.word	0x08010e50
 80057d4:	08010e88 	.word	0x08010e88
 80057d8:	200019d0 	.word	0x200019d0
 80057dc:	08010ea4 	.word	0x08010ea4
 80057e0:	08010ed8 	.word	0x08010ed8
 80057e4:	20005aa0 	.word	0x20005aa0

080057e8 <broadcast_parameter>:
/**
 * Broadcast a single parameter to inform other nodes of its value
 * @param p Pointer to the parameter to broadcast
 */
void broadcast_parameter(param_t* p)
{
 80057e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80057ec:	b0b0      	sub	sp, #192	@ 0xc0
 80057ee:	af06      	add	r7, sp, #24
 80057f0:	6078      	str	r0, [r7, #4]
    if (p == NULL) {
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d103      	bne.n	8005800 <broadcast_parameter+0x18>
        printf("ERROR: Cannot broadcast NULL parameter\r\n");
 80057f8:	48d2      	ldr	r0, [pc, #840]	@ (8005b44 <broadcast_parameter+0x35c>)
 80057fa:	f009 ff73 	bl	800f6e4 <puts>
 80057fe:	e226      	b.n	8005c4e <broadcast_parameter+0x466>
        return;
    }

    // Create parameter response buffer
    uint8_t buffer[UAVCAN_PROTOCOL_PARAM_VALUE_SIZE] = {0};
 8005800:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8005804:	223c      	movs	r2, #60	@ 0x3c
 8005806:	2100      	movs	r1, #0
 8005808:	4618      	mov	r0, r3
 800580a:	f00a f84b 	bl	800f8a4 <memset>
    int offset = 0;
 800580e:	2300      	movs	r3, #0
 8005810:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    // Encode based on type
    switch (p->type) {
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	7c1b      	ldrb	r3, [r3, #16]
 8005818:	3b01      	subs	r3, #1
 800581a:	2b03      	cmp	r3, #3
 800581c:	f200 8194 	bhi.w	8005b48 <broadcast_parameter+0x360>
 8005820:	a201      	add	r2, pc, #4	@ (adr r2, 8005828 <broadcast_parameter+0x40>)
 8005822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005826:	bf00      	nop
 8005828:	08005839 	.word	0x08005839
 800582c:	0800599d 	.word	0x0800599d
 8005830:	080058eb 	.word	0x080058eb
 8005834:	08005a67 	.word	0x08005a67
        case PARAM_TYPE_INTEGER:
            buffer[offset++] = PARAM_TYPE_INTEGER;  // Integer type tag
 8005838:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800583c:	1c5a      	adds	r2, r3, #1
 800583e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005842:	33a8      	adds	r3, #168	@ 0xa8
 8005844:	443b      	add	r3, r7
 8005846:	2201      	movs	r2, #1
 8005848:	f803 2c4c 	strb.w	r2, [r3, #-76]
            int64_t int_val = (int64_t)p->value.i;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	695b      	ldr	r3, [r3, #20]
 8005850:	17da      	asrs	r2, r3, #31
 8005852:	469a      	mov	sl, r3
 8005854:	4693      	mov	fp, r2
 8005856:	e9c7 ab14 	strd	sl, fp, [r7, #80]	@ 0x50
            memcpy(&buffer[offset], &int_val, sizeof(int64_t));
 800585a:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800585e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005862:	18d1      	adds	r1, r2, r3
 8005864:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005868:	600a      	str	r2, [r1, #0]
 800586a:	604b      	str	r3, [r1, #4]
            offset += sizeof(int64_t);
 800586c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005870:	3308      	adds	r3, #8
 8005872:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            int64_t default_val = (int64_t)p->defval;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 800587c:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
            memcpy(&buffer[offset], &default_val, sizeof(int64_t));
 8005880:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8005884:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005888:	18d1      	adds	r1, r2, r3
 800588a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800588e:	600a      	str	r2, [r1, #0]
 8005890:	604b      	str	r3, [r1, #4]
            offset += sizeof(int64_t);
 8005892:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005896:	3308      	adds	r3, #8
 8005898:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            int64_t min_val = (int64_t)p->min;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80058a2:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
            memcpy(&buffer[offset], &min_val, sizeof(int64_t));
 80058a6:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80058aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80058ae:	18d1      	adds	r1, r2, r3
 80058b0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80058b4:	600a      	str	r2, [r1, #0]
 80058b6:	604b      	str	r3, [r1, #4]
            offset += sizeof(int64_t);
 80058b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80058bc:	3308      	adds	r3, #8
 80058be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            int64_t max_val = (int64_t)p->max;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80058c8:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
            memcpy(&buffer[offset], &max_val, sizeof(int64_t));
 80058cc:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80058d0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80058d4:	18d1      	adds	r1, r2, r3
 80058d6:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80058da:	600a      	str	r2, [r1, #0]
 80058dc:	604b      	str	r3, [r1, #4]
            offset += sizeof(int64_t);
 80058de:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80058e2:	3308      	adds	r3, #8
 80058e4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            break;
 80058e8:	e139      	b.n	8005b5e <broadcast_parameter+0x376>

        case PARAM_TYPE_REAL:
            buffer[offset++] = PARAM_TYPE_REAL;  // Real type tag
 80058ea:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80058ee:	1c5a      	adds	r2, r3, #1
 80058f0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80058f4:	33a8      	adds	r3, #168	@ 0xa8
 80058f6:	443b      	add	r3, r7
 80058f8:	2203      	movs	r2, #3
 80058fa:	f803 2c4c 	strb.w	r2, [r3, #-76]
            float real_val = p->value.f;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	695b      	ldr	r3, [r3, #20]
 8005902:	637b      	str	r3, [r7, #52]	@ 0x34
            memcpy(&buffer[offset], &real_val, sizeof(float));
 8005904:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8005908:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800590c:	4413      	add	r3, r2
 800590e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005910:	601a      	str	r2, [r3, #0]
            offset += sizeof(float);
 8005912:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005916:	3304      	adds	r3, #4
 8005918:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            float def_val_f = (float)p->defval;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8005922:	4610      	mov	r0, r2
 8005924:	4619      	mov	r1, r3
 8005926:	f7fa feed 	bl	8000704 <__aeabi_l2f>
 800592a:	4603      	mov	r3, r0
 800592c:	633b      	str	r3, [r7, #48]	@ 0x30
            memcpy(&buffer[offset], &def_val_f, sizeof(float));
 800592e:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8005932:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005936:	4413      	add	r3, r2
 8005938:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800593a:	601a      	str	r2, [r3, #0]
            offset += sizeof(float);
 800593c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005940:	3304      	adds	r3, #4
 8005942:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            float min_val_f = (float)p->min;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800594c:	4610      	mov	r0, r2
 800594e:	4619      	mov	r1, r3
 8005950:	f7fa fed8 	bl	8000704 <__aeabi_l2f>
 8005954:	4603      	mov	r3, r0
 8005956:	62fb      	str	r3, [r7, #44]	@ 0x2c
            memcpy(&buffer[offset], &min_val_f, sizeof(float));
 8005958:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 800595c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005960:	4413      	add	r3, r2
 8005962:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005964:	601a      	str	r2, [r3, #0]
            offset += sizeof(float);
 8005966:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800596a:	3304      	adds	r3, #4
 800596c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            float max_val_f = (float)p->max;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8005976:	4610      	mov	r0, r2
 8005978:	4619      	mov	r1, r3
 800597a:	f7fa fec3 	bl	8000704 <__aeabi_l2f>
 800597e:	4603      	mov	r3, r0
 8005980:	62bb      	str	r3, [r7, #40]	@ 0x28
            memcpy(&buffer[offset], &max_val_f, sizeof(float));
 8005982:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8005986:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800598a:	4413      	add	r3, r2
 800598c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800598e:	601a      	str	r2, [r3, #0]
            offset += sizeof(float);
 8005990:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005994:	3304      	adds	r3, #4
 8005996:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            break;
 800599a:	e0e0      	b.n	8005b5e <broadcast_parameter+0x376>

        case PARAM_TYPE_BOOLEAN:
            buffer[offset++] = PARAM_TYPE_BOOLEAN;  // Boolean type tag
 800599c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80059a0:	1c5a      	adds	r2, r3, #1
 80059a2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80059a6:	33a8      	adds	r3, #168	@ 0xa8
 80059a8:	443b      	add	r3, r7
 80059aa:	2202      	movs	r2, #2
 80059ac:	f803 2c4c 	strb.w	r2, [r3, #-76]
            int64_t bool_val = p->value.b ? 1 : 0;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	7d1b      	ldrb	r3, [r3, #20]
 80059b4:	b2db      	uxtb	r3, r3
 80059b6:	2200      	movs	r2, #0
 80059b8:	4698      	mov	r8, r3
 80059ba:	4691      	mov	r9, r2
 80059bc:	e9c7 8908 	strd	r8, r9, [r7, #32]
            memcpy(&buffer[offset], &bool_val, sizeof(int64_t));
 80059c0:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80059c4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80059c8:	18d1      	adds	r1, r2, r3
 80059ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80059ce:	600a      	str	r2, [r1, #0]
 80059d0:	604b      	str	r3, [r1, #4]
            offset += sizeof(int64_t);
 80059d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80059d6:	3308      	adds	r3, #8
 80059d8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            int64_t bool_default = p->defval ? 1 : 0;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 80059e2:	4313      	orrs	r3, r2
 80059e4:	bf14      	ite	ne
 80059e6:	2301      	movne	r3, #1
 80059e8:	2300      	moveq	r3, #0
 80059ea:	b2db      	uxtb	r3, r3
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	2200      	movs	r2, #0
 80059f0:	461c      	mov	r4, r3
 80059f2:	4615      	mov	r5, r2
 80059f4:	e9c7 4506 	strd	r4, r5, [r7, #24]
            memcpy(&buffer[offset], &bool_default, sizeof(int64_t));
 80059f8:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 80059fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005a00:	18d1      	adds	r1, r2, r3
 8005a02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005a06:	600a      	str	r2, [r1, #0]
 8005a08:	604b      	str	r3, [r1, #4]
            offset += sizeof(int64_t);
 8005a0a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005a0e:	3308      	adds	r3, #8
 8005a10:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            int64_t bool_min = 0;
 8005a14:	f04f 0200 	mov.w	r2, #0
 8005a18:	f04f 0300 	mov.w	r3, #0
 8005a1c:	e9c7 2304 	strd	r2, r3, [r7, #16]
            memcpy(&buffer[offset], &bool_min, sizeof(int64_t));
 8005a20:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8005a24:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005a28:	18d1      	adds	r1, r2, r3
 8005a2a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005a2e:	600a      	str	r2, [r1, #0]
 8005a30:	604b      	str	r3, [r1, #4]
            offset += sizeof(int64_t);
 8005a32:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005a36:	3308      	adds	r3, #8
 8005a38:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            int64_t bool_max = 1;
 8005a3c:	f04f 0201 	mov.w	r2, #1
 8005a40:	f04f 0300 	mov.w	r3, #0
 8005a44:	e9c7 2302 	strd	r2, r3, [r7, #8]
            memcpy(&buffer[offset], &bool_max, sizeof(int64_t));
 8005a48:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8005a4c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005a50:	18d1      	adds	r1, r2, r3
 8005a52:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a56:	600a      	str	r2, [r1, #0]
 8005a58:	604b      	str	r3, [r1, #4]
            offset += sizeof(int64_t);
 8005a5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005a5e:	3308      	adds	r3, #8
 8005a60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            break;
 8005a64:	e07b      	b.n	8005b5e <broadcast_parameter+0x376>

        case PARAM_TYPE_STRING: {
            buffer[offset++] = PARAM_TYPE_STRING;
 8005a66:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005a6a:	1c5a      	adds	r2, r3, #1
 8005a6c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005a70:	33a8      	adds	r3, #168	@ 0xa8
 8005a72:	443b      	add	r3, r7
 8005a74:	2204      	movs	r2, #4
 8005a76:	f803 2c4c 	strb.w	r2, [r3, #-76]

            // First string - default value
            uint8_t def_str_len = strlen(p->value.str);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3314      	adds	r3, #20
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fa fbac 	bl	80001dc <strlen>
 8005a84:	4603      	mov	r3, r0
 8005a86:	f887 309f 	strb.w	r3, [r7, #159]	@ 0x9f
            buffer[offset++] = def_str_len;
 8005a8a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005a8e:	1c5a      	adds	r2, r3, #1
 8005a90:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005a94:	33a8      	adds	r3, #168	@ 0xa8
 8005a96:	443b      	add	r3, r7
 8005a98:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 8005a9c:	f803 2c4c 	strb.w	r2, [r3, #-76]
            if (def_str_len > 0) {
 8005aa0:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d012      	beq.n	8005ace <broadcast_parameter+0x2e6>
                memcpy(&buffer[offset], p->value.str, def_str_len);
 8005aa8:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8005aac:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005ab0:	18d0      	adds	r0, r2, r3
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	3314      	adds	r3, #20
 8005ab6:	f897 209f 	ldrb.w	r2, [r7, #159]	@ 0x9f
 8005aba:	4619      	mov	r1, r3
 8005abc:	f009 ff91 	bl	800f9e2 <memcpy>
                offset += def_str_len;
 8005ac0:	f897 309f 	ldrb.w	r3, [r7, #159]	@ 0x9f
 8005ac4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8005ac8:	4413      	add	r3, r2
 8005aca:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
            }

            // Second string - actual value
            uint8_t str_len = strlen(p->value.str);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	3314      	adds	r3, #20
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	f7fa fb82 	bl	80001dc <strlen>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	f887 309e 	strb.w	r3, [r7, #158]	@ 0x9e
            buffer[offset++] = str_len;
 8005ade:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005ae2:	1c5a      	adds	r2, r3, #1
 8005ae4:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005ae8:	33a8      	adds	r3, #168	@ 0xa8
 8005aea:	443b      	add	r3, r7
 8005aec:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 8005af0:	f803 2c4c 	strb.w	r2, [r3, #-76]
            memcpy(&buffer[offset], p->value.str, str_len);
 8005af4:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8005af8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005afc:	18d0      	adds	r0, r2, r3
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	3314      	adds	r3, #20
 8005b02:	f897 209e 	ldrb.w	r2, [r7, #158]	@ 0x9e
 8005b06:	4619      	mov	r1, r3
 8005b08:	f009 ff6b 	bl	800f9e2 <memcpy>
            offset += str_len;
 8005b0c:	f897 309e 	ldrb.w	r3, [r7, #158]	@ 0x9e
 8005b10:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8005b14:	4413      	add	r3, r2
 8005b16:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

            // Third string is empty (min value - not used for strings)
            buffer[offset++] = 0;
 8005b1a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005b1e:	1c5a      	adds	r2, r3, #1
 8005b20:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b24:	33a8      	adds	r3, #168	@ 0xa8
 8005b26:	443b      	add	r3, r7
 8005b28:	2200      	movs	r2, #0
 8005b2a:	f803 2c4c 	strb.w	r2, [r3, #-76]

            // Fourth string is empty (max value - not used for strings)
            buffer[offset++] = 0;
 8005b2e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005b32:	1c5a      	adds	r2, r3, #1
 8005b34:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b38:	33a8      	adds	r3, #168	@ 0xa8
 8005b3a:	443b      	add	r3, r7
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f803 2c4c 	strb.w	r2, [r3, #-76]
            break;
 8005b42:	e00c      	b.n	8005b5e <broadcast_parameter+0x376>
 8005b44:	08010f0c 	.word	0x08010f0c
        }

        default:
            buffer[offset++] = PARAM_TYPE_EMPTY;  // Empty type tag
 8005b48:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005b4c:	1c5a      	adds	r2, r3, #1
 8005b4e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b52:	33a8      	adds	r3, #168	@ 0xa8
 8005b54:	443b      	add	r3, r7
 8005b56:	2200      	movs	r2, #0
 8005b58:	f803 2c4c 	strb.w	r2, [r3, #-76]
            break;
 8005b5c:	bf00      	nop
    }

    // Add parameter name at the end
    uint8_t name_len = strlen(p->name);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	4618      	mov	r0, r3
 8005b62:	f7fa fb3b 	bl	80001dc <strlen>
 8005b66:	4603      	mov	r3, r0
 8005b68:	f887 309d 	strb.w	r3, [r7, #157]	@ 0x9d
    buffer[offset++] = name_len;
 8005b6c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005b70:	1c5a      	adds	r2, r3, #1
 8005b72:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005b76:	33a8      	adds	r3, #168	@ 0xa8
 8005b78:	443b      	add	r3, r7
 8005b7a:	f897 209d 	ldrb.w	r2, [r7, #157]	@ 0x9d
 8005b7e:	f803 2c4c 	strb.w	r2, [r3, #-76]
    memcpy(&buffer[offset], p->name, name_len);
 8005b82:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8005b86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005b8a:	4413      	add	r3, r2
 8005b8c:	6879      	ldr	r1, [r7, #4]
 8005b8e:	f897 209d 	ldrb.w	r2, [r7, #157]	@ 0x9d
 8005b92:	4618      	mov	r0, r3
 8005b94:	f009 ff25 	bl	800f9e2 <memcpy>
    offset += name_len;
 8005b98:	f897 309d 	ldrb.w	r3, [r7, #157]	@ 0x9d
 8005b9c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8005ba0:	4413      	add	r3, r2
 8005ba2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    // Find parameter index
    uint16_t param_index = 0;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
    for (uint16_t i = 0; i < MAX_PARAMETERS; i++) {
 8005bac:	2300      	movs	r3, #0
 8005bae:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
 8005bb2:	e011      	b.n	8005bd8 <broadcast_parameter+0x3f0>
        if (&parameters[i] == p) {
 8005bb4:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8005bb8:	019b      	lsls	r3, r3, #6
 8005bba:	4a29      	ldr	r2, [pc, #164]	@ (8005c60 <broadcast_parameter+0x478>)
 8005bbc:	4413      	add	r3, r2
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d104      	bne.n	8005bce <broadcast_parameter+0x3e6>
            param_index = i;
 8005bc4:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8005bc8:	f8a7 30a2 	strh.w	r3, [r7, #162]	@ 0xa2
            break;
 8005bcc:	e008      	b.n	8005be0 <broadcast_parameter+0x3f8>
    for (uint16_t i = 0; i < MAX_PARAMETERS; i++) {
 8005bce:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8005bd2:	3301      	adds	r3, #1
 8005bd4:	f8a7 30a0 	strh.w	r3, [r7, #160]	@ 0xa0
 8005bd8:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	@ 0xa0
 8005bdc:	2b63      	cmp	r3, #99	@ 0x63
 8005bde:	d9e9      	bls.n	8005bb4 <broadcast_parameter+0x3cc>
        }
    }

    // Add parameter index
    buffer[offset++] = param_index & 0xFF;
 8005be0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005be4:	1c5a      	adds	r2, r3, #1
 8005be6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005bea:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	@ 0xa2
 8005bee:	b2d2      	uxtb	r2, r2
 8005bf0:	33a8      	adds	r3, #168	@ 0xa8
 8005bf2:	443b      	add	r3, r7
 8005bf4:	f803 2c4c 	strb.w	r2, [r3, #-76]
    buffer[offset++] = (param_index >> 8) & 0xFF;
 8005bf8:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	@ 0xa2
 8005bfc:	0a1b      	lsrs	r3, r3, #8
 8005bfe:	b299      	uxth	r1, r3
 8005c00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005c0a:	b2ca      	uxtb	r2, r1
 8005c0c:	33a8      	adds	r3, #168	@ 0xa8
 8005c0e:	443b      	add	r3, r7
 8005c10:	f803 2c4c 	strb.w	r2, [r3, #-76]

    // Send parameter with high priority
    static uint8_t transfer_id = 0;
    int result = canardRequestOrRespond(&canard,
 8005c14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005c18:	b29b      	uxth	r3, r3
 8005c1a:	9305      	str	r3, [sp, #20]
 8005c1c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8005c20:	9304      	str	r3, [sp, #16]
 8005c22:	2300      	movs	r3, #0
 8005c24:	9303      	str	r3, [sp, #12]
 8005c26:	2308      	movs	r3, #8
 8005c28:	9302      	str	r3, [sp, #8]
 8005c2a:	4b0e      	ldr	r3, [pc, #56]	@ (8005c64 <broadcast_parameter+0x47c>)
 8005c2c:	9301      	str	r3, [sp, #4]
 8005c2e:	230b      	movs	r3, #11
 8005c30:	9300      	str	r3, [sp, #0]
 8005c32:	a309      	add	r3, pc, #36	@ (adr r3, 8005c58 <broadcast_parameter+0x470>)
 8005c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c38:	2100      	movs	r1, #0
 8005c3a:	480b      	ldr	r0, [pc, #44]	@ (8005c68 <broadcast_parameter+0x480>)
 8005c3c:	f7fb f896 	bl	8000d6c <canardRequestOrRespond>
 8005c40:	4603      	mov	r3, r0
 8005c42:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
                              offset);

    

    // Process TX queue to ensure it's sent
    processTxRxOnce(&canard, 0);
 8005c46:	2100      	movs	r1, #0
 8005c48:	4807      	ldr	r0, [pc, #28]	@ (8005c68 <broadcast_parameter+0x480>)
 8005c4a:	f7fd fdeb 	bl	8003824 <processTxRxOnce>
}
 8005c4e:	37a8      	adds	r7, #168	@ 0xa8
 8005c50:	46bd      	mov	sp, r7
 8005c52:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c56:	bf00      	nop
 8005c58:	39d1a4d5 	.word	0x39d1a4d5
 8005c5c:	a7b622f9 	.word	0xa7b622f9
 8005c60:	20000000 	.word	0x20000000
 8005c64:	20005b14 	.word	0x20005b14
 8005c68:	20005aa0 	.word	0x20005aa0

08005c6c <force_motor_movement>:
 * This implementation focuses on the essential commands needed for position control
 * @param position Target position in encoder counts
 * @return 1 if successful, 0 if failed, 2 if in progress
 */
int force_motor_movement(int32_t position)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
    static movement_state_t current_state = STATE_INIT;
    static uint32_t last_state_change = 0;
    static uint32_t position_to_reach = 0;
    
    // Reset if new position is requested
    if (position_to_reach != position) {
 8005c74:	4b7d      	ldr	r3, [pc, #500]	@ (8005e6c <force_motor_movement+0x200>)
 8005c76:	681a      	ldr	r2, [r3, #0]
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	429a      	cmp	r2, r3
 8005c7c:	d009      	beq.n	8005c92 <force_motor_movement+0x26>
        printf("MOTOR_DEBUG: Starting movement to position: %ld\n", (long)position);
 8005c7e:	6879      	ldr	r1, [r7, #4]
 8005c80:	487b      	ldr	r0, [pc, #492]	@ (8005e70 <force_motor_movement+0x204>)
 8005c82:	f7fc fec0 	bl	8002a06 <printf>
        current_state = STATE_INIT;
 8005c86:	4b7b      	ldr	r3, [pc, #492]	@ (8005e74 <force_motor_movement+0x208>)
 8005c88:	2200      	movs	r2, #0
 8005c8a:	701a      	strb	r2, [r3, #0]
        position_to_reach = position;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	4a77      	ldr	r2, [pc, #476]	@ (8005e6c <force_motor_movement+0x200>)
 8005c90:	6013      	str	r3, [r2, #0]
    }
    
    // Get current time for state timeouts
    uint32_t current_time = HAL_GetTick();
 8005c92:	f000 fdd7 	bl	8006844 <HAL_GetTick>
 8005c96:	60f8      	str	r0, [r7, #12]
    
    // Ultra-fast state transitions for minimal command latency (was 5ms)
    const uint32_t STATE_TRANSITION_DELAY = 2;
 8005c98:	2302      	movs	r3, #2
 8005c9a:	60bb      	str	r3, [r7, #8]
    
    // Main state machine
    switch (current_state) {
 8005c9c:	4b75      	ldr	r3, [pc, #468]	@ (8005e74 <force_motor_movement+0x208>)
 8005c9e:	781b      	ldrb	r3, [r3, #0]
 8005ca0:	2b0c      	cmp	r3, #12
 8005ca2:	f200 80de 	bhi.w	8005e62 <force_motor_movement+0x1f6>
 8005ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8005cac <force_motor_movement+0x40>)
 8005ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005cac:	08005ce1 	.word	0x08005ce1
 8005cb0:	08005cef 	.word	0x08005cef
 8005cb4:	08005cfd 	.word	0x08005cfd
 8005cb8:	08005d1f 	.word	0x08005d1f
 8005cbc:	08005d3d 	.word	0x08005d3d
 8005cc0:	08005d5f 	.word	0x08005d5f
 8005cc4:	08005d7b 	.word	0x08005d7b
 8005cc8:	08005d9d 	.word	0x08005d9d
 8005ccc:	08005db9 	.word	0x08005db9
 8005cd0:	08005de9 	.word	0x08005de9
 8005cd4:	08005e05 	.word	0x08005e05
 8005cd8:	08005e29 	.word	0x08005e29
 8005cdc:	08005e4b 	.word	0x08005e4b
        case STATE_INIT:
            // Just move to first state - Check position first
            current_state = STATE_CHECK_POSITION;
 8005ce0:	4b64      	ldr	r3, [pc, #400]	@ (8005e74 <force_motor_movement+0x208>)
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	701a      	strb	r2, [r3, #0]
            last_state_change = current_time;
 8005ce6:	4a64      	ldr	r2, [pc, #400]	@ (8005e78 <force_motor_movement+0x20c>)
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6013      	str	r3, [r2, #0]
            break;
 8005cec:	e0b9      	b.n	8005e62 <force_motor_movement+0x1f6>

        case STATE_CHECK_POSITION:
            // Move directly to the next state - no position checking
            current_state = STATE_RESET_FAULT;
 8005cee:	4b61      	ldr	r3, [pc, #388]	@ (8005e74 <force_motor_movement+0x208>)
 8005cf0:	2202      	movs	r2, #2
 8005cf2:	701a      	strb	r2, [r3, #0]
            last_state_change = current_time;
 8005cf4:	4a60      	ldr	r2, [pc, #384]	@ (8005e78 <force_motor_movement+0x20c>)
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	6013      	str	r3, [r2, #0]
            break;
 8005cfa:	e0b2      	b.n	8005e62 <force_motor_movement+0x1f6>

        case STATE_RESET_FAULT:
            // Send NMT reset for fault recovery
            printf("Sending fault reset command\n");
 8005cfc:	485f      	ldr	r0, [pc, #380]	@ (8005e7c <force_motor_movement+0x210>)
 8005cfe:	f009 fcf1 	bl	800f6e4 <puts>
            epos4_send_sdo_write(0x6040, 0x00, 0x00000080, 2); // Fault reset bit
 8005d02:	2302      	movs	r3, #2
 8005d04:	2280      	movs	r2, #128	@ 0x80
 8005d06:	2100      	movs	r1, #0
 8005d08:	f246 0040 	movw	r0, #24640	@ 0x6040
 8005d0c:	f7ff fc98 	bl	8005640 <epos4_send_sdo_write>

            // Move to next state
            current_state = STATE_WAIT_RESET;
 8005d10:	4b58      	ldr	r3, [pc, #352]	@ (8005e74 <force_motor_movement+0x208>)
 8005d12:	2203      	movs	r2, #3
 8005d14:	701a      	strb	r2, [r3, #0]
            last_state_change = current_time;
 8005d16:	4a58      	ldr	r2, [pc, #352]	@ (8005e78 <force_motor_movement+0x20c>)
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	6013      	str	r3, [r2, #0]
            break;
 8005d1c:	e0a1      	b.n	8005e62 <force_motor_movement+0x1f6>

        case STATE_WAIT_RESET:
            // Check if enough time has passed before next command
            if (current_time - last_state_change >= STATE_TRANSITION_DELAY) {
 8005d1e:	4b56      	ldr	r3, [pc, #344]	@ (8005e78 <force_motor_movement+0x20c>)
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	68fa      	ldr	r2, [r7, #12]
 8005d24:	1ad3      	subs	r3, r2, r3
 8005d26:	68ba      	ldr	r2, [r7, #8]
 8005d28:	429a      	cmp	r2, r3
 8005d2a:	f200 8093 	bhi.w	8005e54 <force_motor_movement+0x1e8>
                current_state = STATE_SET_MODE;
 8005d2e:	4b51      	ldr	r3, [pc, #324]	@ (8005e74 <force_motor_movement+0x208>)
 8005d30:	2204      	movs	r2, #4
 8005d32:	701a      	strb	r2, [r3, #0]
                last_state_change = current_time;
 8005d34:	4a50      	ldr	r2, [pc, #320]	@ (8005e78 <force_motor_movement+0x20c>)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	6013      	str	r3, [r2, #0]
            }
            break;
 8005d3a:	e08b      	b.n	8005e54 <force_motor_movement+0x1e8>

        case STATE_SET_MODE:
            // Set operation mode to Profile Position (PP)
            printf("Setting operation mode to Profile Position\n");
 8005d3c:	4850      	ldr	r0, [pc, #320]	@ (8005e80 <force_motor_movement+0x214>)
 8005d3e:	f009 fcd1 	bl	800f6e4 <puts>
            epos4_send_sdo_write(0x6060, 0x00, 0x00000001, 1); // Profile Position mode
 8005d42:	2301      	movs	r3, #1
 8005d44:	2201      	movs	r2, #1
 8005d46:	2100      	movs	r1, #0
 8005d48:	f246 0060 	movw	r0, #24672	@ 0x6060
 8005d4c:	f7ff fc78 	bl	8005640 <epos4_send_sdo_write>

            // Move to next state
            current_state = STATE_WAIT_MODE;
 8005d50:	4b48      	ldr	r3, [pc, #288]	@ (8005e74 <force_motor_movement+0x208>)
 8005d52:	2205      	movs	r2, #5
 8005d54:	701a      	strb	r2, [r3, #0]
            last_state_change = current_time;
 8005d56:	4a48      	ldr	r2, [pc, #288]	@ (8005e78 <force_motor_movement+0x20c>)
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	6013      	str	r3, [r2, #0]
            break;
 8005d5c:	e081      	b.n	8005e62 <force_motor_movement+0x1f6>

        case STATE_WAIT_MODE:
            // Check if enough time has passed before next command
            if (current_time - last_state_change >= STATE_TRANSITION_DELAY) {
 8005d5e:	4b46      	ldr	r3, [pc, #280]	@ (8005e78 <force_motor_movement+0x20c>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68fa      	ldr	r2, [r7, #12]
 8005d64:	1ad3      	subs	r3, r2, r3
 8005d66:	68ba      	ldr	r2, [r7, #8]
 8005d68:	429a      	cmp	r2, r3
 8005d6a:	d875      	bhi.n	8005e58 <force_motor_movement+0x1ec>
                current_state = STATE_ENABLE_OP;
 8005d6c:	4b41      	ldr	r3, [pc, #260]	@ (8005e74 <force_motor_movement+0x208>)
 8005d6e:	2206      	movs	r2, #6
 8005d70:	701a      	strb	r2, [r3, #0]
                last_state_change = current_time;
 8005d72:	4a41      	ldr	r2, [pc, #260]	@ (8005e78 <force_motor_movement+0x20c>)
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6013      	str	r3, [r2, #0]
            }
            break;
 8005d78:	e06e      	b.n	8005e58 <force_motor_movement+0x1ec>

        case STATE_ENABLE_OP:
            // Send control word to enable operation (0x000F)
            printf("Sending enable operation command\n");
 8005d7a:	4842      	ldr	r0, [pc, #264]	@ (8005e84 <force_motor_movement+0x218>)
 8005d7c:	f009 fcb2 	bl	800f6e4 <puts>
            epos4_send_sdo_write(0x6040, 0x00, 0x0000000F, 2); // Enable operation state
 8005d80:	2302      	movs	r3, #2
 8005d82:	220f      	movs	r2, #15
 8005d84:	2100      	movs	r1, #0
 8005d86:	f246 0040 	movw	r0, #24640	@ 0x6040
 8005d8a:	f7ff fc59 	bl	8005640 <epos4_send_sdo_write>

            // Move to next state
            current_state = STATE_WAIT_ENABLE;
 8005d8e:	4b39      	ldr	r3, [pc, #228]	@ (8005e74 <force_motor_movement+0x208>)
 8005d90:	2207      	movs	r2, #7
 8005d92:	701a      	strb	r2, [r3, #0]
            last_state_change = current_time;
 8005d94:	4a38      	ldr	r2, [pc, #224]	@ (8005e78 <force_motor_movement+0x20c>)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	6013      	str	r3, [r2, #0]
            break;
 8005d9a:	e062      	b.n	8005e62 <force_motor_movement+0x1f6>

        case STATE_WAIT_ENABLE:
            // Check if enough time has passed before next command
            if (current_time - last_state_change >= STATE_TRANSITION_DELAY) {
 8005d9c:	4b36      	ldr	r3, [pc, #216]	@ (8005e78 <force_motor_movement+0x20c>)
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	68fa      	ldr	r2, [r7, #12]
 8005da2:	1ad3      	subs	r3, r2, r3
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	429a      	cmp	r2, r3
 8005da8:	d858      	bhi.n	8005e5c <force_motor_movement+0x1f0>
                current_state = STATE_SET_PARAMS;
 8005daa:	4b32      	ldr	r3, [pc, #200]	@ (8005e74 <force_motor_movement+0x208>)
 8005dac:	2208      	movs	r2, #8
 8005dae:	701a      	strb	r2, [r3, #0]
                last_state_change = current_time;
 8005db0:	4a31      	ldr	r2, [pc, #196]	@ (8005e78 <force_motor_movement+0x20c>)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6013      	str	r3, [r2, #0]
            }
            break;
 8005db6:	e051      	b.n	8005e5c <force_motor_movement+0x1f0>

        case STATE_SET_PARAMS:
            // Apply current motion profile parameters
            // These should be already set by the command handler based on movement size
            printf("Applying motion parameters: v=%lu, a=%lu, d=%lu\n",
 8005db8:	4b33      	ldr	r3, [pc, #204]	@ (8005e88 <force_motor_movement+0x21c>)
 8005dba:	6819      	ldr	r1, [r3, #0]
 8005dbc:	4b33      	ldr	r3, [pc, #204]	@ (8005e8c <force_motor_movement+0x220>)
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	4b33      	ldr	r3, [pc, #204]	@ (8005e90 <force_motor_movement+0x224>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	4833      	ldr	r0, [pc, #204]	@ (8005e94 <force_motor_movement+0x228>)
 8005dc6:	f7fc fe1e 	bl	8002a06 <printf>
                   (unsigned long)profile_velocity,
                   (unsigned long)profile_acceleration,
                   (unsigned long)profile_deceleration);

            // Set profile velocity
            epos4_send_sdo_write(0x6081, 0x00, profile_velocity, 4);
 8005dca:	4b2f      	ldr	r3, [pc, #188]	@ (8005e88 <force_motor_movement+0x21c>)
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	2304      	movs	r3, #4
 8005dd0:	2100      	movs	r1, #0
 8005dd2:	f246 0081 	movw	r0, #24705	@ 0x6081
 8005dd6:	f7ff fc33 	bl	8005640 <epos4_send_sdo_write>

            // Move to next state with minimal delay
            current_state = STATE_WAIT_PARAMS;
 8005dda:	4b26      	ldr	r3, [pc, #152]	@ (8005e74 <force_motor_movement+0x208>)
 8005ddc:	2209      	movs	r2, #9
 8005dde:	701a      	strb	r2, [r3, #0]
            last_state_change = current_time;
 8005de0:	4a25      	ldr	r2, [pc, #148]	@ (8005e78 <force_motor_movement+0x20c>)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	6013      	str	r3, [r2, #0]
            break;
 8005de6:	e03c      	b.n	8005e62 <force_motor_movement+0x1f6>

        case STATE_WAIT_PARAMS:
            // Check if enough time has passed before next command
            if (current_time - last_state_change >= STATE_TRANSITION_DELAY) {
 8005de8:	4b23      	ldr	r3, [pc, #140]	@ (8005e78 <force_motor_movement+0x20c>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	68fa      	ldr	r2, [r7, #12]
 8005dee:	1ad3      	subs	r3, r2, r3
 8005df0:	68ba      	ldr	r2, [r7, #8]
 8005df2:	429a      	cmp	r2, r3
 8005df4:	d834      	bhi.n	8005e60 <force_motor_movement+0x1f4>
                current_state = STATE_SET_POSITION;
 8005df6:	4b1f      	ldr	r3, [pc, #124]	@ (8005e74 <force_motor_movement+0x208>)
 8005df8:	220a      	movs	r2, #10
 8005dfa:	701a      	strb	r2, [r3, #0]
                last_state_change = current_time;
 8005dfc:	4a1e      	ldr	r2, [pc, #120]	@ (8005e78 <force_motor_movement+0x20c>)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6013      	str	r3, [r2, #0]
            }
            break;
 8005e02:	e02d      	b.n	8005e60 <force_motor_movement+0x1f4>

        case STATE_SET_POSITION:
            // Set target position
            printf("Setting target position: %ld\n", (long)position);
 8005e04:	6879      	ldr	r1, [r7, #4]
 8005e06:	4824      	ldr	r0, [pc, #144]	@ (8005e98 <force_motor_movement+0x22c>)
 8005e08:	f7fc fdfd 	bl	8002a06 <printf>
            epos4_send_sdo_write(0x607A, 0x00, position, 4);
 8005e0c:	687a      	ldr	r2, [r7, #4]
 8005e0e:	2304      	movs	r3, #4
 8005e10:	2100      	movs	r1, #0
 8005e12:	f246 007a 	movw	r0, #24698	@ 0x607a
 8005e16:	f7ff fc13 	bl	8005640 <epos4_send_sdo_write>

            // Move to next state
            current_state = STATE_APPLY_POSITION;
 8005e1a:	4b16      	ldr	r3, [pc, #88]	@ (8005e74 <force_motor_movement+0x208>)
 8005e1c:	220b      	movs	r2, #11
 8005e1e:	701a      	strb	r2, [r3, #0]
            last_state_change = current_time;
 8005e20:	4a15      	ldr	r2, [pc, #84]	@ (8005e78 <force_motor_movement+0x20c>)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	6013      	str	r3, [r2, #0]
            break;
 8005e26:	e01c      	b.n	8005e62 <force_motor_movement+0x1f6>

        case STATE_APPLY_POSITION:
            // Send control word with bit 4 set (new position trigger)
            // This is CRITICAL - bit 4 must be set to trigger the move!
            printf("Triggering position movement\n");
 8005e28:	481c      	ldr	r0, [pc, #112]	@ (8005e9c <force_motor_movement+0x230>)
 8005e2a:	f009 fc5b 	bl	800f6e4 <puts>
            epos4_send_sdo_write(0x6040, 0x00, 0x0000001F, 2); // 0x000F with bit 4 set
 8005e2e:	2302      	movs	r3, #2
 8005e30:	221f      	movs	r2, #31
 8005e32:	2100      	movs	r1, #0
 8005e34:	f246 0040 	movw	r0, #24640	@ 0x6040
 8005e38:	f7ff fc02 	bl	8005640 <epos4_send_sdo_write>

            // Motor is now moving - process is complete
            current_state = STATE_COMPLETE;
 8005e3c:	4b0d      	ldr	r3, [pc, #52]	@ (8005e74 <force_motor_movement+0x208>)
 8005e3e:	220c      	movs	r2, #12
 8005e40:	701a      	strb	r2, [r3, #0]
            last_state_change = current_time;
 8005e42:	4a0d      	ldr	r2, [pc, #52]	@ (8005e78 <force_motor_movement+0x20c>)
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	6013      	str	r3, [r2, #0]
            break;
 8005e48:	e00b      	b.n	8005e62 <force_motor_movement+0x1f6>

        case STATE_COMPLETE:
            // Reset state machine for next movement
            current_state = STATE_INIT;
 8005e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8005e74 <force_motor_movement+0x208>)
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	701a      	strb	r2, [r3, #0]
            return 1; // Success
 8005e50:	2301      	movs	r3, #1
 8005e52:	e007      	b.n	8005e64 <force_motor_movement+0x1f8>
            break;
 8005e54:	bf00      	nop
 8005e56:	e004      	b.n	8005e62 <force_motor_movement+0x1f6>
            break;
 8005e58:	bf00      	nop
 8005e5a:	e002      	b.n	8005e62 <force_motor_movement+0x1f6>
            break;
 8005e5c:	bf00      	nop
 8005e5e:	e000      	b.n	8005e62 <force_motor_movement+0x1f6>
            break;
 8005e60:	bf00      	nop
    }
    
    // Still in progress
    return 2;
 8005e62:	2302      	movs	r3, #2
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3710      	adds	r7, #16
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	20005b18 	.word	0x20005b18
 8005e70:	08010ff0 	.word	0x08010ff0
 8005e74:	20005b1c 	.word	0x20005b1c
 8005e78:	20005b20 	.word	0x20005b20
 8005e7c:	08011024 	.word	0x08011024
 8005e80:	08011040 	.word	0x08011040
 8005e84:	0801106c 	.word	0x0801106c
 8005e88:	2000190c 	.word	0x2000190c
 8005e8c:	20001910 	.word	0x20001910
 8005e90:	20001914 	.word	0x20001914
 8005e94:	08011090 	.word	0x08011090
 8005e98:	080110c4 	.word	0x080110c4
 8005e9c:	080110e4 	.word	0x080110e4

08005ea0 <wait_for_tx_complete>:
/**
 * Helper function to ensure CAN buffer isn't overwhelmed
 * @param timeout_ms Maximum time to wait in milliseconds
 * @return true if a TX mailbox is available, false if timed out
 */
bool wait_for_tx_complete(uint32_t timeout_ms) {
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
    uint32_t start_time = HAL_GetTick();
 8005ea8:	f000 fccc 	bl	8006844 <HAL_GetTick>
 8005eac:	60f8      	str	r0, [r7, #12]
    // Wait until at least one TX mailbox is free or timeout occurs
    while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0 && 
 8005eae:	e007      	b.n	8005ec0 <wait_for_tx_complete+0x20>
            HAL_GetTick() - start_time < timeout_ms) {
        // Keep processing received messages while waiting
        processTxRxOnce(&canard, 0);
 8005eb0:	2100      	movs	r1, #0
 8005eb2:	4811      	ldr	r0, [pc, #68]	@ (8005ef8 <wait_for_tx_complete+0x58>)
 8005eb4:	f7fd fcb6 	bl	8003824 <processTxRxOnce>
        // Keep watchdog happy
        IWDG->KR = 0xAAAA;
 8005eb8:	4b10      	ldr	r3, [pc, #64]	@ (8005efc <wait_for_tx_complete+0x5c>)
 8005eba:	f64a 22aa 	movw	r2, #43690	@ 0xaaaa
 8005ebe:	601a      	str	r2, [r3, #0]
    while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0 && 
 8005ec0:	480f      	ldr	r0, [pc, #60]	@ (8005f00 <wait_for_tx_complete+0x60>)
 8005ec2:	f000 ffdf 	bl	8006e84 <HAL_CAN_GetTxMailboxesFreeLevel>
 8005ec6:	4603      	mov	r3, r0
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d107      	bne.n	8005edc <wait_for_tx_complete+0x3c>
            HAL_GetTick() - start_time < timeout_ms) {
 8005ecc:	f000 fcba 	bl	8006844 <HAL_GetTick>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	1ad3      	subs	r3, r2, r3
    while (HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) == 0 && 
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	429a      	cmp	r2, r3
 8005eda:	d8e9      	bhi.n	8005eb0 <wait_for_tx_complete+0x10>
    }
    return HAL_CAN_GetTxMailboxesFreeLevel(&hcan1) > 0;
 8005edc:	4808      	ldr	r0, [pc, #32]	@ (8005f00 <wait_for_tx_complete+0x60>)
 8005ede:	f000 ffd1 	bl	8006e84 <HAL_CAN_GetTxMailboxesFreeLevel>
 8005ee2:	4603      	mov	r3, r0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	bf14      	ite	ne
 8005ee8:	2301      	movne	r3, #1
 8005eea:	2300      	moveq	r3, #0
 8005eec:	b2db      	uxtb	r3, r3
}
 8005eee:	4618      	mov	r0, r3
 8005ef0:	3710      	adds	r7, #16
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	bd80      	pop	{r7, pc}
 8005ef6:	bf00      	nop
 8005ef8:	20005aa0 	.word	0x20005aa0
 8005efc:	40003000 	.word	0x40003000
 8005f00:	200019d0 	.word	0x200019d0

08005f04 <check_epos4_status>:
    
    
}

// Add this function to check EPOS4 status
void check_epos4_status(void) {
 8005f04:	b580      	push	{r7, lr}
 8005f06:	b08a      	sub	sp, #40	@ 0x28
 8005f08:	af00      	add	r7, sp, #0
    // Create message to read statusword
    CAN_TxHeaderTypeDef tx_header;
    uint8_t tx_data[8] = {0};
 8005f0a:	f107 0308 	add.w	r3, r7, #8
 8005f0e:	2200      	movs	r2, #0
 8005f10:	601a      	str	r2, [r3, #0]
 8005f12:	605a      	str	r2, [r3, #4]
    uint32_t tx_mailbox;
    
    printf("STATUS_DEBUG: Requesting EPOS4 statusword\n");
 8005f14:	4829      	ldr	r0, [pc, #164]	@ (8005fbc <check_epos4_status+0xb8>)
 8005f16:	f009 fbe5 	bl	800f6e4 <puts>
    
    // Configure header for SDO message
    tx_header.StdId = 0x600 + EPOS4_NODE_ID;
 8005f1a:	f240 6301 	movw	r3, #1537	@ 0x601
 8005f1e:	613b      	str	r3, [r7, #16]
    tx_header.ExtId = 0;
 8005f20:	2300      	movs	r3, #0
 8005f22:	617b      	str	r3, [r7, #20]
    tx_header.IDE = CAN_ID_STD;
 8005f24:	2300      	movs	r3, #0
 8005f26:	61bb      	str	r3, [r7, #24]
    tx_header.RTR = CAN_RTR_DATA;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	61fb      	str	r3, [r7, #28]
    tx_header.DLC = 8;
 8005f2c:	2308      	movs	r3, #8
 8005f2e:	623b      	str	r3, [r7, #32]
    tx_header.TransmitGlobalTime = DISABLE;
 8005f30:	2300      	movs	r3, #0
 8005f32:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    
    // Request statusword (0x6041)
    tx_data[0] = 0x40;  // Read command
 8005f36:	2340      	movs	r3, #64	@ 0x40
 8005f38:	723b      	strb	r3, [r7, #8]
    tx_data[1] = 0x41;  // Index low byte
 8005f3a:	2341      	movs	r3, #65	@ 0x41
 8005f3c:	727b      	strb	r3, [r7, #9]
    tx_data[2] = 0x60;  // Index high byte
 8005f3e:	2360      	movs	r3, #96	@ 0x60
 8005f40:	72bb      	strb	r3, [r7, #10]
    tx_data[3] = 0x00;  // Subindex
 8005f42:	2300      	movs	r3, #0
 8005f44:	72fb      	strb	r3, [r7, #11]
    tx_data[4] = 0x00;
 8005f46:	2300      	movs	r3, #0
 8005f48:	733b      	strb	r3, [r7, #12]
    tx_data[5] = 0x00;
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	737b      	strb	r3, [r7, #13]
    tx_data[6] = 0x00;
 8005f4e:	2300      	movs	r3, #0
 8005f50:	73bb      	strb	r3, [r7, #14]
    tx_data[7] = 0x00;
 8005f52:	2300      	movs	r3, #0
 8005f54:	73fb      	strb	r3, [r7, #15]
    
    // Send the request
    HAL_CAN_AddTxMessage(&hcan1, &tx_header, tx_data, &tx_mailbox);
 8005f56:	1d3b      	adds	r3, r7, #4
 8005f58:	f107 0208 	add.w	r2, r7, #8
 8005f5c:	f107 0110 	add.w	r1, r7, #16
 8005f60:	4817      	ldr	r0, [pc, #92]	@ (8005fc0 <check_epos4_status+0xbc>)
 8005f62:	f000 febf 	bl	8006ce4 <HAL_CAN_AddTxMessage>
    
    // Allow time for response
    
    // Process any CAN messages
    processTxRxOnce(&canard, 10);
 8005f66:	210a      	movs	r1, #10
 8005f68:	4816      	ldr	r0, [pc, #88]	@ (8005fc4 <check_epos4_status+0xc0>)
 8005f6a:	f7fd fc5b 	bl	8003824 <processTxRxOnce>
    
    // Also request current position
    printf("STATUS_DEBUG: Requesting current position\n");
 8005f6e:	4816      	ldr	r0, [pc, #88]	@ (8005fc8 <check_epos4_status+0xc4>)
 8005f70:	f009 fbb8 	bl	800f6e4 <puts>
    tx_data[0] = 0x40;  // Read command
 8005f74:	2340      	movs	r3, #64	@ 0x40
 8005f76:	723b      	strb	r3, [r7, #8]
    tx_data[1] = 0x64;  // Index low byte of 0x6064 (position actual value)
 8005f78:	2364      	movs	r3, #100	@ 0x64
 8005f7a:	727b      	strb	r3, [r7, #9]
    tx_data[2] = 0x60;  // Index high byte
 8005f7c:	2360      	movs	r3, #96	@ 0x60
 8005f7e:	72bb      	strb	r3, [r7, #10]
    tx_data[3] = 0x00;  // Subindex
 8005f80:	2300      	movs	r3, #0
 8005f82:	72fb      	strb	r3, [r7, #11]
    tx_data[4] = 0x00;
 8005f84:	2300      	movs	r3, #0
 8005f86:	733b      	strb	r3, [r7, #12]
    tx_data[5] = 0x00;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	737b      	strb	r3, [r7, #13]
    tx_data[6] = 0x00;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	73bb      	strb	r3, [r7, #14]
    tx_data[7] = 0x00;
 8005f90:	2300      	movs	r3, #0
 8005f92:	73fb      	strb	r3, [r7, #15]
    
    // Send the request
    HAL_CAN_AddTxMessage(&hcan1, &tx_header, tx_data, &tx_mailbox);
 8005f94:	1d3b      	adds	r3, r7, #4
 8005f96:	f107 0208 	add.w	r2, r7, #8
 8005f9a:	f107 0110 	add.w	r1, r7, #16
 8005f9e:	4808      	ldr	r0, [pc, #32]	@ (8005fc0 <check_epos4_status+0xbc>)
 8005fa0:	f000 fea0 	bl	8006ce4 <HAL_CAN_AddTxMessage>
    
    // Allow time for response
    
    // Process any CAN messages
    processTxRxOnce(&canard, 10);
 8005fa4:	210a      	movs	r1, #10
 8005fa6:	4807      	ldr	r0, [pc, #28]	@ (8005fc4 <check_epos4_status+0xc0>)
 8005fa8:	f7fd fc3c 	bl	8003824 <processTxRxOnce>
    
    printf("STATUS_DEBUG: Status check complete\n");
 8005fac:	4807      	ldr	r0, [pc, #28]	@ (8005fcc <check_epos4_status+0xc8>)
 8005fae:	f009 fb99 	bl	800f6e4 <puts>
}
 8005fb2:	bf00      	nop
 8005fb4:	3728      	adds	r7, #40	@ 0x28
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	bf00      	nop
 8005fbc:	08011124 	.word	0x08011124
 8005fc0:	200019d0 	.word	0x200019d0
 8005fc4:	20005aa0 	.word	0x20005aa0
 8005fc8:	08011150 	.word	0x08011150
 8005fcc:	0801117c 	.word	0x0801117c

08005fd0 <save_position_to_flash>:

/**
 * Save current motor position to flash memory to maintain position through power cycles
 * @param position Current motor position to save
 */
void save_position_to_flash(int32_t position) {
 8005fd0:	b5b0      	push	{r4, r5, r7, lr}
 8005fd2:	b08a      	sub	sp, #40	@ 0x28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
    // First make sure we have valid position
    if (position < minPosition - 10000 || position > maxPosition + 10000) {
 8005fd8:	4b3d      	ldr	r3, [pc, #244]	@ (80060d0 <save_position_to_flash+0x100>)
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8005fe0:	3b10      	subs	r3, #16
 8005fe2:	687a      	ldr	r2, [r7, #4]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	db07      	blt.n	8005ff8 <save_position_to_flash+0x28>
 8005fe8:	4b3a      	ldr	r3, [pc, #232]	@ (80060d4 <save_position_to_flash+0x104>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8005ff0:	3310      	adds	r3, #16
 8005ff2:	687a      	ldr	r2, [r7, #4]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	dd04      	ble.n	8006002 <save_position_to_flash+0x32>
        printf("Invalid position for saving: %ld\n", (long)position);
 8005ff8:	6879      	ldr	r1, [r7, #4]
 8005ffa:	4837      	ldr	r0, [pc, #220]	@ (80060d8 <save_position_to_flash+0x108>)
 8005ffc:	f7fc fd03 	bl	8002a06 <printf>
        return;
 8006000:	e05d      	b.n	80060be <save_position_to_flash+0xee>
    }

    FLASH_EraseInitTypeDef EraseInit;
    uint32_t SectorError = 0;
 8006002:	2300      	movs	r3, #0
 8006004:	60fb      	str	r3, [r7, #12]
    HAL_StatusTypeDef status;

    // Unlock flash
    HAL_FLASH_Unlock();
 8006006:	f001 fc6d 	bl	80078e4 <HAL_FLASH_Unlock>
    
    // Erase the sector
    EraseInit.TypeErase = FLASH_TYPEERASE_SECTORS;
 800600a:	2300      	movs	r3, #0
 800600c:	613b      	str	r3, [r7, #16]
    EraseInit.Sector = FLASH_SECTOR_POSITION;
 800600e:	230b      	movs	r3, #11
 8006010:	61bb      	str	r3, [r7, #24]
    EraseInit.NbSectors = 1;
 8006012:	2301      	movs	r3, #1
 8006014:	61fb      	str	r3, [r7, #28]
    EraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 8006016:	2302      	movs	r3, #2
 8006018:	623b      	str	r3, [r7, #32]
    
    printf("Saving position %ld to flash...\n", (long)position);
 800601a:	6879      	ldr	r1, [r7, #4]
 800601c:	482f      	ldr	r0, [pc, #188]	@ (80060dc <save_position_to_flash+0x10c>)
 800601e:	f7fc fcf2 	bl	8002a06 <printf>
    
    status = HAL_FLASHEx_Erase(&EraseInit, &SectorError);
 8006022:	f107 020c 	add.w	r2, r7, #12
 8006026:	f107 0310 	add.w	r3, r7, #16
 800602a:	4611      	mov	r1, r2
 800602c:	4618      	mov	r0, r3
 800602e:	f001 fdbb 	bl	8007ba8 <HAL_FLASHEx_Erase>
 8006032:	4603      	mov	r3, r0
 8006034:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status != HAL_OK) {
 8006038:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800603c:	2b00      	cmp	r3, #0
 800603e:	d008      	beq.n	8006052 <save_position_to_flash+0x82>
        printf("Flash erase failed: %d\n", (int)status);
 8006040:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006044:	4619      	mov	r1, r3
 8006046:	4826      	ldr	r0, [pc, #152]	@ (80060e0 <save_position_to_flash+0x110>)
 8006048:	f7fc fcdd 	bl	8002a06 <printf>
        HAL_FLASH_Lock();
 800604c:	f001 fc6c 	bl	8007928 <HAL_FLASH_Lock>
        return;
 8006050:	e035      	b.n	80060be <save_position_to_flash+0xee>
    }
    
    // Write magic number first (for validation)
    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, POSITION_FLASH_ADDRESS, POSITION_MAGIC_NUMBER);
 8006052:	a31d      	add	r3, pc, #116	@ (adr r3, 80060c8 <save_position_to_flash+0xf8>)
 8006054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006058:	4922      	ldr	r1, [pc, #136]	@ (80060e4 <save_position_to_flash+0x114>)
 800605a:	2002      	movs	r0, #2
 800605c:	f001 fbee 	bl	800783c <HAL_FLASH_Program>
 8006060:	4603      	mov	r3, r0
 8006062:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status != HAL_OK) {
 8006066:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800606a:	2b00      	cmp	r3, #0
 800606c:	d008      	beq.n	8006080 <save_position_to_flash+0xb0>
        printf("Magic number write failed: %d\n", (int)status);
 800606e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006072:	4619      	mov	r1, r3
 8006074:	481c      	ldr	r0, [pc, #112]	@ (80060e8 <save_position_to_flash+0x118>)
 8006076:	f7fc fcc6 	bl	8002a06 <printf>
        HAL_FLASH_Lock();
 800607a:	f001 fc55 	bl	8007928 <HAL_FLASH_Lock>
        return;
 800607e:	e01e      	b.n	80060be <save_position_to_flash+0xee>
    }
    
    // Then write the position
    status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, POSITION_FLASH_ADDRESS + 4, (uint32_t)position);
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	461c      	mov	r4, r3
 8006086:	4615      	mov	r5, r2
 8006088:	4622      	mov	r2, r4
 800608a:	462b      	mov	r3, r5
 800608c:	4917      	ldr	r1, [pc, #92]	@ (80060ec <save_position_to_flash+0x11c>)
 800608e:	2002      	movs	r0, #2
 8006090:	f001 fbd4 	bl	800783c <HAL_FLASH_Program>
 8006094:	4603      	mov	r3, r0
 8006096:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    if (status != HAL_OK) {
 800609a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d008      	beq.n	80060b4 <save_position_to_flash+0xe4>
        printf("Position write failed: %d\n", (int)status);
 80060a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80060a6:	4619      	mov	r1, r3
 80060a8:	4811      	ldr	r0, [pc, #68]	@ (80060f0 <save_position_to_flash+0x120>)
 80060aa:	f7fc fcac 	bl	8002a06 <printf>
        HAL_FLASH_Lock();
 80060ae:	f001 fc3b 	bl	8007928 <HAL_FLASH_Lock>
        return;
 80060b2:	e004      	b.n	80060be <save_position_to_flash+0xee>
    }
    
    // Lock flash
    HAL_FLASH_Lock();
 80060b4:	f001 fc38 	bl	8007928 <HAL_FLASH_Lock>
    printf("Position saved to flash successfully\n");
 80060b8:	480e      	ldr	r0, [pc, #56]	@ (80060f4 <save_position_to_flash+0x124>)
 80060ba:	f009 fb13 	bl	800f6e4 <puts>
}
 80060be:	3728      	adds	r7, #40	@ 0x28
 80060c0:	46bd      	mov	sp, r7
 80060c2:	bdb0      	pop	{r4, r5, r7, pc}
 80060c4:	f3af 8000 	nop.w
 80060c8:	eabf3412 	.word	0xeabf3412
 80060cc:	00000000 	.word	0x00000000
 80060d0:	20001908 	.word	0x20001908
 80060d4:	20001900 	.word	0x20001900
 80060d8:	080111a0 	.word	0x080111a0
 80060dc:	080111c4 	.word	0x080111c4
 80060e0:	080111e8 	.word	0x080111e8
 80060e4:	080e0000 	.word	0x080e0000
 80060e8:	08011200 	.word	0x08011200
 80060ec:	080e0004 	.word	0x080e0004
 80060f0:	08011220 	.word	0x08011220
 80060f4:	0801123c 	.word	0x0801123c

080060f8 <restore_position_from_flash>:

/**
 * Restore motor position from flash memory on startup
 * @return true if position was restored successfully
 */
bool restore_position_from_flash(void) {
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b082      	sub	sp, #8
 80060fc:	af00      	add	r7, sp, #0
    // Check if there is valid position data in flash
    uint32_t magic = *(__IO uint32_t*)POSITION_FLASH_ADDRESS;
 80060fe:	4b1f      	ldr	r3, [pc, #124]	@ (800617c <restore_position_from_flash+0x84>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	607b      	str	r3, [r7, #4]
    
    // Verify magic number
    if (magic != POSITION_MAGIC_NUMBER) {
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	4a1e      	ldr	r2, [pc, #120]	@ (8006180 <restore_position_from_flash+0x88>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d005      	beq.n	8006118 <restore_position_from_flash+0x20>
        printf("No valid position data in flash (magic=%08lx)\n", (unsigned long)magic);
 800610c:	6879      	ldr	r1, [r7, #4]
 800610e:	481d      	ldr	r0, [pc, #116]	@ (8006184 <restore_position_from_flash+0x8c>)
 8006110:	f7fc fc79 	bl	8002a06 <printf>
        return false;
 8006114:	2300      	movs	r3, #0
 8006116:	e02d      	b.n	8006174 <restore_position_from_flash+0x7c>
    }
    
    // Read the position value
    int32_t saved_position = *(__IO uint32_t*)(POSITION_FLASH_ADDRESS + 4);
 8006118:	4b1b      	ldr	r3, [pc, #108]	@ (8006188 <restore_position_from_flash+0x90>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	603b      	str	r3, [r7, #0]
    
    // Validate that the position is within reasonable bounds
    if (saved_position < minPosition - 10000 || saved_position > maxPosition + 10000) {
 800611e:	4b1b      	ldr	r3, [pc, #108]	@ (800618c <restore_position_from_flash+0x94>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f5a3 531c 	sub.w	r3, r3, #9984	@ 0x2700
 8006126:	3b10      	subs	r3, #16
 8006128:	683a      	ldr	r2, [r7, #0]
 800612a:	429a      	cmp	r2, r3
 800612c:	db07      	blt.n	800613e <restore_position_from_flash+0x46>
 800612e:	4b18      	ldr	r3, [pc, #96]	@ (8006190 <restore_position_from_flash+0x98>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f503 531c 	add.w	r3, r3, #9984	@ 0x2700
 8006136:	3310      	adds	r3, #16
 8006138:	683a      	ldr	r2, [r7, #0]
 800613a:	429a      	cmp	r2, r3
 800613c:	dd05      	ble.n	800614a <restore_position_from_flash+0x52>
        printf("Saved position out of range: %ld\n", (long)saved_position);
 800613e:	6839      	ldr	r1, [r7, #0]
 8006140:	4814      	ldr	r0, [pc, #80]	@ (8006194 <restore_position_from_flash+0x9c>)
 8006142:	f7fc fc60 	bl	8002a06 <printf>
        return false;
 8006146:	2300      	movs	r3, #0
 8006148:	e014      	b.n	8006174 <restore_position_from_flash+0x7c>
    }
    
    printf("Restoring saved position: %ld\n", (long)saved_position);
 800614a:	6839      	ldr	r1, [r7, #0]
 800614c:	4812      	ldr	r0, [pc, #72]	@ (8006198 <restore_position_from_flash+0xa0>)
 800614e:	f7fc fc5a 	bl	8002a06 <printf>
    
    // Set the EPOS4 position counter to match the saved position
    // Using SDO write to object 0x2081 subindex 0 (position counter)
    epos4_send_sdo_write(0x2081, 0x00, saved_position, 4);
 8006152:	683a      	ldr	r2, [r7, #0]
 8006154:	2304      	movs	r3, #4
 8006156:	2100      	movs	r1, #0
 8006158:	f242 0081 	movw	r0, #8321	@ 0x2081
 800615c:	f7ff fa70 	bl	8005640 <epos4_send_sdo_write>
    HAL_Delay(100); // Wait for command to complete
 8006160:	2064      	movs	r0, #100	@ 0x64
 8006162:	f000 fb7b 	bl	800685c <HAL_Delay>
    
    // Important: Also update our internal position tracking
    targetPosition = saved_position;
 8006166:	4a0d      	ldr	r2, [pc, #52]	@ (800619c <restore_position_from_flash+0xa4>)
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	6013      	str	r3, [r2, #0]
    current_position = saved_position;
 800616c:	4a0c      	ldr	r2, [pc, #48]	@ (80061a0 <restore_position_from_flash+0xa8>)
 800616e:	683b      	ldr	r3, [r7, #0]
 8006170:	6013      	str	r3, [r2, #0]
    
    return true;
 8006172:	2301      	movs	r3, #1
}
 8006174:	4618      	mov	r0, r3
 8006176:	3708      	adds	r7, #8
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}
 800617c:	080e0000 	.word	0x080e0000
 8006180:	eabf3412 	.word	0xeabf3412
 8006184:	08011264 	.word	0x08011264
 8006188:	080e0004 	.word	0x080e0004
 800618c:	20001908 	.word	0x20001908
 8006190:	20001900 	.word	0x20001900
 8006194:	08011294 	.word	0x08011294
 8006198:	080112b8 	.word	0x080112b8
 800619c:	200019bc 	.word	0x200019bc
 80061a0:	20001a98 	.word	0x20001a98

080061a4 <periodic_position_save>:

/**
 * Periodically check if position has changed and save to flash if needed
 */
void periodic_position_save(void) {
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b082      	sub	sp, #8
 80061a8:	af00      	add	r7, sp, #0
    static uint32_t last_save_time = 0;
    static int32_t last_saved_position = 0;
    uint32_t current_time = HAL_GetTick();
 80061aa:	f000 fb4b 	bl	8006844 <HAL_GetTick>
 80061ae:	6078      	str	r0, [r7, #4]
    
    // Save position every 30 seconds if it changed significantly
    if (current_time - last_save_time > 30000) {
 80061b0:	4b11      	ldr	r3, [pc, #68]	@ (80061f8 <periodic_position_save+0x54>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	687a      	ldr	r2, [r7, #4]
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	f247 5230 	movw	r2, #30000	@ 0x7530
 80061bc:	4293      	cmp	r3, r2
 80061be:	d916      	bls.n	80061ee <periodic_position_save+0x4a>
        // Only save if position changed by more than 1000 steps
        if (abs(current_position - last_saved_position) > 1000) {
 80061c0:	4b0e      	ldr	r3, [pc, #56]	@ (80061fc <periodic_position_save+0x58>)
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	4b0e      	ldr	r3, [pc, #56]	@ (8006200 <periodic_position_save+0x5c>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	1ad3      	subs	r3, r2, r3
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	bfb8      	it	lt
 80061ce:	425b      	neglt	r3, r3
 80061d0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80061d4:	dd08      	ble.n	80061e8 <periodic_position_save+0x44>
            save_position_to_flash(current_position);
 80061d6:	4b09      	ldr	r3, [pc, #36]	@ (80061fc <periodic_position_save+0x58>)
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	4618      	mov	r0, r3
 80061dc:	f7ff fef8 	bl	8005fd0 <save_position_to_flash>
            last_saved_position = current_position;
 80061e0:	4b06      	ldr	r3, [pc, #24]	@ (80061fc <periodic_position_save+0x58>)
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	4a06      	ldr	r2, [pc, #24]	@ (8006200 <periodic_position_save+0x5c>)
 80061e6:	6013      	str	r3, [r2, #0]
        }
        last_save_time = current_time;
 80061e8:	4a03      	ldr	r2, [pc, #12]	@ (80061f8 <periodic_position_save+0x54>)
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	6013      	str	r3, [r2, #0]
    }
}
 80061ee:	bf00      	nop
 80061f0:	3708      	adds	r7, #8
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	20005b24 	.word	0x20005b24
 80061fc:	20001a98 	.word	0x20001a98
 8006200:	20005b28 	.word	0x20005b28

08006204 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006204:	b580      	push	{r7, lr}
 8006206:	b082      	sub	sp, #8
 8006208:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800620a:	2300      	movs	r3, #0
 800620c:	607b      	str	r3, [r7, #4]
 800620e:	4b10      	ldr	r3, [pc, #64]	@ (8006250 <HAL_MspInit+0x4c>)
 8006210:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006212:	4a0f      	ldr	r2, [pc, #60]	@ (8006250 <HAL_MspInit+0x4c>)
 8006214:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8006218:	6453      	str	r3, [r2, #68]	@ 0x44
 800621a:	4b0d      	ldr	r3, [pc, #52]	@ (8006250 <HAL_MspInit+0x4c>)
 800621c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800621e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006222:	607b      	str	r3, [r7, #4]
 8006224:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006226:	2300      	movs	r3, #0
 8006228:	603b      	str	r3, [r7, #0]
 800622a:	4b09      	ldr	r3, [pc, #36]	@ (8006250 <HAL_MspInit+0x4c>)
 800622c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800622e:	4a08      	ldr	r2, [pc, #32]	@ (8006250 <HAL_MspInit+0x4c>)
 8006230:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006234:	6413      	str	r3, [r2, #64]	@ 0x40
 8006236:	4b06      	ldr	r3, [pc, #24]	@ (8006250 <HAL_MspInit+0x4c>)
 8006238:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800623a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800623e:	603b      	str	r3, [r7, #0]
 8006240:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8006242:	2007      	movs	r0, #7
 8006244:	f001 fab8 	bl	80077b8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006248:	bf00      	nop
 800624a:	3708      	adds	r7, #8
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}
 8006250:	40023800 	.word	0x40023800

08006254 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b08c      	sub	sp, #48	@ 0x30
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800625c:	f107 031c 	add.w	r3, r7, #28
 8006260:	2200      	movs	r2, #0
 8006262:	601a      	str	r2, [r3, #0]
 8006264:	605a      	str	r2, [r3, #4]
 8006266:	609a      	str	r2, [r3, #8]
 8006268:	60da      	str	r2, [r3, #12]
 800626a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a45      	ldr	r2, [pc, #276]	@ (8006388 <HAL_CAN_MspInit+0x134>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d135      	bne.n	80062e2 <HAL_CAN_MspInit+0x8e>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8006276:	2300      	movs	r3, #0
 8006278:	61bb      	str	r3, [r7, #24]
 800627a:	4b44      	ldr	r3, [pc, #272]	@ (800638c <HAL_CAN_MspInit+0x138>)
 800627c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800627e:	4a43      	ldr	r2, [pc, #268]	@ (800638c <HAL_CAN_MspInit+0x138>)
 8006280:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8006284:	6413      	str	r3, [r2, #64]	@ 0x40
 8006286:	4b41      	ldr	r3, [pc, #260]	@ (800638c <HAL_CAN_MspInit+0x138>)
 8006288:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800628a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800628e:	61bb      	str	r3, [r7, #24]
 8006290:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006292:	2300      	movs	r3, #0
 8006294:	617b      	str	r3, [r7, #20]
 8006296:	4b3d      	ldr	r3, [pc, #244]	@ (800638c <HAL_CAN_MspInit+0x138>)
 8006298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800629a:	4a3c      	ldr	r2, [pc, #240]	@ (800638c <HAL_CAN_MspInit+0x138>)
 800629c:	f043 0302 	orr.w	r3, r3, #2
 80062a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80062a2:	4b3a      	ldr	r3, [pc, #232]	@ (800638c <HAL_CAN_MspInit+0x138>)
 80062a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80062a6:	f003 0302 	and.w	r3, r3, #2
 80062aa:	617b      	str	r3, [r7, #20]
 80062ac:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80062ae:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80062b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80062b4:	2302      	movs	r3, #2
 80062b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062b8:	2300      	movs	r3, #0
 80062ba:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062bc:	2303      	movs	r3, #3
 80062be:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80062c0:	2309      	movs	r3, #9
 80062c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062c4:	f107 031c 	add.w	r3, r7, #28
 80062c8:	4619      	mov	r1, r3
 80062ca:	4831      	ldr	r0, [pc, #196]	@ (8006390 <HAL_CAN_MspInit+0x13c>)
 80062cc:	f001 fd8e 	bl	8007dec <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 80062d0:	2200      	movs	r2, #0
 80062d2:	2100      	movs	r1, #0
 80062d4:	2014      	movs	r0, #20
 80062d6:	f001 fa7a 	bl	80077ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80062da:	2014      	movs	r0, #20
 80062dc:	f001 fa93 	bl	8007806 <HAL_NVIC_EnableIRQ>
    
    /* USER CODE BEGIN CAN2_MspInit 1 */
    printf("HAL_CAN_MspInit: CAN2 initialization complete\n");
    /* USER CODE END CAN2_MspInit 1 */
  }
}
 80062e0:	e04d      	b.n	800637e <HAL_CAN_MspInit+0x12a>
  else if(hcan->Instance==CAN2)
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a2b      	ldr	r2, [pc, #172]	@ (8006394 <HAL_CAN_MspInit+0x140>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d148      	bne.n	800637e <HAL_CAN_MspInit+0x12a>
    printf("HAL_CAN_MspInit: Configuring CAN2 pins and clocks\n");
 80062ec:	482a      	ldr	r0, [pc, #168]	@ (8006398 <HAL_CAN_MspInit+0x144>)
 80062ee:	f009 f9f9 	bl	800f6e4 <puts>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80062f2:	2300      	movs	r3, #0
 80062f4:	613b      	str	r3, [r7, #16]
 80062f6:	4b25      	ldr	r3, [pc, #148]	@ (800638c <HAL_CAN_MspInit+0x138>)
 80062f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062fa:	4a24      	ldr	r2, [pc, #144]	@ (800638c <HAL_CAN_MspInit+0x138>)
 80062fc:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8006300:	6413      	str	r3, [r2, #64]	@ 0x40
 8006302:	4b22      	ldr	r3, [pc, #136]	@ (800638c <HAL_CAN_MspInit+0x138>)
 8006304:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006306:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800630a:	613b      	str	r3, [r7, #16]
 800630c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_CAN1_CLK_ENABLE();
 800630e:	2300      	movs	r3, #0
 8006310:	60fb      	str	r3, [r7, #12]
 8006312:	4b1e      	ldr	r3, [pc, #120]	@ (800638c <HAL_CAN_MspInit+0x138>)
 8006314:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006316:	4a1d      	ldr	r2, [pc, #116]	@ (800638c <HAL_CAN_MspInit+0x138>)
 8006318:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800631c:	6413      	str	r3, [r2, #64]	@ 0x40
 800631e:	4b1b      	ldr	r3, [pc, #108]	@ (800638c <HAL_CAN_MspInit+0x138>)
 8006320:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006322:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006326:	60fb      	str	r3, [r7, #12]
 8006328:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800632a:	2300      	movs	r3, #0
 800632c:	60bb      	str	r3, [r7, #8]
 800632e:	4b17      	ldr	r3, [pc, #92]	@ (800638c <HAL_CAN_MspInit+0x138>)
 8006330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006332:	4a16      	ldr	r2, [pc, #88]	@ (800638c <HAL_CAN_MspInit+0x138>)
 8006334:	f043 0302 	orr.w	r3, r3, #2
 8006338:	6313      	str	r3, [r2, #48]	@ 0x30
 800633a:	4b14      	ldr	r3, [pc, #80]	@ (800638c <HAL_CAN_MspInit+0x138>)
 800633c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800633e:	f003 0302 	and.w	r3, r3, #2
 8006342:	60bb      	str	r3, [r7, #8]
 8006344:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8006346:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800634a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800634c:	2302      	movs	r3, #2
 800634e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006350:	2300      	movs	r3, #0
 8006352:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006354:	2303      	movs	r3, #3
 8006356:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8006358:	2309      	movs	r3, #9
 800635a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800635c:	f107 031c 	add.w	r3, r7, #28
 8006360:	4619      	mov	r1, r3
 8006362:	480b      	ldr	r0, [pc, #44]	@ (8006390 <HAL_CAN_MspInit+0x13c>)
 8006364:	f001 fd42 	bl	8007dec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 0, 0);
 8006368:	2200      	movs	r2, #0
 800636a:	2100      	movs	r1, #0
 800636c:	2040      	movs	r0, #64	@ 0x40
 800636e:	f001 fa2e 	bl	80077ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8006372:	2040      	movs	r0, #64	@ 0x40
 8006374:	f001 fa47 	bl	8007806 <HAL_NVIC_EnableIRQ>
    printf("HAL_CAN_MspInit: CAN2 initialization complete\n");
 8006378:	4808      	ldr	r0, [pc, #32]	@ (800639c <HAL_CAN_MspInit+0x148>)
 800637a:	f009 f9b3 	bl	800f6e4 <puts>
}
 800637e:	bf00      	nop
 8006380:	3730      	adds	r7, #48	@ 0x30
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}
 8006386:	bf00      	nop
 8006388:	40006400 	.word	0x40006400
 800638c:	40023800 	.word	0x40023800
 8006390:	40020400 	.word	0x40020400
 8006394:	40006800 	.word	0x40006800
 8006398:	080112d8 	.word	0x080112d8
 800639c:	0801130c 	.word	0x0801130c

080063a0 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b08e      	sub	sp, #56	@ 0x38
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80063ac:	2200      	movs	r2, #0
 80063ae:	601a      	str	r2, [r3, #0]
 80063b0:	605a      	str	r2, [r3, #4]
 80063b2:	609a      	str	r2, [r3, #8]
 80063b4:	60da      	str	r2, [r3, #12]
 80063b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80063b8:	f107 0314 	add.w	r3, r7, #20
 80063bc:	2200      	movs	r2, #0
 80063be:	601a      	str	r2, [r3, #0]
 80063c0:	605a      	str	r2, [r3, #4]
 80063c2:	609a      	str	r2, [r3, #8]
 80063c4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	4a31      	ldr	r2, [pc, #196]	@ (8006490 <HAL_I2S_MspInit+0xf0>)
 80063cc:	4293      	cmp	r3, r2
 80063ce:	d15a      	bne.n	8006486 <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 80063d0:	2301      	movs	r3, #1
 80063d2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 80063d4:	23c0      	movs	r3, #192	@ 0xc0
 80063d6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80063d8:	2302      	movs	r3, #2
 80063da:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80063dc:	f107 0314 	add.w	r3, r7, #20
 80063e0:	4618      	mov	r0, r3
 80063e2:	f005 f90b 	bl	800b5fc <HAL_RCCEx_PeriphCLKConfig>
 80063e6:	4603      	mov	r3, r0
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d001      	beq.n	80063f0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80063ec:	f7fe f90c 	bl	8004608 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80063f0:	2300      	movs	r3, #0
 80063f2:	613b      	str	r3, [r7, #16]
 80063f4:	4b27      	ldr	r3, [pc, #156]	@ (8006494 <HAL_I2S_MspInit+0xf4>)
 80063f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063f8:	4a26      	ldr	r2, [pc, #152]	@ (8006494 <HAL_I2S_MspInit+0xf4>)
 80063fa:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80063fe:	6413      	str	r3, [r2, #64]	@ 0x40
 8006400:	4b24      	ldr	r3, [pc, #144]	@ (8006494 <HAL_I2S_MspInit+0xf4>)
 8006402:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006404:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006408:	613b      	str	r3, [r7, #16]
 800640a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800640c:	2300      	movs	r3, #0
 800640e:	60fb      	str	r3, [r7, #12]
 8006410:	4b20      	ldr	r3, [pc, #128]	@ (8006494 <HAL_I2S_MspInit+0xf4>)
 8006412:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006414:	4a1f      	ldr	r2, [pc, #124]	@ (8006494 <HAL_I2S_MspInit+0xf4>)
 8006416:	f043 0301 	orr.w	r3, r3, #1
 800641a:	6313      	str	r3, [r2, #48]	@ 0x30
 800641c:	4b1d      	ldr	r3, [pc, #116]	@ (8006494 <HAL_I2S_MspInit+0xf4>)
 800641e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006420:	f003 0301 	and.w	r3, r3, #1
 8006424:	60fb      	str	r3, [r7, #12]
 8006426:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006428:	2300      	movs	r3, #0
 800642a:	60bb      	str	r3, [r7, #8]
 800642c:	4b19      	ldr	r3, [pc, #100]	@ (8006494 <HAL_I2S_MspInit+0xf4>)
 800642e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006430:	4a18      	ldr	r2, [pc, #96]	@ (8006494 <HAL_I2S_MspInit+0xf4>)
 8006432:	f043 0304 	orr.w	r3, r3, #4
 8006436:	6313      	str	r3, [r2, #48]	@ 0x30
 8006438:	4b16      	ldr	r3, [pc, #88]	@ (8006494 <HAL_I2S_MspInit+0xf4>)
 800643a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800643c:	f003 0304 	and.w	r3, r3, #4
 8006440:	60bb      	str	r3, [r7, #8]
 8006442:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8006444:	2310      	movs	r3, #16
 8006446:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006448:	2302      	movs	r3, #2
 800644a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800644c:	2300      	movs	r3, #0
 800644e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006450:	2300      	movs	r3, #0
 8006452:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006454:	2306      	movs	r3, #6
 8006456:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8006458:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800645c:	4619      	mov	r1, r3
 800645e:	480e      	ldr	r0, [pc, #56]	@ (8006498 <HAL_I2S_MspInit+0xf8>)
 8006460:	f001 fcc4 	bl	8007dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8006464:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8006468:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800646a:	2302      	movs	r3, #2
 800646c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800646e:	2300      	movs	r3, #0
 8006470:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006472:	2300      	movs	r3, #0
 8006474:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8006476:	2306      	movs	r3, #6
 8006478:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800647a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800647e:	4619      	mov	r1, r3
 8006480:	4806      	ldr	r0, [pc, #24]	@ (800649c <HAL_I2S_MspInit+0xfc>)
 8006482:	f001 fcb3 	bl	8007dec <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 8006486:	bf00      	nop
 8006488:	3738      	adds	r7, #56	@ 0x38
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}
 800648e:	bf00      	nop
 8006490:	40003c00 	.word	0x40003c00
 8006494:	40023800 	.word	0x40023800
 8006498:	40020000 	.word	0x40020000
 800649c:	40020800 	.word	0x40020800

080064a0 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b08a      	sub	sp, #40	@ 0x28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064a8:	f107 0314 	add.w	r3, r7, #20
 80064ac:	2200      	movs	r2, #0
 80064ae:	601a      	str	r2, [r3, #0]
 80064b0:	605a      	str	r2, [r3, #4]
 80064b2:	609a      	str	r2, [r3, #8]
 80064b4:	60da      	str	r2, [r3, #12]
 80064b6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a19      	ldr	r2, [pc, #100]	@ (8006524 <HAL_SPI_MspInit+0x84>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d12b      	bne.n	800651a <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80064c2:	2300      	movs	r3, #0
 80064c4:	613b      	str	r3, [r7, #16]
 80064c6:	4b18      	ldr	r3, [pc, #96]	@ (8006528 <HAL_SPI_MspInit+0x88>)
 80064c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064ca:	4a17      	ldr	r2, [pc, #92]	@ (8006528 <HAL_SPI_MspInit+0x88>)
 80064cc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80064d0:	6453      	str	r3, [r2, #68]	@ 0x44
 80064d2:	4b15      	ldr	r3, [pc, #84]	@ (8006528 <HAL_SPI_MspInit+0x88>)
 80064d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80064d6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80064da:	613b      	str	r3, [r7, #16]
 80064dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064de:	2300      	movs	r3, #0
 80064e0:	60fb      	str	r3, [r7, #12]
 80064e2:	4b11      	ldr	r3, [pc, #68]	@ (8006528 <HAL_SPI_MspInit+0x88>)
 80064e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064e6:	4a10      	ldr	r2, [pc, #64]	@ (8006528 <HAL_SPI_MspInit+0x88>)
 80064e8:	f043 0301 	orr.w	r3, r3, #1
 80064ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80064ee:	4b0e      	ldr	r3, [pc, #56]	@ (8006528 <HAL_SPI_MspInit+0x88>)
 80064f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80064fa:	23e0      	movs	r3, #224	@ 0xe0
 80064fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064fe:	2302      	movs	r3, #2
 8006500:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006502:	2300      	movs	r3, #0
 8006504:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006506:	2300      	movs	r3, #0
 8006508:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800650a:	2305      	movs	r3, #5
 800650c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800650e:	f107 0314 	add.w	r3, r7, #20
 8006512:	4619      	mov	r1, r3
 8006514:	4805      	ldr	r0, [pc, #20]	@ (800652c <HAL_SPI_MspInit+0x8c>)
 8006516:	f001 fc69 	bl	8007dec <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800651a:	bf00      	nop
 800651c:	3728      	adds	r7, #40	@ 0x28
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	40013000 	.word	0x40013000
 8006528:	40023800 	.word	0x40023800
 800652c:	40020000 	.word	0x40020000

08006530 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006530:	b480      	push	{r7}
 8006532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006534:	bf00      	nop
 8006536:	e7fd      	b.n	8006534 <NMI_Handler+0x4>

08006538 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006538:	b480      	push	{r7}
 800653a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800653c:	bf00      	nop
 800653e:	e7fd      	b.n	800653c <HardFault_Handler+0x4>

08006540 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006540:	b480      	push	{r7}
 8006542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006544:	bf00      	nop
 8006546:	e7fd      	b.n	8006544 <MemManage_Handler+0x4>

08006548 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006548:	b480      	push	{r7}
 800654a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800654c:	bf00      	nop
 800654e:	e7fd      	b.n	800654c <BusFault_Handler+0x4>

08006550 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006550:	b480      	push	{r7}
 8006552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006554:	bf00      	nop
 8006556:	e7fd      	b.n	8006554 <UsageFault_Handler+0x4>

08006558 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006558:	b480      	push	{r7}
 800655a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800655c:	bf00      	nop
 800655e:	46bd      	mov	sp, r7
 8006560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006564:	4770      	bx	lr

08006566 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006566:	b480      	push	{r7}
 8006568:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800656a:	bf00      	nop
 800656c:	46bd      	mov	sp, r7
 800656e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006572:	4770      	bx	lr

08006574 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006574:	b480      	push	{r7}
 8006576:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006578:	bf00      	nop
 800657a:	46bd      	mov	sp, r7
 800657c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006580:	4770      	bx	lr

08006582 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006586:	f000 f949 	bl	800681c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800658a:	bf00      	nop
 800658c:	bd80      	pop	{r7, pc}
	...

08006590 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8006590:	b580      	push	{r7, lr}
 8006592:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8006594:	4802      	ldr	r0, [pc, #8]	@ (80065a0 <CAN1_RX0_IRQHandler+0x10>)
 8006596:	f000 fe1a 	bl	80071ce <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800659a:	bf00      	nop
 800659c:	bd80      	pop	{r7, pc}
 800659e:	bf00      	nop
 80065a0:	200019d0 	.word	0x200019d0

080065a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80065a8:	4802      	ldr	r0, [pc, #8]	@ (80065b4 <OTG_FS_IRQHandler+0x10>)
 80065aa:	f002 f8cf 	bl	800874c <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80065ae:	bf00      	nop
 80065b0:	bd80      	pop	{r7, pc}
 80065b2:	bf00      	nop
 80065b4:	20005f30 	.word	0x20005f30

080065b8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b086      	sub	sp, #24
 80065bc:	af00      	add	r7, sp, #0
 80065be:	60f8      	str	r0, [r7, #12]
 80065c0:	60b9      	str	r1, [r7, #8]
 80065c2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80065c4:	2300      	movs	r3, #0
 80065c6:	617b      	str	r3, [r7, #20]
 80065c8:	e00a      	b.n	80065e0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80065ca:	f3af 8000 	nop.w
 80065ce:	4601      	mov	r1, r0
 80065d0:	68bb      	ldr	r3, [r7, #8]
 80065d2:	1c5a      	adds	r2, r3, #1
 80065d4:	60ba      	str	r2, [r7, #8]
 80065d6:	b2ca      	uxtb	r2, r1
 80065d8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	3301      	adds	r3, #1
 80065de:	617b      	str	r3, [r7, #20]
 80065e0:	697a      	ldr	r2, [r7, #20]
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	429a      	cmp	r2, r3
 80065e6:	dbf0      	blt.n	80065ca <_read+0x12>
  }

  return len;
 80065e8:	687b      	ldr	r3, [r7, #4]
}
 80065ea:	4618      	mov	r0, r3
 80065ec:	3718      	adds	r7, #24
 80065ee:	46bd      	mov	sp, r7
 80065f0:	bd80      	pop	{r7, pc}

080065f2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80065f2:	b580      	push	{r7, lr}
 80065f4:	b086      	sub	sp, #24
 80065f6:	af00      	add	r7, sp, #0
 80065f8:	60f8      	str	r0, [r7, #12]
 80065fa:	60b9      	str	r1, [r7, #8]
 80065fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80065fe:	2300      	movs	r3, #0
 8006600:	617b      	str	r3, [r7, #20]
 8006602:	e009      	b.n	8006618 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	1c5a      	adds	r2, r3, #1
 8006608:	60ba      	str	r2, [r7, #8]
 800660a:	781b      	ldrb	r3, [r3, #0]
 800660c:	4618      	mov	r0, r3
 800660e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006612:	697b      	ldr	r3, [r7, #20]
 8006614:	3301      	adds	r3, #1
 8006616:	617b      	str	r3, [r7, #20]
 8006618:	697a      	ldr	r2, [r7, #20]
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	429a      	cmp	r2, r3
 800661e:	dbf1      	blt.n	8006604 <_write+0x12>
  }
  return len;
 8006620:	687b      	ldr	r3, [r7, #4]
}
 8006622:	4618      	mov	r0, r3
 8006624:	3718      	adds	r7, #24
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}

0800662a <_close>:

int _close(int file)
{
 800662a:	b480      	push	{r7}
 800662c:	b083      	sub	sp, #12
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8006632:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006636:	4618      	mov	r0, r3
 8006638:	370c      	adds	r7, #12
 800663a:	46bd      	mov	sp, r7
 800663c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006640:	4770      	bx	lr

08006642 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006642:	b480      	push	{r7}
 8006644:	b083      	sub	sp, #12
 8006646:	af00      	add	r7, sp, #0
 8006648:	6078      	str	r0, [r7, #4]
 800664a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006652:	605a      	str	r2, [r3, #4]
  return 0;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr

08006662 <_isatty>:

int _isatty(int file)
{
 8006662:	b480      	push	{r7}
 8006664:	b083      	sub	sp, #12
 8006666:	af00      	add	r7, sp, #0
 8006668:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800666a:	2301      	movs	r3, #1
}
 800666c:	4618      	mov	r0, r3
 800666e:	370c      	adds	r7, #12
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006678:	b480      	push	{r7}
 800667a:	b085      	sub	sp, #20
 800667c:	af00      	add	r7, sp, #0
 800667e:	60f8      	str	r0, [r7, #12]
 8006680:	60b9      	str	r1, [r7, #8]
 8006682:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8006684:	2300      	movs	r3, #0
}
 8006686:	4618      	mov	r0, r3
 8006688:	3714      	adds	r7, #20
 800668a:	46bd      	mov	sp, r7
 800668c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006690:	4770      	bx	lr
	...

08006694 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	b086      	sub	sp, #24
 8006698:	af00      	add	r7, sp, #0
 800669a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800669c:	4a14      	ldr	r2, [pc, #80]	@ (80066f0 <_sbrk+0x5c>)
 800669e:	4b15      	ldr	r3, [pc, #84]	@ (80066f4 <_sbrk+0x60>)
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80066a8:	4b13      	ldr	r3, [pc, #76]	@ (80066f8 <_sbrk+0x64>)
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d102      	bne.n	80066b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80066b0:	4b11      	ldr	r3, [pc, #68]	@ (80066f8 <_sbrk+0x64>)
 80066b2:	4a12      	ldr	r2, [pc, #72]	@ (80066fc <_sbrk+0x68>)
 80066b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80066b6:	4b10      	ldr	r3, [pc, #64]	@ (80066f8 <_sbrk+0x64>)
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	4413      	add	r3, r2
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d207      	bcs.n	80066d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80066c4:	f009 f960 	bl	800f988 <__errno>
 80066c8:	4603      	mov	r3, r0
 80066ca:	220c      	movs	r2, #12
 80066cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80066ce:	f04f 33ff 	mov.w	r3, #4294967295
 80066d2:	e009      	b.n	80066e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80066d4:	4b08      	ldr	r3, [pc, #32]	@ (80066f8 <_sbrk+0x64>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80066da:	4b07      	ldr	r3, [pc, #28]	@ (80066f8 <_sbrk+0x64>)
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4413      	add	r3, r2
 80066e2:	4a05      	ldr	r2, [pc, #20]	@ (80066f8 <_sbrk+0x64>)
 80066e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80066e6:	68fb      	ldr	r3, [r7, #12]
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3718      	adds	r7, #24
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}
 80066f0:	20020000 	.word	0x20020000
 80066f4:	00000400 	.word	0x00000400
 80066f8:	20005b2c 	.word	0x20005b2c
 80066fc:	20006460 	.word	0x20006460

08006700 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006700:	b480      	push	{r7}
 8006702:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006704:	4b06      	ldr	r3, [pc, #24]	@ (8006720 <SystemInit+0x20>)
 8006706:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800670a:	4a05      	ldr	r2, [pc, #20]	@ (8006720 <SystemInit+0x20>)
 800670c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8006710:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006714:	bf00      	nop
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
 800671e:	bf00      	nop
 8006720:	e000ed00 	.word	0xe000ed00

08006724 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006724:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800675c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8006728:	f7ff ffea 	bl	8006700 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800672c:	480c      	ldr	r0, [pc, #48]	@ (8006760 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800672e:	490d      	ldr	r1, [pc, #52]	@ (8006764 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8006730:	4a0d      	ldr	r2, [pc, #52]	@ (8006768 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8006732:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006734:	e002      	b.n	800673c <LoopCopyDataInit>

08006736 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006736:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006738:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800673a:	3304      	adds	r3, #4

0800673c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800673c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800673e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006740:	d3f9      	bcc.n	8006736 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006742:	4a0a      	ldr	r2, [pc, #40]	@ (800676c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8006744:	4c0a      	ldr	r4, [pc, #40]	@ (8006770 <LoopFillZerobss+0x22>)
  movs r3, #0
 8006746:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006748:	e001      	b.n	800674e <LoopFillZerobss>

0800674a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800674a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800674c:	3204      	adds	r2, #4

0800674e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800674e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006750:	d3fb      	bcc.n	800674a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8006752:	f009 f91f 	bl	800f994 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006756:	f7fc f961 	bl	8002a1c <main>
  bx  lr    
 800675a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800675c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006760:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006764:	200019a0 	.word	0x200019a0
  ldr r2, =_sidata
 8006768:	08011364 	.word	0x08011364
  ldr r2, =_sbss
 800676c:	200019a0 	.word	0x200019a0
  ldr r4, =_ebss
 8006770:	2000645c 	.word	0x2000645c

08006774 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006774:	e7fe      	b.n	8006774 <ADC_IRQHandler>
	...

08006778 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800677c:	4b0e      	ldr	r3, [pc, #56]	@ (80067b8 <HAL_Init+0x40>)
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	4a0d      	ldr	r2, [pc, #52]	@ (80067b8 <HAL_Init+0x40>)
 8006782:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006786:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006788:	4b0b      	ldr	r3, [pc, #44]	@ (80067b8 <HAL_Init+0x40>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	4a0a      	ldr	r2, [pc, #40]	@ (80067b8 <HAL_Init+0x40>)
 800678e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8006792:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006794:	4b08      	ldr	r3, [pc, #32]	@ (80067b8 <HAL_Init+0x40>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	4a07      	ldr	r2, [pc, #28]	@ (80067b8 <HAL_Init+0x40>)
 800679a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800679e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80067a0:	2003      	movs	r0, #3
 80067a2:	f001 f809 	bl	80077b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80067a6:	2000      	movs	r0, #0
 80067a8:	f000 f808 	bl	80067bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80067ac:	f7ff fd2a 	bl	8006204 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80067b0:	2300      	movs	r3, #0
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	bd80      	pop	{r7, pc}
 80067b6:	bf00      	nop
 80067b8:	40023c00 	.word	0x40023c00

080067bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80067c4:	4b12      	ldr	r3, [pc, #72]	@ (8006810 <HAL_InitTick+0x54>)
 80067c6:	681a      	ldr	r2, [r3, #0]
 80067c8:	4b12      	ldr	r3, [pc, #72]	@ (8006814 <HAL_InitTick+0x58>)
 80067ca:	781b      	ldrb	r3, [r3, #0]
 80067cc:	4619      	mov	r1, r3
 80067ce:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80067d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80067d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067da:	4618      	mov	r0, r3
 80067dc:	f001 f821 	bl	8007822 <HAL_SYSTICK_Config>
 80067e0:	4603      	mov	r3, r0
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d001      	beq.n	80067ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e00e      	b.n	8006808 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	2b0f      	cmp	r3, #15
 80067ee:	d80a      	bhi.n	8006806 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80067f0:	2200      	movs	r2, #0
 80067f2:	6879      	ldr	r1, [r7, #4]
 80067f4:	f04f 30ff 	mov.w	r0, #4294967295
 80067f8:	f000 ffe9 	bl	80077ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80067fc:	4a06      	ldr	r2, [pc, #24]	@ (8006818 <HAL_InitTick+0x5c>)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006802:	2300      	movs	r3, #0
 8006804:	e000      	b.n	8006808 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006806:	2301      	movs	r3, #1
}
 8006808:	4618      	mov	r0, r3
 800680a:	3708      	adds	r7, #8
 800680c:	46bd      	mov	sp, r7
 800680e:	bd80      	pop	{r7, pc}
 8006810:	20001918 	.word	0x20001918
 8006814:	20001920 	.word	0x20001920
 8006818:	2000191c 	.word	0x2000191c

0800681c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800681c:	b480      	push	{r7}
 800681e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006820:	4b06      	ldr	r3, [pc, #24]	@ (800683c <HAL_IncTick+0x20>)
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	461a      	mov	r2, r3
 8006826:	4b06      	ldr	r3, [pc, #24]	@ (8006840 <HAL_IncTick+0x24>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4413      	add	r3, r2
 800682c:	4a04      	ldr	r2, [pc, #16]	@ (8006840 <HAL_IncTick+0x24>)
 800682e:	6013      	str	r3, [r2, #0]
}
 8006830:	bf00      	nop
 8006832:	46bd      	mov	sp, r7
 8006834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006838:	4770      	bx	lr
 800683a:	bf00      	nop
 800683c:	20001920 	.word	0x20001920
 8006840:	20005b30 	.word	0x20005b30

08006844 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006844:	b480      	push	{r7}
 8006846:	af00      	add	r7, sp, #0
  return uwTick;
 8006848:	4b03      	ldr	r3, [pc, #12]	@ (8006858 <HAL_GetTick+0x14>)
 800684a:	681b      	ldr	r3, [r3, #0]
}
 800684c:	4618      	mov	r0, r3
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	20005b30 	.word	0x20005b30

0800685c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b084      	sub	sp, #16
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006864:	f7ff ffee 	bl	8006844 <HAL_GetTick>
 8006868:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006874:	d005      	beq.n	8006882 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006876:	4b0a      	ldr	r3, [pc, #40]	@ (80068a0 <HAL_Delay+0x44>)
 8006878:	781b      	ldrb	r3, [r3, #0]
 800687a:	461a      	mov	r2, r3
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	4413      	add	r3, r2
 8006880:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006882:	bf00      	nop
 8006884:	f7ff ffde 	bl	8006844 <HAL_GetTick>
 8006888:	4602      	mov	r2, r0
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	1ad3      	subs	r3, r2, r3
 800688e:	68fa      	ldr	r2, [r7, #12]
 8006890:	429a      	cmp	r2, r3
 8006892:	d8f7      	bhi.n	8006884 <HAL_Delay+0x28>
  {
  }
}
 8006894:	bf00      	nop
 8006896:	bf00      	nop
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
 800689e:	bf00      	nop
 80068a0:	20001920 	.word	0x20001920

080068a4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d101      	bne.n	80068b6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e0ed      	b.n	8006a92 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d102      	bne.n	80068c8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f7ff fcc6 	bl	8006254 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	f042 0201 	orr.w	r2, r2, #1
 80068d6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80068d8:	f7ff ffb4 	bl	8006844 <HAL_GetTick>
 80068dc:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80068de:	e012      	b.n	8006906 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80068e0:	f7ff ffb0 	bl	8006844 <HAL_GetTick>
 80068e4:	4602      	mov	r2, r0
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	1ad3      	subs	r3, r2, r3
 80068ea:	2b0a      	cmp	r3, #10
 80068ec:	d90b      	bls.n	8006906 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068f2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2205      	movs	r2, #5
 80068fe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006902:	2301      	movs	r3, #1
 8006904:	e0c5      	b.n	8006a92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	685b      	ldr	r3, [r3, #4]
 800690c:	f003 0301 	and.w	r3, r3, #1
 8006910:	2b00      	cmp	r3, #0
 8006912:	d0e5      	beq.n	80068e0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f022 0202 	bic.w	r2, r2, #2
 8006922:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006924:	f7ff ff8e 	bl	8006844 <HAL_GetTick>
 8006928:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800692a:	e012      	b.n	8006952 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800692c:	f7ff ff8a 	bl	8006844 <HAL_GetTick>
 8006930:	4602      	mov	r2, r0
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	1ad3      	subs	r3, r2, r3
 8006936:	2b0a      	cmp	r3, #10
 8006938:	d90b      	bls.n	8006952 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800693e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2205      	movs	r2, #5
 800694a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800694e:	2301      	movs	r3, #1
 8006950:	e09f      	b.n	8006a92 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	685b      	ldr	r3, [r3, #4]
 8006958:	f003 0302 	and.w	r3, r3, #2
 800695c:	2b00      	cmp	r3, #0
 800695e:	d1e5      	bne.n	800692c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	7e1b      	ldrb	r3, [r3, #24]
 8006964:	2b01      	cmp	r3, #1
 8006966:	d108      	bne.n	800697a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	681a      	ldr	r2, [r3, #0]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006976:	601a      	str	r2, [r3, #0]
 8006978:	e007      	b.n	800698a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	681a      	ldr	r2, [r3, #0]
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006988:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	7e5b      	ldrb	r3, [r3, #25]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d108      	bne.n	80069a4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	681a      	ldr	r2, [r3, #0]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80069a0:	601a      	str	r2, [r3, #0]
 80069a2:	e007      	b.n	80069b4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80069b2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	7e9b      	ldrb	r3, [r3, #26]
 80069b8:	2b01      	cmp	r3, #1
 80069ba:	d108      	bne.n	80069ce <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	f042 0220 	orr.w	r2, r2, #32
 80069ca:	601a      	str	r2, [r3, #0]
 80069cc:	e007      	b.n	80069de <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	f022 0220 	bic.w	r2, r2, #32
 80069dc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	7edb      	ldrb	r3, [r3, #27]
 80069e2:	2b01      	cmp	r3, #1
 80069e4:	d108      	bne.n	80069f8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	681a      	ldr	r2, [r3, #0]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f022 0210 	bic.w	r2, r2, #16
 80069f4:	601a      	str	r2, [r3, #0]
 80069f6:	e007      	b.n	8006a08 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f042 0210 	orr.w	r2, r2, #16
 8006a06:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	7f1b      	ldrb	r3, [r3, #28]
 8006a0c:	2b01      	cmp	r3, #1
 8006a0e:	d108      	bne.n	8006a22 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	681a      	ldr	r2, [r3, #0]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f042 0208 	orr.w	r2, r2, #8
 8006a1e:	601a      	str	r2, [r3, #0]
 8006a20:	e007      	b.n	8006a32 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	681a      	ldr	r2, [r3, #0]
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	f022 0208 	bic.w	r2, r2, #8
 8006a30:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	7f5b      	ldrb	r3, [r3, #29]
 8006a36:	2b01      	cmp	r3, #1
 8006a38:	d108      	bne.n	8006a4c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681a      	ldr	r2, [r3, #0]
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	f042 0204 	orr.w	r2, r2, #4
 8006a48:	601a      	str	r2, [r3, #0]
 8006a4a:	e007      	b.n	8006a5c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	681a      	ldr	r2, [r3, #0]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f022 0204 	bic.w	r2, r2, #4
 8006a5a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	689a      	ldr	r2, [r3, #8]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	68db      	ldr	r3, [r3, #12]
 8006a64:	431a      	orrs	r2, r3
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	691b      	ldr	r3, [r3, #16]
 8006a6a:	431a      	orrs	r2, r3
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	ea42 0103 	orr.w	r1, r2, r3
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	685b      	ldr	r3, [r3, #4]
 8006a78:	1e5a      	subs	r2, r3, #1
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	430a      	orrs	r2, r1
 8006a80:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2200      	movs	r2, #0
 8006a86:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8006a90:	2300      	movs	r3, #0
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3710      	adds	r7, #16
 8006a96:	46bd      	mov	sp, r7
 8006a98:	bd80      	pop	{r7, pc}
	...

08006a9c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8006a9c:	b480      	push	{r7}
 8006a9e:	b087      	sub	sp, #28
 8006aa0:	af00      	add	r7, sp, #0
 8006aa2:	6078      	str	r0, [r7, #4]
 8006aa4:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006ab2:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8006ab4:	7cfb      	ldrb	r3, [r7, #19]
 8006ab6:	2b01      	cmp	r3, #1
 8006ab8:	d003      	beq.n	8006ac2 <HAL_CAN_ConfigFilter+0x26>
 8006aba:	7cfb      	ldrb	r3, [r7, #19]
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	f040 80be 	bne.w	8006c3e <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8006ac2:	4b65      	ldr	r3, [pc, #404]	@ (8006c58 <HAL_CAN_ConfigFilter+0x1bc>)
 8006ac4:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006acc:	f043 0201 	orr.w	r2, r3, #1
 8006ad0:	697b      	ldr	r3, [r7, #20]
 8006ad2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8006ad6:	697b      	ldr	r3, [r7, #20]
 8006ad8:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006adc:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8006ae6:	697b      	ldr	r3, [r7, #20]
 8006ae8:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006af0:	021b      	lsls	r3, r3, #8
 8006af2:	431a      	orrs	r2, r3
 8006af4:	697b      	ldr	r3, [r7, #20]
 8006af6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	695b      	ldr	r3, [r3, #20]
 8006afe:	f003 031f 	and.w	r3, r3, #31
 8006b02:	2201      	movs	r2, #1
 8006b04:	fa02 f303 	lsl.w	r3, r2, r3
 8006b08:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8006b0a:	697b      	ldr	r3, [r7, #20]
 8006b0c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	43db      	mvns	r3, r3
 8006b14:	401a      	ands	r2, r3
 8006b16:	697b      	ldr	r3, [r7, #20]
 8006b18:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	69db      	ldr	r3, [r3, #28]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d123      	bne.n	8006b6c <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	43db      	mvns	r3, r3
 8006b2e:	401a      	ands	r2, r3
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	685b      	ldr	r3, [r3, #4]
 8006b40:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006b42:	683a      	ldr	r2, [r7, #0]
 8006b44:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8006b46:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006b48:	697b      	ldr	r3, [r7, #20]
 8006b4a:	3248      	adds	r2, #72	@ 0x48
 8006b4c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	689b      	ldr	r3, [r3, #8]
 8006b54:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006b60:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006b62:	6979      	ldr	r1, [r7, #20]
 8006b64:	3348      	adds	r3, #72	@ 0x48
 8006b66:	00db      	lsls	r3, r3, #3
 8006b68:	440b      	add	r3, r1
 8006b6a:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	69db      	ldr	r3, [r3, #28]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d122      	bne.n	8006bba <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	431a      	orrs	r2, r3
 8006b7e:	697b      	ldr	r3, [r7, #20]
 8006b80:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	685b      	ldr	r3, [r3, #4]
 8006b8e:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006b90:	683a      	ldr	r2, [r7, #0]
 8006b92:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8006b94:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	3248      	adds	r2, #72	@ 0x48
 8006b9a:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006b9e:	683b      	ldr	r3, [r7, #0]
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8006ba4:	683b      	ldr	r3, [r7, #0]
 8006ba6:	68db      	ldr	r3, [r3, #12]
 8006ba8:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006bae:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006bb0:	6979      	ldr	r1, [r7, #20]
 8006bb2:	3348      	adds	r3, #72	@ 0x48
 8006bb4:	00db      	lsls	r3, r3, #3
 8006bb6:	440b      	add	r3, r1
 8006bb8:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d109      	bne.n	8006bd6 <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8006bc2:	697b      	ldr	r3, [r7, #20]
 8006bc4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	43db      	mvns	r3, r3
 8006bcc:	401a      	ands	r2, r3
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8006bd4:	e007      	b.n	8006be6 <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8006bd6:	697b      	ldr	r3, [r7, #20]
 8006bd8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	431a      	orrs	r2, r3
 8006be0:	697b      	ldr	r3, [r7, #20]
 8006be2:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d109      	bne.n	8006c02 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	43db      	mvns	r3, r3
 8006bf8:	401a      	ands	r2, r3
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8006c00:	e007      	b.n	8006c12 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d107      	bne.n	8006c2a <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	431a      	orrs	r2, r3
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006c2a:	697b      	ldr	r3, [r7, #20]
 8006c2c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8006c30:	f023 0201 	bic.w	r2, r3, #1
 8006c34:	697b      	ldr	r3, [r7, #20]
 8006c36:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	e006      	b.n	8006c4c <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c42:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006c4a:	2301      	movs	r3, #1
  }
}
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	371c      	adds	r7, #28
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr
 8006c58:	40006400 	.word	0x40006400

08006c5c <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b084      	sub	sp, #16
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006c6a:	b2db      	uxtb	r3, r3
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d12e      	bne.n	8006cce <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	2202      	movs	r2, #2
 8006c74:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	681a      	ldr	r2, [r3, #0]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 0201 	bic.w	r2, r2, #1
 8006c86:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8006c88:	f7ff fddc 	bl	8006844 <HAL_GetTick>
 8006c8c:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006c8e:	e012      	b.n	8006cb6 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006c90:	f7ff fdd8 	bl	8006844 <HAL_GetTick>
 8006c94:	4602      	mov	r2, r0
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	1ad3      	subs	r3, r2, r3
 8006c9a:	2b0a      	cmp	r3, #10
 8006c9c:	d90b      	bls.n	8006cb6 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ca2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2205      	movs	r2, #5
 8006cae:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e012      	b.n	8006cdc <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	f003 0301 	and.w	r3, r3, #1
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d1e5      	bne.n	8006c90 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8006cca:	2300      	movs	r3, #0
 8006ccc:	e006      	b.n	8006cdc <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006cd2:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
  }
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3710      	adds	r7, #16
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}

08006ce4 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b089      	sub	sp, #36	@ 0x24
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
 8006cf0:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006cf8:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8006d02:	7ffb      	ldrb	r3, [r7, #31]
 8006d04:	2b01      	cmp	r3, #1
 8006d06:	d003      	beq.n	8006d10 <HAL_CAN_AddTxMessage+0x2c>
 8006d08:	7ffb      	ldrb	r3, [r7, #31]
 8006d0a:	2b02      	cmp	r3, #2
 8006d0c:	f040 80ad 	bne.w	8006e6a <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006d10:	69bb      	ldr	r3, [r7, #24]
 8006d12:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10a      	bne.n	8006d30 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d105      	bne.n	8006d30 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8006d24:	69bb      	ldr	r3, [r7, #24]
 8006d26:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	f000 8095 	beq.w	8006e5a <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8006d30:	69bb      	ldr	r3, [r7, #24]
 8006d32:	0e1b      	lsrs	r3, r3, #24
 8006d34:	f003 0303 	and.w	r3, r3, #3
 8006d38:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8006d3a:	2201      	movs	r2, #1
 8006d3c:	697b      	ldr	r3, [r7, #20]
 8006d3e:	409a      	lsls	r2, r3
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d10d      	bne.n	8006d68 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8006d52:	68bb      	ldr	r3, [r7, #8]
 8006d54:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006d56:	68f9      	ldr	r1, [r7, #12]
 8006d58:	6809      	ldr	r1, [r1, #0]
 8006d5a:	431a      	orrs	r2, r3
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	3318      	adds	r3, #24
 8006d60:	011b      	lsls	r3, r3, #4
 8006d62:	440b      	add	r3, r1
 8006d64:	601a      	str	r2, [r3, #0]
 8006d66:	e00f      	b.n	8006d88 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8006d6e:	68bb      	ldr	r3, [r7, #8]
 8006d70:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006d72:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8006d74:	68bb      	ldr	r3, [r7, #8]
 8006d76:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006d78:	68f9      	ldr	r1, [r7, #12]
 8006d7a:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8006d7c:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006d7e:	697b      	ldr	r3, [r7, #20]
 8006d80:	3318      	adds	r3, #24
 8006d82:	011b      	lsls	r3, r3, #4
 8006d84:	440b      	add	r3, r1
 8006d86:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	6819      	ldr	r1, [r3, #0]
 8006d8c:	68bb      	ldr	r3, [r7, #8]
 8006d8e:	691a      	ldr	r2, [r3, #16]
 8006d90:	697b      	ldr	r3, [r7, #20]
 8006d92:	3318      	adds	r3, #24
 8006d94:	011b      	lsls	r3, r3, #4
 8006d96:	440b      	add	r3, r1
 8006d98:	3304      	adds	r3, #4
 8006d9a:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	7d1b      	ldrb	r3, [r3, #20]
 8006da0:	2b01      	cmp	r3, #1
 8006da2:	d111      	bne.n	8006dc8 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	3318      	adds	r3, #24
 8006dac:	011b      	lsls	r3, r3, #4
 8006dae:	4413      	add	r3, r2
 8006db0:	3304      	adds	r3, #4
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	68fa      	ldr	r2, [r7, #12]
 8006db6:	6811      	ldr	r1, [r2, #0]
 8006db8:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8006dbc:	697b      	ldr	r3, [r7, #20]
 8006dbe:	3318      	adds	r3, #24
 8006dc0:	011b      	lsls	r3, r3, #4
 8006dc2:	440b      	add	r3, r1
 8006dc4:	3304      	adds	r3, #4
 8006dc6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	3307      	adds	r3, #7
 8006dcc:	781b      	ldrb	r3, [r3, #0]
 8006dce:	061a      	lsls	r2, r3, #24
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	3306      	adds	r3, #6
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	041b      	lsls	r3, r3, #16
 8006dd8:	431a      	orrs	r2, r3
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	3305      	adds	r3, #5
 8006dde:	781b      	ldrb	r3, [r3, #0]
 8006de0:	021b      	lsls	r3, r3, #8
 8006de2:	4313      	orrs	r3, r2
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	3204      	adds	r2, #4
 8006de8:	7812      	ldrb	r2, [r2, #0]
 8006dea:	4610      	mov	r0, r2
 8006dec:	68fa      	ldr	r2, [r7, #12]
 8006dee:	6811      	ldr	r1, [r2, #0]
 8006df0:	ea43 0200 	orr.w	r2, r3, r0
 8006df4:	697b      	ldr	r3, [r7, #20]
 8006df6:	011b      	lsls	r3, r3, #4
 8006df8:	440b      	add	r3, r1
 8006dfa:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8006dfe:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	3303      	adds	r3, #3
 8006e04:	781b      	ldrb	r3, [r3, #0]
 8006e06:	061a      	lsls	r2, r3, #24
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	3302      	adds	r3, #2
 8006e0c:	781b      	ldrb	r3, [r3, #0]
 8006e0e:	041b      	lsls	r3, r3, #16
 8006e10:	431a      	orrs	r2, r3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	3301      	adds	r3, #1
 8006e16:	781b      	ldrb	r3, [r3, #0]
 8006e18:	021b      	lsls	r3, r3, #8
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	7812      	ldrb	r2, [r2, #0]
 8006e20:	4610      	mov	r0, r2
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	6811      	ldr	r1, [r2, #0]
 8006e26:	ea43 0200 	orr.w	r2, r3, r0
 8006e2a:	697b      	ldr	r3, [r7, #20]
 8006e2c:	011b      	lsls	r3, r3, #4
 8006e2e:	440b      	add	r3, r1
 8006e30:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8006e34:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681a      	ldr	r2, [r3, #0]
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	3318      	adds	r3, #24
 8006e3e:	011b      	lsls	r3, r3, #4
 8006e40:	4413      	add	r3, r2
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	68fa      	ldr	r2, [r7, #12]
 8006e46:	6811      	ldr	r1, [r2, #0]
 8006e48:	f043 0201 	orr.w	r2, r3, #1
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	3318      	adds	r3, #24
 8006e50:	011b      	lsls	r3, r3, #4
 8006e52:	440b      	add	r3, r1
 8006e54:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8006e56:	2300      	movs	r3, #0
 8006e58:	e00e      	b.n	8006e78 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e5e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8006e66:	2301      	movs	r3, #1
 8006e68:	e006      	b.n	8006e78 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e6e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8006e76:	2301      	movs	r3, #1
  }
}
 8006e78:	4618      	mov	r0, r3
 8006e7a:	3724      	adds	r7, #36	@ 0x24
 8006e7c:	46bd      	mov	sp, r7
 8006e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e82:	4770      	bx	lr

08006e84 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8006e84:	b480      	push	{r7}
 8006e86:	b085      	sub	sp, #20
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006e96:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8006e98:	7afb      	ldrb	r3, [r7, #11]
 8006e9a:	2b01      	cmp	r3, #1
 8006e9c:	d002      	beq.n	8006ea4 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8006e9e:	7afb      	ldrb	r3, [r7, #11]
 8006ea0:	2b02      	cmp	r3, #2
 8006ea2:	d11d      	bne.n	8006ee0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d002      	beq.n	8006eb8 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	3301      	adds	r3, #1
 8006eb6:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d002      	beq.n	8006ecc <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	3301      	adds	r3, #1
 8006eca:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d002      	beq.n	8006ee0 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	3301      	adds	r3, #1
 8006ede:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3714      	adds	r7, #20
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b087      	sub	sp, #28
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	60f8      	str	r0, [r7, #12]
 8006ef6:	60b9      	str	r1, [r7, #8]
 8006ef8:	607a      	str	r2, [r7, #4]
 8006efa:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006f02:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006f04:	7dfb      	ldrb	r3, [r7, #23]
 8006f06:	2b01      	cmp	r3, #1
 8006f08:	d003      	beq.n	8006f12 <HAL_CAN_GetRxMessage+0x24>
 8006f0a:	7dfb      	ldrb	r3, [r7, #23]
 8006f0c:	2b02      	cmp	r3, #2
 8006f0e:	f040 8103 	bne.w	8007118 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d10e      	bne.n	8006f36 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	68db      	ldr	r3, [r3, #12]
 8006f1e:	f003 0303 	and.w	r3, r3, #3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d116      	bne.n	8006f54 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f2a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8006f32:	2301      	movs	r3, #1
 8006f34:	e0f7      	b.n	8007126 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	691b      	ldr	r3, [r3, #16]
 8006f3c:	f003 0303 	and.w	r3, r3, #3
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d107      	bne.n	8006f54 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006f48:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8006f50:	2301      	movs	r3, #1
 8006f52:	e0e8      	b.n	8007126 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681a      	ldr	r2, [r3, #0]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	331b      	adds	r3, #27
 8006f5c:	011b      	lsls	r3, r3, #4
 8006f5e:	4413      	add	r3, r2
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	f003 0204 	and.w	r2, r3, #4
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	689b      	ldr	r3, [r3, #8]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d10c      	bne.n	8006f8c <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	681a      	ldr	r2, [r3, #0]
 8006f76:	68bb      	ldr	r3, [r7, #8]
 8006f78:	331b      	adds	r3, #27
 8006f7a:	011b      	lsls	r3, r3, #4
 8006f7c:	4413      	add	r3, r2
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	0d5b      	lsrs	r3, r3, #21
 8006f82:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	e00b      	b.n	8006fa4 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	331b      	adds	r3, #27
 8006f94:	011b      	lsls	r3, r3, #4
 8006f96:	4413      	add	r3, r2
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	08db      	lsrs	r3, r3, #3
 8006f9c:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681a      	ldr	r2, [r3, #0]
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	331b      	adds	r3, #27
 8006fac:	011b      	lsls	r3, r3, #4
 8006fae:	4413      	add	r3, r2
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	f003 0202 	and.w	r2, r3, #2
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681a      	ldr	r2, [r3, #0]
 8006fbe:	68bb      	ldr	r3, [r7, #8]
 8006fc0:	331b      	adds	r3, #27
 8006fc2:	011b      	lsls	r3, r3, #4
 8006fc4:	4413      	add	r3, r2
 8006fc6:	3304      	adds	r3, #4
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	f003 0308 	and.w	r3, r3, #8
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d003      	beq.n	8006fda <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	2208      	movs	r2, #8
 8006fd6:	611a      	str	r2, [r3, #16]
 8006fd8:	e00b      	b.n	8006ff2 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681a      	ldr	r2, [r3, #0]
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	331b      	adds	r3, #27
 8006fe2:	011b      	lsls	r3, r3, #4
 8006fe4:	4413      	add	r3, r2
 8006fe6:	3304      	adds	r3, #4
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	f003 020f 	and.w	r2, r3, #15
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	681a      	ldr	r2, [r3, #0]
 8006ff6:	68bb      	ldr	r3, [r7, #8]
 8006ff8:	331b      	adds	r3, #27
 8006ffa:	011b      	lsls	r3, r3, #4
 8006ffc:	4413      	add	r3, r2
 8006ffe:	3304      	adds	r3, #4
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	0a1b      	lsrs	r3, r3, #8
 8007004:	b2da      	uxtb	r2, r3
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	331b      	adds	r3, #27
 8007012:	011b      	lsls	r3, r3, #4
 8007014:	4413      	add	r3, r2
 8007016:	3304      	adds	r3, #4
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	0c1b      	lsrs	r3, r3, #16
 800701c:	b29a      	uxth	r2, r3
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	68bb      	ldr	r3, [r7, #8]
 8007028:	011b      	lsls	r3, r3, #4
 800702a:	4413      	add	r3, r2
 800702c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	b2da      	uxtb	r2, r3
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681a      	ldr	r2, [r3, #0]
 800703c:	68bb      	ldr	r3, [r7, #8]
 800703e:	011b      	lsls	r3, r3, #4
 8007040:	4413      	add	r3, r2
 8007042:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	0a1a      	lsrs	r2, r3, #8
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	3301      	adds	r3, #1
 800704e:	b2d2      	uxtb	r2, r2
 8007050:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	011b      	lsls	r3, r3, #4
 800705a:	4413      	add	r3, r2
 800705c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	0c1a      	lsrs	r2, r3, #16
 8007064:	683b      	ldr	r3, [r7, #0]
 8007066:	3302      	adds	r3, #2
 8007068:	b2d2      	uxtb	r2, r2
 800706a:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	011b      	lsls	r3, r3, #4
 8007074:	4413      	add	r3, r2
 8007076:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	0e1a      	lsrs	r2, r3, #24
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	3303      	adds	r3, #3
 8007082:	b2d2      	uxtb	r2, r2
 8007084:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	681a      	ldr	r2, [r3, #0]
 800708a:	68bb      	ldr	r3, [r7, #8]
 800708c:	011b      	lsls	r3, r3, #4
 800708e:	4413      	add	r3, r2
 8007090:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8007094:	681a      	ldr	r2, [r3, #0]
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	3304      	adds	r3, #4
 800709a:	b2d2      	uxtb	r2, r2
 800709c:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	011b      	lsls	r3, r3, #4
 80070a6:	4413      	add	r3, r2
 80070a8:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	0a1a      	lsrs	r2, r3, #8
 80070b0:	683b      	ldr	r3, [r7, #0]
 80070b2:	3305      	adds	r3, #5
 80070b4:	b2d2      	uxtb	r2, r2
 80070b6:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	681a      	ldr	r2, [r3, #0]
 80070bc:	68bb      	ldr	r3, [r7, #8]
 80070be:	011b      	lsls	r3, r3, #4
 80070c0:	4413      	add	r3, r2
 80070c2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	0c1a      	lsrs	r2, r3, #16
 80070ca:	683b      	ldr	r3, [r7, #0]
 80070cc:	3306      	adds	r3, #6
 80070ce:	b2d2      	uxtb	r2, r2
 80070d0:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	011b      	lsls	r3, r3, #4
 80070da:	4413      	add	r3, r2
 80070dc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	0e1a      	lsrs	r2, r3, #24
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	3307      	adds	r3, #7
 80070e8:	b2d2      	uxtb	r2, r2
 80070ea:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80070ec:	68bb      	ldr	r3, [r7, #8]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d108      	bne.n	8007104 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68da      	ldr	r2, [r3, #12]
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	f042 0220 	orr.w	r2, r2, #32
 8007100:	60da      	str	r2, [r3, #12]
 8007102:	e007      	b.n	8007114 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	691a      	ldr	r2, [r3, #16]
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f042 0220 	orr.w	r2, r2, #32
 8007112:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8007114:	2300      	movs	r3, #0
 8007116:	e006      	b.n	8007126 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800711c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8007124:	2301      	movs	r3, #1
  }
}
 8007126:	4618      	mov	r0, r3
 8007128:	371c      	adds	r7, #28
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr

08007132 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8007132:	b480      	push	{r7}
 8007134:	b085      	sub	sp, #20
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
 800713a:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800713c:	2300      	movs	r3, #0
 800713e:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007146:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8007148:	7afb      	ldrb	r3, [r7, #11]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d002      	beq.n	8007154 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800714e:	7afb      	ldrb	r3, [r7, #11]
 8007150:	2b02      	cmp	r3, #2
 8007152:	d10f      	bne.n	8007174 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d106      	bne.n	8007168 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	68db      	ldr	r3, [r3, #12]
 8007160:	f003 0303 	and.w	r3, r3, #3
 8007164:	60fb      	str	r3, [r7, #12]
 8007166:	e005      	b.n	8007174 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	691b      	ldr	r3, [r3, #16]
 800716e:	f003 0303 	and.w	r3, r3, #3
 8007172:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8007174:	68fb      	ldr	r3, [r7, #12]
}
 8007176:	4618      	mov	r0, r3
 8007178:	3714      	adds	r7, #20
 800717a:	46bd      	mov	sp, r7
 800717c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007180:	4770      	bx	lr

08007182 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8007182:	b480      	push	{r7}
 8007184:	b085      	sub	sp, #20
 8007186:	af00      	add	r7, sp, #0
 8007188:	6078      	str	r0, [r7, #4]
 800718a:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007192:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8007194:	7bfb      	ldrb	r3, [r7, #15]
 8007196:	2b01      	cmp	r3, #1
 8007198:	d002      	beq.n	80071a0 <HAL_CAN_ActivateNotification+0x1e>
 800719a:	7bfb      	ldrb	r3, [r7, #15]
 800719c:	2b02      	cmp	r3, #2
 800719e:	d109      	bne.n	80071b4 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	6959      	ldr	r1, [r3, #20]
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	683a      	ldr	r2, [r7, #0]
 80071ac:	430a      	orrs	r2, r1
 80071ae:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80071b0:	2300      	movs	r3, #0
 80071b2:	e006      	b.n	80071c2 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071b8:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
  }
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr

080071ce <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80071ce:	b580      	push	{r7, lr}
 80071d0:	b08a      	sub	sp, #40	@ 0x28
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80071d6:	2300      	movs	r3, #0
 80071d8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	695b      	ldr	r3, [r3, #20]
 80071e0:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	685b      	ldr	r3, [r3, #4]
 80071e8:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	68db      	ldr	r3, [r3, #12]
 80071f8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	699b      	ldr	r3, [r3, #24]
 8007208:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800720a:	6a3b      	ldr	r3, [r7, #32]
 800720c:	f003 0301 	and.w	r3, r3, #1
 8007210:	2b00      	cmp	r3, #0
 8007212:	d07c      	beq.n	800730e <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	d023      	beq.n	8007266 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2201      	movs	r2, #1
 8007224:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8007226:	69bb      	ldr	r3, [r7, #24]
 8007228:	f003 0302 	and.w	r3, r3, #2
 800722c:	2b00      	cmp	r3, #0
 800722e:	d003      	beq.n	8007238 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007230:	6878      	ldr	r0, [r7, #4]
 8007232:	f000 f983 	bl	800753c <HAL_CAN_TxMailbox0CompleteCallback>
 8007236:	e016      	b.n	8007266 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007238:	69bb      	ldr	r3, [r7, #24]
 800723a:	f003 0304 	and.w	r3, r3, #4
 800723e:	2b00      	cmp	r3, #0
 8007240:	d004      	beq.n	800724c <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007242:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007244:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007248:	627b      	str	r3, [r7, #36]	@ 0x24
 800724a:	e00c      	b.n	8007266 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800724c:	69bb      	ldr	r3, [r7, #24]
 800724e:	f003 0308 	and.w	r3, r3, #8
 8007252:	2b00      	cmp	r3, #0
 8007254:	d004      	beq.n	8007260 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007256:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007258:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800725c:	627b      	str	r3, [r7, #36]	@ 0x24
 800725e:	e002      	b.n	8007266 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f989 	bl	8007578 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007266:	69bb      	ldr	r3, [r7, #24]
 8007268:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800726c:	2b00      	cmp	r3, #0
 800726e:	d024      	beq.n	80072ba <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007278:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800727a:	69bb      	ldr	r3, [r7, #24]
 800727c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007280:	2b00      	cmp	r3, #0
 8007282:	d003      	beq.n	800728c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007284:	6878      	ldr	r0, [r7, #4]
 8007286:	f000 f963 	bl	8007550 <HAL_CAN_TxMailbox1CompleteCallback>
 800728a:	e016      	b.n	80072ba <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800728c:	69bb      	ldr	r3, [r7, #24]
 800728e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007292:	2b00      	cmp	r3, #0
 8007294:	d004      	beq.n	80072a0 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007296:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007298:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800729c:	627b      	str	r3, [r7, #36]	@ 0x24
 800729e:	e00c      	b.n	80072ba <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80072a0:	69bb      	ldr	r3, [r7, #24]
 80072a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d004      	beq.n	80072b4 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80072aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80072b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80072b2:	e002      	b.n	80072ba <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f000 f969 	bl	800758c <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80072ba:	69bb      	ldr	r3, [r7, #24]
 80072bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d024      	beq.n	800730e <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80072cc:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80072ce:	69bb      	ldr	r3, [r7, #24]
 80072d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d003      	beq.n	80072e0 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f000 f943 	bl	8007564 <HAL_CAN_TxMailbox2CompleteCallback>
 80072de:	e016      	b.n	800730e <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d004      	beq.n	80072f4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80072ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80072f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80072f2:	e00c      	b.n	800730e <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d004      	beq.n	8007308 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80072fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007300:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007304:	627b      	str	r3, [r7, #36]	@ 0x24
 8007306:	e002      	b.n	800730e <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007308:	6878      	ldr	r0, [r7, #4]
 800730a:	f000 f949 	bl	80075a0 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	f003 0308 	and.w	r3, r3, #8
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00c      	beq.n	8007332 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	f003 0310 	and.w	r3, r3, #16
 800731e:	2b00      	cmp	r3, #0
 8007320:	d007      	beq.n	8007332 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007324:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007328:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2210      	movs	r2, #16
 8007330:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	f003 0304 	and.w	r3, r3, #4
 8007338:	2b00      	cmp	r3, #0
 800733a:	d00b      	beq.n	8007354 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	f003 0308 	and.w	r3, r3, #8
 8007342:	2b00      	cmp	r3, #0
 8007344:	d006      	beq.n	8007354 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	2208      	movs	r2, #8
 800734c:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800734e:	6878      	ldr	r0, [r7, #4]
 8007350:	f000 f930 	bl	80075b4 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007354:	6a3b      	ldr	r3, [r7, #32]
 8007356:	f003 0302 	and.w	r3, r3, #2
 800735a:	2b00      	cmp	r3, #0
 800735c:	d009      	beq.n	8007372 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	68db      	ldr	r3, [r3, #12]
 8007364:	f003 0303 	and.w	r3, r3, #3
 8007368:	2b00      	cmp	r3, #0
 800736a:	d002      	beq.n	8007372 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800736c:	6878      	ldr	r0, [r7, #4]
 800736e:	f7fc f889 	bl	8003484 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007372:	6a3b      	ldr	r3, [r7, #32]
 8007374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007378:	2b00      	cmp	r3, #0
 800737a:	d00c      	beq.n	8007396 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800737c:	693b      	ldr	r3, [r7, #16]
 800737e:	f003 0310 	and.w	r3, r3, #16
 8007382:	2b00      	cmp	r3, #0
 8007384:	d007      	beq.n	8007396 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007386:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007388:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800738c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	2210      	movs	r2, #16
 8007394:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007396:	6a3b      	ldr	r3, [r7, #32]
 8007398:	f003 0320 	and.w	r3, r3, #32
 800739c:	2b00      	cmp	r3, #0
 800739e:	d00b      	beq.n	80073b8 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	f003 0308 	and.w	r3, r3, #8
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d006      	beq.n	80073b8 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	2208      	movs	r2, #8
 80073b0:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80073b2:	6878      	ldr	r0, [r7, #4]
 80073b4:	f000 f908 	bl	80075c8 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80073b8:	6a3b      	ldr	r3, [r7, #32]
 80073ba:	f003 0310 	and.w	r3, r3, #16
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d009      	beq.n	80073d6 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	691b      	ldr	r3, [r3, #16]
 80073c8:	f003 0303 	and.w	r3, r3, #3
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d002      	beq.n	80073d6 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f7fc fa1d 	bl	8003810 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80073d6:	6a3b      	ldr	r3, [r7, #32]
 80073d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00b      	beq.n	80073f8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80073e0:	69fb      	ldr	r3, [r7, #28]
 80073e2:	f003 0310 	and.w	r3, r3, #16
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d006      	beq.n	80073f8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2210      	movs	r2, #16
 80073f0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f000 f8f2 	bl	80075dc <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80073f8:	6a3b      	ldr	r3, [r7, #32]
 80073fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00b      	beq.n	800741a <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	f003 0308 	and.w	r3, r3, #8
 8007408:	2b00      	cmp	r3, #0
 800740a:	d006      	beq.n	800741a <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	2208      	movs	r2, #8
 8007412:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 f8eb 	bl	80075f0 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800741a:	6a3b      	ldr	r3, [r7, #32]
 800741c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8007420:	2b00      	cmp	r3, #0
 8007422:	d07b      	beq.n	800751c <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007424:	69fb      	ldr	r3, [r7, #28]
 8007426:	f003 0304 	and.w	r3, r3, #4
 800742a:	2b00      	cmp	r3, #0
 800742c:	d072      	beq.n	8007514 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800742e:	6a3b      	ldr	r3, [r7, #32]
 8007430:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007434:	2b00      	cmp	r3, #0
 8007436:	d008      	beq.n	800744a <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800743e:	2b00      	cmp	r3, #0
 8007440:	d003      	beq.n	800744a <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007444:	f043 0301 	orr.w	r3, r3, #1
 8007448:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800744a:	6a3b      	ldr	r3, [r7, #32]
 800744c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007450:	2b00      	cmp	r3, #0
 8007452:	d008      	beq.n	8007466 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800745e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007460:	f043 0302 	orr.w	r3, r3, #2
 8007464:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007466:	6a3b      	ldr	r3, [r7, #32]
 8007468:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800746c:	2b00      	cmp	r3, #0
 800746e:	d008      	beq.n	8007482 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007470:	68fb      	ldr	r3, [r7, #12]
 8007472:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007476:	2b00      	cmp	r3, #0
 8007478:	d003      	beq.n	8007482 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800747a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800747c:	f043 0304 	orr.w	r3, r3, #4
 8007480:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007482:	6a3b      	ldr	r3, [r7, #32]
 8007484:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007488:	2b00      	cmp	r3, #0
 800748a:	d043      	beq.n	8007514 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007492:	2b00      	cmp	r3, #0
 8007494:	d03e      	beq.n	8007514 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800749c:	2b60      	cmp	r3, #96	@ 0x60
 800749e:	d02b      	beq.n	80074f8 <HAL_CAN_IRQHandler+0x32a>
 80074a0:	2b60      	cmp	r3, #96	@ 0x60
 80074a2:	d82e      	bhi.n	8007502 <HAL_CAN_IRQHandler+0x334>
 80074a4:	2b50      	cmp	r3, #80	@ 0x50
 80074a6:	d022      	beq.n	80074ee <HAL_CAN_IRQHandler+0x320>
 80074a8:	2b50      	cmp	r3, #80	@ 0x50
 80074aa:	d82a      	bhi.n	8007502 <HAL_CAN_IRQHandler+0x334>
 80074ac:	2b40      	cmp	r3, #64	@ 0x40
 80074ae:	d019      	beq.n	80074e4 <HAL_CAN_IRQHandler+0x316>
 80074b0:	2b40      	cmp	r3, #64	@ 0x40
 80074b2:	d826      	bhi.n	8007502 <HAL_CAN_IRQHandler+0x334>
 80074b4:	2b30      	cmp	r3, #48	@ 0x30
 80074b6:	d010      	beq.n	80074da <HAL_CAN_IRQHandler+0x30c>
 80074b8:	2b30      	cmp	r3, #48	@ 0x30
 80074ba:	d822      	bhi.n	8007502 <HAL_CAN_IRQHandler+0x334>
 80074bc:	2b10      	cmp	r3, #16
 80074be:	d002      	beq.n	80074c6 <HAL_CAN_IRQHandler+0x2f8>
 80074c0:	2b20      	cmp	r3, #32
 80074c2:	d005      	beq.n	80074d0 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80074c4:	e01d      	b.n	8007502 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80074c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074c8:	f043 0308 	orr.w	r3, r3, #8
 80074cc:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80074ce:	e019      	b.n	8007504 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80074d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074d2:	f043 0310 	orr.w	r3, r3, #16
 80074d6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80074d8:	e014      	b.n	8007504 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80074da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074dc:	f043 0320 	orr.w	r3, r3, #32
 80074e0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80074e2:	e00f      	b.n	8007504 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80074e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80074ea:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80074ec:	e00a      	b.n	8007504 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80074ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80074f4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80074f6:	e005      	b.n	8007504 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80074f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80074fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80074fe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8007500:	e000      	b.n	8007504 <HAL_CAN_IRQHandler+0x336>
            break;
 8007502:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	699a      	ldr	r2, [r3, #24]
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8007512:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	2204      	movs	r2, #4
 800751a:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800751c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751e:	2b00      	cmp	r3, #0
 8007520:	d008      	beq.n	8007534 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007528:	431a      	orrs	r2, r3
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 f868 	bl	8007604 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007534:	bf00      	nop
 8007536:	3728      	adds	r7, #40	@ 0x28
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}

0800753c <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8007544:	bf00      	nop
 8007546:	370c      	adds	r7, #12
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr

08007550 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007550:	b480      	push	{r7}
 8007552:	b083      	sub	sp, #12
 8007554:	af00      	add	r7, sp, #0
 8007556:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 8007558:	bf00      	nop
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800756c:	bf00      	nop
 800756e:	370c      	adds	r7, #12
 8007570:	46bd      	mov	sp, r7
 8007572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007576:	4770      	bx	lr

08007578 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007578:	b480      	push	{r7}
 800757a:	b083      	sub	sp, #12
 800757c:	af00      	add	r7, sp, #0
 800757e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007580:	bf00      	nop
 8007582:	370c      	adds	r7, #12
 8007584:	46bd      	mov	sp, r7
 8007586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758a:	4770      	bx	lr

0800758c <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800758c:	b480      	push	{r7}
 800758e:	b083      	sub	sp, #12
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007594:	bf00      	nop
 8007596:	370c      	adds	r7, #12
 8007598:	46bd      	mov	sp, r7
 800759a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759e:	4770      	bx	lr

080075a0 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80075a0:	b480      	push	{r7}
 80075a2:	b083      	sub	sp, #12
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80075a8:	bf00      	nop
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b2:	4770      	bx	lr

080075b4 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80075b4:	b480      	push	{r7}
 80075b6:	b083      	sub	sp, #12
 80075b8:	af00      	add	r7, sp, #0
 80075ba:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80075bc:	bf00      	nop
 80075be:	370c      	adds	r7, #12
 80075c0:	46bd      	mov	sp, r7
 80075c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c6:	4770      	bx	lr

080075c8 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80075c8:	b480      	push	{r7}
 80075ca:	b083      	sub	sp, #12
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80075d0:	bf00      	nop
 80075d2:	370c      	adds	r7, #12
 80075d4:	46bd      	mov	sp, r7
 80075d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075da:	4770      	bx	lr

080075dc <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80075dc:	b480      	push	{r7}
 80075de:	b083      	sub	sp, #12
 80075e0:	af00      	add	r7, sp, #0
 80075e2:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80075e4:	bf00      	nop
 80075e6:	370c      	adds	r7, #12
 80075e8:	46bd      	mov	sp, r7
 80075ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ee:	4770      	bx	lr

080075f0 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80075f0:	b480      	push	{r7}
 80075f2:	b083      	sub	sp, #12
 80075f4:	af00      	add	r7, sp, #0
 80075f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80075f8:	bf00      	nop
 80075fa:	370c      	adds	r7, #12
 80075fc:	46bd      	mov	sp, r7
 80075fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007602:	4770      	bx	lr

08007604 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007604:	b480      	push	{r7}
 8007606:	b083      	sub	sp, #12
 8007608:	af00      	add	r7, sp, #0
 800760a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800760c:	bf00      	nop
 800760e:	370c      	adds	r7, #12
 8007610:	46bd      	mov	sp, r7
 8007612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007616:	4770      	bx	lr

08007618 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007618:	b480      	push	{r7}
 800761a:	b085      	sub	sp, #20
 800761c:	af00      	add	r7, sp, #0
 800761e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f003 0307 	and.w	r3, r3, #7
 8007626:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007628:	4b0c      	ldr	r3, [pc, #48]	@ (800765c <__NVIC_SetPriorityGrouping+0x44>)
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800762e:	68ba      	ldr	r2, [r7, #8]
 8007630:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007634:	4013      	ands	r3, r2
 8007636:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800763c:	68bb      	ldr	r3, [r7, #8]
 800763e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007640:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007644:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8007648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800764a:	4a04      	ldr	r2, [pc, #16]	@ (800765c <__NVIC_SetPriorityGrouping+0x44>)
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	60d3      	str	r3, [r2, #12]
}
 8007650:	bf00      	nop
 8007652:	3714      	adds	r7, #20
 8007654:	46bd      	mov	sp, r7
 8007656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765a:	4770      	bx	lr
 800765c:	e000ed00 	.word	0xe000ed00

08007660 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007660:	b480      	push	{r7}
 8007662:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007664:	4b04      	ldr	r3, [pc, #16]	@ (8007678 <__NVIC_GetPriorityGrouping+0x18>)
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	0a1b      	lsrs	r3, r3, #8
 800766a:	f003 0307 	and.w	r3, r3, #7
}
 800766e:	4618      	mov	r0, r3
 8007670:	46bd      	mov	sp, r7
 8007672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007676:	4770      	bx	lr
 8007678:	e000ed00 	.word	0xe000ed00

0800767c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800767c:	b480      	push	{r7}
 800767e:	b083      	sub	sp, #12
 8007680:	af00      	add	r7, sp, #0
 8007682:	4603      	mov	r3, r0
 8007684:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007686:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800768a:	2b00      	cmp	r3, #0
 800768c:	db0b      	blt.n	80076a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800768e:	79fb      	ldrb	r3, [r7, #7]
 8007690:	f003 021f 	and.w	r2, r3, #31
 8007694:	4907      	ldr	r1, [pc, #28]	@ (80076b4 <__NVIC_EnableIRQ+0x38>)
 8007696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800769a:	095b      	lsrs	r3, r3, #5
 800769c:	2001      	movs	r0, #1
 800769e:	fa00 f202 	lsl.w	r2, r0, r2
 80076a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80076a6:	bf00      	nop
 80076a8:	370c      	adds	r7, #12
 80076aa:	46bd      	mov	sp, r7
 80076ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076b0:	4770      	bx	lr
 80076b2:	bf00      	nop
 80076b4:	e000e100 	.word	0xe000e100

080076b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80076b8:	b480      	push	{r7}
 80076ba:	b083      	sub	sp, #12
 80076bc:	af00      	add	r7, sp, #0
 80076be:	4603      	mov	r3, r0
 80076c0:	6039      	str	r1, [r7, #0]
 80076c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80076c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	db0a      	blt.n	80076e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076cc:	683b      	ldr	r3, [r7, #0]
 80076ce:	b2da      	uxtb	r2, r3
 80076d0:	490c      	ldr	r1, [pc, #48]	@ (8007704 <__NVIC_SetPriority+0x4c>)
 80076d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80076d6:	0112      	lsls	r2, r2, #4
 80076d8:	b2d2      	uxtb	r2, r2
 80076da:	440b      	add	r3, r1
 80076dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80076e0:	e00a      	b.n	80076f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80076e2:	683b      	ldr	r3, [r7, #0]
 80076e4:	b2da      	uxtb	r2, r3
 80076e6:	4908      	ldr	r1, [pc, #32]	@ (8007708 <__NVIC_SetPriority+0x50>)
 80076e8:	79fb      	ldrb	r3, [r7, #7]
 80076ea:	f003 030f 	and.w	r3, r3, #15
 80076ee:	3b04      	subs	r3, #4
 80076f0:	0112      	lsls	r2, r2, #4
 80076f2:	b2d2      	uxtb	r2, r2
 80076f4:	440b      	add	r3, r1
 80076f6:	761a      	strb	r2, [r3, #24]
}
 80076f8:	bf00      	nop
 80076fa:	370c      	adds	r7, #12
 80076fc:	46bd      	mov	sp, r7
 80076fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007702:	4770      	bx	lr
 8007704:	e000e100 	.word	0xe000e100
 8007708:	e000ed00 	.word	0xe000ed00

0800770c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800770c:	b480      	push	{r7}
 800770e:	b089      	sub	sp, #36	@ 0x24
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	f003 0307 	and.w	r3, r3, #7
 800771e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007720:	69fb      	ldr	r3, [r7, #28]
 8007722:	f1c3 0307 	rsb	r3, r3, #7
 8007726:	2b04      	cmp	r3, #4
 8007728:	bf28      	it	cs
 800772a:	2304      	movcs	r3, #4
 800772c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	3304      	adds	r3, #4
 8007732:	2b06      	cmp	r3, #6
 8007734:	d902      	bls.n	800773c <NVIC_EncodePriority+0x30>
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	3b03      	subs	r3, #3
 800773a:	e000      	b.n	800773e <NVIC_EncodePriority+0x32>
 800773c:	2300      	movs	r3, #0
 800773e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007740:	f04f 32ff 	mov.w	r2, #4294967295
 8007744:	69bb      	ldr	r3, [r7, #24]
 8007746:	fa02 f303 	lsl.w	r3, r2, r3
 800774a:	43da      	mvns	r2, r3
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	401a      	ands	r2, r3
 8007750:	697b      	ldr	r3, [r7, #20]
 8007752:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007754:	f04f 31ff 	mov.w	r1, #4294967295
 8007758:	697b      	ldr	r3, [r7, #20]
 800775a:	fa01 f303 	lsl.w	r3, r1, r3
 800775e:	43d9      	mvns	r1, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007764:	4313      	orrs	r3, r2
         );
}
 8007766:	4618      	mov	r0, r3
 8007768:	3724      	adds	r7, #36	@ 0x24
 800776a:	46bd      	mov	sp, r7
 800776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007770:	4770      	bx	lr
	...

08007774 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b082      	sub	sp, #8
 8007778:	af00      	add	r7, sp, #0
 800777a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	3b01      	subs	r3, #1
 8007780:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007784:	d301      	bcc.n	800778a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007786:	2301      	movs	r3, #1
 8007788:	e00f      	b.n	80077aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800778a:	4a0a      	ldr	r2, [pc, #40]	@ (80077b4 <SysTick_Config+0x40>)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	3b01      	subs	r3, #1
 8007790:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007792:	210f      	movs	r1, #15
 8007794:	f04f 30ff 	mov.w	r0, #4294967295
 8007798:	f7ff ff8e 	bl	80076b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800779c:	4b05      	ldr	r3, [pc, #20]	@ (80077b4 <SysTick_Config+0x40>)
 800779e:	2200      	movs	r2, #0
 80077a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80077a2:	4b04      	ldr	r3, [pc, #16]	@ (80077b4 <SysTick_Config+0x40>)
 80077a4:	2207      	movs	r2, #7
 80077a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80077a8:	2300      	movs	r3, #0
}
 80077aa:	4618      	mov	r0, r3
 80077ac:	3708      	adds	r7, #8
 80077ae:	46bd      	mov	sp, r7
 80077b0:	bd80      	pop	{r7, pc}
 80077b2:	bf00      	nop
 80077b4:	e000e010 	.word	0xe000e010

080077b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80077c0:	6878      	ldr	r0, [r7, #4]
 80077c2:	f7ff ff29 	bl	8007618 <__NVIC_SetPriorityGrouping>
}
 80077c6:	bf00      	nop
 80077c8:	3708      	adds	r7, #8
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b086      	sub	sp, #24
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	4603      	mov	r3, r0
 80077d6:	60b9      	str	r1, [r7, #8]
 80077d8:	607a      	str	r2, [r7, #4]
 80077da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80077dc:	2300      	movs	r3, #0
 80077de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80077e0:	f7ff ff3e 	bl	8007660 <__NVIC_GetPriorityGrouping>
 80077e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80077e6:	687a      	ldr	r2, [r7, #4]
 80077e8:	68b9      	ldr	r1, [r7, #8]
 80077ea:	6978      	ldr	r0, [r7, #20]
 80077ec:	f7ff ff8e 	bl	800770c <NVIC_EncodePriority>
 80077f0:	4602      	mov	r2, r0
 80077f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80077f6:	4611      	mov	r1, r2
 80077f8:	4618      	mov	r0, r3
 80077fa:	f7ff ff5d 	bl	80076b8 <__NVIC_SetPriority>
}
 80077fe:	bf00      	nop
 8007800:	3718      	adds	r7, #24
 8007802:	46bd      	mov	sp, r7
 8007804:	bd80      	pop	{r7, pc}

08007806 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007806:	b580      	push	{r7, lr}
 8007808:	b082      	sub	sp, #8
 800780a:	af00      	add	r7, sp, #0
 800780c:	4603      	mov	r3, r0
 800780e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007814:	4618      	mov	r0, r3
 8007816:	f7ff ff31 	bl	800767c <__NVIC_EnableIRQ>
}
 800781a:	bf00      	nop
 800781c:	3708      	adds	r7, #8
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b082      	sub	sp, #8
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800782a:	6878      	ldr	r0, [r7, #4]
 800782c:	f7ff ffa2 	bl	8007774 <SysTick_Config>
 8007830:	4603      	mov	r3, r0
}
 8007832:	4618      	mov	r0, r3
 8007834:	3708      	adds	r7, #8
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}
	...

0800783c <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b086      	sub	sp, #24
 8007840:	af00      	add	r7, sp, #0
 8007842:	60f8      	str	r0, [r7, #12]
 8007844:	60b9      	str	r1, [r7, #8]
 8007846:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	75fb      	strb	r3, [r7, #23]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800784e:	4b23      	ldr	r3, [pc, #140]	@ (80078dc <HAL_FLASH_Program+0xa0>)
 8007850:	7e1b      	ldrb	r3, [r3, #24]
 8007852:	2b01      	cmp	r3, #1
 8007854:	d101      	bne.n	800785a <HAL_FLASH_Program+0x1e>
 8007856:	2302      	movs	r3, #2
 8007858:	e03b      	b.n	80078d2 <HAL_FLASH_Program+0x96>
 800785a:	4b20      	ldr	r3, [pc, #128]	@ (80078dc <HAL_FLASH_Program+0xa0>)
 800785c:	2201      	movs	r2, #1
 800785e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007860:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007864:	f000 f870 	bl	8007948 <FLASH_WaitForLastOperation>
 8007868:	4603      	mov	r3, r0
 800786a:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 800786c:	7dfb      	ldrb	r3, [r7, #23]
 800786e:	2b00      	cmp	r3, #0
 8007870:	d12b      	bne.n	80078ca <HAL_FLASH_Program+0x8e>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	2b00      	cmp	r3, #0
 8007876:	d105      	bne.n	8007884 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8007878:	783b      	ldrb	r3, [r7, #0]
 800787a:	4619      	mov	r1, r3
 800787c:	68b8      	ldr	r0, [r7, #8]
 800787e:	f000 f91b 	bl	8007ab8 <FLASH_Program_Byte>
 8007882:	e016      	b.n	80078b2 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	2b01      	cmp	r3, #1
 8007888:	d105      	bne.n	8007896 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800788a:	883b      	ldrh	r3, [r7, #0]
 800788c:	4619      	mov	r1, r3
 800788e:	68b8      	ldr	r0, [r7, #8]
 8007890:	f000 f8ee 	bl	8007a70 <FLASH_Program_HalfWord>
 8007894:	e00d      	b.n	80078b2 <HAL_FLASH_Program+0x76>
    }
    else if (TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2b02      	cmp	r3, #2
 800789a:	d105      	bne.n	80078a8 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	4619      	mov	r1, r3
 80078a0:	68b8      	ldr	r0, [r7, #8]
 80078a2:	f000 f8c3 	bl	8007a2c <FLASH_Program_Word>
 80078a6:	e004      	b.n	80078b2 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80078a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80078ac:	68b8      	ldr	r0, [r7, #8]
 80078ae:	f000 f88b 	bl	80079c8 <FLASH_Program_DoubleWord>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80078b2:	f24c 3050 	movw	r0, #50000	@ 0xc350
 80078b6:	f000 f847 	bl	8007948 <FLASH_WaitForLastOperation>
 80078ba:	4603      	mov	r3, r0
 80078bc:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 80078be:	4b08      	ldr	r3, [pc, #32]	@ (80078e0 <HAL_FLASH_Program+0xa4>)
 80078c0:	691b      	ldr	r3, [r3, #16]
 80078c2:	4a07      	ldr	r2, [pc, #28]	@ (80078e0 <HAL_FLASH_Program+0xa4>)
 80078c4:	f023 0301 	bic.w	r3, r3, #1
 80078c8:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80078ca:	4b04      	ldr	r3, [pc, #16]	@ (80078dc <HAL_FLASH_Program+0xa0>)
 80078cc:	2200      	movs	r2, #0
 80078ce:	761a      	strb	r2, [r3, #24]

  return status;
 80078d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	3718      	adds	r7, #24
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}
 80078da:	bf00      	nop
 80078dc:	20005b34 	.word	0x20005b34
 80078e0:	40023c00 	.word	0x40023c00

080078e4 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80078e4:	b480      	push	{r7}
 80078e6:	b083      	sub	sp, #12
 80078e8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80078ea:	2300      	movs	r3, #0
 80078ec:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80078ee:	4b0b      	ldr	r3, [pc, #44]	@ (800791c <HAL_FLASH_Unlock+0x38>)
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	da0b      	bge.n	800790e <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80078f6:	4b09      	ldr	r3, [pc, #36]	@ (800791c <HAL_FLASH_Unlock+0x38>)
 80078f8:	4a09      	ldr	r2, [pc, #36]	@ (8007920 <HAL_FLASH_Unlock+0x3c>)
 80078fa:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80078fc:	4b07      	ldr	r3, [pc, #28]	@ (800791c <HAL_FLASH_Unlock+0x38>)
 80078fe:	4a09      	ldr	r2, [pc, #36]	@ (8007924 <HAL_FLASH_Unlock+0x40>)
 8007900:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007902:	4b06      	ldr	r3, [pc, #24]	@ (800791c <HAL_FLASH_Unlock+0x38>)
 8007904:	691b      	ldr	r3, [r3, #16]
 8007906:	2b00      	cmp	r3, #0
 8007908:	da01      	bge.n	800790e <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800790a:	2301      	movs	r3, #1
 800790c:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800790e:	79fb      	ldrb	r3, [r7, #7]
}
 8007910:	4618      	mov	r0, r3
 8007912:	370c      	adds	r7, #12
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr
 800791c:	40023c00 	.word	0x40023c00
 8007920:	45670123 	.word	0x45670123
 8007924:	cdef89ab 	.word	0xcdef89ab

08007928 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007928:	b480      	push	{r7}
 800792a:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 800792c:	4b05      	ldr	r3, [pc, #20]	@ (8007944 <HAL_FLASH_Lock+0x1c>)
 800792e:	691b      	ldr	r3, [r3, #16]
 8007930:	4a04      	ldr	r2, [pc, #16]	@ (8007944 <HAL_FLASH_Lock+0x1c>)
 8007932:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007936:	6113      	str	r3, [r2, #16]

  return HAL_OK;
 8007938:	2300      	movs	r3, #0
}
 800793a:	4618      	mov	r0, r3
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr
 8007944:	40023c00 	.word	0x40023c00

08007948 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b084      	sub	sp, #16
 800794c:	af00      	add	r7, sp, #0
 800794e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007950:	2300      	movs	r3, #0
 8007952:	60fb      	str	r3, [r7, #12]

  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007954:	4b1a      	ldr	r3, [pc, #104]	@ (80079c0 <FLASH_WaitForLastOperation+0x78>)
 8007956:	2200      	movs	r2, #0
 8007958:	61da      	str	r2, [r3, #28]

  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800795a:	f7fe ff73 	bl	8006844 <HAL_GetTick>
 800795e:	60f8      	str	r0, [r7, #12]

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8007960:	e010      	b.n	8007984 <FLASH_WaitForLastOperation+0x3c>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007968:	d00c      	beq.n	8007984 <FLASH_WaitForLastOperation+0x3c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	2b00      	cmp	r3, #0
 800796e:	d007      	beq.n	8007980 <FLASH_WaitForLastOperation+0x38>
 8007970:	f7fe ff68 	bl	8006844 <HAL_GetTick>
 8007974:	4602      	mov	r2, r0
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	1ad3      	subs	r3, r2, r3
 800797a:	687a      	ldr	r2, [r7, #4]
 800797c:	429a      	cmp	r2, r3
 800797e:	d201      	bcs.n	8007984 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8007980:	2303      	movs	r3, #3
 8007982:	e019      	b.n	80079b8 <FLASH_WaitForLastOperation+0x70>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET)
 8007984:	4b0f      	ldr	r3, [pc, #60]	@ (80079c4 <FLASH_WaitForLastOperation+0x7c>)
 8007986:	68db      	ldr	r3, [r3, #12]
 8007988:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800798c:	2b00      	cmp	r3, #0
 800798e:	d1e8      	bne.n	8007962 <FLASH_WaitForLastOperation+0x1a>
      }
    }
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007990:	4b0c      	ldr	r3, [pc, #48]	@ (80079c4 <FLASH_WaitForLastOperation+0x7c>)
 8007992:	68db      	ldr	r3, [r3, #12]
 8007994:	f003 0301 	and.w	r3, r3, #1
 8007998:	2b00      	cmp	r3, #0
 800799a:	d002      	beq.n	80079a2 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800799c:	4b09      	ldr	r3, [pc, #36]	@ (80079c4 <FLASH_WaitForLastOperation+0x7c>)
 800799e:	2201      	movs	r2, #1
 80079a0:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if (__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80079a2:	4b08      	ldr	r3, [pc, #32]	@ (80079c4 <FLASH_WaitForLastOperation+0x7c>)
 80079a4:	68db      	ldr	r3, [r3, #12]
 80079a6:	f003 03f2 	and.w	r3, r3, #242	@ 0xf2
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d003      	beq.n	80079b6 <FLASH_WaitForLastOperation+0x6e>
                            FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80079ae:	f000 f8a5 	bl	8007afc <FLASH_SetErrorCode>
    return HAL_ERROR;
 80079b2:	2301      	movs	r3, #1
 80079b4:	e000      	b.n	80079b8 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80079b6:	2300      	movs	r3, #0

}
 80079b8:	4618      	mov	r0, r3
 80079ba:	3710      	adds	r7, #16
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}
 80079c0:	20005b34 	.word	0x20005b34
 80079c4:	40023c00 	.word	0x40023c00

080079c8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b085      	sub	sp, #20
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80079d4:	4b14      	ldr	r3, [pc, #80]	@ (8007a28 <FLASH_Program_DoubleWord+0x60>)
 80079d6:	691b      	ldr	r3, [r3, #16]
 80079d8:	4a13      	ldr	r2, [pc, #76]	@ (8007a28 <FLASH_Program_DoubleWord+0x60>)
 80079da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80079de:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80079e0:	4b11      	ldr	r3, [pc, #68]	@ (8007a28 <FLASH_Program_DoubleWord+0x60>)
 80079e2:	691b      	ldr	r3, [r3, #16]
 80079e4:	4a10      	ldr	r2, [pc, #64]	@ (8007a28 <FLASH_Program_DoubleWord+0x60>)
 80079e6:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 80079ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80079ec:	4b0e      	ldr	r3, [pc, #56]	@ (8007a28 <FLASH_Program_DoubleWord+0x60>)
 80079ee:	691b      	ldr	r3, [r3, #16]
 80079f0:	4a0d      	ldr	r2, [pc, #52]	@ (8007a28 <FLASH_Program_DoubleWord+0x60>)
 80079f2:	f043 0301 	orr.w	r3, r3, #1
 80079f6:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t *)Address = (uint32_t)Data;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	683a      	ldr	r2, [r7, #0]
 80079fc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80079fe:	f3bf 8f6f 	isb	sy
}
 8007a02:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t *)(Address + 4) = (uint32_t)(Data >> 32);
 8007a04:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007a08:	f04f 0200 	mov.w	r2, #0
 8007a0c:	f04f 0300 	mov.w	r3, #0
 8007a10:	000a      	movs	r2, r1
 8007a12:	2300      	movs	r3, #0
 8007a14:	68f9      	ldr	r1, [r7, #12]
 8007a16:	3104      	adds	r1, #4
 8007a18:	4613      	mov	r3, r2
 8007a1a:	600b      	str	r3, [r1, #0]
}
 8007a1c:	bf00      	nop
 8007a1e:	3714      	adds	r7, #20
 8007a20:	46bd      	mov	sp, r7
 8007a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a26:	4770      	bx	lr
 8007a28:	40023c00 	.word	0x40023c00

08007a2c <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8007a2c:	b480      	push	{r7}
 8007a2e:	b083      	sub	sp, #12
 8007a30:	af00      	add	r7, sp, #0
 8007a32:	6078      	str	r0, [r7, #4]
 8007a34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007a36:	4b0d      	ldr	r3, [pc, #52]	@ (8007a6c <FLASH_Program_Word+0x40>)
 8007a38:	691b      	ldr	r3, [r3, #16]
 8007a3a:	4a0c      	ldr	r2, [pc, #48]	@ (8007a6c <FLASH_Program_Word+0x40>)
 8007a3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a40:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8007a42:	4b0a      	ldr	r3, [pc, #40]	@ (8007a6c <FLASH_Program_Word+0x40>)
 8007a44:	691b      	ldr	r3, [r3, #16]
 8007a46:	4a09      	ldr	r2, [pc, #36]	@ (8007a6c <FLASH_Program_Word+0x40>)
 8007a48:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007a4c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007a4e:	4b07      	ldr	r3, [pc, #28]	@ (8007a6c <FLASH_Program_Word+0x40>)
 8007a50:	691b      	ldr	r3, [r3, #16]
 8007a52:	4a06      	ldr	r2, [pc, #24]	@ (8007a6c <FLASH_Program_Word+0x40>)
 8007a54:	f043 0301 	orr.w	r3, r3, #1
 8007a58:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t *)Address = Data;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	683a      	ldr	r2, [r7, #0]
 8007a5e:	601a      	str	r2, [r3, #0]
}
 8007a60:	bf00      	nop
 8007a62:	370c      	adds	r7, #12
 8007a64:	46bd      	mov	sp, r7
 8007a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a6a:	4770      	bx	lr
 8007a6c:	40023c00 	.word	0x40023c00

08007a70 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8007a70:	b480      	push	{r7}
 8007a72:	b083      	sub	sp, #12
 8007a74:	af00      	add	r7, sp, #0
 8007a76:	6078      	str	r0, [r7, #4]
 8007a78:	460b      	mov	r3, r1
 8007a7a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007a7c:	4b0d      	ldr	r3, [pc, #52]	@ (8007ab4 <FLASH_Program_HalfWord+0x44>)
 8007a7e:	691b      	ldr	r3, [r3, #16]
 8007a80:	4a0c      	ldr	r2, [pc, #48]	@ (8007ab4 <FLASH_Program_HalfWord+0x44>)
 8007a82:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007a86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8007a88:	4b0a      	ldr	r3, [pc, #40]	@ (8007ab4 <FLASH_Program_HalfWord+0x44>)
 8007a8a:	691b      	ldr	r3, [r3, #16]
 8007a8c:	4a09      	ldr	r2, [pc, #36]	@ (8007ab4 <FLASH_Program_HalfWord+0x44>)
 8007a8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007a92:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007a94:	4b07      	ldr	r3, [pc, #28]	@ (8007ab4 <FLASH_Program_HalfWord+0x44>)
 8007a96:	691b      	ldr	r3, [r3, #16]
 8007a98:	4a06      	ldr	r2, [pc, #24]	@ (8007ab4 <FLASH_Program_HalfWord+0x44>)
 8007a9a:	f043 0301 	orr.w	r3, r3, #1
 8007a9e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t *)Address = Data;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	887a      	ldrh	r2, [r7, #2]
 8007aa4:	801a      	strh	r2, [r3, #0]
}
 8007aa6:	bf00      	nop
 8007aa8:	370c      	adds	r7, #12
 8007aaa:	46bd      	mov	sp, r7
 8007aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab0:	4770      	bx	lr
 8007ab2:	bf00      	nop
 8007ab4:	40023c00 	.word	0x40023c00

08007ab8 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8007ab8:	b480      	push	{r7}
 8007aba:	b083      	sub	sp, #12
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
 8007ac0:	460b      	mov	r3, r1
 8007ac2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));

  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007ac4:	4b0c      	ldr	r3, [pc, #48]	@ (8007af8 <FLASH_Program_Byte+0x40>)
 8007ac6:	691b      	ldr	r3, [r3, #16]
 8007ac8:	4a0b      	ldr	r2, [pc, #44]	@ (8007af8 <FLASH_Program_Byte+0x40>)
 8007aca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007ace:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8007ad0:	4b09      	ldr	r3, [pc, #36]	@ (8007af8 <FLASH_Program_Byte+0x40>)
 8007ad2:	4a09      	ldr	r2, [pc, #36]	@ (8007af8 <FLASH_Program_Byte+0x40>)
 8007ad4:	691b      	ldr	r3, [r3, #16]
 8007ad6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007ad8:	4b07      	ldr	r3, [pc, #28]	@ (8007af8 <FLASH_Program_Byte+0x40>)
 8007ada:	691b      	ldr	r3, [r3, #16]
 8007adc:	4a06      	ldr	r2, [pc, #24]	@ (8007af8 <FLASH_Program_Byte+0x40>)
 8007ade:	f043 0301 	orr.w	r3, r3, #1
 8007ae2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t *)Address = Data;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	78fa      	ldrb	r2, [r7, #3]
 8007ae8:	701a      	strb	r2, [r3, #0]
}
 8007aea:	bf00      	nop
 8007aec:	370c      	adds	r7, #12
 8007aee:	46bd      	mov	sp, r7
 8007af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af4:	4770      	bx	lr
 8007af6:	bf00      	nop
 8007af8:	40023c00 	.word	0x40023c00

08007afc <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8007afc:	b480      	push	{r7}
 8007afe:	af00      	add	r7, sp, #0
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007b00:	4b27      	ldr	r3, [pc, #156]	@ (8007ba0 <FLASH_SetErrorCode+0xa4>)
 8007b02:	68db      	ldr	r3, [r3, #12]
 8007b04:	f003 0310 	and.w	r3, r3, #16
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d008      	beq.n	8007b1e <FLASH_SetErrorCode+0x22>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007b0c:	4b25      	ldr	r3, [pc, #148]	@ (8007ba4 <FLASH_SetErrorCode+0xa8>)
 8007b0e:	69db      	ldr	r3, [r3, #28]
 8007b10:	f043 0310 	orr.w	r3, r3, #16
 8007b14:	4a23      	ldr	r2, [pc, #140]	@ (8007ba4 <FLASH_SetErrorCode+0xa8>)
 8007b16:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH write protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8007b18:	4b21      	ldr	r3, [pc, #132]	@ (8007ba0 <FLASH_SetErrorCode+0xa4>)
 8007b1a:	2210      	movs	r2, #16
 8007b1c:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007b1e:	4b20      	ldr	r3, [pc, #128]	@ (8007ba0 <FLASH_SetErrorCode+0xa4>)
 8007b20:	68db      	ldr	r3, [r3, #12]
 8007b22:	f003 0320 	and.w	r3, r3, #32
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d008      	beq.n	8007b3c <FLASH_SetErrorCode+0x40>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8007b2a:	4b1e      	ldr	r3, [pc, #120]	@ (8007ba4 <FLASH_SetErrorCode+0xa8>)
 8007b2c:	69db      	ldr	r3, [r3, #28]
 8007b2e:	f043 0308 	orr.w	r3, r3, #8
 8007b32:	4a1c      	ldr	r2, [pc, #112]	@ (8007ba4 <FLASH_SetErrorCode+0xa8>)
 8007b34:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming alignment error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8007b36:	4b1a      	ldr	r3, [pc, #104]	@ (8007ba0 <FLASH_SetErrorCode+0xa4>)
 8007b38:	2220      	movs	r2, #32
 8007b3a:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007b3c:	4b18      	ldr	r3, [pc, #96]	@ (8007ba0 <FLASH_SetErrorCode+0xa4>)
 8007b3e:	68db      	ldr	r3, [r3, #12]
 8007b40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d008      	beq.n	8007b5a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8007b48:	4b16      	ldr	r3, [pc, #88]	@ (8007ba4 <FLASH_SetErrorCode+0xa8>)
 8007b4a:	69db      	ldr	r3, [r3, #28]
 8007b4c:	f043 0304 	orr.w	r3, r3, #4
 8007b50:	4a14      	ldr	r2, [pc, #80]	@ (8007ba4 <FLASH_SetErrorCode+0xa8>)
 8007b52:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8007b54:	4b12      	ldr	r3, [pc, #72]	@ (8007ba0 <FLASH_SetErrorCode+0xa4>)
 8007b56:	2240      	movs	r2, #64	@ 0x40
 8007b58:	60da      	str	r2, [r3, #12]
  }

  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8007b5a:	4b11      	ldr	r3, [pc, #68]	@ (8007ba0 <FLASH_SetErrorCode+0xa4>)
 8007b5c:	68db      	ldr	r3, [r3, #12]
 8007b5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d008      	beq.n	8007b78 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8007b66:	4b0f      	ldr	r3, [pc, #60]	@ (8007ba4 <FLASH_SetErrorCode+0xa8>)
 8007b68:	69db      	ldr	r3, [r3, #28]
 8007b6a:	f043 0302 	orr.w	r3, r3, #2
 8007b6e:	4a0d      	ldr	r2, [pc, #52]	@ (8007ba4 <FLASH_SetErrorCode+0xa8>)
 8007b70:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8007b72:	4b0b      	ldr	r3, [pc, #44]	@ (8007ba0 <FLASH_SetErrorCode+0xa4>)
 8007b74:	2280      	movs	r2, #128	@ 0x80
 8007b76:	60da      	str	r2, [r3, #12]

    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007b78:	4b09      	ldr	r3, [pc, #36]	@ (8007ba0 <FLASH_SetErrorCode+0xa4>)
 8007b7a:	68db      	ldr	r3, [r3, #12]
 8007b7c:	f003 0302 	and.w	r3, r3, #2
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d008      	beq.n	8007b96 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007b84:	4b07      	ldr	r3, [pc, #28]	@ (8007ba4 <FLASH_SetErrorCode+0xa8>)
 8007b86:	69db      	ldr	r3, [r3, #28]
 8007b88:	f043 0320 	orr.w	r3, r3, #32
 8007b8c:	4a05      	ldr	r2, [pc, #20]	@ (8007ba4 <FLASH_SetErrorCode+0xa8>)
 8007b8e:	61d3      	str	r3, [r2, #28]

    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007b90:	4b03      	ldr	r3, [pc, #12]	@ (8007ba0 <FLASH_SetErrorCode+0xa4>)
 8007b92:	2202      	movs	r2, #2
 8007b94:	60da      	str	r2, [r3, #12]
  }
}
 8007b96:	bf00      	nop
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	40023c00 	.word	0x40023c00
 8007ba4:	20005b34 	.word	0x20005b34

08007ba8 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b084      	sub	sp, #16
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	6078      	str	r0, [r7, #4]
 8007bb0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007bb2:	2301      	movs	r3, #1
 8007bb4:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8007bb6:	2300      	movs	r3, #0
 8007bb8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007bba:	4b31      	ldr	r3, [pc, #196]	@ (8007c80 <HAL_FLASHEx_Erase+0xd8>)
 8007bbc:	7e1b      	ldrb	r3, [r3, #24]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d101      	bne.n	8007bc6 <HAL_FLASHEx_Erase+0x1e>
 8007bc2:	2302      	movs	r3, #2
 8007bc4:	e058      	b.n	8007c78 <HAL_FLASHEx_Erase+0xd0>
 8007bc6:	4b2e      	ldr	r3, [pc, #184]	@ (8007c80 <HAL_FLASHEx_Erase+0xd8>)
 8007bc8:	2201      	movs	r2, #1
 8007bca:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007bcc:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007bd0:	f7ff feba 	bl	8007948 <FLASH_WaitForLastOperation>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007bd8:	7bfb      	ldrb	r3, [r7, #15]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d148      	bne.n	8007c70 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8007bde:	683b      	ldr	r3, [r7, #0]
 8007be0:	f04f 32ff 	mov.w	r2, #4294967295
 8007be4:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d115      	bne.n	8007c1a <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	691b      	ldr	r3, [r3, #16]
 8007bf2:	b2da      	uxtb	r2, r3
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	4610      	mov	r0, r2
 8007bfc:	f000 f844 	bl	8007c88 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007c00:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007c04:	f7ff fea0 	bl	8007948 <FLASH_WaitForLastOperation>
 8007c08:	4603      	mov	r3, r0
 8007c0a:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8007c0c:	4b1d      	ldr	r3, [pc, #116]	@ (8007c84 <HAL_FLASHEx_Erase+0xdc>)
 8007c0e:	691b      	ldr	r3, [r3, #16]
 8007c10:	4a1c      	ldr	r2, [pc, #112]	@ (8007c84 <HAL_FLASHEx_Erase+0xdc>)
 8007c12:	f023 0304 	bic.w	r3, r3, #4
 8007c16:	6113      	str	r3, [r2, #16]
 8007c18:	e028      	b.n	8007c6c <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	689b      	ldr	r3, [r3, #8]
 8007c1e:	60bb      	str	r3, [r7, #8]
 8007c20:	e01c      	b.n	8007c5c <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	691b      	ldr	r3, [r3, #16]
 8007c26:	b2db      	uxtb	r3, r3
 8007c28:	4619      	mov	r1, r3
 8007c2a:	68b8      	ldr	r0, [r7, #8]
 8007c2c:	f000 f850 	bl	8007cd0 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007c30:	f24c 3050 	movw	r0, #50000	@ 0xc350
 8007c34:	f7ff fe88 	bl	8007948 <FLASH_WaitForLastOperation>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8007c3c:	4b11      	ldr	r3, [pc, #68]	@ (8007c84 <HAL_FLASHEx_Erase+0xdc>)
 8007c3e:	691b      	ldr	r3, [r3, #16]
 8007c40:	4a10      	ldr	r2, [pc, #64]	@ (8007c84 <HAL_FLASHEx_Erase+0xdc>)
 8007c42:	f023 03fa 	bic.w	r3, r3, #250	@ 0xfa
 8007c46:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8007c48:	7bfb      	ldrb	r3, [r7, #15]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d003      	beq.n	8007c56 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	68ba      	ldr	r2, [r7, #8]
 8007c52:	601a      	str	r2, [r3, #0]
          break;
 8007c54:	e00a      	b.n	8007c6c <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007c56:	68bb      	ldr	r3, [r7, #8]
 8007c58:	3301      	adds	r3, #1
 8007c5a:	60bb      	str	r3, [r7, #8]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	68da      	ldr	r2, [r3, #12]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	689b      	ldr	r3, [r3, #8]
 8007c64:	4413      	add	r3, r2
 8007c66:	68ba      	ldr	r2, [r7, #8]
 8007c68:	429a      	cmp	r2, r3
 8007c6a:	d3da      	bcc.n	8007c22 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8007c6c:	f000 f878 	bl	8007d60 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007c70:	4b03      	ldr	r3, [pc, #12]	@ (8007c80 <HAL_FLASHEx_Erase+0xd8>)
 8007c72:	2200      	movs	r2, #0
 8007c74:	761a      	strb	r2, [r3, #24]

  return status;
 8007c76:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}
 8007c80:	20005b34 	.word	0x20005b34
 8007c84:	40023c00 	.word	0x40023c00

08007c88 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8007c88:	b480      	push	{r7}
 8007c8a:	b083      	sub	sp, #12
 8007c8c:	af00      	add	r7, sp, #0
 8007c8e:	4603      	mov	r3, r0
 8007c90:	6039      	str	r1, [r7, #0]
 8007c92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007c94:	4b0d      	ldr	r3, [pc, #52]	@ (8007ccc <FLASH_MassErase+0x44>)
 8007c96:	691b      	ldr	r3, [r3, #16]
 8007c98:	4a0c      	ldr	r2, [pc, #48]	@ (8007ccc <FLASH_MassErase+0x44>)
 8007c9a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007c9e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8007ca0:	4b0a      	ldr	r3, [pc, #40]	@ (8007ccc <FLASH_MassErase+0x44>)
 8007ca2:	691b      	ldr	r3, [r3, #16]
 8007ca4:	4a09      	ldr	r2, [pc, #36]	@ (8007ccc <FLASH_MassErase+0x44>)
 8007ca6:	f043 0304 	orr.w	r3, r3, #4
 8007caa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8007cac:	4b07      	ldr	r3, [pc, #28]	@ (8007ccc <FLASH_MassErase+0x44>)
 8007cae:	691a      	ldr	r2, [r3, #16]
 8007cb0:	79fb      	ldrb	r3, [r7, #7]
 8007cb2:	021b      	lsls	r3, r3, #8
 8007cb4:	4313      	orrs	r3, r2
 8007cb6:	4a05      	ldr	r2, [pc, #20]	@ (8007ccc <FLASH_MassErase+0x44>)
 8007cb8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cbc:	6113      	str	r3, [r2, #16]
}
 8007cbe:	bf00      	nop
 8007cc0:	370c      	adds	r7, #12
 8007cc2:	46bd      	mov	sp, r7
 8007cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	40023c00 	.word	0x40023c00

08007cd0 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8007cd0:	b480      	push	{r7}
 8007cd2:	b085      	sub	sp, #20
 8007cd4:	af00      	add	r7, sp, #0
 8007cd6:	6078      	str	r0, [r7, #4]
 8007cd8:	460b      	mov	r3, r1
 8007cda:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8007ce0:	78fb      	ldrb	r3, [r7, #3]
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d102      	bne.n	8007cec <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8007ce6:	2300      	movs	r3, #0
 8007ce8:	60fb      	str	r3, [r7, #12]
 8007cea:	e010      	b.n	8007d0e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007cec:	78fb      	ldrb	r3, [r7, #3]
 8007cee:	2b01      	cmp	r3, #1
 8007cf0:	d103      	bne.n	8007cfa <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8007cf2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007cf6:	60fb      	str	r3, [r7, #12]
 8007cf8:	e009      	b.n	8007d0e <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8007cfa:	78fb      	ldrb	r3, [r7, #3]
 8007cfc:	2b02      	cmp	r3, #2
 8007cfe:	d103      	bne.n	8007d08 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8007d00:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007d04:	60fb      	str	r3, [r7, #12]
 8007d06:	e002      	b.n	8007d0e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007d08:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8007d0c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007d0e:	4b13      	ldr	r3, [pc, #76]	@ (8007d5c <FLASH_Erase_Sector+0x8c>)
 8007d10:	691b      	ldr	r3, [r3, #16]
 8007d12:	4a12      	ldr	r2, [pc, #72]	@ (8007d5c <FLASH_Erase_Sector+0x8c>)
 8007d14:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007d18:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8007d1a:	4b10      	ldr	r3, [pc, #64]	@ (8007d5c <FLASH_Erase_Sector+0x8c>)
 8007d1c:	691a      	ldr	r2, [r3, #16]
 8007d1e:	490f      	ldr	r1, [pc, #60]	@ (8007d5c <FLASH_Erase_Sector+0x8c>)
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8007d26:	4b0d      	ldr	r3, [pc, #52]	@ (8007d5c <FLASH_Erase_Sector+0x8c>)
 8007d28:	691b      	ldr	r3, [r3, #16]
 8007d2a:	4a0c      	ldr	r2, [pc, #48]	@ (8007d5c <FLASH_Erase_Sector+0x8c>)
 8007d2c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8007d30:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8007d32:	4b0a      	ldr	r3, [pc, #40]	@ (8007d5c <FLASH_Erase_Sector+0x8c>)
 8007d34:	691a      	ldr	r2, [r3, #16]
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	00db      	lsls	r3, r3, #3
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	4a07      	ldr	r2, [pc, #28]	@ (8007d5c <FLASH_Erase_Sector+0x8c>)
 8007d3e:	f043 0302 	orr.w	r3, r3, #2
 8007d42:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007d44:	4b05      	ldr	r3, [pc, #20]	@ (8007d5c <FLASH_Erase_Sector+0x8c>)
 8007d46:	691b      	ldr	r3, [r3, #16]
 8007d48:	4a04      	ldr	r2, [pc, #16]	@ (8007d5c <FLASH_Erase_Sector+0x8c>)
 8007d4a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007d4e:	6113      	str	r3, [r2, #16]
}
 8007d50:	bf00      	nop
 8007d52:	3714      	adds	r7, #20
 8007d54:	46bd      	mov	sp, r7
 8007d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d5a:	4770      	bx	lr
 8007d5c:	40023c00 	.word	0x40023c00

08007d60 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007d60:	b480      	push	{r7}
 8007d62:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8007d64:	4b20      	ldr	r3, [pc, #128]	@ (8007de8 <FLASH_FlushCaches+0x88>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d017      	beq.n	8007da0 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007d70:	4b1d      	ldr	r3, [pc, #116]	@ (8007de8 <FLASH_FlushCaches+0x88>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a1c      	ldr	r2, [pc, #112]	@ (8007de8 <FLASH_FlushCaches+0x88>)
 8007d76:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8007d7a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8007de8 <FLASH_FlushCaches+0x88>)
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	4a19      	ldr	r2, [pc, #100]	@ (8007de8 <FLASH_FlushCaches+0x88>)
 8007d82:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8007d86:	6013      	str	r3, [r2, #0]
 8007d88:	4b17      	ldr	r3, [pc, #92]	@ (8007de8 <FLASH_FlushCaches+0x88>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	4a16      	ldr	r2, [pc, #88]	@ (8007de8 <FLASH_FlushCaches+0x88>)
 8007d8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8007d92:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007d94:	4b14      	ldr	r3, [pc, #80]	@ (8007de8 <FLASH_FlushCaches+0x88>)
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	4a13      	ldr	r2, [pc, #76]	@ (8007de8 <FLASH_FlushCaches+0x88>)
 8007d9a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007d9e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8007da0:	4b11      	ldr	r3, [pc, #68]	@ (8007de8 <FLASH_FlushCaches+0x88>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d017      	beq.n	8007ddc <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007dac:	4b0e      	ldr	r3, [pc, #56]	@ (8007de8 <FLASH_FlushCaches+0x88>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	4a0d      	ldr	r2, [pc, #52]	@ (8007de8 <FLASH_FlushCaches+0x88>)
 8007db2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8007db6:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007db8:	4b0b      	ldr	r3, [pc, #44]	@ (8007de8 <FLASH_FlushCaches+0x88>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4a0a      	ldr	r2, [pc, #40]	@ (8007de8 <FLASH_FlushCaches+0x88>)
 8007dbe:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007dc2:	6013      	str	r3, [r2, #0]
 8007dc4:	4b08      	ldr	r3, [pc, #32]	@ (8007de8 <FLASH_FlushCaches+0x88>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	4a07      	ldr	r2, [pc, #28]	@ (8007de8 <FLASH_FlushCaches+0x88>)
 8007dca:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007dce:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8007dd0:	4b05      	ldr	r3, [pc, #20]	@ (8007de8 <FLASH_FlushCaches+0x88>)
 8007dd2:	681b      	ldr	r3, [r3, #0]
 8007dd4:	4a04      	ldr	r2, [pc, #16]	@ (8007de8 <FLASH_FlushCaches+0x88>)
 8007dd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8007dda:	6013      	str	r3, [r2, #0]
  }
}
 8007ddc:	bf00      	nop
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	40023c00 	.word	0x40023c00

08007dec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007dec:	b480      	push	{r7}
 8007dee:	b089      	sub	sp, #36	@ 0x24
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
 8007df4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007df6:	2300      	movs	r3, #0
 8007df8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007dfa:	2300      	movs	r3, #0
 8007dfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007dfe:	2300      	movs	r3, #0
 8007e00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007e02:	2300      	movs	r3, #0
 8007e04:	61fb      	str	r3, [r7, #28]
 8007e06:	e16b      	b.n	80080e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007e08:	2201      	movs	r2, #1
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8007e10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007e12:	683b      	ldr	r3, [r7, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	697a      	ldr	r2, [r7, #20]
 8007e18:	4013      	ands	r3, r2
 8007e1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007e1c:	693a      	ldr	r2, [r7, #16]
 8007e1e:	697b      	ldr	r3, [r7, #20]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	f040 815a 	bne.w	80080da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007e26:	683b      	ldr	r3, [r7, #0]
 8007e28:	685b      	ldr	r3, [r3, #4]
 8007e2a:	f003 0303 	and.w	r3, r3, #3
 8007e2e:	2b01      	cmp	r3, #1
 8007e30:	d005      	beq.n	8007e3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	685b      	ldr	r3, [r3, #4]
 8007e36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8007e3a:	2b02      	cmp	r3, #2
 8007e3c:	d130      	bne.n	8007ea0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007e3e:	687b      	ldr	r3, [r7, #4]
 8007e40:	689b      	ldr	r3, [r3, #8]
 8007e42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007e44:	69fb      	ldr	r3, [r7, #28]
 8007e46:	005b      	lsls	r3, r3, #1
 8007e48:	2203      	movs	r2, #3
 8007e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007e4e:	43db      	mvns	r3, r3
 8007e50:	69ba      	ldr	r2, [r7, #24]
 8007e52:	4013      	ands	r3, r2
 8007e54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	68da      	ldr	r2, [r3, #12]
 8007e5a:	69fb      	ldr	r3, [r7, #28]
 8007e5c:	005b      	lsls	r3, r3, #1
 8007e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e62:	69ba      	ldr	r2, [r7, #24]
 8007e64:	4313      	orrs	r3, r2
 8007e66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	69ba      	ldr	r2, [r7, #24]
 8007e6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	685b      	ldr	r3, [r3, #4]
 8007e72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007e74:	2201      	movs	r2, #1
 8007e76:	69fb      	ldr	r3, [r7, #28]
 8007e78:	fa02 f303 	lsl.w	r3, r2, r3
 8007e7c:	43db      	mvns	r3, r3
 8007e7e:	69ba      	ldr	r2, [r7, #24]
 8007e80:	4013      	ands	r3, r2
 8007e82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	685b      	ldr	r3, [r3, #4]
 8007e88:	091b      	lsrs	r3, r3, #4
 8007e8a:	f003 0201 	and.w	r2, r3, #1
 8007e8e:	69fb      	ldr	r3, [r7, #28]
 8007e90:	fa02 f303 	lsl.w	r3, r2, r3
 8007e94:	69ba      	ldr	r2, [r7, #24]
 8007e96:	4313      	orrs	r3, r2
 8007e98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	69ba      	ldr	r2, [r7, #24]
 8007e9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	685b      	ldr	r3, [r3, #4]
 8007ea4:	f003 0303 	and.w	r3, r3, #3
 8007ea8:	2b03      	cmp	r3, #3
 8007eaa:	d017      	beq.n	8007edc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	68db      	ldr	r3, [r3, #12]
 8007eb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007eb2:	69fb      	ldr	r3, [r7, #28]
 8007eb4:	005b      	lsls	r3, r3, #1
 8007eb6:	2203      	movs	r2, #3
 8007eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8007ebc:	43db      	mvns	r3, r3
 8007ebe:	69ba      	ldr	r2, [r7, #24]
 8007ec0:	4013      	ands	r3, r2
 8007ec2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007ec4:	683b      	ldr	r3, [r7, #0]
 8007ec6:	689a      	ldr	r2, [r3, #8]
 8007ec8:	69fb      	ldr	r3, [r7, #28]
 8007eca:	005b      	lsls	r3, r3, #1
 8007ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8007ed0:	69ba      	ldr	r2, [r7, #24]
 8007ed2:	4313      	orrs	r3, r2
 8007ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	69ba      	ldr	r2, [r7, #24]
 8007eda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	685b      	ldr	r3, [r3, #4]
 8007ee0:	f003 0303 	and.w	r3, r3, #3
 8007ee4:	2b02      	cmp	r3, #2
 8007ee6:	d123      	bne.n	8007f30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	08da      	lsrs	r2, r3, #3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	3208      	adds	r2, #8
 8007ef0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	f003 0307 	and.w	r3, r3, #7
 8007efc:	009b      	lsls	r3, r3, #2
 8007efe:	220f      	movs	r2, #15
 8007f00:	fa02 f303 	lsl.w	r3, r2, r3
 8007f04:	43db      	mvns	r3, r3
 8007f06:	69ba      	ldr	r2, [r7, #24]
 8007f08:	4013      	ands	r3, r2
 8007f0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	691a      	ldr	r2, [r3, #16]
 8007f10:	69fb      	ldr	r3, [r7, #28]
 8007f12:	f003 0307 	and.w	r3, r3, #7
 8007f16:	009b      	lsls	r3, r3, #2
 8007f18:	fa02 f303 	lsl.w	r3, r2, r3
 8007f1c:	69ba      	ldr	r2, [r7, #24]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	08da      	lsrs	r2, r3, #3
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	3208      	adds	r2, #8
 8007f2a:	69b9      	ldr	r1, [r7, #24]
 8007f2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	005b      	lsls	r3, r3, #1
 8007f3a:	2203      	movs	r2, #3
 8007f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8007f40:	43db      	mvns	r3, r3
 8007f42:	69ba      	ldr	r2, [r7, #24]
 8007f44:	4013      	ands	r3, r2
 8007f46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	685b      	ldr	r3, [r3, #4]
 8007f4c:	f003 0203 	and.w	r2, r3, #3
 8007f50:	69fb      	ldr	r3, [r7, #28]
 8007f52:	005b      	lsls	r3, r3, #1
 8007f54:	fa02 f303 	lsl.w	r3, r2, r3
 8007f58:	69ba      	ldr	r2, [r7, #24]
 8007f5a:	4313      	orrs	r3, r2
 8007f5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	69ba      	ldr	r2, [r7, #24]
 8007f62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007f64:	683b      	ldr	r3, [r7, #0]
 8007f66:	685b      	ldr	r3, [r3, #4]
 8007f68:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	f000 80b4 	beq.w	80080da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007f72:	2300      	movs	r3, #0
 8007f74:	60fb      	str	r3, [r7, #12]
 8007f76:	4b60      	ldr	r3, [pc, #384]	@ (80080f8 <HAL_GPIO_Init+0x30c>)
 8007f78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f7a:	4a5f      	ldr	r2, [pc, #380]	@ (80080f8 <HAL_GPIO_Init+0x30c>)
 8007f7c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007f80:	6453      	str	r3, [r2, #68]	@ 0x44
 8007f82:	4b5d      	ldr	r3, [pc, #372]	@ (80080f8 <HAL_GPIO_Init+0x30c>)
 8007f84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f86:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f8a:	60fb      	str	r3, [r7, #12]
 8007f8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007f8e:	4a5b      	ldr	r2, [pc, #364]	@ (80080fc <HAL_GPIO_Init+0x310>)
 8007f90:	69fb      	ldr	r3, [r7, #28]
 8007f92:	089b      	lsrs	r3, r3, #2
 8007f94:	3302      	adds	r3, #2
 8007f96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007f9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	f003 0303 	and.w	r3, r3, #3
 8007fa2:	009b      	lsls	r3, r3, #2
 8007fa4:	220f      	movs	r2, #15
 8007fa6:	fa02 f303 	lsl.w	r3, r2, r3
 8007faa:	43db      	mvns	r3, r3
 8007fac:	69ba      	ldr	r2, [r7, #24]
 8007fae:	4013      	ands	r3, r2
 8007fb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a52      	ldr	r2, [pc, #328]	@ (8008100 <HAL_GPIO_Init+0x314>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d02b      	beq.n	8008012 <HAL_GPIO_Init+0x226>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a51      	ldr	r2, [pc, #324]	@ (8008104 <HAL_GPIO_Init+0x318>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d025      	beq.n	800800e <HAL_GPIO_Init+0x222>
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	4a50      	ldr	r2, [pc, #320]	@ (8008108 <HAL_GPIO_Init+0x31c>)
 8007fc6:	4293      	cmp	r3, r2
 8007fc8:	d01f      	beq.n	800800a <HAL_GPIO_Init+0x21e>
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	4a4f      	ldr	r2, [pc, #316]	@ (800810c <HAL_GPIO_Init+0x320>)
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d019      	beq.n	8008006 <HAL_GPIO_Init+0x21a>
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	4a4e      	ldr	r2, [pc, #312]	@ (8008110 <HAL_GPIO_Init+0x324>)
 8007fd6:	4293      	cmp	r3, r2
 8007fd8:	d013      	beq.n	8008002 <HAL_GPIO_Init+0x216>
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	4a4d      	ldr	r2, [pc, #308]	@ (8008114 <HAL_GPIO_Init+0x328>)
 8007fde:	4293      	cmp	r3, r2
 8007fe0:	d00d      	beq.n	8007ffe <HAL_GPIO_Init+0x212>
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	4a4c      	ldr	r2, [pc, #304]	@ (8008118 <HAL_GPIO_Init+0x32c>)
 8007fe6:	4293      	cmp	r3, r2
 8007fe8:	d007      	beq.n	8007ffa <HAL_GPIO_Init+0x20e>
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	4a4b      	ldr	r2, [pc, #300]	@ (800811c <HAL_GPIO_Init+0x330>)
 8007fee:	4293      	cmp	r3, r2
 8007ff0:	d101      	bne.n	8007ff6 <HAL_GPIO_Init+0x20a>
 8007ff2:	2307      	movs	r3, #7
 8007ff4:	e00e      	b.n	8008014 <HAL_GPIO_Init+0x228>
 8007ff6:	2308      	movs	r3, #8
 8007ff8:	e00c      	b.n	8008014 <HAL_GPIO_Init+0x228>
 8007ffa:	2306      	movs	r3, #6
 8007ffc:	e00a      	b.n	8008014 <HAL_GPIO_Init+0x228>
 8007ffe:	2305      	movs	r3, #5
 8008000:	e008      	b.n	8008014 <HAL_GPIO_Init+0x228>
 8008002:	2304      	movs	r3, #4
 8008004:	e006      	b.n	8008014 <HAL_GPIO_Init+0x228>
 8008006:	2303      	movs	r3, #3
 8008008:	e004      	b.n	8008014 <HAL_GPIO_Init+0x228>
 800800a:	2302      	movs	r3, #2
 800800c:	e002      	b.n	8008014 <HAL_GPIO_Init+0x228>
 800800e:	2301      	movs	r3, #1
 8008010:	e000      	b.n	8008014 <HAL_GPIO_Init+0x228>
 8008012:	2300      	movs	r3, #0
 8008014:	69fa      	ldr	r2, [r7, #28]
 8008016:	f002 0203 	and.w	r2, r2, #3
 800801a:	0092      	lsls	r2, r2, #2
 800801c:	4093      	lsls	r3, r2
 800801e:	69ba      	ldr	r2, [r7, #24]
 8008020:	4313      	orrs	r3, r2
 8008022:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008024:	4935      	ldr	r1, [pc, #212]	@ (80080fc <HAL_GPIO_Init+0x310>)
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	089b      	lsrs	r3, r3, #2
 800802a:	3302      	adds	r3, #2
 800802c:	69ba      	ldr	r2, [r7, #24]
 800802e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008032:	4b3b      	ldr	r3, [pc, #236]	@ (8008120 <HAL_GPIO_Init+0x334>)
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008038:	693b      	ldr	r3, [r7, #16]
 800803a:	43db      	mvns	r3, r3
 800803c:	69ba      	ldr	r2, [r7, #24]
 800803e:	4013      	ands	r3, r2
 8008040:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	685b      	ldr	r3, [r3, #4]
 8008046:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800804a:	2b00      	cmp	r3, #0
 800804c:	d003      	beq.n	8008056 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800804e:	69ba      	ldr	r2, [r7, #24]
 8008050:	693b      	ldr	r3, [r7, #16]
 8008052:	4313      	orrs	r3, r2
 8008054:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008056:	4a32      	ldr	r2, [pc, #200]	@ (8008120 <HAL_GPIO_Init+0x334>)
 8008058:	69bb      	ldr	r3, [r7, #24]
 800805a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800805c:	4b30      	ldr	r3, [pc, #192]	@ (8008120 <HAL_GPIO_Init+0x334>)
 800805e:	68db      	ldr	r3, [r3, #12]
 8008060:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008062:	693b      	ldr	r3, [r7, #16]
 8008064:	43db      	mvns	r3, r3
 8008066:	69ba      	ldr	r2, [r7, #24]
 8008068:	4013      	ands	r3, r2
 800806a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800806c:	683b      	ldr	r3, [r7, #0]
 800806e:	685b      	ldr	r3, [r3, #4]
 8008070:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008074:	2b00      	cmp	r3, #0
 8008076:	d003      	beq.n	8008080 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008078:	69ba      	ldr	r2, [r7, #24]
 800807a:	693b      	ldr	r3, [r7, #16]
 800807c:	4313      	orrs	r3, r2
 800807e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008080:	4a27      	ldr	r2, [pc, #156]	@ (8008120 <HAL_GPIO_Init+0x334>)
 8008082:	69bb      	ldr	r3, [r7, #24]
 8008084:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8008086:	4b26      	ldr	r3, [pc, #152]	@ (8008120 <HAL_GPIO_Init+0x334>)
 8008088:	685b      	ldr	r3, [r3, #4]
 800808a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	43db      	mvns	r3, r3
 8008090:	69ba      	ldr	r2, [r7, #24]
 8008092:	4013      	ands	r3, r2
 8008094:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	685b      	ldr	r3, [r3, #4]
 800809a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d003      	beq.n	80080aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80080a2:	69ba      	ldr	r2, [r7, #24]
 80080a4:	693b      	ldr	r3, [r7, #16]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80080aa:	4a1d      	ldr	r2, [pc, #116]	@ (8008120 <HAL_GPIO_Init+0x334>)
 80080ac:	69bb      	ldr	r3, [r7, #24]
 80080ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80080b0:	4b1b      	ldr	r3, [pc, #108]	@ (8008120 <HAL_GPIO_Init+0x334>)
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80080b6:	693b      	ldr	r3, [r7, #16]
 80080b8:	43db      	mvns	r3, r3
 80080ba:	69ba      	ldr	r2, [r7, #24]
 80080bc:	4013      	ands	r3, r2
 80080be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80080c0:	683b      	ldr	r3, [r7, #0]
 80080c2:	685b      	ldr	r3, [r3, #4]
 80080c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d003      	beq.n	80080d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80080cc:	69ba      	ldr	r2, [r7, #24]
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	4313      	orrs	r3, r2
 80080d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80080d4:	4a12      	ldr	r2, [pc, #72]	@ (8008120 <HAL_GPIO_Init+0x334>)
 80080d6:	69bb      	ldr	r3, [r7, #24]
 80080d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	3301      	adds	r3, #1
 80080de:	61fb      	str	r3, [r7, #28]
 80080e0:	69fb      	ldr	r3, [r7, #28]
 80080e2:	2b0f      	cmp	r3, #15
 80080e4:	f67f ae90 	bls.w	8007e08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80080e8:	bf00      	nop
 80080ea:	bf00      	nop
 80080ec:	3724      	adds	r7, #36	@ 0x24
 80080ee:	46bd      	mov	sp, r7
 80080f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f4:	4770      	bx	lr
 80080f6:	bf00      	nop
 80080f8:	40023800 	.word	0x40023800
 80080fc:	40013800 	.word	0x40013800
 8008100:	40020000 	.word	0x40020000
 8008104:	40020400 	.word	0x40020400
 8008108:	40020800 	.word	0x40020800
 800810c:	40020c00 	.word	0x40020c00
 8008110:	40021000 	.word	0x40021000
 8008114:	40021400 	.word	0x40021400
 8008118:	40021800 	.word	0x40021800
 800811c:	40021c00 	.word	0x40021c00
 8008120:	40013c00 	.word	0x40013c00

08008124 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	460b      	mov	r3, r1
 800812e:	807b      	strh	r3, [r7, #2]
 8008130:	4613      	mov	r3, r2
 8008132:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008134:	787b      	ldrb	r3, [r7, #1]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d003      	beq.n	8008142 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800813a:	887a      	ldrh	r2, [r7, #2]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8008140:	e003      	b.n	800814a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8008142:	887b      	ldrh	r3, [r7, #2]
 8008144:	041a      	lsls	r2, r3, #16
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	619a      	str	r2, [r3, #24]
}
 800814a:	bf00      	nop
 800814c:	370c      	adds	r7, #12
 800814e:	46bd      	mov	sp, r7
 8008150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008154:	4770      	bx	lr

08008156 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008156:	b480      	push	{r7}
 8008158:	b085      	sub	sp, #20
 800815a:	af00      	add	r7, sp, #0
 800815c:	6078      	str	r0, [r7, #4]
 800815e:	460b      	mov	r3, r1
 8008160:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	695b      	ldr	r3, [r3, #20]
 8008166:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008168:	887a      	ldrh	r2, [r7, #2]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	4013      	ands	r3, r2
 800816e:	041a      	lsls	r2, r3, #16
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	43d9      	mvns	r1, r3
 8008174:	887b      	ldrh	r3, [r7, #2]
 8008176:	400b      	ands	r3, r1
 8008178:	431a      	orrs	r2, r3
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	619a      	str	r2, [r3, #24]
}
 800817e:	bf00      	nop
 8008180:	3714      	adds	r7, #20
 8008182:	46bd      	mov	sp, r7
 8008184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008188:	4770      	bx	lr

0800818a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800818a:	b580      	push	{r7, lr}
 800818c:	b086      	sub	sp, #24
 800818e:	af02      	add	r7, sp, #8
 8008190:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	2b00      	cmp	r3, #0
 8008196:	d101      	bne.n	800819c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8008198:	2301      	movs	r3, #1
 800819a:	e059      	b.n	8008250 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 80081a8:	b2db      	uxtb	r3, r3
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d106      	bne.n	80081bc <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	2200      	movs	r2, #0
 80081b2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80081b6:	6878      	ldr	r0, [r7, #4]
 80081b8:	f006 fe36 	bl	800ee28 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	2203      	movs	r2, #3
 80081c0:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80081ca:	d102      	bne.n	80081d2 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	2200      	movs	r2, #0
 80081d0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	4618      	mov	r0, r3
 80081d8:	f003 fc50 	bl	800ba7c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6818      	ldr	r0, [r3, #0]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	7c1a      	ldrb	r2, [r3, #16]
 80081e4:	f88d 2000 	strb.w	r2, [sp]
 80081e8:	3304      	adds	r3, #4
 80081ea:	cb0e      	ldmia	r3, {r1, r2, r3}
 80081ec:	f003 fbd1 	bl	800b992 <USB_CoreInit>
 80081f0:	4603      	mov	r3, r0
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d005      	beq.n	8008202 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	2202      	movs	r2, #2
 80081fa:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 80081fe:	2301      	movs	r3, #1
 8008200:	e026      	b.n	8008250 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	2101      	movs	r1, #1
 8008208:	4618      	mov	r0, r3
 800820a:	f003 fc48 	bl	800ba9e <USB_SetCurrentMode>
 800820e:	4603      	mov	r3, r0
 8008210:	2b00      	cmp	r3, #0
 8008212:	d005      	beq.n	8008220 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	2202      	movs	r2, #2
 8008218:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800821c:	2301      	movs	r3, #1
 800821e:	e017      	b.n	8008250 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	6818      	ldr	r0, [r3, #0]
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	7c1a      	ldrb	r2, [r3, #16]
 8008228:	f88d 2000 	strb.w	r2, [sp]
 800822c:	3304      	adds	r3, #4
 800822e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8008230:	f003 fdea 	bl	800be08 <USB_HostInit>
 8008234:	4603      	mov	r3, r0
 8008236:	2b00      	cmp	r3, #0
 8008238:	d005      	beq.n	8008246 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2202      	movs	r2, #2
 800823e:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	e004      	b.n	8008250 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	2201      	movs	r2, #1
 800824a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 800824e:	2300      	movs	r3, #0
}
 8008250:	4618      	mov	r0, r3
 8008252:	3710      	adds	r7, #16
 8008254:	46bd      	mov	sp, r7
 8008256:	bd80      	pop	{r7, pc}

08008258 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008258:	b590      	push	{r4, r7, lr}
 800825a:	b08b      	sub	sp, #44	@ 0x2c
 800825c:	af04      	add	r7, sp, #16
 800825e:	6078      	str	r0, [r7, #4]
 8008260:	4608      	mov	r0, r1
 8008262:	4611      	mov	r1, r2
 8008264:	461a      	mov	r2, r3
 8008266:	4603      	mov	r3, r0
 8008268:	70fb      	strb	r3, [r7, #3]
 800826a:	460b      	mov	r3, r1
 800826c:	70bb      	strb	r3, [r7, #2]
 800826e:	4613      	mov	r3, r2
 8008270:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8008272:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8008274:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800827c:	2b01      	cmp	r3, #1
 800827e:	d101      	bne.n	8008284 <HAL_HCD_HC_Init+0x2c>
 8008280:	2302      	movs	r3, #2
 8008282:	e09d      	b.n	80083c0 <HAL_HCD_HC_Init+0x168>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	2201      	movs	r2, #1
 8008288:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 800828c:	78fa      	ldrb	r2, [r7, #3]
 800828e:	6879      	ldr	r1, [r7, #4]
 8008290:	4613      	mov	r3, r2
 8008292:	011b      	lsls	r3, r3, #4
 8008294:	1a9b      	subs	r3, r3, r2
 8008296:	009b      	lsls	r3, r3, #2
 8008298:	440b      	add	r3, r1
 800829a:	3319      	adds	r3, #25
 800829c:	2200      	movs	r2, #0
 800829e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 80082a0:	78fa      	ldrb	r2, [r7, #3]
 80082a2:	6879      	ldr	r1, [r7, #4]
 80082a4:	4613      	mov	r3, r2
 80082a6:	011b      	lsls	r3, r3, #4
 80082a8:	1a9b      	subs	r3, r3, r2
 80082aa:	009b      	lsls	r3, r3, #2
 80082ac:	440b      	add	r3, r1
 80082ae:	3314      	adds	r3, #20
 80082b0:	787a      	ldrb	r2, [r7, #1]
 80082b2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80082b4:	78fa      	ldrb	r2, [r7, #3]
 80082b6:	6879      	ldr	r1, [r7, #4]
 80082b8:	4613      	mov	r3, r2
 80082ba:	011b      	lsls	r3, r3, #4
 80082bc:	1a9b      	subs	r3, r3, r2
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	440b      	add	r3, r1
 80082c2:	3315      	adds	r3, #21
 80082c4:	78fa      	ldrb	r2, [r7, #3]
 80082c6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80082c8:	78fa      	ldrb	r2, [r7, #3]
 80082ca:	6879      	ldr	r1, [r7, #4]
 80082cc:	4613      	mov	r3, r2
 80082ce:	011b      	lsls	r3, r3, #4
 80082d0:	1a9b      	subs	r3, r3, r2
 80082d2:	009b      	lsls	r3, r3, #2
 80082d4:	440b      	add	r3, r1
 80082d6:	3326      	adds	r3, #38	@ 0x26
 80082d8:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80082dc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80082de:	78fa      	ldrb	r2, [r7, #3]
 80082e0:	78bb      	ldrb	r3, [r7, #2]
 80082e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80082e6:	b2d8      	uxtb	r0, r3
 80082e8:	6879      	ldr	r1, [r7, #4]
 80082ea:	4613      	mov	r3, r2
 80082ec:	011b      	lsls	r3, r3, #4
 80082ee:	1a9b      	subs	r3, r3, r2
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	440b      	add	r3, r1
 80082f4:	3316      	adds	r3, #22
 80082f6:	4602      	mov	r2, r0
 80082f8:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80082fa:	78fb      	ldrb	r3, [r7, #3]
 80082fc:	4619      	mov	r1, r3
 80082fe:	6878      	ldr	r0, [r7, #4]
 8008300:	f000 fbc8 	bl	8008a94 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8008304:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8008308:	2b00      	cmp	r3, #0
 800830a:	da0a      	bge.n	8008322 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800830c:	78fa      	ldrb	r2, [r7, #3]
 800830e:	6879      	ldr	r1, [r7, #4]
 8008310:	4613      	mov	r3, r2
 8008312:	011b      	lsls	r3, r3, #4
 8008314:	1a9b      	subs	r3, r3, r2
 8008316:	009b      	lsls	r3, r3, #2
 8008318:	440b      	add	r3, r1
 800831a:	3317      	adds	r3, #23
 800831c:	2201      	movs	r2, #1
 800831e:	701a      	strb	r2, [r3, #0]
 8008320:	e009      	b.n	8008336 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8008322:	78fa      	ldrb	r2, [r7, #3]
 8008324:	6879      	ldr	r1, [r7, #4]
 8008326:	4613      	mov	r3, r2
 8008328:	011b      	lsls	r3, r3, #4
 800832a:	1a9b      	subs	r3, r3, r2
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	440b      	add	r3, r1
 8008330:	3317      	adds	r3, #23
 8008332:	2200      	movs	r2, #0
 8008334:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	4618      	mov	r0, r3
 800833c:	f003 fec8 	bl	800c0d0 <USB_GetHostSpeed>
 8008340:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8008342:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8008346:	2b01      	cmp	r3, #1
 8008348:	d10b      	bne.n	8008362 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 800834a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800834e:	2b01      	cmp	r3, #1
 8008350:	d107      	bne.n	8008362 <HAL_HCD_HC_Init+0x10a>
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	2b00      	cmp	r3, #0
 8008356:	d104      	bne.n	8008362 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8008358:	697b      	ldr	r3, [r7, #20]
 800835a:	2bbc      	cmp	r3, #188	@ 0xbc
 800835c:	d901      	bls.n	8008362 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 800835e:	23bc      	movs	r3, #188	@ 0xbc
 8008360:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8008362:	78fa      	ldrb	r2, [r7, #3]
 8008364:	6879      	ldr	r1, [r7, #4]
 8008366:	4613      	mov	r3, r2
 8008368:	011b      	lsls	r3, r3, #4
 800836a:	1a9b      	subs	r3, r3, r2
 800836c:	009b      	lsls	r3, r3, #2
 800836e:	440b      	add	r3, r1
 8008370:	3318      	adds	r3, #24
 8008372:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8008376:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8008378:	78fa      	ldrb	r2, [r7, #3]
 800837a:	697b      	ldr	r3, [r7, #20]
 800837c:	b298      	uxth	r0, r3
 800837e:	6879      	ldr	r1, [r7, #4]
 8008380:	4613      	mov	r3, r2
 8008382:	011b      	lsls	r3, r3, #4
 8008384:	1a9b      	subs	r3, r3, r2
 8008386:	009b      	lsls	r3, r3, #2
 8008388:	440b      	add	r3, r1
 800838a:	3328      	adds	r3, #40	@ 0x28
 800838c:	4602      	mov	r2, r0
 800838e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	6818      	ldr	r0, [r3, #0]
 8008394:	697b      	ldr	r3, [r7, #20]
 8008396:	b29b      	uxth	r3, r3
 8008398:	787c      	ldrb	r4, [r7, #1]
 800839a:	78ba      	ldrb	r2, [r7, #2]
 800839c:	78f9      	ldrb	r1, [r7, #3]
 800839e:	9302      	str	r3, [sp, #8]
 80083a0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80083a4:	9301      	str	r3, [sp, #4]
 80083a6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80083aa:	9300      	str	r3, [sp, #0]
 80083ac:	4623      	mov	r3, r4
 80083ae:	f003 feb7 	bl	800c120 <USB_HC_Init>
 80083b2:	4603      	mov	r3, r0
 80083b4:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	2200      	movs	r2, #0
 80083ba:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80083be:	7bfb      	ldrb	r3, [r7, #15]
}
 80083c0:	4618      	mov	r0, r3
 80083c2:	371c      	adds	r7, #28
 80083c4:	46bd      	mov	sp, r7
 80083c6:	bd90      	pop	{r4, r7, pc}

080083c8 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80083c8:	b580      	push	{r7, lr}
 80083ca:	b084      	sub	sp, #16
 80083cc:	af00      	add	r7, sp, #0
 80083ce:	6078      	str	r0, [r7, #4]
 80083d0:	460b      	mov	r3, r1
 80083d2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80083d4:	2300      	movs	r3, #0
 80083d6:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d101      	bne.n	80083e6 <HAL_HCD_HC_Halt+0x1e>
 80083e2:	2302      	movs	r3, #2
 80083e4:	e00f      	b.n	8008406 <HAL_HCD_HC_Halt+0x3e>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2201      	movs	r2, #1
 80083ea:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	78fa      	ldrb	r2, [r7, #3]
 80083f4:	4611      	mov	r1, r2
 80083f6:	4618      	mov	r0, r3
 80083f8:	f004 fa49 	bl	800c88e <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	2200      	movs	r2, #0
 8008400:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8008404:	7bfb      	ldrb	r3, [r7, #15]
}
 8008406:	4618      	mov	r0, r3
 8008408:	3710      	adds	r7, #16
 800840a:	46bd      	mov	sp, r7
 800840c:	bd80      	pop	{r7, pc}
	...

08008410 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8008410:	b580      	push	{r7, lr}
 8008412:	b082      	sub	sp, #8
 8008414:	af00      	add	r7, sp, #0
 8008416:	6078      	str	r0, [r7, #4]
 8008418:	4608      	mov	r0, r1
 800841a:	4611      	mov	r1, r2
 800841c:	461a      	mov	r2, r3
 800841e:	4603      	mov	r3, r0
 8008420:	70fb      	strb	r3, [r7, #3]
 8008422:	460b      	mov	r3, r1
 8008424:	70bb      	strb	r3, [r7, #2]
 8008426:	4613      	mov	r3, r2
 8008428:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800842a:	78fa      	ldrb	r2, [r7, #3]
 800842c:	6879      	ldr	r1, [r7, #4]
 800842e:	4613      	mov	r3, r2
 8008430:	011b      	lsls	r3, r3, #4
 8008432:	1a9b      	subs	r3, r3, r2
 8008434:	009b      	lsls	r3, r3, #2
 8008436:	440b      	add	r3, r1
 8008438:	3317      	adds	r3, #23
 800843a:	78ba      	ldrb	r2, [r7, #2]
 800843c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800843e:	78fa      	ldrb	r2, [r7, #3]
 8008440:	6879      	ldr	r1, [r7, #4]
 8008442:	4613      	mov	r3, r2
 8008444:	011b      	lsls	r3, r3, #4
 8008446:	1a9b      	subs	r3, r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	440b      	add	r3, r1
 800844c:	3326      	adds	r3, #38	@ 0x26
 800844e:	787a      	ldrb	r2, [r7, #1]
 8008450:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8008452:	7c3b      	ldrb	r3, [r7, #16]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d114      	bne.n	8008482 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8008458:	78fa      	ldrb	r2, [r7, #3]
 800845a:	6879      	ldr	r1, [r7, #4]
 800845c:	4613      	mov	r3, r2
 800845e:	011b      	lsls	r3, r3, #4
 8008460:	1a9b      	subs	r3, r3, r2
 8008462:	009b      	lsls	r3, r3, #2
 8008464:	440b      	add	r3, r1
 8008466:	332a      	adds	r3, #42	@ 0x2a
 8008468:	2203      	movs	r2, #3
 800846a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800846c:	78fa      	ldrb	r2, [r7, #3]
 800846e:	6879      	ldr	r1, [r7, #4]
 8008470:	4613      	mov	r3, r2
 8008472:	011b      	lsls	r3, r3, #4
 8008474:	1a9b      	subs	r3, r3, r2
 8008476:	009b      	lsls	r3, r3, #2
 8008478:	440b      	add	r3, r1
 800847a:	3319      	adds	r3, #25
 800847c:	7f3a      	ldrb	r2, [r7, #28]
 800847e:	701a      	strb	r2, [r3, #0]
 8008480:	e009      	b.n	8008496 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008482:	78fa      	ldrb	r2, [r7, #3]
 8008484:	6879      	ldr	r1, [r7, #4]
 8008486:	4613      	mov	r3, r2
 8008488:	011b      	lsls	r3, r3, #4
 800848a:	1a9b      	subs	r3, r3, r2
 800848c:	009b      	lsls	r3, r3, #2
 800848e:	440b      	add	r3, r1
 8008490:	332a      	adds	r3, #42	@ 0x2a
 8008492:	2202      	movs	r2, #2
 8008494:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8008496:	787b      	ldrb	r3, [r7, #1]
 8008498:	2b03      	cmp	r3, #3
 800849a:	f200 8102 	bhi.w	80086a2 <HAL_HCD_HC_SubmitRequest+0x292>
 800849e:	a201      	add	r2, pc, #4	@ (adr r2, 80084a4 <HAL_HCD_HC_SubmitRequest+0x94>)
 80084a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084a4:	080084b5 	.word	0x080084b5
 80084a8:	0800868d 	.word	0x0800868d
 80084ac:	08008579 	.word	0x08008579
 80084b0:	08008603 	.word	0x08008603
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 80084b4:	7c3b      	ldrb	r3, [r7, #16]
 80084b6:	2b01      	cmp	r3, #1
 80084b8:	f040 80f5 	bne.w	80086a6 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80084bc:	78bb      	ldrb	r3, [r7, #2]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d12d      	bne.n	800851e <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80084c2:	8b3b      	ldrh	r3, [r7, #24]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d109      	bne.n	80084dc <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80084c8:	78fa      	ldrb	r2, [r7, #3]
 80084ca:	6879      	ldr	r1, [r7, #4]
 80084cc:	4613      	mov	r3, r2
 80084ce:	011b      	lsls	r3, r3, #4
 80084d0:	1a9b      	subs	r3, r3, r2
 80084d2:	009b      	lsls	r3, r3, #2
 80084d4:	440b      	add	r3, r1
 80084d6:	333d      	adds	r3, #61	@ 0x3d
 80084d8:	2201      	movs	r2, #1
 80084da:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80084dc:	78fa      	ldrb	r2, [r7, #3]
 80084de:	6879      	ldr	r1, [r7, #4]
 80084e0:	4613      	mov	r3, r2
 80084e2:	011b      	lsls	r3, r3, #4
 80084e4:	1a9b      	subs	r3, r3, r2
 80084e6:	009b      	lsls	r3, r3, #2
 80084e8:	440b      	add	r3, r1
 80084ea:	333d      	adds	r3, #61	@ 0x3d
 80084ec:	781b      	ldrb	r3, [r3, #0]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d10a      	bne.n	8008508 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80084f2:	78fa      	ldrb	r2, [r7, #3]
 80084f4:	6879      	ldr	r1, [r7, #4]
 80084f6:	4613      	mov	r3, r2
 80084f8:	011b      	lsls	r3, r3, #4
 80084fa:	1a9b      	subs	r3, r3, r2
 80084fc:	009b      	lsls	r3, r3, #2
 80084fe:	440b      	add	r3, r1
 8008500:	332a      	adds	r3, #42	@ 0x2a
 8008502:	2200      	movs	r2, #0
 8008504:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8008506:	e0ce      	b.n	80086a6 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008508:	78fa      	ldrb	r2, [r7, #3]
 800850a:	6879      	ldr	r1, [r7, #4]
 800850c:	4613      	mov	r3, r2
 800850e:	011b      	lsls	r3, r3, #4
 8008510:	1a9b      	subs	r3, r3, r2
 8008512:	009b      	lsls	r3, r3, #2
 8008514:	440b      	add	r3, r1
 8008516:	332a      	adds	r3, #42	@ 0x2a
 8008518:	2202      	movs	r2, #2
 800851a:	701a      	strb	r2, [r3, #0]
      break;
 800851c:	e0c3      	b.n	80086a6 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800851e:	78fa      	ldrb	r2, [r7, #3]
 8008520:	6879      	ldr	r1, [r7, #4]
 8008522:	4613      	mov	r3, r2
 8008524:	011b      	lsls	r3, r3, #4
 8008526:	1a9b      	subs	r3, r3, r2
 8008528:	009b      	lsls	r3, r3, #2
 800852a:	440b      	add	r3, r1
 800852c:	331a      	adds	r3, #26
 800852e:	781b      	ldrb	r3, [r3, #0]
 8008530:	2b01      	cmp	r3, #1
 8008532:	f040 80b8 	bne.w	80086a6 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8008536:	78fa      	ldrb	r2, [r7, #3]
 8008538:	6879      	ldr	r1, [r7, #4]
 800853a:	4613      	mov	r3, r2
 800853c:	011b      	lsls	r3, r3, #4
 800853e:	1a9b      	subs	r3, r3, r2
 8008540:	009b      	lsls	r3, r3, #2
 8008542:	440b      	add	r3, r1
 8008544:	333c      	adds	r3, #60	@ 0x3c
 8008546:	781b      	ldrb	r3, [r3, #0]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d10a      	bne.n	8008562 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800854c:	78fa      	ldrb	r2, [r7, #3]
 800854e:	6879      	ldr	r1, [r7, #4]
 8008550:	4613      	mov	r3, r2
 8008552:	011b      	lsls	r3, r3, #4
 8008554:	1a9b      	subs	r3, r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	440b      	add	r3, r1
 800855a:	332a      	adds	r3, #42	@ 0x2a
 800855c:	2200      	movs	r2, #0
 800855e:	701a      	strb	r2, [r3, #0]
      break;
 8008560:	e0a1      	b.n	80086a6 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008562:	78fa      	ldrb	r2, [r7, #3]
 8008564:	6879      	ldr	r1, [r7, #4]
 8008566:	4613      	mov	r3, r2
 8008568:	011b      	lsls	r3, r3, #4
 800856a:	1a9b      	subs	r3, r3, r2
 800856c:	009b      	lsls	r3, r3, #2
 800856e:	440b      	add	r3, r1
 8008570:	332a      	adds	r3, #42	@ 0x2a
 8008572:	2202      	movs	r2, #2
 8008574:	701a      	strb	r2, [r3, #0]
      break;
 8008576:	e096      	b.n	80086a6 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8008578:	78bb      	ldrb	r3, [r7, #2]
 800857a:	2b00      	cmp	r3, #0
 800857c:	d120      	bne.n	80085c0 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800857e:	78fa      	ldrb	r2, [r7, #3]
 8008580:	6879      	ldr	r1, [r7, #4]
 8008582:	4613      	mov	r3, r2
 8008584:	011b      	lsls	r3, r3, #4
 8008586:	1a9b      	subs	r3, r3, r2
 8008588:	009b      	lsls	r3, r3, #2
 800858a:	440b      	add	r3, r1
 800858c:	333d      	adds	r3, #61	@ 0x3d
 800858e:	781b      	ldrb	r3, [r3, #0]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d10a      	bne.n	80085aa <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008594:	78fa      	ldrb	r2, [r7, #3]
 8008596:	6879      	ldr	r1, [r7, #4]
 8008598:	4613      	mov	r3, r2
 800859a:	011b      	lsls	r3, r3, #4
 800859c:	1a9b      	subs	r3, r3, r2
 800859e:	009b      	lsls	r3, r3, #2
 80085a0:	440b      	add	r3, r1
 80085a2:	332a      	adds	r3, #42	@ 0x2a
 80085a4:	2200      	movs	r2, #0
 80085a6:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80085a8:	e07e      	b.n	80086a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80085aa:	78fa      	ldrb	r2, [r7, #3]
 80085ac:	6879      	ldr	r1, [r7, #4]
 80085ae:	4613      	mov	r3, r2
 80085b0:	011b      	lsls	r3, r3, #4
 80085b2:	1a9b      	subs	r3, r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	440b      	add	r3, r1
 80085b8:	332a      	adds	r3, #42	@ 0x2a
 80085ba:	2202      	movs	r2, #2
 80085bc:	701a      	strb	r2, [r3, #0]
      break;
 80085be:	e073      	b.n	80086a8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80085c0:	78fa      	ldrb	r2, [r7, #3]
 80085c2:	6879      	ldr	r1, [r7, #4]
 80085c4:	4613      	mov	r3, r2
 80085c6:	011b      	lsls	r3, r3, #4
 80085c8:	1a9b      	subs	r3, r3, r2
 80085ca:	009b      	lsls	r3, r3, #2
 80085cc:	440b      	add	r3, r1
 80085ce:	333c      	adds	r3, #60	@ 0x3c
 80085d0:	781b      	ldrb	r3, [r3, #0]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d10a      	bne.n	80085ec <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80085d6:	78fa      	ldrb	r2, [r7, #3]
 80085d8:	6879      	ldr	r1, [r7, #4]
 80085da:	4613      	mov	r3, r2
 80085dc:	011b      	lsls	r3, r3, #4
 80085de:	1a9b      	subs	r3, r3, r2
 80085e0:	009b      	lsls	r3, r3, #2
 80085e2:	440b      	add	r3, r1
 80085e4:	332a      	adds	r3, #42	@ 0x2a
 80085e6:	2200      	movs	r2, #0
 80085e8:	701a      	strb	r2, [r3, #0]
      break;
 80085ea:	e05d      	b.n	80086a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80085ec:	78fa      	ldrb	r2, [r7, #3]
 80085ee:	6879      	ldr	r1, [r7, #4]
 80085f0:	4613      	mov	r3, r2
 80085f2:	011b      	lsls	r3, r3, #4
 80085f4:	1a9b      	subs	r3, r3, r2
 80085f6:	009b      	lsls	r3, r3, #2
 80085f8:	440b      	add	r3, r1
 80085fa:	332a      	adds	r3, #42	@ 0x2a
 80085fc:	2202      	movs	r2, #2
 80085fe:	701a      	strb	r2, [r3, #0]
      break;
 8008600:	e052      	b.n	80086a8 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8008602:	78bb      	ldrb	r3, [r7, #2]
 8008604:	2b00      	cmp	r3, #0
 8008606:	d120      	bne.n	800864a <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8008608:	78fa      	ldrb	r2, [r7, #3]
 800860a:	6879      	ldr	r1, [r7, #4]
 800860c:	4613      	mov	r3, r2
 800860e:	011b      	lsls	r3, r3, #4
 8008610:	1a9b      	subs	r3, r3, r2
 8008612:	009b      	lsls	r3, r3, #2
 8008614:	440b      	add	r3, r1
 8008616:	333d      	adds	r3, #61	@ 0x3d
 8008618:	781b      	ldrb	r3, [r3, #0]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d10a      	bne.n	8008634 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800861e:	78fa      	ldrb	r2, [r7, #3]
 8008620:	6879      	ldr	r1, [r7, #4]
 8008622:	4613      	mov	r3, r2
 8008624:	011b      	lsls	r3, r3, #4
 8008626:	1a9b      	subs	r3, r3, r2
 8008628:	009b      	lsls	r3, r3, #2
 800862a:	440b      	add	r3, r1
 800862c:	332a      	adds	r3, #42	@ 0x2a
 800862e:	2200      	movs	r2, #0
 8008630:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8008632:	e039      	b.n	80086a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008634:	78fa      	ldrb	r2, [r7, #3]
 8008636:	6879      	ldr	r1, [r7, #4]
 8008638:	4613      	mov	r3, r2
 800863a:	011b      	lsls	r3, r3, #4
 800863c:	1a9b      	subs	r3, r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	440b      	add	r3, r1
 8008642:	332a      	adds	r3, #42	@ 0x2a
 8008644:	2202      	movs	r2, #2
 8008646:	701a      	strb	r2, [r3, #0]
      break;
 8008648:	e02e      	b.n	80086a8 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800864a:	78fa      	ldrb	r2, [r7, #3]
 800864c:	6879      	ldr	r1, [r7, #4]
 800864e:	4613      	mov	r3, r2
 8008650:	011b      	lsls	r3, r3, #4
 8008652:	1a9b      	subs	r3, r3, r2
 8008654:	009b      	lsls	r3, r3, #2
 8008656:	440b      	add	r3, r1
 8008658:	333c      	adds	r3, #60	@ 0x3c
 800865a:	781b      	ldrb	r3, [r3, #0]
 800865c:	2b00      	cmp	r3, #0
 800865e:	d10a      	bne.n	8008676 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8008660:	78fa      	ldrb	r2, [r7, #3]
 8008662:	6879      	ldr	r1, [r7, #4]
 8008664:	4613      	mov	r3, r2
 8008666:	011b      	lsls	r3, r3, #4
 8008668:	1a9b      	subs	r3, r3, r2
 800866a:	009b      	lsls	r3, r3, #2
 800866c:	440b      	add	r3, r1
 800866e:	332a      	adds	r3, #42	@ 0x2a
 8008670:	2200      	movs	r2, #0
 8008672:	701a      	strb	r2, [r3, #0]
      break;
 8008674:	e018      	b.n	80086a8 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8008676:	78fa      	ldrb	r2, [r7, #3]
 8008678:	6879      	ldr	r1, [r7, #4]
 800867a:	4613      	mov	r3, r2
 800867c:	011b      	lsls	r3, r3, #4
 800867e:	1a9b      	subs	r3, r3, r2
 8008680:	009b      	lsls	r3, r3, #2
 8008682:	440b      	add	r3, r1
 8008684:	332a      	adds	r3, #42	@ 0x2a
 8008686:	2202      	movs	r2, #2
 8008688:	701a      	strb	r2, [r3, #0]
      break;
 800868a:	e00d      	b.n	80086a8 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800868c:	78fa      	ldrb	r2, [r7, #3]
 800868e:	6879      	ldr	r1, [r7, #4]
 8008690:	4613      	mov	r3, r2
 8008692:	011b      	lsls	r3, r3, #4
 8008694:	1a9b      	subs	r3, r3, r2
 8008696:	009b      	lsls	r3, r3, #2
 8008698:	440b      	add	r3, r1
 800869a:	332a      	adds	r3, #42	@ 0x2a
 800869c:	2200      	movs	r2, #0
 800869e:	701a      	strb	r2, [r3, #0]
      break;
 80086a0:	e002      	b.n	80086a8 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80086a2:	bf00      	nop
 80086a4:	e000      	b.n	80086a8 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80086a6:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80086a8:	78fa      	ldrb	r2, [r7, #3]
 80086aa:	6879      	ldr	r1, [r7, #4]
 80086ac:	4613      	mov	r3, r2
 80086ae:	011b      	lsls	r3, r3, #4
 80086b0:	1a9b      	subs	r3, r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	440b      	add	r3, r1
 80086b6:	332c      	adds	r3, #44	@ 0x2c
 80086b8:	697a      	ldr	r2, [r7, #20]
 80086ba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80086bc:	78fa      	ldrb	r2, [r7, #3]
 80086be:	8b39      	ldrh	r1, [r7, #24]
 80086c0:	6878      	ldr	r0, [r7, #4]
 80086c2:	4613      	mov	r3, r2
 80086c4:	011b      	lsls	r3, r3, #4
 80086c6:	1a9b      	subs	r3, r3, r2
 80086c8:	009b      	lsls	r3, r3, #2
 80086ca:	4403      	add	r3, r0
 80086cc:	3334      	adds	r3, #52	@ 0x34
 80086ce:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80086d0:	78fa      	ldrb	r2, [r7, #3]
 80086d2:	6879      	ldr	r1, [r7, #4]
 80086d4:	4613      	mov	r3, r2
 80086d6:	011b      	lsls	r3, r3, #4
 80086d8:	1a9b      	subs	r3, r3, r2
 80086da:	009b      	lsls	r3, r3, #2
 80086dc:	440b      	add	r3, r1
 80086de:	334c      	adds	r3, #76	@ 0x4c
 80086e0:	2200      	movs	r2, #0
 80086e2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80086e4:	78fa      	ldrb	r2, [r7, #3]
 80086e6:	6879      	ldr	r1, [r7, #4]
 80086e8:	4613      	mov	r3, r2
 80086ea:	011b      	lsls	r3, r3, #4
 80086ec:	1a9b      	subs	r3, r3, r2
 80086ee:	009b      	lsls	r3, r3, #2
 80086f0:	440b      	add	r3, r1
 80086f2:	3338      	adds	r3, #56	@ 0x38
 80086f4:	2200      	movs	r2, #0
 80086f6:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80086f8:	78fa      	ldrb	r2, [r7, #3]
 80086fa:	6879      	ldr	r1, [r7, #4]
 80086fc:	4613      	mov	r3, r2
 80086fe:	011b      	lsls	r3, r3, #4
 8008700:	1a9b      	subs	r3, r3, r2
 8008702:	009b      	lsls	r3, r3, #2
 8008704:	440b      	add	r3, r1
 8008706:	3315      	adds	r3, #21
 8008708:	78fa      	ldrb	r2, [r7, #3]
 800870a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800870c:	78fa      	ldrb	r2, [r7, #3]
 800870e:	6879      	ldr	r1, [r7, #4]
 8008710:	4613      	mov	r3, r2
 8008712:	011b      	lsls	r3, r3, #4
 8008714:	1a9b      	subs	r3, r3, r2
 8008716:	009b      	lsls	r3, r3, #2
 8008718:	440b      	add	r3, r1
 800871a:	334d      	adds	r3, #77	@ 0x4d
 800871c:	2200      	movs	r2, #0
 800871e:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	6818      	ldr	r0, [r3, #0]
 8008724:	78fa      	ldrb	r2, [r7, #3]
 8008726:	4613      	mov	r3, r2
 8008728:	011b      	lsls	r3, r3, #4
 800872a:	1a9b      	subs	r3, r3, r2
 800872c:	009b      	lsls	r3, r3, #2
 800872e:	3310      	adds	r3, #16
 8008730:	687a      	ldr	r2, [r7, #4]
 8008732:	4413      	add	r3, r2
 8008734:	1d19      	adds	r1, r3, #4
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	799b      	ldrb	r3, [r3, #6]
 800873a:	461a      	mov	r2, r3
 800873c:	f003 fe1c 	bl	800c378 <USB_HC_StartXfer>
 8008740:	4603      	mov	r3, r0
}
 8008742:	4618      	mov	r0, r3
 8008744:	3708      	adds	r7, #8
 8008746:	46bd      	mov	sp, r7
 8008748:	bd80      	pop	{r7, pc}
 800874a:	bf00      	nop

0800874c <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800874c:	b580      	push	{r7, lr}
 800874e:	b086      	sub	sp, #24
 8008750:	af00      	add	r7, sp, #0
 8008752:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800875a:	693b      	ldr	r3, [r7, #16]
 800875c:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	681b      	ldr	r3, [r3, #0]
 8008762:	4618      	mov	r0, r3
 8008764:	f003 fb11 	bl	800bd8a <USB_GetMode>
 8008768:	4603      	mov	r3, r0
 800876a:	2b01      	cmp	r3, #1
 800876c:	f040 80fb 	bne.w	8008966 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	4618      	mov	r0, r3
 8008776:	f003 fad4 	bl	800bd22 <USB_ReadInterrupts>
 800877a:	4603      	mov	r3, r0
 800877c:	2b00      	cmp	r3, #0
 800877e:	f000 80f1 	beq.w	8008964 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4618      	mov	r0, r3
 8008788:	f003 facb 	bl	800bd22 <USB_ReadInterrupts>
 800878c:	4603      	mov	r3, r0
 800878e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8008792:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008796:	d104      	bne.n	80087a2 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80087a0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	4618      	mov	r0, r3
 80087a8:	f003 fabb 	bl	800bd22 <USB_ReadInterrupts>
 80087ac:	4603      	mov	r3, r0
 80087ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80087b2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80087b6:	d104      	bne.n	80087c2 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80087c0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4618      	mov	r0, r3
 80087c8:	f003 faab 	bl	800bd22 <USB_ReadInterrupts>
 80087cc:	4603      	mov	r3, r0
 80087ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80087d2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80087d6:	d104      	bne.n	80087e2 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80087e0:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4618      	mov	r0, r3
 80087e8:	f003 fa9b 	bl	800bd22 <USB_ReadInterrupts>
 80087ec:	4603      	mov	r3, r0
 80087ee:	f003 0302 	and.w	r3, r3, #2
 80087f2:	2b02      	cmp	r3, #2
 80087f4:	d103      	bne.n	80087fe <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	2202      	movs	r2, #2
 80087fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4618      	mov	r0, r3
 8008804:	f003 fa8d 	bl	800bd22 <USB_ReadInterrupts>
 8008808:	4603      	mov	r3, r0
 800880a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800880e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008812:	d120      	bne.n	8008856 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800881c:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800881e:	68fb      	ldr	r3, [r7, #12]
 8008820:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f003 0301 	and.w	r3, r3, #1
 800882a:	2b00      	cmp	r3, #0
 800882c:	d113      	bne.n	8008856 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800882e:	2110      	movs	r1, #16
 8008830:	6938      	ldr	r0, [r7, #16]
 8008832:	f003 f980 	bl	800bb36 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8008836:	6938      	ldr	r0, [r7, #16]
 8008838:	f003 f9af 	bl	800bb9a <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	7a5b      	ldrb	r3, [r3, #9]
 8008840:	2b02      	cmp	r3, #2
 8008842:	d105      	bne.n	8008850 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	2101      	movs	r1, #1
 800884a:	4618      	mov	r0, r3
 800884c:	f003 fba0 	bl	800bf90 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8008850:	6878      	ldr	r0, [r7, #4]
 8008852:	f006 fb67 	bl	800ef24 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	681b      	ldr	r3, [r3, #0]
 800885a:	4618      	mov	r0, r3
 800885c:	f003 fa61 	bl	800bd22 <USB_ReadInterrupts>
 8008860:	4603      	mov	r3, r0
 8008862:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008866:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800886a:	d102      	bne.n	8008872 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f001 fd4d 	bl	800a30c <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4618      	mov	r0, r3
 8008878:	f003 fa53 	bl	800bd22 <USB_ReadInterrupts>
 800887c:	4603      	mov	r3, r0
 800887e:	f003 0308 	and.w	r3, r3, #8
 8008882:	2b08      	cmp	r3, #8
 8008884:	d106      	bne.n	8008894 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8008886:	6878      	ldr	r0, [r7, #4]
 8008888:	f006 fb30 	bl	800eeec <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	2208      	movs	r2, #8
 8008892:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	4618      	mov	r0, r3
 800889a:	f003 fa42 	bl	800bd22 <USB_ReadInterrupts>
 800889e:	4603      	mov	r3, r0
 80088a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80088a4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80088a8:	d139      	bne.n	800891e <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	681b      	ldr	r3, [r3, #0]
 80088ae:	4618      	mov	r0, r3
 80088b0:	f003 ffdc 	bl	800c86c <USB_HC_ReadInterrupt>
 80088b4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80088b6:	2300      	movs	r3, #0
 80088b8:	617b      	str	r3, [r7, #20]
 80088ba:	e025      	b.n	8008908 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80088bc:	697b      	ldr	r3, [r7, #20]
 80088be:	f003 030f 	and.w	r3, r3, #15
 80088c2:	68ba      	ldr	r2, [r7, #8]
 80088c4:	fa22 f303 	lsr.w	r3, r2, r3
 80088c8:	f003 0301 	and.w	r3, r3, #1
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d018      	beq.n	8008902 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80088d0:	697b      	ldr	r3, [r7, #20]
 80088d2:	015a      	lsls	r2, r3, #5
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	4413      	add	r3, r2
 80088d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80088e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80088e6:	d106      	bne.n	80088f6 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80088e8:	697b      	ldr	r3, [r7, #20]
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	4619      	mov	r1, r3
 80088ee:	6878      	ldr	r0, [r7, #4]
 80088f0:	f000 f905 	bl	8008afe <HCD_HC_IN_IRQHandler>
 80088f4:	e005      	b.n	8008902 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80088f6:	697b      	ldr	r3, [r7, #20]
 80088f8:	b2db      	uxtb	r3, r3
 80088fa:	4619      	mov	r1, r3
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	f000 ff67 	bl	80097d0 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8008902:	697b      	ldr	r3, [r7, #20]
 8008904:	3301      	adds	r3, #1
 8008906:	617b      	str	r3, [r7, #20]
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	795b      	ldrb	r3, [r3, #5]
 800890c:	461a      	mov	r2, r3
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	4293      	cmp	r3, r2
 8008912:	d3d3      	bcc.n	80088bc <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800891c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	4618      	mov	r0, r3
 8008924:	f003 f9fd 	bl	800bd22 <USB_ReadInterrupts>
 8008928:	4603      	mov	r3, r0
 800892a:	f003 0310 	and.w	r3, r3, #16
 800892e:	2b10      	cmp	r3, #16
 8008930:	d101      	bne.n	8008936 <HAL_HCD_IRQHandler+0x1ea>
 8008932:	2301      	movs	r3, #1
 8008934:	e000      	b.n	8008938 <HAL_HCD_IRQHandler+0x1ec>
 8008936:	2300      	movs	r3, #0
 8008938:	2b00      	cmp	r3, #0
 800893a:	d014      	beq.n	8008966 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	699a      	ldr	r2, [r3, #24]
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f022 0210 	bic.w	r2, r2, #16
 800894a:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800894c:	6878      	ldr	r0, [r7, #4]
 800894e:	f001 fbfe 	bl	800a14e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	699a      	ldr	r2, [r3, #24]
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f042 0210 	orr.w	r2, r2, #16
 8008960:	619a      	str	r2, [r3, #24]
 8008962:	e000      	b.n	8008966 <HAL_HCD_IRQHandler+0x21a>
      return;
 8008964:	bf00      	nop
    }
  }
}
 8008966:	3718      	adds	r7, #24
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}

0800896c <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 800896c:	b580      	push	{r7, lr}
 800896e:	b082      	sub	sp, #8
 8008970:	af00      	add	r7, sp, #0
 8008972:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800897a:	2b01      	cmp	r3, #1
 800897c:	d101      	bne.n	8008982 <HAL_HCD_Start+0x16>
 800897e:	2302      	movs	r3, #2
 8008980:	e013      	b.n	80089aa <HAL_HCD_Start+0x3e>
 8008982:	687b      	ldr	r3, [r7, #4]
 8008984:	2201      	movs	r2, #1
 8008986:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	2101      	movs	r1, #1
 8008990:	4618      	mov	r0, r3
 8008992:	f003 fb64 	bl	800c05e <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	4618      	mov	r0, r3
 800899c:	f003 f85d 	bl	800ba5a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	2200      	movs	r2, #0
 80089a4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80089a8:	2300      	movs	r3, #0
}
 80089aa:	4618      	mov	r0, r3
 80089ac:	3708      	adds	r7, #8
 80089ae:	46bd      	mov	sp, r7
 80089b0:	bd80      	pop	{r7, pc}

080089b2 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80089b2:	b580      	push	{r7, lr}
 80089b4:	b082      	sub	sp, #8
 80089b6:	af00      	add	r7, sp, #0
 80089b8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d101      	bne.n	80089c8 <HAL_HCD_Stop+0x16>
 80089c4:	2302      	movs	r3, #2
 80089c6:	e00d      	b.n	80089e4 <HAL_HCD_Stop+0x32>
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	2201      	movs	r2, #1
 80089cc:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4618      	mov	r0, r3
 80089d6:	f004 f8b7 	bl	800cb48 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	2200      	movs	r2, #0
 80089de:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80089e2:	2300      	movs	r3, #0
}
 80089e4:	4618      	mov	r0, r3
 80089e6:	3708      	adds	r7, #8
 80089e8:	46bd      	mov	sp, r7
 80089ea:	bd80      	pop	{r7, pc}

080089ec <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80089ec:	b580      	push	{r7, lr}
 80089ee:	b082      	sub	sp, #8
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4618      	mov	r0, r3
 80089fa:	f003 fb06 	bl	800c00a <USB_ResetPort>
 80089fe:	4603      	mov	r3, r0
}
 8008a00:	4618      	mov	r0, r3
 8008a02:	3708      	adds	r7, #8
 8008a04:	46bd      	mov	sp, r7
 8008a06:	bd80      	pop	{r7, pc}

08008a08 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8008a08:	b480      	push	{r7}
 8008a0a:	b083      	sub	sp, #12
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	460b      	mov	r3, r1
 8008a12:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8008a14:	78fa      	ldrb	r2, [r7, #3]
 8008a16:	6879      	ldr	r1, [r7, #4]
 8008a18:	4613      	mov	r3, r2
 8008a1a:	011b      	lsls	r3, r3, #4
 8008a1c:	1a9b      	subs	r3, r3, r2
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	440b      	add	r3, r1
 8008a22:	334c      	adds	r3, #76	@ 0x4c
 8008a24:	781b      	ldrb	r3, [r3, #0]
}
 8008a26:	4618      	mov	r0, r3
 8008a28:	370c      	adds	r7, #12
 8008a2a:	46bd      	mov	sp, r7
 8008a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a30:	4770      	bx	lr

08008a32 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8008a32:	b480      	push	{r7}
 8008a34:	b083      	sub	sp, #12
 8008a36:	af00      	add	r7, sp, #0
 8008a38:	6078      	str	r0, [r7, #4]
 8008a3a:	460b      	mov	r3, r1
 8008a3c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8008a3e:	78fa      	ldrb	r2, [r7, #3]
 8008a40:	6879      	ldr	r1, [r7, #4]
 8008a42:	4613      	mov	r3, r2
 8008a44:	011b      	lsls	r3, r3, #4
 8008a46:	1a9b      	subs	r3, r3, r2
 8008a48:	009b      	lsls	r3, r3, #2
 8008a4a:	440b      	add	r3, r1
 8008a4c:	3338      	adds	r3, #56	@ 0x38
 8008a4e:	681b      	ldr	r3, [r3, #0]
}
 8008a50:	4618      	mov	r0, r3
 8008a52:	370c      	adds	r7, #12
 8008a54:	46bd      	mov	sp, r7
 8008a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5a:	4770      	bx	lr

08008a5c <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f003 fb48 	bl	800c0fe <USB_GetCurrentFrame>
 8008a6e:	4603      	mov	r3, r0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3708      	adds	r7, #8
 8008a74:	46bd      	mov	sp, r7
 8008a76:	bd80      	pop	{r7, pc}

08008a78 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	4618      	mov	r0, r3
 8008a86:	f003 fb23 	bl	800c0d0 <USB_GetHostSpeed>
 8008a8a:	4603      	mov	r3, r0
}
 8008a8c:	4618      	mov	r0, r3
 8008a8e:	3708      	adds	r7, #8
 8008a90:	46bd      	mov	sp, r7
 8008a92:	bd80      	pop	{r7, pc}

08008a94 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8008a94:	b480      	push	{r7}
 8008a96:	b083      	sub	sp, #12
 8008a98:	af00      	add	r7, sp, #0
 8008a9a:	6078      	str	r0, [r7, #4]
 8008a9c:	460b      	mov	r3, r1
 8008a9e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8008aa0:	78fa      	ldrb	r2, [r7, #3]
 8008aa2:	6879      	ldr	r1, [r7, #4]
 8008aa4:	4613      	mov	r3, r2
 8008aa6:	011b      	lsls	r3, r3, #4
 8008aa8:	1a9b      	subs	r3, r3, r2
 8008aaa:	009b      	lsls	r3, r3, #2
 8008aac:	440b      	add	r3, r1
 8008aae:	331a      	adds	r3, #26
 8008ab0:	2200      	movs	r2, #0
 8008ab2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8008ab4:	78fa      	ldrb	r2, [r7, #3]
 8008ab6:	6879      	ldr	r1, [r7, #4]
 8008ab8:	4613      	mov	r3, r2
 8008aba:	011b      	lsls	r3, r3, #4
 8008abc:	1a9b      	subs	r3, r3, r2
 8008abe:	009b      	lsls	r3, r3, #2
 8008ac0:	440b      	add	r3, r1
 8008ac2:	331b      	adds	r3, #27
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8008ac8:	78fa      	ldrb	r2, [r7, #3]
 8008aca:	6879      	ldr	r1, [r7, #4]
 8008acc:	4613      	mov	r3, r2
 8008ace:	011b      	lsls	r3, r3, #4
 8008ad0:	1a9b      	subs	r3, r3, r2
 8008ad2:	009b      	lsls	r3, r3, #2
 8008ad4:	440b      	add	r3, r1
 8008ad6:	3325      	adds	r3, #37	@ 0x25
 8008ad8:	2200      	movs	r2, #0
 8008ada:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8008adc:	78fa      	ldrb	r2, [r7, #3]
 8008ade:	6879      	ldr	r1, [r7, #4]
 8008ae0:	4613      	mov	r3, r2
 8008ae2:	011b      	lsls	r3, r3, #4
 8008ae4:	1a9b      	subs	r3, r3, r2
 8008ae6:	009b      	lsls	r3, r3, #2
 8008ae8:	440b      	add	r3, r1
 8008aea:	3324      	adds	r3, #36	@ 0x24
 8008aec:	2200      	movs	r2, #0
 8008aee:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8008af0:	2300      	movs	r3, #0
}
 8008af2:	4618      	mov	r0, r3
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr

08008afe <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b086      	sub	sp, #24
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
 8008b06:	460b      	mov	r3, r1
 8008b08:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008b10:	697b      	ldr	r3, [r7, #20]
 8008b12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	78fa      	ldrb	r2, [r7, #3]
 8008b1a:	4611      	mov	r1, r2
 8008b1c:	4618      	mov	r0, r3
 8008b1e:	f003 f913 	bl	800bd48 <USB_ReadChInterrupts>
 8008b22:	4603      	mov	r3, r0
 8008b24:	f003 0304 	and.w	r3, r3, #4
 8008b28:	2b04      	cmp	r3, #4
 8008b2a:	d11a      	bne.n	8008b62 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8008b2c:	78fb      	ldrb	r3, [r7, #3]
 8008b2e:	015a      	lsls	r2, r3, #5
 8008b30:	693b      	ldr	r3, [r7, #16]
 8008b32:	4413      	add	r3, r2
 8008b34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b38:	461a      	mov	r2, r3
 8008b3a:	2304      	movs	r3, #4
 8008b3c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8008b3e:	78fa      	ldrb	r2, [r7, #3]
 8008b40:	6879      	ldr	r1, [r7, #4]
 8008b42:	4613      	mov	r3, r2
 8008b44:	011b      	lsls	r3, r3, #4
 8008b46:	1a9b      	subs	r3, r3, r2
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	440b      	add	r3, r1
 8008b4c:	334d      	adds	r3, #77	@ 0x4d
 8008b4e:	2207      	movs	r2, #7
 8008b50:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	78fa      	ldrb	r2, [r7, #3]
 8008b58:	4611      	mov	r1, r2
 8008b5a:	4618      	mov	r0, r3
 8008b5c:	f003 fe97 	bl	800c88e <USB_HC_Halt>
 8008b60:	e09e      	b.n	8008ca0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	78fa      	ldrb	r2, [r7, #3]
 8008b68:	4611      	mov	r1, r2
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	f003 f8ec 	bl	800bd48 <USB_ReadChInterrupts>
 8008b70:	4603      	mov	r3, r0
 8008b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008b76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8008b7a:	d11b      	bne.n	8008bb4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8008b7c:	78fb      	ldrb	r3, [r7, #3]
 8008b7e:	015a      	lsls	r2, r3, #5
 8008b80:	693b      	ldr	r3, [r7, #16]
 8008b82:	4413      	add	r3, r2
 8008b84:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008b88:	461a      	mov	r2, r3
 8008b8a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008b8e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8008b90:	78fa      	ldrb	r2, [r7, #3]
 8008b92:	6879      	ldr	r1, [r7, #4]
 8008b94:	4613      	mov	r3, r2
 8008b96:	011b      	lsls	r3, r3, #4
 8008b98:	1a9b      	subs	r3, r3, r2
 8008b9a:	009b      	lsls	r3, r3, #2
 8008b9c:	440b      	add	r3, r1
 8008b9e:	334d      	adds	r3, #77	@ 0x4d
 8008ba0:	2208      	movs	r2, #8
 8008ba2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	78fa      	ldrb	r2, [r7, #3]
 8008baa:	4611      	mov	r1, r2
 8008bac:	4618      	mov	r0, r3
 8008bae:	f003 fe6e 	bl	800c88e <USB_HC_Halt>
 8008bb2:	e075      	b.n	8008ca0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	78fa      	ldrb	r2, [r7, #3]
 8008bba:	4611      	mov	r1, r2
 8008bbc:	4618      	mov	r0, r3
 8008bbe:	f003 f8c3 	bl	800bd48 <USB_ReadChInterrupts>
 8008bc2:	4603      	mov	r3, r0
 8008bc4:	f003 0308 	and.w	r3, r3, #8
 8008bc8:	2b08      	cmp	r3, #8
 8008bca:	d11a      	bne.n	8008c02 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8008bcc:	78fb      	ldrb	r3, [r7, #3]
 8008bce:	015a      	lsls	r2, r3, #5
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	4413      	add	r3, r2
 8008bd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008bd8:	461a      	mov	r2, r3
 8008bda:	2308      	movs	r3, #8
 8008bdc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8008bde:	78fa      	ldrb	r2, [r7, #3]
 8008be0:	6879      	ldr	r1, [r7, #4]
 8008be2:	4613      	mov	r3, r2
 8008be4:	011b      	lsls	r3, r3, #4
 8008be6:	1a9b      	subs	r3, r3, r2
 8008be8:	009b      	lsls	r3, r3, #2
 8008bea:	440b      	add	r3, r1
 8008bec:	334d      	adds	r3, #77	@ 0x4d
 8008bee:	2206      	movs	r2, #6
 8008bf0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	78fa      	ldrb	r2, [r7, #3]
 8008bf8:	4611      	mov	r1, r2
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f003 fe47 	bl	800c88e <USB_HC_Halt>
 8008c00:	e04e      	b.n	8008ca0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	78fa      	ldrb	r2, [r7, #3]
 8008c08:	4611      	mov	r1, r2
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	f003 f89c 	bl	800bd48 <USB_ReadChInterrupts>
 8008c10:	4603      	mov	r3, r0
 8008c12:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8008c16:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8008c1a:	d11b      	bne.n	8008c54 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8008c1c:	78fb      	ldrb	r3, [r7, #3]
 8008c1e:	015a      	lsls	r2, r3, #5
 8008c20:	693b      	ldr	r3, [r7, #16]
 8008c22:	4413      	add	r3, r2
 8008c24:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c28:	461a      	mov	r2, r3
 8008c2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008c2e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8008c30:	78fa      	ldrb	r2, [r7, #3]
 8008c32:	6879      	ldr	r1, [r7, #4]
 8008c34:	4613      	mov	r3, r2
 8008c36:	011b      	lsls	r3, r3, #4
 8008c38:	1a9b      	subs	r3, r3, r2
 8008c3a:	009b      	lsls	r3, r3, #2
 8008c3c:	440b      	add	r3, r1
 8008c3e:	334d      	adds	r3, #77	@ 0x4d
 8008c40:	2209      	movs	r2, #9
 8008c42:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	78fa      	ldrb	r2, [r7, #3]
 8008c4a:	4611      	mov	r1, r2
 8008c4c:	4618      	mov	r0, r3
 8008c4e:	f003 fe1e 	bl	800c88e <USB_HC_Halt>
 8008c52:	e025      	b.n	8008ca0 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	78fa      	ldrb	r2, [r7, #3]
 8008c5a:	4611      	mov	r1, r2
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	f003 f873 	bl	800bd48 <USB_ReadChInterrupts>
 8008c62:	4603      	mov	r3, r0
 8008c64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008c68:	2b80      	cmp	r3, #128	@ 0x80
 8008c6a:	d119      	bne.n	8008ca0 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8008c6c:	78fb      	ldrb	r3, [r7, #3]
 8008c6e:	015a      	lsls	r2, r3, #5
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	4413      	add	r3, r2
 8008c74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008c78:	461a      	mov	r2, r3
 8008c7a:	2380      	movs	r3, #128	@ 0x80
 8008c7c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8008c7e:	78fa      	ldrb	r2, [r7, #3]
 8008c80:	6879      	ldr	r1, [r7, #4]
 8008c82:	4613      	mov	r3, r2
 8008c84:	011b      	lsls	r3, r3, #4
 8008c86:	1a9b      	subs	r3, r3, r2
 8008c88:	009b      	lsls	r3, r3, #2
 8008c8a:	440b      	add	r3, r1
 8008c8c:	334d      	adds	r3, #77	@ 0x4d
 8008c8e:	2207      	movs	r2, #7
 8008c90:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	78fa      	ldrb	r2, [r7, #3]
 8008c98:	4611      	mov	r1, r2
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f003 fdf7 	bl	800c88e <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	78fa      	ldrb	r2, [r7, #3]
 8008ca6:	4611      	mov	r1, r2
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f003 f84d 	bl	800bd48 <USB_ReadChInterrupts>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8008cb4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008cb8:	d112      	bne.n	8008ce0 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	681b      	ldr	r3, [r3, #0]
 8008cbe:	78fa      	ldrb	r2, [r7, #3]
 8008cc0:	4611      	mov	r1, r2
 8008cc2:	4618      	mov	r0, r3
 8008cc4:	f003 fde3 	bl	800c88e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8008cc8:	78fb      	ldrb	r3, [r7, #3]
 8008cca:	015a      	lsls	r2, r3, #5
 8008ccc:	693b      	ldr	r3, [r7, #16]
 8008cce:	4413      	add	r3, r2
 8008cd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008cd4:	461a      	mov	r2, r3
 8008cd6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008cda:	6093      	str	r3, [r2, #8]
 8008cdc:	f000 bd75 	b.w	80097ca <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	78fa      	ldrb	r2, [r7, #3]
 8008ce6:	4611      	mov	r1, r2
 8008ce8:	4618      	mov	r0, r3
 8008cea:	f003 f82d 	bl	800bd48 <USB_ReadChInterrupts>
 8008cee:	4603      	mov	r3, r0
 8008cf0:	f003 0301 	and.w	r3, r3, #1
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	f040 8128 	bne.w	8008f4a <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8008cfa:	78fb      	ldrb	r3, [r7, #3]
 8008cfc:	015a      	lsls	r2, r3, #5
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	4413      	add	r3, r2
 8008d02:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d06:	461a      	mov	r2, r3
 8008d08:	2320      	movs	r3, #32
 8008d0a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8008d0c:	78fa      	ldrb	r2, [r7, #3]
 8008d0e:	6879      	ldr	r1, [r7, #4]
 8008d10:	4613      	mov	r3, r2
 8008d12:	011b      	lsls	r3, r3, #4
 8008d14:	1a9b      	subs	r3, r3, r2
 8008d16:	009b      	lsls	r3, r3, #2
 8008d18:	440b      	add	r3, r1
 8008d1a:	331b      	adds	r3, #27
 8008d1c:	781b      	ldrb	r3, [r3, #0]
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	d119      	bne.n	8008d56 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8008d22:	78fa      	ldrb	r2, [r7, #3]
 8008d24:	6879      	ldr	r1, [r7, #4]
 8008d26:	4613      	mov	r3, r2
 8008d28:	011b      	lsls	r3, r3, #4
 8008d2a:	1a9b      	subs	r3, r3, r2
 8008d2c:	009b      	lsls	r3, r3, #2
 8008d2e:	440b      	add	r3, r1
 8008d30:	331b      	adds	r3, #27
 8008d32:	2200      	movs	r2, #0
 8008d34:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8008d36:	78fb      	ldrb	r3, [r7, #3]
 8008d38:	015a      	lsls	r2, r3, #5
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	4413      	add	r3, r2
 8008d3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d42:	685b      	ldr	r3, [r3, #4]
 8008d44:	78fa      	ldrb	r2, [r7, #3]
 8008d46:	0151      	lsls	r1, r2, #5
 8008d48:	693a      	ldr	r2, [r7, #16]
 8008d4a:	440a      	add	r2, r1
 8008d4c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008d50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008d54:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	799b      	ldrb	r3, [r3, #6]
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d01b      	beq.n	8008d96 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8008d5e:	78fa      	ldrb	r2, [r7, #3]
 8008d60:	6879      	ldr	r1, [r7, #4]
 8008d62:	4613      	mov	r3, r2
 8008d64:	011b      	lsls	r3, r3, #4
 8008d66:	1a9b      	subs	r3, r3, r2
 8008d68:	009b      	lsls	r3, r3, #2
 8008d6a:	440b      	add	r3, r1
 8008d6c:	3330      	adds	r3, #48	@ 0x30
 8008d6e:	6819      	ldr	r1, [r3, #0]
 8008d70:	78fb      	ldrb	r3, [r7, #3]
 8008d72:	015a      	lsls	r2, r3, #5
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	4413      	add	r3, r2
 8008d78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008d7c:	691b      	ldr	r3, [r3, #16]
 8008d7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008d82:	78fa      	ldrb	r2, [r7, #3]
 8008d84:	1ac9      	subs	r1, r1, r3
 8008d86:	6878      	ldr	r0, [r7, #4]
 8008d88:	4613      	mov	r3, r2
 8008d8a:	011b      	lsls	r3, r3, #4
 8008d8c:	1a9b      	subs	r3, r3, r2
 8008d8e:	009b      	lsls	r3, r3, #2
 8008d90:	4403      	add	r3, r0
 8008d92:	3338      	adds	r3, #56	@ 0x38
 8008d94:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8008d96:	78fa      	ldrb	r2, [r7, #3]
 8008d98:	6879      	ldr	r1, [r7, #4]
 8008d9a:	4613      	mov	r3, r2
 8008d9c:	011b      	lsls	r3, r3, #4
 8008d9e:	1a9b      	subs	r3, r3, r2
 8008da0:	009b      	lsls	r3, r3, #2
 8008da2:	440b      	add	r3, r1
 8008da4:	334d      	adds	r3, #77	@ 0x4d
 8008da6:	2201      	movs	r2, #1
 8008da8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8008daa:	78fa      	ldrb	r2, [r7, #3]
 8008dac:	6879      	ldr	r1, [r7, #4]
 8008dae:	4613      	mov	r3, r2
 8008db0:	011b      	lsls	r3, r3, #4
 8008db2:	1a9b      	subs	r3, r3, r2
 8008db4:	009b      	lsls	r3, r3, #2
 8008db6:	440b      	add	r3, r1
 8008db8:	3344      	adds	r3, #68	@ 0x44
 8008dba:	2200      	movs	r2, #0
 8008dbc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8008dbe:	78fb      	ldrb	r3, [r7, #3]
 8008dc0:	015a      	lsls	r2, r3, #5
 8008dc2:	693b      	ldr	r3, [r7, #16]
 8008dc4:	4413      	add	r3, r2
 8008dc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008dca:	461a      	mov	r2, r3
 8008dcc:	2301      	movs	r3, #1
 8008dce:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008dd0:	78fa      	ldrb	r2, [r7, #3]
 8008dd2:	6879      	ldr	r1, [r7, #4]
 8008dd4:	4613      	mov	r3, r2
 8008dd6:	011b      	lsls	r3, r3, #4
 8008dd8:	1a9b      	subs	r3, r3, r2
 8008dda:	009b      	lsls	r3, r3, #2
 8008ddc:	440b      	add	r3, r1
 8008dde:	3326      	adds	r3, #38	@ 0x26
 8008de0:	781b      	ldrb	r3, [r3, #0]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d00a      	beq.n	8008dfc <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8008de6:	78fa      	ldrb	r2, [r7, #3]
 8008de8:	6879      	ldr	r1, [r7, #4]
 8008dea:	4613      	mov	r3, r2
 8008dec:	011b      	lsls	r3, r3, #4
 8008dee:	1a9b      	subs	r3, r3, r2
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	440b      	add	r3, r1
 8008df4:	3326      	adds	r3, #38	@ 0x26
 8008df6:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8008df8:	2b02      	cmp	r3, #2
 8008dfa:	d110      	bne.n	8008e1e <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	78fa      	ldrb	r2, [r7, #3]
 8008e02:	4611      	mov	r1, r2
 8008e04:	4618      	mov	r0, r3
 8008e06:	f003 fd42 	bl	800c88e <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8008e0a:	78fb      	ldrb	r3, [r7, #3]
 8008e0c:	015a      	lsls	r2, r3, #5
 8008e0e:	693b      	ldr	r3, [r7, #16]
 8008e10:	4413      	add	r3, r2
 8008e12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e16:	461a      	mov	r2, r3
 8008e18:	2310      	movs	r3, #16
 8008e1a:	6093      	str	r3, [r2, #8]
 8008e1c:	e03d      	b.n	8008e9a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8008e1e:	78fa      	ldrb	r2, [r7, #3]
 8008e20:	6879      	ldr	r1, [r7, #4]
 8008e22:	4613      	mov	r3, r2
 8008e24:	011b      	lsls	r3, r3, #4
 8008e26:	1a9b      	subs	r3, r3, r2
 8008e28:	009b      	lsls	r3, r3, #2
 8008e2a:	440b      	add	r3, r1
 8008e2c:	3326      	adds	r3, #38	@ 0x26
 8008e2e:	781b      	ldrb	r3, [r3, #0]
 8008e30:	2b03      	cmp	r3, #3
 8008e32:	d00a      	beq.n	8008e4a <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8008e34:	78fa      	ldrb	r2, [r7, #3]
 8008e36:	6879      	ldr	r1, [r7, #4]
 8008e38:	4613      	mov	r3, r2
 8008e3a:	011b      	lsls	r3, r3, #4
 8008e3c:	1a9b      	subs	r3, r3, r2
 8008e3e:	009b      	lsls	r3, r3, #2
 8008e40:	440b      	add	r3, r1
 8008e42:	3326      	adds	r3, #38	@ 0x26
 8008e44:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8008e46:	2b01      	cmp	r3, #1
 8008e48:	d127      	bne.n	8008e9a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8008e4a:	78fb      	ldrb	r3, [r7, #3]
 8008e4c:	015a      	lsls	r2, r3, #5
 8008e4e:	693b      	ldr	r3, [r7, #16]
 8008e50:	4413      	add	r3, r2
 8008e52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	78fa      	ldrb	r2, [r7, #3]
 8008e5a:	0151      	lsls	r1, r2, #5
 8008e5c:	693a      	ldr	r2, [r7, #16]
 8008e5e:	440a      	add	r2, r1
 8008e60:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008e64:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008e68:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8008e6a:	78fa      	ldrb	r2, [r7, #3]
 8008e6c:	6879      	ldr	r1, [r7, #4]
 8008e6e:	4613      	mov	r3, r2
 8008e70:	011b      	lsls	r3, r3, #4
 8008e72:	1a9b      	subs	r3, r3, r2
 8008e74:	009b      	lsls	r3, r3, #2
 8008e76:	440b      	add	r3, r1
 8008e78:	334c      	adds	r3, #76	@ 0x4c
 8008e7a:	2201      	movs	r2, #1
 8008e7c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8008e7e:	78fa      	ldrb	r2, [r7, #3]
 8008e80:	6879      	ldr	r1, [r7, #4]
 8008e82:	4613      	mov	r3, r2
 8008e84:	011b      	lsls	r3, r3, #4
 8008e86:	1a9b      	subs	r3, r3, r2
 8008e88:	009b      	lsls	r3, r3, #2
 8008e8a:	440b      	add	r3, r1
 8008e8c:	334c      	adds	r3, #76	@ 0x4c
 8008e8e:	781a      	ldrb	r2, [r3, #0]
 8008e90:	78fb      	ldrb	r3, [r7, #3]
 8008e92:	4619      	mov	r1, r3
 8008e94:	6878      	ldr	r0, [r7, #4]
 8008e96:	f006 f853 	bl	800ef40 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	799b      	ldrb	r3, [r3, #6]
 8008e9e:	2b01      	cmp	r3, #1
 8008ea0:	d13b      	bne.n	8008f1a <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8008ea2:	78fa      	ldrb	r2, [r7, #3]
 8008ea4:	6879      	ldr	r1, [r7, #4]
 8008ea6:	4613      	mov	r3, r2
 8008ea8:	011b      	lsls	r3, r3, #4
 8008eaa:	1a9b      	subs	r3, r3, r2
 8008eac:	009b      	lsls	r3, r3, #2
 8008eae:	440b      	add	r3, r1
 8008eb0:	3338      	adds	r3, #56	@ 0x38
 8008eb2:	6819      	ldr	r1, [r3, #0]
 8008eb4:	78fa      	ldrb	r2, [r7, #3]
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	4613      	mov	r3, r2
 8008eba:	011b      	lsls	r3, r3, #4
 8008ebc:	1a9b      	subs	r3, r3, r2
 8008ebe:	009b      	lsls	r3, r3, #2
 8008ec0:	4403      	add	r3, r0
 8008ec2:	3328      	adds	r3, #40	@ 0x28
 8008ec4:	881b      	ldrh	r3, [r3, #0]
 8008ec6:	440b      	add	r3, r1
 8008ec8:	1e59      	subs	r1, r3, #1
 8008eca:	78fa      	ldrb	r2, [r7, #3]
 8008ecc:	6878      	ldr	r0, [r7, #4]
 8008ece:	4613      	mov	r3, r2
 8008ed0:	011b      	lsls	r3, r3, #4
 8008ed2:	1a9b      	subs	r3, r3, r2
 8008ed4:	009b      	lsls	r3, r3, #2
 8008ed6:	4403      	add	r3, r0
 8008ed8:	3328      	adds	r3, #40	@ 0x28
 8008eda:	881b      	ldrh	r3, [r3, #0]
 8008edc:	fbb1 f3f3 	udiv	r3, r1, r3
 8008ee0:	f003 0301 	and.w	r3, r3, #1
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	f000 8470 	beq.w	80097ca <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8008eea:	78fa      	ldrb	r2, [r7, #3]
 8008eec:	6879      	ldr	r1, [r7, #4]
 8008eee:	4613      	mov	r3, r2
 8008ef0:	011b      	lsls	r3, r3, #4
 8008ef2:	1a9b      	subs	r3, r3, r2
 8008ef4:	009b      	lsls	r3, r3, #2
 8008ef6:	440b      	add	r3, r1
 8008ef8:	333c      	adds	r3, #60	@ 0x3c
 8008efa:	781b      	ldrb	r3, [r3, #0]
 8008efc:	78fa      	ldrb	r2, [r7, #3]
 8008efe:	f083 0301 	eor.w	r3, r3, #1
 8008f02:	b2d8      	uxtb	r0, r3
 8008f04:	6879      	ldr	r1, [r7, #4]
 8008f06:	4613      	mov	r3, r2
 8008f08:	011b      	lsls	r3, r3, #4
 8008f0a:	1a9b      	subs	r3, r3, r2
 8008f0c:	009b      	lsls	r3, r3, #2
 8008f0e:	440b      	add	r3, r1
 8008f10:	333c      	adds	r3, #60	@ 0x3c
 8008f12:	4602      	mov	r2, r0
 8008f14:	701a      	strb	r2, [r3, #0]
 8008f16:	f000 bc58 	b.w	80097ca <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8008f1a:	78fa      	ldrb	r2, [r7, #3]
 8008f1c:	6879      	ldr	r1, [r7, #4]
 8008f1e:	4613      	mov	r3, r2
 8008f20:	011b      	lsls	r3, r3, #4
 8008f22:	1a9b      	subs	r3, r3, r2
 8008f24:	009b      	lsls	r3, r3, #2
 8008f26:	440b      	add	r3, r1
 8008f28:	333c      	adds	r3, #60	@ 0x3c
 8008f2a:	781b      	ldrb	r3, [r3, #0]
 8008f2c:	78fa      	ldrb	r2, [r7, #3]
 8008f2e:	f083 0301 	eor.w	r3, r3, #1
 8008f32:	b2d8      	uxtb	r0, r3
 8008f34:	6879      	ldr	r1, [r7, #4]
 8008f36:	4613      	mov	r3, r2
 8008f38:	011b      	lsls	r3, r3, #4
 8008f3a:	1a9b      	subs	r3, r3, r2
 8008f3c:	009b      	lsls	r3, r3, #2
 8008f3e:	440b      	add	r3, r1
 8008f40:	333c      	adds	r3, #60	@ 0x3c
 8008f42:	4602      	mov	r2, r0
 8008f44:	701a      	strb	r2, [r3, #0]
 8008f46:	f000 bc40 	b.w	80097ca <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	78fa      	ldrb	r2, [r7, #3]
 8008f50:	4611      	mov	r1, r2
 8008f52:	4618      	mov	r0, r3
 8008f54:	f002 fef8 	bl	800bd48 <USB_ReadChInterrupts>
 8008f58:	4603      	mov	r3, r0
 8008f5a:	f003 0320 	and.w	r3, r3, #32
 8008f5e:	2b20      	cmp	r3, #32
 8008f60:	d131      	bne.n	8008fc6 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8008f62:	78fb      	ldrb	r3, [r7, #3]
 8008f64:	015a      	lsls	r2, r3, #5
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	4413      	add	r3, r2
 8008f6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008f6e:	461a      	mov	r2, r3
 8008f70:	2320      	movs	r3, #32
 8008f72:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8008f74:	78fa      	ldrb	r2, [r7, #3]
 8008f76:	6879      	ldr	r1, [r7, #4]
 8008f78:	4613      	mov	r3, r2
 8008f7a:	011b      	lsls	r3, r3, #4
 8008f7c:	1a9b      	subs	r3, r3, r2
 8008f7e:	009b      	lsls	r3, r3, #2
 8008f80:	440b      	add	r3, r1
 8008f82:	331a      	adds	r3, #26
 8008f84:	781b      	ldrb	r3, [r3, #0]
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	f040 841f 	bne.w	80097ca <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8008f8c:	78fa      	ldrb	r2, [r7, #3]
 8008f8e:	6879      	ldr	r1, [r7, #4]
 8008f90:	4613      	mov	r3, r2
 8008f92:	011b      	lsls	r3, r3, #4
 8008f94:	1a9b      	subs	r3, r3, r2
 8008f96:	009b      	lsls	r3, r3, #2
 8008f98:	440b      	add	r3, r1
 8008f9a:	331b      	adds	r3, #27
 8008f9c:	2201      	movs	r2, #1
 8008f9e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8008fa0:	78fa      	ldrb	r2, [r7, #3]
 8008fa2:	6879      	ldr	r1, [r7, #4]
 8008fa4:	4613      	mov	r3, r2
 8008fa6:	011b      	lsls	r3, r3, #4
 8008fa8:	1a9b      	subs	r3, r3, r2
 8008faa:	009b      	lsls	r3, r3, #2
 8008fac:	440b      	add	r3, r1
 8008fae:	334d      	adds	r3, #77	@ 0x4d
 8008fb0:	2203      	movs	r2, #3
 8008fb2:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	681b      	ldr	r3, [r3, #0]
 8008fb8:	78fa      	ldrb	r2, [r7, #3]
 8008fba:	4611      	mov	r1, r2
 8008fbc:	4618      	mov	r0, r3
 8008fbe:	f003 fc66 	bl	800c88e <USB_HC_Halt>
 8008fc2:	f000 bc02 	b.w	80097ca <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	78fa      	ldrb	r2, [r7, #3]
 8008fcc:	4611      	mov	r1, r2
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f002 feba 	bl	800bd48 <USB_ReadChInterrupts>
 8008fd4:	4603      	mov	r3, r0
 8008fd6:	f003 0302 	and.w	r3, r3, #2
 8008fda:	2b02      	cmp	r3, #2
 8008fdc:	f040 8305 	bne.w	80095ea <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8008fe0:	78fb      	ldrb	r3, [r7, #3]
 8008fe2:	015a      	lsls	r2, r3, #5
 8008fe4:	693b      	ldr	r3, [r7, #16]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008fec:	461a      	mov	r2, r3
 8008fee:	2302      	movs	r3, #2
 8008ff0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8008ff2:	78fa      	ldrb	r2, [r7, #3]
 8008ff4:	6879      	ldr	r1, [r7, #4]
 8008ff6:	4613      	mov	r3, r2
 8008ff8:	011b      	lsls	r3, r3, #4
 8008ffa:	1a9b      	subs	r3, r3, r2
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	440b      	add	r3, r1
 8009000:	334d      	adds	r3, #77	@ 0x4d
 8009002:	781b      	ldrb	r3, [r3, #0]
 8009004:	2b01      	cmp	r3, #1
 8009006:	d114      	bne.n	8009032 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009008:	78fa      	ldrb	r2, [r7, #3]
 800900a:	6879      	ldr	r1, [r7, #4]
 800900c:	4613      	mov	r3, r2
 800900e:	011b      	lsls	r3, r3, #4
 8009010:	1a9b      	subs	r3, r3, r2
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	440b      	add	r3, r1
 8009016:	334d      	adds	r3, #77	@ 0x4d
 8009018:	2202      	movs	r2, #2
 800901a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 800901c:	78fa      	ldrb	r2, [r7, #3]
 800901e:	6879      	ldr	r1, [r7, #4]
 8009020:	4613      	mov	r3, r2
 8009022:	011b      	lsls	r3, r3, #4
 8009024:	1a9b      	subs	r3, r3, r2
 8009026:	009b      	lsls	r3, r3, #2
 8009028:	440b      	add	r3, r1
 800902a:	334c      	adds	r3, #76	@ 0x4c
 800902c:	2201      	movs	r2, #1
 800902e:	701a      	strb	r2, [r3, #0]
 8009030:	e2cc      	b.n	80095cc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8009032:	78fa      	ldrb	r2, [r7, #3]
 8009034:	6879      	ldr	r1, [r7, #4]
 8009036:	4613      	mov	r3, r2
 8009038:	011b      	lsls	r3, r3, #4
 800903a:	1a9b      	subs	r3, r3, r2
 800903c:	009b      	lsls	r3, r3, #2
 800903e:	440b      	add	r3, r1
 8009040:	334d      	adds	r3, #77	@ 0x4d
 8009042:	781b      	ldrb	r3, [r3, #0]
 8009044:	2b06      	cmp	r3, #6
 8009046:	d114      	bne.n	8009072 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009048:	78fa      	ldrb	r2, [r7, #3]
 800904a:	6879      	ldr	r1, [r7, #4]
 800904c:	4613      	mov	r3, r2
 800904e:	011b      	lsls	r3, r3, #4
 8009050:	1a9b      	subs	r3, r3, r2
 8009052:	009b      	lsls	r3, r3, #2
 8009054:	440b      	add	r3, r1
 8009056:	334d      	adds	r3, #77	@ 0x4d
 8009058:	2202      	movs	r2, #2
 800905a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 800905c:	78fa      	ldrb	r2, [r7, #3]
 800905e:	6879      	ldr	r1, [r7, #4]
 8009060:	4613      	mov	r3, r2
 8009062:	011b      	lsls	r3, r3, #4
 8009064:	1a9b      	subs	r3, r3, r2
 8009066:	009b      	lsls	r3, r3, #2
 8009068:	440b      	add	r3, r1
 800906a:	334c      	adds	r3, #76	@ 0x4c
 800906c:	2205      	movs	r2, #5
 800906e:	701a      	strb	r2, [r3, #0]
 8009070:	e2ac      	b.n	80095cc <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8009072:	78fa      	ldrb	r2, [r7, #3]
 8009074:	6879      	ldr	r1, [r7, #4]
 8009076:	4613      	mov	r3, r2
 8009078:	011b      	lsls	r3, r3, #4
 800907a:	1a9b      	subs	r3, r3, r2
 800907c:	009b      	lsls	r3, r3, #2
 800907e:	440b      	add	r3, r1
 8009080:	334d      	adds	r3, #77	@ 0x4d
 8009082:	781b      	ldrb	r3, [r3, #0]
 8009084:	2b07      	cmp	r3, #7
 8009086:	d00b      	beq.n	80090a0 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8009088:	78fa      	ldrb	r2, [r7, #3]
 800908a:	6879      	ldr	r1, [r7, #4]
 800908c:	4613      	mov	r3, r2
 800908e:	011b      	lsls	r3, r3, #4
 8009090:	1a9b      	subs	r3, r3, r2
 8009092:	009b      	lsls	r3, r3, #2
 8009094:	440b      	add	r3, r1
 8009096:	334d      	adds	r3, #77	@ 0x4d
 8009098:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800909a:	2b09      	cmp	r3, #9
 800909c:	f040 80a6 	bne.w	80091ec <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80090a0:	78fa      	ldrb	r2, [r7, #3]
 80090a2:	6879      	ldr	r1, [r7, #4]
 80090a4:	4613      	mov	r3, r2
 80090a6:	011b      	lsls	r3, r3, #4
 80090a8:	1a9b      	subs	r3, r3, r2
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	440b      	add	r3, r1
 80090ae:	334d      	adds	r3, #77	@ 0x4d
 80090b0:	2202      	movs	r2, #2
 80090b2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80090b4:	78fa      	ldrb	r2, [r7, #3]
 80090b6:	6879      	ldr	r1, [r7, #4]
 80090b8:	4613      	mov	r3, r2
 80090ba:	011b      	lsls	r3, r3, #4
 80090bc:	1a9b      	subs	r3, r3, r2
 80090be:	009b      	lsls	r3, r3, #2
 80090c0:	440b      	add	r3, r1
 80090c2:	3344      	adds	r3, #68	@ 0x44
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	1c59      	adds	r1, r3, #1
 80090c8:	6878      	ldr	r0, [r7, #4]
 80090ca:	4613      	mov	r3, r2
 80090cc:	011b      	lsls	r3, r3, #4
 80090ce:	1a9b      	subs	r3, r3, r2
 80090d0:	009b      	lsls	r3, r3, #2
 80090d2:	4403      	add	r3, r0
 80090d4:	3344      	adds	r3, #68	@ 0x44
 80090d6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80090d8:	78fa      	ldrb	r2, [r7, #3]
 80090da:	6879      	ldr	r1, [r7, #4]
 80090dc:	4613      	mov	r3, r2
 80090de:	011b      	lsls	r3, r3, #4
 80090e0:	1a9b      	subs	r3, r3, r2
 80090e2:	009b      	lsls	r3, r3, #2
 80090e4:	440b      	add	r3, r1
 80090e6:	3344      	adds	r3, #68	@ 0x44
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2b02      	cmp	r3, #2
 80090ec:	d943      	bls.n	8009176 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80090ee:	78fa      	ldrb	r2, [r7, #3]
 80090f0:	6879      	ldr	r1, [r7, #4]
 80090f2:	4613      	mov	r3, r2
 80090f4:	011b      	lsls	r3, r3, #4
 80090f6:	1a9b      	subs	r3, r3, r2
 80090f8:	009b      	lsls	r3, r3, #2
 80090fa:	440b      	add	r3, r1
 80090fc:	3344      	adds	r3, #68	@ 0x44
 80090fe:	2200      	movs	r2, #0
 8009100:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8009102:	78fa      	ldrb	r2, [r7, #3]
 8009104:	6879      	ldr	r1, [r7, #4]
 8009106:	4613      	mov	r3, r2
 8009108:	011b      	lsls	r3, r3, #4
 800910a:	1a9b      	subs	r3, r3, r2
 800910c:	009b      	lsls	r3, r3, #2
 800910e:	440b      	add	r3, r1
 8009110:	331a      	adds	r3, #26
 8009112:	781b      	ldrb	r3, [r3, #0]
 8009114:	2b01      	cmp	r3, #1
 8009116:	d123      	bne.n	8009160 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8009118:	78fa      	ldrb	r2, [r7, #3]
 800911a:	6879      	ldr	r1, [r7, #4]
 800911c:	4613      	mov	r3, r2
 800911e:	011b      	lsls	r3, r3, #4
 8009120:	1a9b      	subs	r3, r3, r2
 8009122:	009b      	lsls	r3, r3, #2
 8009124:	440b      	add	r3, r1
 8009126:	331b      	adds	r3, #27
 8009128:	2200      	movs	r2, #0
 800912a:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 800912c:	78fa      	ldrb	r2, [r7, #3]
 800912e:	6879      	ldr	r1, [r7, #4]
 8009130:	4613      	mov	r3, r2
 8009132:	011b      	lsls	r3, r3, #4
 8009134:	1a9b      	subs	r3, r3, r2
 8009136:	009b      	lsls	r3, r3, #2
 8009138:	440b      	add	r3, r1
 800913a:	331c      	adds	r3, #28
 800913c:	2200      	movs	r2, #0
 800913e:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8009140:	78fb      	ldrb	r3, [r7, #3]
 8009142:	015a      	lsls	r2, r3, #5
 8009144:	693b      	ldr	r3, [r7, #16]
 8009146:	4413      	add	r3, r2
 8009148:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800914c:	685b      	ldr	r3, [r3, #4]
 800914e:	78fa      	ldrb	r2, [r7, #3]
 8009150:	0151      	lsls	r1, r2, #5
 8009152:	693a      	ldr	r2, [r7, #16]
 8009154:	440a      	add	r2, r1
 8009156:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800915a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800915e:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8009160:	78fa      	ldrb	r2, [r7, #3]
 8009162:	6879      	ldr	r1, [r7, #4]
 8009164:	4613      	mov	r3, r2
 8009166:	011b      	lsls	r3, r3, #4
 8009168:	1a9b      	subs	r3, r3, r2
 800916a:	009b      	lsls	r3, r3, #2
 800916c:	440b      	add	r3, r1
 800916e:	334c      	adds	r3, #76	@ 0x4c
 8009170:	2204      	movs	r2, #4
 8009172:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009174:	e229      	b.n	80095ca <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009176:	78fa      	ldrb	r2, [r7, #3]
 8009178:	6879      	ldr	r1, [r7, #4]
 800917a:	4613      	mov	r3, r2
 800917c:	011b      	lsls	r3, r3, #4
 800917e:	1a9b      	subs	r3, r3, r2
 8009180:	009b      	lsls	r3, r3, #2
 8009182:	440b      	add	r3, r1
 8009184:	334c      	adds	r3, #76	@ 0x4c
 8009186:	2202      	movs	r2, #2
 8009188:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800918a:	78fa      	ldrb	r2, [r7, #3]
 800918c:	6879      	ldr	r1, [r7, #4]
 800918e:	4613      	mov	r3, r2
 8009190:	011b      	lsls	r3, r3, #4
 8009192:	1a9b      	subs	r3, r3, r2
 8009194:	009b      	lsls	r3, r3, #2
 8009196:	440b      	add	r3, r1
 8009198:	3326      	adds	r3, #38	@ 0x26
 800919a:	781b      	ldrb	r3, [r3, #0]
 800919c:	2b00      	cmp	r3, #0
 800919e:	d00b      	beq.n	80091b8 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80091a0:	78fa      	ldrb	r2, [r7, #3]
 80091a2:	6879      	ldr	r1, [r7, #4]
 80091a4:	4613      	mov	r3, r2
 80091a6:	011b      	lsls	r3, r3, #4
 80091a8:	1a9b      	subs	r3, r3, r2
 80091aa:	009b      	lsls	r3, r3, #2
 80091ac:	440b      	add	r3, r1
 80091ae:	3326      	adds	r3, #38	@ 0x26
 80091b0:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80091b2:	2b02      	cmp	r3, #2
 80091b4:	f040 8209 	bne.w	80095ca <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80091b8:	78fb      	ldrb	r3, [r7, #3]
 80091ba:	015a      	lsls	r2, r3, #5
 80091bc:	693b      	ldr	r3, [r7, #16]
 80091be:	4413      	add	r3, r2
 80091c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80091ce:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80091d6:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80091d8:	78fb      	ldrb	r3, [r7, #3]
 80091da:	015a      	lsls	r2, r3, #5
 80091dc:	693b      	ldr	r3, [r7, #16]
 80091de:	4413      	add	r3, r2
 80091e0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80091e4:	461a      	mov	r2, r3
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80091ea:	e1ee      	b.n	80095ca <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 80091ec:	78fa      	ldrb	r2, [r7, #3]
 80091ee:	6879      	ldr	r1, [r7, #4]
 80091f0:	4613      	mov	r3, r2
 80091f2:	011b      	lsls	r3, r3, #4
 80091f4:	1a9b      	subs	r3, r3, r2
 80091f6:	009b      	lsls	r3, r3, #2
 80091f8:	440b      	add	r3, r1
 80091fa:	334d      	adds	r3, #77	@ 0x4d
 80091fc:	781b      	ldrb	r3, [r3, #0]
 80091fe:	2b05      	cmp	r3, #5
 8009200:	f040 80c8 	bne.w	8009394 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009204:	78fa      	ldrb	r2, [r7, #3]
 8009206:	6879      	ldr	r1, [r7, #4]
 8009208:	4613      	mov	r3, r2
 800920a:	011b      	lsls	r3, r3, #4
 800920c:	1a9b      	subs	r3, r3, r2
 800920e:	009b      	lsls	r3, r3, #2
 8009210:	440b      	add	r3, r1
 8009212:	334d      	adds	r3, #77	@ 0x4d
 8009214:	2202      	movs	r2, #2
 8009216:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8009218:	78fa      	ldrb	r2, [r7, #3]
 800921a:	6879      	ldr	r1, [r7, #4]
 800921c:	4613      	mov	r3, r2
 800921e:	011b      	lsls	r3, r3, #4
 8009220:	1a9b      	subs	r3, r3, r2
 8009222:	009b      	lsls	r3, r3, #2
 8009224:	440b      	add	r3, r1
 8009226:	331b      	adds	r3, #27
 8009228:	781b      	ldrb	r3, [r3, #0]
 800922a:	2b01      	cmp	r3, #1
 800922c:	f040 81ce 	bne.w	80095cc <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8009230:	78fa      	ldrb	r2, [r7, #3]
 8009232:	6879      	ldr	r1, [r7, #4]
 8009234:	4613      	mov	r3, r2
 8009236:	011b      	lsls	r3, r3, #4
 8009238:	1a9b      	subs	r3, r3, r2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	440b      	add	r3, r1
 800923e:	3326      	adds	r3, #38	@ 0x26
 8009240:	781b      	ldrb	r3, [r3, #0]
 8009242:	2b03      	cmp	r3, #3
 8009244:	d16b      	bne.n	800931e <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8009246:	78fa      	ldrb	r2, [r7, #3]
 8009248:	6879      	ldr	r1, [r7, #4]
 800924a:	4613      	mov	r3, r2
 800924c:	011b      	lsls	r3, r3, #4
 800924e:	1a9b      	subs	r3, r3, r2
 8009250:	009b      	lsls	r3, r3, #2
 8009252:	440b      	add	r3, r1
 8009254:	3348      	adds	r3, #72	@ 0x48
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	1c59      	adds	r1, r3, #1
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	4613      	mov	r3, r2
 800925e:	011b      	lsls	r3, r3, #4
 8009260:	1a9b      	subs	r3, r3, r2
 8009262:	009b      	lsls	r3, r3, #2
 8009264:	4403      	add	r3, r0
 8009266:	3348      	adds	r3, #72	@ 0x48
 8009268:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 800926a:	78fa      	ldrb	r2, [r7, #3]
 800926c:	6879      	ldr	r1, [r7, #4]
 800926e:	4613      	mov	r3, r2
 8009270:	011b      	lsls	r3, r3, #4
 8009272:	1a9b      	subs	r3, r3, r2
 8009274:	009b      	lsls	r3, r3, #2
 8009276:	440b      	add	r3, r1
 8009278:	3348      	adds	r3, #72	@ 0x48
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	2b02      	cmp	r3, #2
 800927e:	d943      	bls.n	8009308 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8009280:	78fa      	ldrb	r2, [r7, #3]
 8009282:	6879      	ldr	r1, [r7, #4]
 8009284:	4613      	mov	r3, r2
 8009286:	011b      	lsls	r3, r3, #4
 8009288:	1a9b      	subs	r3, r3, r2
 800928a:	009b      	lsls	r3, r3, #2
 800928c:	440b      	add	r3, r1
 800928e:	3348      	adds	r3, #72	@ 0x48
 8009290:	2200      	movs	r2, #0
 8009292:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8009294:	78fa      	ldrb	r2, [r7, #3]
 8009296:	6879      	ldr	r1, [r7, #4]
 8009298:	4613      	mov	r3, r2
 800929a:	011b      	lsls	r3, r3, #4
 800929c:	1a9b      	subs	r3, r3, r2
 800929e:	009b      	lsls	r3, r3, #2
 80092a0:	440b      	add	r3, r1
 80092a2:	331b      	adds	r3, #27
 80092a4:	2200      	movs	r2, #0
 80092a6:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 80092a8:	78fa      	ldrb	r2, [r7, #3]
 80092aa:	6879      	ldr	r1, [r7, #4]
 80092ac:	4613      	mov	r3, r2
 80092ae:	011b      	lsls	r3, r3, #4
 80092b0:	1a9b      	subs	r3, r3, r2
 80092b2:	009b      	lsls	r3, r3, #2
 80092b4:	440b      	add	r3, r1
 80092b6:	3344      	adds	r3, #68	@ 0x44
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	2b02      	cmp	r3, #2
 80092bc:	d809      	bhi.n	80092d2 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80092be:	78fa      	ldrb	r2, [r7, #3]
 80092c0:	6879      	ldr	r1, [r7, #4]
 80092c2:	4613      	mov	r3, r2
 80092c4:	011b      	lsls	r3, r3, #4
 80092c6:	1a9b      	subs	r3, r3, r2
 80092c8:	009b      	lsls	r3, r3, #2
 80092ca:	440b      	add	r3, r1
 80092cc:	331c      	adds	r3, #28
 80092ce:	2201      	movs	r2, #1
 80092d0:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80092d2:	78fb      	ldrb	r3, [r7, #3]
 80092d4:	015a      	lsls	r2, r3, #5
 80092d6:	693b      	ldr	r3, [r7, #16]
 80092d8:	4413      	add	r3, r2
 80092da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80092de:	685b      	ldr	r3, [r3, #4]
 80092e0:	78fa      	ldrb	r2, [r7, #3]
 80092e2:	0151      	lsls	r1, r2, #5
 80092e4:	693a      	ldr	r2, [r7, #16]
 80092e6:	440a      	add	r2, r1
 80092e8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80092ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80092f0:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80092f2:	78fa      	ldrb	r2, [r7, #3]
 80092f4:	6879      	ldr	r1, [r7, #4]
 80092f6:	4613      	mov	r3, r2
 80092f8:	011b      	lsls	r3, r3, #4
 80092fa:	1a9b      	subs	r3, r3, r2
 80092fc:	009b      	lsls	r3, r3, #2
 80092fe:	440b      	add	r3, r1
 8009300:	334c      	adds	r3, #76	@ 0x4c
 8009302:	2204      	movs	r2, #4
 8009304:	701a      	strb	r2, [r3, #0]
 8009306:	e014      	b.n	8009332 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009308:	78fa      	ldrb	r2, [r7, #3]
 800930a:	6879      	ldr	r1, [r7, #4]
 800930c:	4613      	mov	r3, r2
 800930e:	011b      	lsls	r3, r3, #4
 8009310:	1a9b      	subs	r3, r3, r2
 8009312:	009b      	lsls	r3, r3, #2
 8009314:	440b      	add	r3, r1
 8009316:	334c      	adds	r3, #76	@ 0x4c
 8009318:	2202      	movs	r2, #2
 800931a:	701a      	strb	r2, [r3, #0]
 800931c:	e009      	b.n	8009332 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800931e:	78fa      	ldrb	r2, [r7, #3]
 8009320:	6879      	ldr	r1, [r7, #4]
 8009322:	4613      	mov	r3, r2
 8009324:	011b      	lsls	r3, r3, #4
 8009326:	1a9b      	subs	r3, r3, r2
 8009328:	009b      	lsls	r3, r3, #2
 800932a:	440b      	add	r3, r1
 800932c:	334c      	adds	r3, #76	@ 0x4c
 800932e:	2202      	movs	r2, #2
 8009330:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009332:	78fa      	ldrb	r2, [r7, #3]
 8009334:	6879      	ldr	r1, [r7, #4]
 8009336:	4613      	mov	r3, r2
 8009338:	011b      	lsls	r3, r3, #4
 800933a:	1a9b      	subs	r3, r3, r2
 800933c:	009b      	lsls	r3, r3, #2
 800933e:	440b      	add	r3, r1
 8009340:	3326      	adds	r3, #38	@ 0x26
 8009342:	781b      	ldrb	r3, [r3, #0]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d00b      	beq.n	8009360 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8009348:	78fa      	ldrb	r2, [r7, #3]
 800934a:	6879      	ldr	r1, [r7, #4]
 800934c:	4613      	mov	r3, r2
 800934e:	011b      	lsls	r3, r3, #4
 8009350:	1a9b      	subs	r3, r3, r2
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	440b      	add	r3, r1
 8009356:	3326      	adds	r3, #38	@ 0x26
 8009358:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800935a:	2b02      	cmp	r3, #2
 800935c:	f040 8136 	bne.w	80095cc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8009360:	78fb      	ldrb	r3, [r7, #3]
 8009362:	015a      	lsls	r2, r3, #5
 8009364:	693b      	ldr	r3, [r7, #16]
 8009366:	4413      	add	r3, r2
 8009368:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009376:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800937e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8009380:	78fb      	ldrb	r3, [r7, #3]
 8009382:	015a      	lsls	r2, r3, #5
 8009384:	693b      	ldr	r3, [r7, #16]
 8009386:	4413      	add	r3, r2
 8009388:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800938c:	461a      	mov	r2, r3
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	6013      	str	r3, [r2, #0]
 8009392:	e11b      	b.n	80095cc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8009394:	78fa      	ldrb	r2, [r7, #3]
 8009396:	6879      	ldr	r1, [r7, #4]
 8009398:	4613      	mov	r3, r2
 800939a:	011b      	lsls	r3, r3, #4
 800939c:	1a9b      	subs	r3, r3, r2
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	440b      	add	r3, r1
 80093a2:	334d      	adds	r3, #77	@ 0x4d
 80093a4:	781b      	ldrb	r3, [r3, #0]
 80093a6:	2b03      	cmp	r3, #3
 80093a8:	f040 8081 	bne.w	80094ae <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80093ac:	78fa      	ldrb	r2, [r7, #3]
 80093ae:	6879      	ldr	r1, [r7, #4]
 80093b0:	4613      	mov	r3, r2
 80093b2:	011b      	lsls	r3, r3, #4
 80093b4:	1a9b      	subs	r3, r3, r2
 80093b6:	009b      	lsls	r3, r3, #2
 80093b8:	440b      	add	r3, r1
 80093ba:	334d      	adds	r3, #77	@ 0x4d
 80093bc:	2202      	movs	r2, #2
 80093be:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80093c0:	78fa      	ldrb	r2, [r7, #3]
 80093c2:	6879      	ldr	r1, [r7, #4]
 80093c4:	4613      	mov	r3, r2
 80093c6:	011b      	lsls	r3, r3, #4
 80093c8:	1a9b      	subs	r3, r3, r2
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	440b      	add	r3, r1
 80093ce:	331b      	adds	r3, #27
 80093d0:	781b      	ldrb	r3, [r3, #0]
 80093d2:	2b01      	cmp	r3, #1
 80093d4:	f040 80fa 	bne.w	80095cc <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80093d8:	78fa      	ldrb	r2, [r7, #3]
 80093da:	6879      	ldr	r1, [r7, #4]
 80093dc:	4613      	mov	r3, r2
 80093de:	011b      	lsls	r3, r3, #4
 80093e0:	1a9b      	subs	r3, r3, r2
 80093e2:	009b      	lsls	r3, r3, #2
 80093e4:	440b      	add	r3, r1
 80093e6:	334c      	adds	r3, #76	@ 0x4c
 80093e8:	2202      	movs	r2, #2
 80093ea:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80093ec:	78fb      	ldrb	r3, [r7, #3]
 80093ee:	015a      	lsls	r2, r3, #5
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	4413      	add	r3, r2
 80093f4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80093f8:	685b      	ldr	r3, [r3, #4]
 80093fa:	78fa      	ldrb	r2, [r7, #3]
 80093fc:	0151      	lsls	r1, r2, #5
 80093fe:	693a      	ldr	r2, [r7, #16]
 8009400:	440a      	add	r2, r1
 8009402:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009406:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800940a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800940c:	78fb      	ldrb	r3, [r7, #3]
 800940e:	015a      	lsls	r2, r3, #5
 8009410:	693b      	ldr	r3, [r7, #16]
 8009412:	4413      	add	r3, r2
 8009414:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009418:	68db      	ldr	r3, [r3, #12]
 800941a:	78fa      	ldrb	r2, [r7, #3]
 800941c:	0151      	lsls	r1, r2, #5
 800941e:	693a      	ldr	r2, [r7, #16]
 8009420:	440a      	add	r2, r1
 8009422:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009426:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800942a:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 800942c:	78fb      	ldrb	r3, [r7, #3]
 800942e:	015a      	lsls	r2, r3, #5
 8009430:	693b      	ldr	r3, [r7, #16]
 8009432:	4413      	add	r3, r2
 8009434:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009438:	68db      	ldr	r3, [r3, #12]
 800943a:	78fa      	ldrb	r2, [r7, #3]
 800943c:	0151      	lsls	r1, r2, #5
 800943e:	693a      	ldr	r2, [r7, #16]
 8009440:	440a      	add	r2, r1
 8009442:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009446:	f023 0320 	bic.w	r3, r3, #32
 800944a:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800944c:	78fa      	ldrb	r2, [r7, #3]
 800944e:	6879      	ldr	r1, [r7, #4]
 8009450:	4613      	mov	r3, r2
 8009452:	011b      	lsls	r3, r3, #4
 8009454:	1a9b      	subs	r3, r3, r2
 8009456:	009b      	lsls	r3, r3, #2
 8009458:	440b      	add	r3, r1
 800945a:	3326      	adds	r3, #38	@ 0x26
 800945c:	781b      	ldrb	r3, [r3, #0]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d00b      	beq.n	800947a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8009462:	78fa      	ldrb	r2, [r7, #3]
 8009464:	6879      	ldr	r1, [r7, #4]
 8009466:	4613      	mov	r3, r2
 8009468:	011b      	lsls	r3, r3, #4
 800946a:	1a9b      	subs	r3, r3, r2
 800946c:	009b      	lsls	r3, r3, #2
 800946e:	440b      	add	r3, r1
 8009470:	3326      	adds	r3, #38	@ 0x26
 8009472:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009474:	2b02      	cmp	r3, #2
 8009476:	f040 80a9 	bne.w	80095cc <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800947a:	78fb      	ldrb	r3, [r7, #3]
 800947c:	015a      	lsls	r2, r3, #5
 800947e:	693b      	ldr	r3, [r7, #16]
 8009480:	4413      	add	r3, r2
 8009482:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009490:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009498:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800949a:	78fb      	ldrb	r3, [r7, #3]
 800949c:	015a      	lsls	r2, r3, #5
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	4413      	add	r3, r2
 80094a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80094a6:	461a      	mov	r2, r3
 80094a8:	68fb      	ldr	r3, [r7, #12]
 80094aa:	6013      	str	r3, [r2, #0]
 80094ac:	e08e      	b.n	80095cc <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80094ae:	78fa      	ldrb	r2, [r7, #3]
 80094b0:	6879      	ldr	r1, [r7, #4]
 80094b2:	4613      	mov	r3, r2
 80094b4:	011b      	lsls	r3, r3, #4
 80094b6:	1a9b      	subs	r3, r3, r2
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	440b      	add	r3, r1
 80094bc:	334d      	adds	r3, #77	@ 0x4d
 80094be:	781b      	ldrb	r3, [r3, #0]
 80094c0:	2b04      	cmp	r3, #4
 80094c2:	d143      	bne.n	800954c <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80094c4:	78fa      	ldrb	r2, [r7, #3]
 80094c6:	6879      	ldr	r1, [r7, #4]
 80094c8:	4613      	mov	r3, r2
 80094ca:	011b      	lsls	r3, r3, #4
 80094cc:	1a9b      	subs	r3, r3, r2
 80094ce:	009b      	lsls	r3, r3, #2
 80094d0:	440b      	add	r3, r1
 80094d2:	334d      	adds	r3, #77	@ 0x4d
 80094d4:	2202      	movs	r2, #2
 80094d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80094d8:	78fa      	ldrb	r2, [r7, #3]
 80094da:	6879      	ldr	r1, [r7, #4]
 80094dc:	4613      	mov	r3, r2
 80094de:	011b      	lsls	r3, r3, #4
 80094e0:	1a9b      	subs	r3, r3, r2
 80094e2:	009b      	lsls	r3, r3, #2
 80094e4:	440b      	add	r3, r1
 80094e6:	334c      	adds	r3, #76	@ 0x4c
 80094e8:	2202      	movs	r2, #2
 80094ea:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80094ec:	78fa      	ldrb	r2, [r7, #3]
 80094ee:	6879      	ldr	r1, [r7, #4]
 80094f0:	4613      	mov	r3, r2
 80094f2:	011b      	lsls	r3, r3, #4
 80094f4:	1a9b      	subs	r3, r3, r2
 80094f6:	009b      	lsls	r3, r3, #2
 80094f8:	440b      	add	r3, r1
 80094fa:	3326      	adds	r3, #38	@ 0x26
 80094fc:	781b      	ldrb	r3, [r3, #0]
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d00a      	beq.n	8009518 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8009502:	78fa      	ldrb	r2, [r7, #3]
 8009504:	6879      	ldr	r1, [r7, #4]
 8009506:	4613      	mov	r3, r2
 8009508:	011b      	lsls	r3, r3, #4
 800950a:	1a9b      	subs	r3, r3, r2
 800950c:	009b      	lsls	r3, r3, #2
 800950e:	440b      	add	r3, r1
 8009510:	3326      	adds	r3, #38	@ 0x26
 8009512:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8009514:	2b02      	cmp	r3, #2
 8009516:	d159      	bne.n	80095cc <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8009518:	78fb      	ldrb	r3, [r7, #3]
 800951a:	015a      	lsls	r2, r3, #5
 800951c:	693b      	ldr	r3, [r7, #16]
 800951e:	4413      	add	r3, r2
 8009520:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800952e:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009536:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8009538:	78fb      	ldrb	r3, [r7, #3]
 800953a:	015a      	lsls	r2, r3, #5
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	4413      	add	r3, r2
 8009540:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009544:	461a      	mov	r2, r3
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	6013      	str	r3, [r2, #0]
 800954a:	e03f      	b.n	80095cc <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 800954c:	78fa      	ldrb	r2, [r7, #3]
 800954e:	6879      	ldr	r1, [r7, #4]
 8009550:	4613      	mov	r3, r2
 8009552:	011b      	lsls	r3, r3, #4
 8009554:	1a9b      	subs	r3, r3, r2
 8009556:	009b      	lsls	r3, r3, #2
 8009558:	440b      	add	r3, r1
 800955a:	334d      	adds	r3, #77	@ 0x4d
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	2b08      	cmp	r3, #8
 8009560:	d126      	bne.n	80095b0 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009562:	78fa      	ldrb	r2, [r7, #3]
 8009564:	6879      	ldr	r1, [r7, #4]
 8009566:	4613      	mov	r3, r2
 8009568:	011b      	lsls	r3, r3, #4
 800956a:	1a9b      	subs	r3, r3, r2
 800956c:	009b      	lsls	r3, r3, #2
 800956e:	440b      	add	r3, r1
 8009570:	334d      	adds	r3, #77	@ 0x4d
 8009572:	2202      	movs	r2, #2
 8009574:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8009576:	78fa      	ldrb	r2, [r7, #3]
 8009578:	6879      	ldr	r1, [r7, #4]
 800957a:	4613      	mov	r3, r2
 800957c:	011b      	lsls	r3, r3, #4
 800957e:	1a9b      	subs	r3, r3, r2
 8009580:	009b      	lsls	r3, r3, #2
 8009582:	440b      	add	r3, r1
 8009584:	3344      	adds	r3, #68	@ 0x44
 8009586:	681b      	ldr	r3, [r3, #0]
 8009588:	1c59      	adds	r1, r3, #1
 800958a:	6878      	ldr	r0, [r7, #4]
 800958c:	4613      	mov	r3, r2
 800958e:	011b      	lsls	r3, r3, #4
 8009590:	1a9b      	subs	r3, r3, r2
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	4403      	add	r3, r0
 8009596:	3344      	adds	r3, #68	@ 0x44
 8009598:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800959a:	78fa      	ldrb	r2, [r7, #3]
 800959c:	6879      	ldr	r1, [r7, #4]
 800959e:	4613      	mov	r3, r2
 80095a0:	011b      	lsls	r3, r3, #4
 80095a2:	1a9b      	subs	r3, r3, r2
 80095a4:	009b      	lsls	r3, r3, #2
 80095a6:	440b      	add	r3, r1
 80095a8:	334c      	adds	r3, #76	@ 0x4c
 80095aa:	2204      	movs	r2, #4
 80095ac:	701a      	strb	r2, [r3, #0]
 80095ae:	e00d      	b.n	80095cc <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80095b0:	78fa      	ldrb	r2, [r7, #3]
 80095b2:	6879      	ldr	r1, [r7, #4]
 80095b4:	4613      	mov	r3, r2
 80095b6:	011b      	lsls	r3, r3, #4
 80095b8:	1a9b      	subs	r3, r3, r2
 80095ba:	009b      	lsls	r3, r3, #2
 80095bc:	440b      	add	r3, r1
 80095be:	334d      	adds	r3, #77	@ 0x4d
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	f000 8100 	beq.w	80097c8 <HCD_HC_IN_IRQHandler+0xcca>
 80095c8:	e000      	b.n	80095cc <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80095ca:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80095cc:	78fa      	ldrb	r2, [r7, #3]
 80095ce:	6879      	ldr	r1, [r7, #4]
 80095d0:	4613      	mov	r3, r2
 80095d2:	011b      	lsls	r3, r3, #4
 80095d4:	1a9b      	subs	r3, r3, r2
 80095d6:	009b      	lsls	r3, r3, #2
 80095d8:	440b      	add	r3, r1
 80095da:	334c      	adds	r3, #76	@ 0x4c
 80095dc:	781a      	ldrb	r2, [r3, #0]
 80095de:	78fb      	ldrb	r3, [r7, #3]
 80095e0:	4619      	mov	r1, r3
 80095e2:	6878      	ldr	r0, [r7, #4]
 80095e4:	f005 fcac 	bl	800ef40 <HAL_HCD_HC_NotifyURBChange_Callback>
 80095e8:	e0ef      	b.n	80097ca <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	78fa      	ldrb	r2, [r7, #3]
 80095f0:	4611      	mov	r1, r2
 80095f2:	4618      	mov	r0, r3
 80095f4:	f002 fba8 	bl	800bd48 <USB_ReadChInterrupts>
 80095f8:	4603      	mov	r3, r0
 80095fa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80095fe:	2b40      	cmp	r3, #64	@ 0x40
 8009600:	d12f      	bne.n	8009662 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8009602:	78fb      	ldrb	r3, [r7, #3]
 8009604:	015a      	lsls	r2, r3, #5
 8009606:	693b      	ldr	r3, [r7, #16]
 8009608:	4413      	add	r3, r2
 800960a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800960e:	461a      	mov	r2, r3
 8009610:	2340      	movs	r3, #64	@ 0x40
 8009612:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8009614:	78fa      	ldrb	r2, [r7, #3]
 8009616:	6879      	ldr	r1, [r7, #4]
 8009618:	4613      	mov	r3, r2
 800961a:	011b      	lsls	r3, r3, #4
 800961c:	1a9b      	subs	r3, r3, r2
 800961e:	009b      	lsls	r3, r3, #2
 8009620:	440b      	add	r3, r1
 8009622:	334d      	adds	r3, #77	@ 0x4d
 8009624:	2205      	movs	r2, #5
 8009626:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8009628:	78fa      	ldrb	r2, [r7, #3]
 800962a:	6879      	ldr	r1, [r7, #4]
 800962c:	4613      	mov	r3, r2
 800962e:	011b      	lsls	r3, r3, #4
 8009630:	1a9b      	subs	r3, r3, r2
 8009632:	009b      	lsls	r3, r3, #2
 8009634:	440b      	add	r3, r1
 8009636:	331a      	adds	r3, #26
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	2b00      	cmp	r3, #0
 800963c:	d109      	bne.n	8009652 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800963e:	78fa      	ldrb	r2, [r7, #3]
 8009640:	6879      	ldr	r1, [r7, #4]
 8009642:	4613      	mov	r3, r2
 8009644:	011b      	lsls	r3, r3, #4
 8009646:	1a9b      	subs	r3, r3, r2
 8009648:	009b      	lsls	r3, r3, #2
 800964a:	440b      	add	r3, r1
 800964c:	3344      	adds	r3, #68	@ 0x44
 800964e:	2200      	movs	r2, #0
 8009650:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	78fa      	ldrb	r2, [r7, #3]
 8009658:	4611      	mov	r1, r2
 800965a:	4618      	mov	r0, r3
 800965c:	f003 f917 	bl	800c88e <USB_HC_Halt>
 8009660:	e0b3      	b.n	80097ca <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	78fa      	ldrb	r2, [r7, #3]
 8009668:	4611      	mov	r1, r2
 800966a:	4618      	mov	r0, r3
 800966c:	f002 fb6c 	bl	800bd48 <USB_ReadChInterrupts>
 8009670:	4603      	mov	r3, r0
 8009672:	f003 0310 	and.w	r3, r3, #16
 8009676:	2b10      	cmp	r3, #16
 8009678:	f040 80a7 	bne.w	80097ca <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800967c:	78fa      	ldrb	r2, [r7, #3]
 800967e:	6879      	ldr	r1, [r7, #4]
 8009680:	4613      	mov	r3, r2
 8009682:	011b      	lsls	r3, r3, #4
 8009684:	1a9b      	subs	r3, r3, r2
 8009686:	009b      	lsls	r3, r3, #2
 8009688:	440b      	add	r3, r1
 800968a:	3326      	adds	r3, #38	@ 0x26
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	2b03      	cmp	r3, #3
 8009690:	d11b      	bne.n	80096ca <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8009692:	78fa      	ldrb	r2, [r7, #3]
 8009694:	6879      	ldr	r1, [r7, #4]
 8009696:	4613      	mov	r3, r2
 8009698:	011b      	lsls	r3, r3, #4
 800969a:	1a9b      	subs	r3, r3, r2
 800969c:	009b      	lsls	r3, r3, #2
 800969e:	440b      	add	r3, r1
 80096a0:	3344      	adds	r3, #68	@ 0x44
 80096a2:	2200      	movs	r2, #0
 80096a4:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80096a6:	78fa      	ldrb	r2, [r7, #3]
 80096a8:	6879      	ldr	r1, [r7, #4]
 80096aa:	4613      	mov	r3, r2
 80096ac:	011b      	lsls	r3, r3, #4
 80096ae:	1a9b      	subs	r3, r3, r2
 80096b0:	009b      	lsls	r3, r3, #2
 80096b2:	440b      	add	r3, r1
 80096b4:	334d      	adds	r3, #77	@ 0x4d
 80096b6:	2204      	movs	r2, #4
 80096b8:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	78fa      	ldrb	r2, [r7, #3]
 80096c0:	4611      	mov	r1, r2
 80096c2:	4618      	mov	r0, r3
 80096c4:	f003 f8e3 	bl	800c88e <USB_HC_Halt>
 80096c8:	e03f      	b.n	800974a <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80096ca:	78fa      	ldrb	r2, [r7, #3]
 80096cc:	6879      	ldr	r1, [r7, #4]
 80096ce:	4613      	mov	r3, r2
 80096d0:	011b      	lsls	r3, r3, #4
 80096d2:	1a9b      	subs	r3, r3, r2
 80096d4:	009b      	lsls	r3, r3, #2
 80096d6:	440b      	add	r3, r1
 80096d8:	3326      	adds	r3, #38	@ 0x26
 80096da:	781b      	ldrb	r3, [r3, #0]
 80096dc:	2b00      	cmp	r3, #0
 80096de:	d00a      	beq.n	80096f6 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80096e0:	78fa      	ldrb	r2, [r7, #3]
 80096e2:	6879      	ldr	r1, [r7, #4]
 80096e4:	4613      	mov	r3, r2
 80096e6:	011b      	lsls	r3, r3, #4
 80096e8:	1a9b      	subs	r3, r3, r2
 80096ea:	009b      	lsls	r3, r3, #2
 80096ec:	440b      	add	r3, r1
 80096ee:	3326      	adds	r3, #38	@ 0x26
 80096f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80096f2:	2b02      	cmp	r3, #2
 80096f4:	d129      	bne.n	800974a <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80096f6:	78fa      	ldrb	r2, [r7, #3]
 80096f8:	6879      	ldr	r1, [r7, #4]
 80096fa:	4613      	mov	r3, r2
 80096fc:	011b      	lsls	r3, r3, #4
 80096fe:	1a9b      	subs	r3, r3, r2
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	440b      	add	r3, r1
 8009704:	3344      	adds	r3, #68	@ 0x44
 8009706:	2200      	movs	r2, #0
 8009708:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	799b      	ldrb	r3, [r3, #6]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d00a      	beq.n	8009728 <HCD_HC_IN_IRQHandler+0xc2a>
 8009712:	78fa      	ldrb	r2, [r7, #3]
 8009714:	6879      	ldr	r1, [r7, #4]
 8009716:	4613      	mov	r3, r2
 8009718:	011b      	lsls	r3, r3, #4
 800971a:	1a9b      	subs	r3, r3, r2
 800971c:	009b      	lsls	r3, r3, #2
 800971e:	440b      	add	r3, r1
 8009720:	331b      	adds	r3, #27
 8009722:	781b      	ldrb	r3, [r3, #0]
 8009724:	2b01      	cmp	r3, #1
 8009726:	d110      	bne.n	800974a <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8009728:	78fa      	ldrb	r2, [r7, #3]
 800972a:	6879      	ldr	r1, [r7, #4]
 800972c:	4613      	mov	r3, r2
 800972e:	011b      	lsls	r3, r3, #4
 8009730:	1a9b      	subs	r3, r3, r2
 8009732:	009b      	lsls	r3, r3, #2
 8009734:	440b      	add	r3, r1
 8009736:	334d      	adds	r3, #77	@ 0x4d
 8009738:	2204      	movs	r2, #4
 800973a:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	78fa      	ldrb	r2, [r7, #3]
 8009742:	4611      	mov	r1, r2
 8009744:	4618      	mov	r0, r3
 8009746:	f003 f8a2 	bl	800c88e <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 800974a:	78fa      	ldrb	r2, [r7, #3]
 800974c:	6879      	ldr	r1, [r7, #4]
 800974e:	4613      	mov	r3, r2
 8009750:	011b      	lsls	r3, r3, #4
 8009752:	1a9b      	subs	r3, r3, r2
 8009754:	009b      	lsls	r3, r3, #2
 8009756:	440b      	add	r3, r1
 8009758:	331b      	adds	r3, #27
 800975a:	781b      	ldrb	r3, [r3, #0]
 800975c:	2b01      	cmp	r3, #1
 800975e:	d129      	bne.n	80097b4 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8009760:	78fa      	ldrb	r2, [r7, #3]
 8009762:	6879      	ldr	r1, [r7, #4]
 8009764:	4613      	mov	r3, r2
 8009766:	011b      	lsls	r3, r3, #4
 8009768:	1a9b      	subs	r3, r3, r2
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	440b      	add	r3, r1
 800976e:	331b      	adds	r3, #27
 8009770:	2200      	movs	r2, #0
 8009772:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8009774:	78fb      	ldrb	r3, [r7, #3]
 8009776:	015a      	lsls	r2, r3, #5
 8009778:	693b      	ldr	r3, [r7, #16]
 800977a:	4413      	add	r3, r2
 800977c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009780:	685b      	ldr	r3, [r3, #4]
 8009782:	78fa      	ldrb	r2, [r7, #3]
 8009784:	0151      	lsls	r1, r2, #5
 8009786:	693a      	ldr	r2, [r7, #16]
 8009788:	440a      	add	r2, r1
 800978a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800978e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009792:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8009794:	78fb      	ldrb	r3, [r7, #3]
 8009796:	015a      	lsls	r2, r3, #5
 8009798:	693b      	ldr	r3, [r7, #16]
 800979a:	4413      	add	r3, r2
 800979c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	78fa      	ldrb	r2, [r7, #3]
 80097a4:	0151      	lsls	r1, r2, #5
 80097a6:	693a      	ldr	r2, [r7, #16]
 80097a8:	440a      	add	r2, r1
 80097aa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80097ae:	f043 0320 	orr.w	r3, r3, #32
 80097b2:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80097b4:	78fb      	ldrb	r3, [r7, #3]
 80097b6:	015a      	lsls	r2, r3, #5
 80097b8:	693b      	ldr	r3, [r7, #16]
 80097ba:	4413      	add	r3, r2
 80097bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80097c0:	461a      	mov	r2, r3
 80097c2:	2310      	movs	r3, #16
 80097c4:	6093      	str	r3, [r2, #8]
 80097c6:	e000      	b.n	80097ca <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80097c8:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80097ca:	3718      	adds	r7, #24
 80097cc:	46bd      	mov	sp, r7
 80097ce:	bd80      	pop	{r7, pc}

080097d0 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80097d0:	b580      	push	{r7, lr}
 80097d2:	b086      	sub	sp, #24
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	6078      	str	r0, [r7, #4]
 80097d8:	460b      	mov	r3, r1
 80097da:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097e2:	697b      	ldr	r3, [r7, #20]
 80097e4:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	78fa      	ldrb	r2, [r7, #3]
 80097ec:	4611      	mov	r1, r2
 80097ee:	4618      	mov	r0, r3
 80097f0:	f002 faaa 	bl	800bd48 <USB_ReadChInterrupts>
 80097f4:	4603      	mov	r3, r0
 80097f6:	f003 0304 	and.w	r3, r3, #4
 80097fa:	2b04      	cmp	r3, #4
 80097fc:	d11b      	bne.n	8009836 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80097fe:	78fb      	ldrb	r3, [r7, #3]
 8009800:	015a      	lsls	r2, r3, #5
 8009802:	693b      	ldr	r3, [r7, #16]
 8009804:	4413      	add	r3, r2
 8009806:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800980a:	461a      	mov	r2, r3
 800980c:	2304      	movs	r3, #4
 800980e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8009810:	78fa      	ldrb	r2, [r7, #3]
 8009812:	6879      	ldr	r1, [r7, #4]
 8009814:	4613      	mov	r3, r2
 8009816:	011b      	lsls	r3, r3, #4
 8009818:	1a9b      	subs	r3, r3, r2
 800981a:	009b      	lsls	r3, r3, #2
 800981c:	440b      	add	r3, r1
 800981e:	334d      	adds	r3, #77	@ 0x4d
 8009820:	2207      	movs	r2, #7
 8009822:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	78fa      	ldrb	r2, [r7, #3]
 800982a:	4611      	mov	r1, r2
 800982c:	4618      	mov	r0, r3
 800982e:	f003 f82e 	bl	800c88e <USB_HC_Halt>
 8009832:	f000 bc89 	b.w	800a148 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	78fa      	ldrb	r2, [r7, #3]
 800983c:	4611      	mov	r1, r2
 800983e:	4618      	mov	r0, r3
 8009840:	f002 fa82 	bl	800bd48 <USB_ReadChInterrupts>
 8009844:	4603      	mov	r3, r0
 8009846:	f003 0320 	and.w	r3, r3, #32
 800984a:	2b20      	cmp	r3, #32
 800984c:	f040 8082 	bne.w	8009954 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8009850:	78fb      	ldrb	r3, [r7, #3]
 8009852:	015a      	lsls	r2, r3, #5
 8009854:	693b      	ldr	r3, [r7, #16]
 8009856:	4413      	add	r3, r2
 8009858:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800985c:	461a      	mov	r2, r3
 800985e:	2320      	movs	r3, #32
 8009860:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 8009862:	78fa      	ldrb	r2, [r7, #3]
 8009864:	6879      	ldr	r1, [r7, #4]
 8009866:	4613      	mov	r3, r2
 8009868:	011b      	lsls	r3, r3, #4
 800986a:	1a9b      	subs	r3, r3, r2
 800986c:	009b      	lsls	r3, r3, #2
 800986e:	440b      	add	r3, r1
 8009870:	3319      	adds	r3, #25
 8009872:	781b      	ldrb	r3, [r3, #0]
 8009874:	2b01      	cmp	r3, #1
 8009876:	d124      	bne.n	80098c2 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8009878:	78fa      	ldrb	r2, [r7, #3]
 800987a:	6879      	ldr	r1, [r7, #4]
 800987c:	4613      	mov	r3, r2
 800987e:	011b      	lsls	r3, r3, #4
 8009880:	1a9b      	subs	r3, r3, r2
 8009882:	009b      	lsls	r3, r3, #2
 8009884:	440b      	add	r3, r1
 8009886:	3319      	adds	r3, #25
 8009888:	2200      	movs	r2, #0
 800988a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800988c:	78fa      	ldrb	r2, [r7, #3]
 800988e:	6879      	ldr	r1, [r7, #4]
 8009890:	4613      	mov	r3, r2
 8009892:	011b      	lsls	r3, r3, #4
 8009894:	1a9b      	subs	r3, r3, r2
 8009896:	009b      	lsls	r3, r3, #2
 8009898:	440b      	add	r3, r1
 800989a:	334c      	adds	r3, #76	@ 0x4c
 800989c:	2202      	movs	r2, #2
 800989e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80098a0:	78fa      	ldrb	r2, [r7, #3]
 80098a2:	6879      	ldr	r1, [r7, #4]
 80098a4:	4613      	mov	r3, r2
 80098a6:	011b      	lsls	r3, r3, #4
 80098a8:	1a9b      	subs	r3, r3, r2
 80098aa:	009b      	lsls	r3, r3, #2
 80098ac:	440b      	add	r3, r1
 80098ae:	334d      	adds	r3, #77	@ 0x4d
 80098b0:	2203      	movs	r2, #3
 80098b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	681b      	ldr	r3, [r3, #0]
 80098b8:	78fa      	ldrb	r2, [r7, #3]
 80098ba:	4611      	mov	r1, r2
 80098bc:	4618      	mov	r0, r3
 80098be:	f002 ffe6 	bl	800c88e <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80098c2:	78fa      	ldrb	r2, [r7, #3]
 80098c4:	6879      	ldr	r1, [r7, #4]
 80098c6:	4613      	mov	r3, r2
 80098c8:	011b      	lsls	r3, r3, #4
 80098ca:	1a9b      	subs	r3, r3, r2
 80098cc:	009b      	lsls	r3, r3, #2
 80098ce:	440b      	add	r3, r1
 80098d0:	331a      	adds	r3, #26
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	2b01      	cmp	r3, #1
 80098d6:	f040 8437 	bne.w	800a148 <HCD_HC_OUT_IRQHandler+0x978>
 80098da:	78fa      	ldrb	r2, [r7, #3]
 80098dc:	6879      	ldr	r1, [r7, #4]
 80098de:	4613      	mov	r3, r2
 80098e0:	011b      	lsls	r3, r3, #4
 80098e2:	1a9b      	subs	r3, r3, r2
 80098e4:	009b      	lsls	r3, r3, #2
 80098e6:	440b      	add	r3, r1
 80098e8:	331b      	adds	r3, #27
 80098ea:	781b      	ldrb	r3, [r3, #0]
 80098ec:	2b00      	cmp	r3, #0
 80098ee:	f040 842b 	bne.w	800a148 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80098f2:	78fa      	ldrb	r2, [r7, #3]
 80098f4:	6879      	ldr	r1, [r7, #4]
 80098f6:	4613      	mov	r3, r2
 80098f8:	011b      	lsls	r3, r3, #4
 80098fa:	1a9b      	subs	r3, r3, r2
 80098fc:	009b      	lsls	r3, r3, #2
 80098fe:	440b      	add	r3, r1
 8009900:	3326      	adds	r3, #38	@ 0x26
 8009902:	781b      	ldrb	r3, [r3, #0]
 8009904:	2b01      	cmp	r3, #1
 8009906:	d009      	beq.n	800991c <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8009908:	78fa      	ldrb	r2, [r7, #3]
 800990a:	6879      	ldr	r1, [r7, #4]
 800990c:	4613      	mov	r3, r2
 800990e:	011b      	lsls	r3, r3, #4
 8009910:	1a9b      	subs	r3, r3, r2
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	440b      	add	r3, r1
 8009916:	331b      	adds	r3, #27
 8009918:	2201      	movs	r2, #1
 800991a:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 800991c:	78fa      	ldrb	r2, [r7, #3]
 800991e:	6879      	ldr	r1, [r7, #4]
 8009920:	4613      	mov	r3, r2
 8009922:	011b      	lsls	r3, r3, #4
 8009924:	1a9b      	subs	r3, r3, r2
 8009926:	009b      	lsls	r3, r3, #2
 8009928:	440b      	add	r3, r1
 800992a:	334d      	adds	r3, #77	@ 0x4d
 800992c:	2203      	movs	r2, #3
 800992e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	78fa      	ldrb	r2, [r7, #3]
 8009936:	4611      	mov	r1, r2
 8009938:	4618      	mov	r0, r3
 800993a:	f002 ffa8 	bl	800c88e <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800993e:	78fa      	ldrb	r2, [r7, #3]
 8009940:	6879      	ldr	r1, [r7, #4]
 8009942:	4613      	mov	r3, r2
 8009944:	011b      	lsls	r3, r3, #4
 8009946:	1a9b      	subs	r3, r3, r2
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	440b      	add	r3, r1
 800994c:	3344      	adds	r3, #68	@ 0x44
 800994e:	2200      	movs	r2, #0
 8009950:	601a      	str	r2, [r3, #0]
 8009952:	e3f9      	b.n	800a148 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	78fa      	ldrb	r2, [r7, #3]
 800995a:	4611      	mov	r1, r2
 800995c:	4618      	mov	r0, r3
 800995e:	f002 f9f3 	bl	800bd48 <USB_ReadChInterrupts>
 8009962:	4603      	mov	r3, r0
 8009964:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009968:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800996c:	d111      	bne.n	8009992 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 800996e:	78fb      	ldrb	r3, [r7, #3]
 8009970:	015a      	lsls	r2, r3, #5
 8009972:	693b      	ldr	r3, [r7, #16]
 8009974:	4413      	add	r3, r2
 8009976:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800997a:	461a      	mov	r2, r3
 800997c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009980:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	78fa      	ldrb	r2, [r7, #3]
 8009988:	4611      	mov	r1, r2
 800998a:	4618      	mov	r0, r3
 800998c:	f002 ff7f 	bl	800c88e <USB_HC_Halt>
 8009990:	e3da      	b.n	800a148 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	78fa      	ldrb	r2, [r7, #3]
 8009998:	4611      	mov	r1, r2
 800999a:	4618      	mov	r0, r3
 800999c:	f002 f9d4 	bl	800bd48 <USB_ReadChInterrupts>
 80099a0:	4603      	mov	r3, r0
 80099a2:	f003 0301 	and.w	r3, r3, #1
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d168      	bne.n	8009a7c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80099aa:	78fa      	ldrb	r2, [r7, #3]
 80099ac:	6879      	ldr	r1, [r7, #4]
 80099ae:	4613      	mov	r3, r2
 80099b0:	011b      	lsls	r3, r3, #4
 80099b2:	1a9b      	subs	r3, r3, r2
 80099b4:	009b      	lsls	r3, r3, #2
 80099b6:	440b      	add	r3, r1
 80099b8:	3344      	adds	r3, #68	@ 0x44
 80099ba:	2200      	movs	r2, #0
 80099bc:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	78fa      	ldrb	r2, [r7, #3]
 80099c4:	4611      	mov	r1, r2
 80099c6:	4618      	mov	r0, r3
 80099c8:	f002 f9be 	bl	800bd48 <USB_ReadChInterrupts>
 80099cc:	4603      	mov	r3, r0
 80099ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80099d2:	2b40      	cmp	r3, #64	@ 0x40
 80099d4:	d112      	bne.n	80099fc <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80099d6:	78fa      	ldrb	r2, [r7, #3]
 80099d8:	6879      	ldr	r1, [r7, #4]
 80099da:	4613      	mov	r3, r2
 80099dc:	011b      	lsls	r3, r3, #4
 80099de:	1a9b      	subs	r3, r3, r2
 80099e0:	009b      	lsls	r3, r3, #2
 80099e2:	440b      	add	r3, r1
 80099e4:	3319      	adds	r3, #25
 80099e6:	2201      	movs	r2, #1
 80099e8:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80099ea:	78fb      	ldrb	r3, [r7, #3]
 80099ec:	015a      	lsls	r2, r3, #5
 80099ee:	693b      	ldr	r3, [r7, #16]
 80099f0:	4413      	add	r3, r2
 80099f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099f6:	461a      	mov	r2, r3
 80099f8:	2340      	movs	r3, #64	@ 0x40
 80099fa:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80099fc:	78fa      	ldrb	r2, [r7, #3]
 80099fe:	6879      	ldr	r1, [r7, #4]
 8009a00:	4613      	mov	r3, r2
 8009a02:	011b      	lsls	r3, r3, #4
 8009a04:	1a9b      	subs	r3, r3, r2
 8009a06:	009b      	lsls	r3, r3, #2
 8009a08:	440b      	add	r3, r1
 8009a0a:	331b      	adds	r3, #27
 8009a0c:	781b      	ldrb	r3, [r3, #0]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d019      	beq.n	8009a46 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8009a12:	78fa      	ldrb	r2, [r7, #3]
 8009a14:	6879      	ldr	r1, [r7, #4]
 8009a16:	4613      	mov	r3, r2
 8009a18:	011b      	lsls	r3, r3, #4
 8009a1a:	1a9b      	subs	r3, r3, r2
 8009a1c:	009b      	lsls	r3, r3, #2
 8009a1e:	440b      	add	r3, r1
 8009a20:	331b      	adds	r3, #27
 8009a22:	2200      	movs	r2, #0
 8009a24:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8009a26:	78fb      	ldrb	r3, [r7, #3]
 8009a28:	015a      	lsls	r2, r3, #5
 8009a2a:	693b      	ldr	r3, [r7, #16]
 8009a2c:	4413      	add	r3, r2
 8009a2e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a32:	685b      	ldr	r3, [r3, #4]
 8009a34:	78fa      	ldrb	r2, [r7, #3]
 8009a36:	0151      	lsls	r1, r2, #5
 8009a38:	693a      	ldr	r2, [r7, #16]
 8009a3a:	440a      	add	r2, r1
 8009a3c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009a40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009a44:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8009a46:	78fb      	ldrb	r3, [r7, #3]
 8009a48:	015a      	lsls	r2, r3, #5
 8009a4a:	693b      	ldr	r3, [r7, #16]
 8009a4c:	4413      	add	r3, r2
 8009a4e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009a52:	461a      	mov	r2, r3
 8009a54:	2301      	movs	r3, #1
 8009a56:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8009a58:	78fa      	ldrb	r2, [r7, #3]
 8009a5a:	6879      	ldr	r1, [r7, #4]
 8009a5c:	4613      	mov	r3, r2
 8009a5e:	011b      	lsls	r3, r3, #4
 8009a60:	1a9b      	subs	r3, r3, r2
 8009a62:	009b      	lsls	r3, r3, #2
 8009a64:	440b      	add	r3, r1
 8009a66:	334d      	adds	r3, #77	@ 0x4d
 8009a68:	2201      	movs	r2, #1
 8009a6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	78fa      	ldrb	r2, [r7, #3]
 8009a72:	4611      	mov	r1, r2
 8009a74:	4618      	mov	r0, r3
 8009a76:	f002 ff0a 	bl	800c88e <USB_HC_Halt>
 8009a7a:	e365      	b.n	800a148 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	78fa      	ldrb	r2, [r7, #3]
 8009a82:	4611      	mov	r1, r2
 8009a84:	4618      	mov	r0, r3
 8009a86:	f002 f95f 	bl	800bd48 <USB_ReadChInterrupts>
 8009a8a:	4603      	mov	r3, r0
 8009a8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009a90:	2b40      	cmp	r3, #64	@ 0x40
 8009a92:	d139      	bne.n	8009b08 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8009a94:	78fa      	ldrb	r2, [r7, #3]
 8009a96:	6879      	ldr	r1, [r7, #4]
 8009a98:	4613      	mov	r3, r2
 8009a9a:	011b      	lsls	r3, r3, #4
 8009a9c:	1a9b      	subs	r3, r3, r2
 8009a9e:	009b      	lsls	r3, r3, #2
 8009aa0:	440b      	add	r3, r1
 8009aa2:	334d      	adds	r3, #77	@ 0x4d
 8009aa4:	2205      	movs	r2, #5
 8009aa6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8009aa8:	78fa      	ldrb	r2, [r7, #3]
 8009aaa:	6879      	ldr	r1, [r7, #4]
 8009aac:	4613      	mov	r3, r2
 8009aae:	011b      	lsls	r3, r3, #4
 8009ab0:	1a9b      	subs	r3, r3, r2
 8009ab2:	009b      	lsls	r3, r3, #2
 8009ab4:	440b      	add	r3, r1
 8009ab6:	331a      	adds	r3, #26
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d109      	bne.n	8009ad2 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8009abe:	78fa      	ldrb	r2, [r7, #3]
 8009ac0:	6879      	ldr	r1, [r7, #4]
 8009ac2:	4613      	mov	r3, r2
 8009ac4:	011b      	lsls	r3, r3, #4
 8009ac6:	1a9b      	subs	r3, r3, r2
 8009ac8:	009b      	lsls	r3, r3, #2
 8009aca:	440b      	add	r3, r1
 8009acc:	3319      	adds	r3, #25
 8009ace:	2201      	movs	r2, #1
 8009ad0:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8009ad2:	78fa      	ldrb	r2, [r7, #3]
 8009ad4:	6879      	ldr	r1, [r7, #4]
 8009ad6:	4613      	mov	r3, r2
 8009ad8:	011b      	lsls	r3, r3, #4
 8009ada:	1a9b      	subs	r3, r3, r2
 8009adc:	009b      	lsls	r3, r3, #2
 8009ade:	440b      	add	r3, r1
 8009ae0:	3344      	adds	r3, #68	@ 0x44
 8009ae2:	2200      	movs	r2, #0
 8009ae4:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	78fa      	ldrb	r2, [r7, #3]
 8009aec:	4611      	mov	r1, r2
 8009aee:	4618      	mov	r0, r3
 8009af0:	f002 fecd 	bl	800c88e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8009af4:	78fb      	ldrb	r3, [r7, #3]
 8009af6:	015a      	lsls	r2, r3, #5
 8009af8:	693b      	ldr	r3, [r7, #16]
 8009afa:	4413      	add	r3, r2
 8009afc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b00:	461a      	mov	r2, r3
 8009b02:	2340      	movs	r3, #64	@ 0x40
 8009b04:	6093      	str	r3, [r2, #8]
 8009b06:	e31f      	b.n	800a148 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	78fa      	ldrb	r2, [r7, #3]
 8009b0e:	4611      	mov	r1, r2
 8009b10:	4618      	mov	r0, r3
 8009b12:	f002 f919 	bl	800bd48 <USB_ReadChInterrupts>
 8009b16:	4603      	mov	r3, r0
 8009b18:	f003 0308 	and.w	r3, r3, #8
 8009b1c:	2b08      	cmp	r3, #8
 8009b1e:	d11a      	bne.n	8009b56 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8009b20:	78fb      	ldrb	r3, [r7, #3]
 8009b22:	015a      	lsls	r2, r3, #5
 8009b24:	693b      	ldr	r3, [r7, #16]
 8009b26:	4413      	add	r3, r2
 8009b28:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	2308      	movs	r3, #8
 8009b30:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 8009b32:	78fa      	ldrb	r2, [r7, #3]
 8009b34:	6879      	ldr	r1, [r7, #4]
 8009b36:	4613      	mov	r3, r2
 8009b38:	011b      	lsls	r3, r3, #4
 8009b3a:	1a9b      	subs	r3, r3, r2
 8009b3c:	009b      	lsls	r3, r3, #2
 8009b3e:	440b      	add	r3, r1
 8009b40:	334d      	adds	r3, #77	@ 0x4d
 8009b42:	2206      	movs	r2, #6
 8009b44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	78fa      	ldrb	r2, [r7, #3]
 8009b4c:	4611      	mov	r1, r2
 8009b4e:	4618      	mov	r0, r3
 8009b50:	f002 fe9d 	bl	800c88e <USB_HC_Halt>
 8009b54:	e2f8      	b.n	800a148 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	78fa      	ldrb	r2, [r7, #3]
 8009b5c:	4611      	mov	r1, r2
 8009b5e:	4618      	mov	r0, r3
 8009b60:	f002 f8f2 	bl	800bd48 <USB_ReadChInterrupts>
 8009b64:	4603      	mov	r3, r0
 8009b66:	f003 0310 	and.w	r3, r3, #16
 8009b6a:	2b10      	cmp	r3, #16
 8009b6c:	d144      	bne.n	8009bf8 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8009b6e:	78fa      	ldrb	r2, [r7, #3]
 8009b70:	6879      	ldr	r1, [r7, #4]
 8009b72:	4613      	mov	r3, r2
 8009b74:	011b      	lsls	r3, r3, #4
 8009b76:	1a9b      	subs	r3, r3, r2
 8009b78:	009b      	lsls	r3, r3, #2
 8009b7a:	440b      	add	r3, r1
 8009b7c:	3344      	adds	r3, #68	@ 0x44
 8009b7e:	2200      	movs	r2, #0
 8009b80:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8009b82:	78fa      	ldrb	r2, [r7, #3]
 8009b84:	6879      	ldr	r1, [r7, #4]
 8009b86:	4613      	mov	r3, r2
 8009b88:	011b      	lsls	r3, r3, #4
 8009b8a:	1a9b      	subs	r3, r3, r2
 8009b8c:	009b      	lsls	r3, r3, #2
 8009b8e:	440b      	add	r3, r1
 8009b90:	334d      	adds	r3, #77	@ 0x4d
 8009b92:	2204      	movs	r2, #4
 8009b94:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8009b96:	78fa      	ldrb	r2, [r7, #3]
 8009b98:	6879      	ldr	r1, [r7, #4]
 8009b9a:	4613      	mov	r3, r2
 8009b9c:	011b      	lsls	r3, r3, #4
 8009b9e:	1a9b      	subs	r3, r3, r2
 8009ba0:	009b      	lsls	r3, r3, #2
 8009ba2:	440b      	add	r3, r1
 8009ba4:	3319      	adds	r3, #25
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	2b00      	cmp	r3, #0
 8009baa:	d114      	bne.n	8009bd6 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8009bac:	78fa      	ldrb	r2, [r7, #3]
 8009bae:	6879      	ldr	r1, [r7, #4]
 8009bb0:	4613      	mov	r3, r2
 8009bb2:	011b      	lsls	r3, r3, #4
 8009bb4:	1a9b      	subs	r3, r3, r2
 8009bb6:	009b      	lsls	r3, r3, #2
 8009bb8:	440b      	add	r3, r1
 8009bba:	3318      	adds	r3, #24
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d109      	bne.n	8009bd6 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8009bc2:	78fa      	ldrb	r2, [r7, #3]
 8009bc4:	6879      	ldr	r1, [r7, #4]
 8009bc6:	4613      	mov	r3, r2
 8009bc8:	011b      	lsls	r3, r3, #4
 8009bca:	1a9b      	subs	r3, r3, r2
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	440b      	add	r3, r1
 8009bd0:	3319      	adds	r3, #25
 8009bd2:	2201      	movs	r2, #1
 8009bd4:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	681b      	ldr	r3, [r3, #0]
 8009bda:	78fa      	ldrb	r2, [r7, #3]
 8009bdc:	4611      	mov	r1, r2
 8009bde:	4618      	mov	r0, r3
 8009be0:	f002 fe55 	bl	800c88e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8009be4:	78fb      	ldrb	r3, [r7, #3]
 8009be6:	015a      	lsls	r2, r3, #5
 8009be8:	693b      	ldr	r3, [r7, #16]
 8009bea:	4413      	add	r3, r2
 8009bec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009bf0:	461a      	mov	r2, r3
 8009bf2:	2310      	movs	r3, #16
 8009bf4:	6093      	str	r3, [r2, #8]
 8009bf6:	e2a7      	b.n	800a148 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	78fa      	ldrb	r2, [r7, #3]
 8009bfe:	4611      	mov	r1, r2
 8009c00:	4618      	mov	r0, r3
 8009c02:	f002 f8a1 	bl	800bd48 <USB_ReadChInterrupts>
 8009c06:	4603      	mov	r3, r0
 8009c08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009c0c:	2b80      	cmp	r3, #128	@ 0x80
 8009c0e:	f040 8083 	bne.w	8009d18 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	799b      	ldrb	r3, [r3, #6]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d111      	bne.n	8009c3e <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8009c1a:	78fa      	ldrb	r2, [r7, #3]
 8009c1c:	6879      	ldr	r1, [r7, #4]
 8009c1e:	4613      	mov	r3, r2
 8009c20:	011b      	lsls	r3, r3, #4
 8009c22:	1a9b      	subs	r3, r3, r2
 8009c24:	009b      	lsls	r3, r3, #2
 8009c26:	440b      	add	r3, r1
 8009c28:	334d      	adds	r3, #77	@ 0x4d
 8009c2a:	2207      	movs	r2, #7
 8009c2c:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	681b      	ldr	r3, [r3, #0]
 8009c32:	78fa      	ldrb	r2, [r7, #3]
 8009c34:	4611      	mov	r1, r2
 8009c36:	4618      	mov	r0, r3
 8009c38:	f002 fe29 	bl	800c88e <USB_HC_Halt>
 8009c3c:	e062      	b.n	8009d04 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8009c3e:	78fa      	ldrb	r2, [r7, #3]
 8009c40:	6879      	ldr	r1, [r7, #4]
 8009c42:	4613      	mov	r3, r2
 8009c44:	011b      	lsls	r3, r3, #4
 8009c46:	1a9b      	subs	r3, r3, r2
 8009c48:	009b      	lsls	r3, r3, #2
 8009c4a:	440b      	add	r3, r1
 8009c4c:	3344      	adds	r3, #68	@ 0x44
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	1c59      	adds	r1, r3, #1
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	4613      	mov	r3, r2
 8009c56:	011b      	lsls	r3, r3, #4
 8009c58:	1a9b      	subs	r3, r3, r2
 8009c5a:	009b      	lsls	r3, r3, #2
 8009c5c:	4403      	add	r3, r0
 8009c5e:	3344      	adds	r3, #68	@ 0x44
 8009c60:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8009c62:	78fa      	ldrb	r2, [r7, #3]
 8009c64:	6879      	ldr	r1, [r7, #4]
 8009c66:	4613      	mov	r3, r2
 8009c68:	011b      	lsls	r3, r3, #4
 8009c6a:	1a9b      	subs	r3, r3, r2
 8009c6c:	009b      	lsls	r3, r3, #2
 8009c6e:	440b      	add	r3, r1
 8009c70:	3344      	adds	r3, #68	@ 0x44
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	2b02      	cmp	r3, #2
 8009c76:	d922      	bls.n	8009cbe <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8009c78:	78fa      	ldrb	r2, [r7, #3]
 8009c7a:	6879      	ldr	r1, [r7, #4]
 8009c7c:	4613      	mov	r3, r2
 8009c7e:	011b      	lsls	r3, r3, #4
 8009c80:	1a9b      	subs	r3, r3, r2
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	440b      	add	r3, r1
 8009c86:	3344      	adds	r3, #68	@ 0x44
 8009c88:	2200      	movs	r2, #0
 8009c8a:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8009c8c:	78fa      	ldrb	r2, [r7, #3]
 8009c8e:	6879      	ldr	r1, [r7, #4]
 8009c90:	4613      	mov	r3, r2
 8009c92:	011b      	lsls	r3, r3, #4
 8009c94:	1a9b      	subs	r3, r3, r2
 8009c96:	009b      	lsls	r3, r3, #2
 8009c98:	440b      	add	r3, r1
 8009c9a:	334c      	adds	r3, #76	@ 0x4c
 8009c9c:	2204      	movs	r2, #4
 8009c9e:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8009ca0:	78fa      	ldrb	r2, [r7, #3]
 8009ca2:	6879      	ldr	r1, [r7, #4]
 8009ca4:	4613      	mov	r3, r2
 8009ca6:	011b      	lsls	r3, r3, #4
 8009ca8:	1a9b      	subs	r3, r3, r2
 8009caa:	009b      	lsls	r3, r3, #2
 8009cac:	440b      	add	r3, r1
 8009cae:	334c      	adds	r3, #76	@ 0x4c
 8009cb0:	781a      	ldrb	r2, [r3, #0]
 8009cb2:	78fb      	ldrb	r3, [r7, #3]
 8009cb4:	4619      	mov	r1, r3
 8009cb6:	6878      	ldr	r0, [r7, #4]
 8009cb8:	f005 f942 	bl	800ef40 <HAL_HCD_HC_NotifyURBChange_Callback>
 8009cbc:	e022      	b.n	8009d04 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009cbe:	78fa      	ldrb	r2, [r7, #3]
 8009cc0:	6879      	ldr	r1, [r7, #4]
 8009cc2:	4613      	mov	r3, r2
 8009cc4:	011b      	lsls	r3, r3, #4
 8009cc6:	1a9b      	subs	r3, r3, r2
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	440b      	add	r3, r1
 8009ccc:	334c      	adds	r3, #76	@ 0x4c
 8009cce:	2202      	movs	r2, #2
 8009cd0:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8009cd2:	78fb      	ldrb	r3, [r7, #3]
 8009cd4:	015a      	lsls	r2, r3, #5
 8009cd6:	693b      	ldr	r3, [r7, #16]
 8009cd8:	4413      	add	r3, r2
 8009cda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009ce8:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8009cf0:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8009cf2:	78fb      	ldrb	r3, [r7, #3]
 8009cf4:	015a      	lsls	r2, r3, #5
 8009cf6:	693b      	ldr	r3, [r7, #16]
 8009cf8:	4413      	add	r3, r2
 8009cfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009cfe:	461a      	mov	r2, r3
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8009d04:	78fb      	ldrb	r3, [r7, #3]
 8009d06:	015a      	lsls	r2, r3, #5
 8009d08:	693b      	ldr	r3, [r7, #16]
 8009d0a:	4413      	add	r3, r2
 8009d0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d10:	461a      	mov	r2, r3
 8009d12:	2380      	movs	r3, #128	@ 0x80
 8009d14:	6093      	str	r3, [r2, #8]
 8009d16:	e217      	b.n	800a148 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8009d18:	687b      	ldr	r3, [r7, #4]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	78fa      	ldrb	r2, [r7, #3]
 8009d1e:	4611      	mov	r1, r2
 8009d20:	4618      	mov	r0, r3
 8009d22:	f002 f811 	bl	800bd48 <USB_ReadChInterrupts>
 8009d26:	4603      	mov	r3, r0
 8009d28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8009d2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009d30:	d11b      	bne.n	8009d6a <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8009d32:	78fa      	ldrb	r2, [r7, #3]
 8009d34:	6879      	ldr	r1, [r7, #4]
 8009d36:	4613      	mov	r3, r2
 8009d38:	011b      	lsls	r3, r3, #4
 8009d3a:	1a9b      	subs	r3, r3, r2
 8009d3c:	009b      	lsls	r3, r3, #2
 8009d3e:	440b      	add	r3, r1
 8009d40:	334d      	adds	r3, #77	@ 0x4d
 8009d42:	2209      	movs	r2, #9
 8009d44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	681b      	ldr	r3, [r3, #0]
 8009d4a:	78fa      	ldrb	r2, [r7, #3]
 8009d4c:	4611      	mov	r1, r2
 8009d4e:	4618      	mov	r0, r3
 8009d50:	f002 fd9d 	bl	800c88e <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8009d54:	78fb      	ldrb	r3, [r7, #3]
 8009d56:	015a      	lsls	r2, r3, #5
 8009d58:	693b      	ldr	r3, [r7, #16]
 8009d5a:	4413      	add	r3, r2
 8009d5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d60:	461a      	mov	r2, r3
 8009d62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009d66:	6093      	str	r3, [r2, #8]
 8009d68:	e1ee      	b.n	800a148 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	681b      	ldr	r3, [r3, #0]
 8009d6e:	78fa      	ldrb	r2, [r7, #3]
 8009d70:	4611      	mov	r1, r2
 8009d72:	4618      	mov	r0, r3
 8009d74:	f001 ffe8 	bl	800bd48 <USB_ReadChInterrupts>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	f003 0302 	and.w	r3, r3, #2
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	f040 81df 	bne.w	800a142 <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8009d84:	78fb      	ldrb	r3, [r7, #3]
 8009d86:	015a      	lsls	r2, r3, #5
 8009d88:	693b      	ldr	r3, [r7, #16]
 8009d8a:	4413      	add	r3, r2
 8009d8c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d90:	461a      	mov	r2, r3
 8009d92:	2302      	movs	r3, #2
 8009d94:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8009d96:	78fa      	ldrb	r2, [r7, #3]
 8009d98:	6879      	ldr	r1, [r7, #4]
 8009d9a:	4613      	mov	r3, r2
 8009d9c:	011b      	lsls	r3, r3, #4
 8009d9e:	1a9b      	subs	r3, r3, r2
 8009da0:	009b      	lsls	r3, r3, #2
 8009da2:	440b      	add	r3, r1
 8009da4:	334d      	adds	r3, #77	@ 0x4d
 8009da6:	781b      	ldrb	r3, [r3, #0]
 8009da8:	2b01      	cmp	r3, #1
 8009daa:	f040 8093 	bne.w	8009ed4 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009dae:	78fa      	ldrb	r2, [r7, #3]
 8009db0:	6879      	ldr	r1, [r7, #4]
 8009db2:	4613      	mov	r3, r2
 8009db4:	011b      	lsls	r3, r3, #4
 8009db6:	1a9b      	subs	r3, r3, r2
 8009db8:	009b      	lsls	r3, r3, #2
 8009dba:	440b      	add	r3, r1
 8009dbc:	334d      	adds	r3, #77	@ 0x4d
 8009dbe:	2202      	movs	r2, #2
 8009dc0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8009dc2:	78fa      	ldrb	r2, [r7, #3]
 8009dc4:	6879      	ldr	r1, [r7, #4]
 8009dc6:	4613      	mov	r3, r2
 8009dc8:	011b      	lsls	r3, r3, #4
 8009dca:	1a9b      	subs	r3, r3, r2
 8009dcc:	009b      	lsls	r3, r3, #2
 8009dce:	440b      	add	r3, r1
 8009dd0:	334c      	adds	r3, #76	@ 0x4c
 8009dd2:	2201      	movs	r2, #1
 8009dd4:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8009dd6:	78fa      	ldrb	r2, [r7, #3]
 8009dd8:	6879      	ldr	r1, [r7, #4]
 8009dda:	4613      	mov	r3, r2
 8009ddc:	011b      	lsls	r3, r3, #4
 8009dde:	1a9b      	subs	r3, r3, r2
 8009de0:	009b      	lsls	r3, r3, #2
 8009de2:	440b      	add	r3, r1
 8009de4:	3326      	adds	r3, #38	@ 0x26
 8009de6:	781b      	ldrb	r3, [r3, #0]
 8009de8:	2b02      	cmp	r3, #2
 8009dea:	d00b      	beq.n	8009e04 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8009dec:	78fa      	ldrb	r2, [r7, #3]
 8009dee:	6879      	ldr	r1, [r7, #4]
 8009df0:	4613      	mov	r3, r2
 8009df2:	011b      	lsls	r3, r3, #4
 8009df4:	1a9b      	subs	r3, r3, r2
 8009df6:	009b      	lsls	r3, r3, #2
 8009df8:	440b      	add	r3, r1
 8009dfa:	3326      	adds	r3, #38	@ 0x26
 8009dfc:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8009dfe:	2b03      	cmp	r3, #3
 8009e00:	f040 8190 	bne.w	800a124 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8009e04:	687b      	ldr	r3, [r7, #4]
 8009e06:	799b      	ldrb	r3, [r3, #6]
 8009e08:	2b00      	cmp	r3, #0
 8009e0a:	d115      	bne.n	8009e38 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8009e0c:	78fa      	ldrb	r2, [r7, #3]
 8009e0e:	6879      	ldr	r1, [r7, #4]
 8009e10:	4613      	mov	r3, r2
 8009e12:	011b      	lsls	r3, r3, #4
 8009e14:	1a9b      	subs	r3, r3, r2
 8009e16:	009b      	lsls	r3, r3, #2
 8009e18:	440b      	add	r3, r1
 8009e1a:	333d      	adds	r3, #61	@ 0x3d
 8009e1c:	781b      	ldrb	r3, [r3, #0]
 8009e1e:	78fa      	ldrb	r2, [r7, #3]
 8009e20:	f083 0301 	eor.w	r3, r3, #1
 8009e24:	b2d8      	uxtb	r0, r3
 8009e26:	6879      	ldr	r1, [r7, #4]
 8009e28:	4613      	mov	r3, r2
 8009e2a:	011b      	lsls	r3, r3, #4
 8009e2c:	1a9b      	subs	r3, r3, r2
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	440b      	add	r3, r1
 8009e32:	333d      	adds	r3, #61	@ 0x3d
 8009e34:	4602      	mov	r2, r0
 8009e36:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	799b      	ldrb	r3, [r3, #6]
 8009e3c:	2b01      	cmp	r3, #1
 8009e3e:	f040 8171 	bne.w	800a124 <HCD_HC_OUT_IRQHandler+0x954>
 8009e42:	78fa      	ldrb	r2, [r7, #3]
 8009e44:	6879      	ldr	r1, [r7, #4]
 8009e46:	4613      	mov	r3, r2
 8009e48:	011b      	lsls	r3, r3, #4
 8009e4a:	1a9b      	subs	r3, r3, r2
 8009e4c:	009b      	lsls	r3, r3, #2
 8009e4e:	440b      	add	r3, r1
 8009e50:	3334      	adds	r3, #52	@ 0x34
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	f000 8165 	beq.w	800a124 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8009e5a:	78fa      	ldrb	r2, [r7, #3]
 8009e5c:	6879      	ldr	r1, [r7, #4]
 8009e5e:	4613      	mov	r3, r2
 8009e60:	011b      	lsls	r3, r3, #4
 8009e62:	1a9b      	subs	r3, r3, r2
 8009e64:	009b      	lsls	r3, r3, #2
 8009e66:	440b      	add	r3, r1
 8009e68:	3334      	adds	r3, #52	@ 0x34
 8009e6a:	6819      	ldr	r1, [r3, #0]
 8009e6c:	78fa      	ldrb	r2, [r7, #3]
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	4613      	mov	r3, r2
 8009e72:	011b      	lsls	r3, r3, #4
 8009e74:	1a9b      	subs	r3, r3, r2
 8009e76:	009b      	lsls	r3, r3, #2
 8009e78:	4403      	add	r3, r0
 8009e7a:	3328      	adds	r3, #40	@ 0x28
 8009e7c:	881b      	ldrh	r3, [r3, #0]
 8009e7e:	440b      	add	r3, r1
 8009e80:	1e59      	subs	r1, r3, #1
 8009e82:	78fa      	ldrb	r2, [r7, #3]
 8009e84:	6878      	ldr	r0, [r7, #4]
 8009e86:	4613      	mov	r3, r2
 8009e88:	011b      	lsls	r3, r3, #4
 8009e8a:	1a9b      	subs	r3, r3, r2
 8009e8c:	009b      	lsls	r3, r3, #2
 8009e8e:	4403      	add	r3, r0
 8009e90:	3328      	adds	r3, #40	@ 0x28
 8009e92:	881b      	ldrh	r3, [r3, #0]
 8009e94:	fbb1 f3f3 	udiv	r3, r1, r3
 8009e98:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8009e9a:	68bb      	ldr	r3, [r7, #8]
 8009e9c:	f003 0301 	and.w	r3, r3, #1
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	f000 813f 	beq.w	800a124 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8009ea6:	78fa      	ldrb	r2, [r7, #3]
 8009ea8:	6879      	ldr	r1, [r7, #4]
 8009eaa:	4613      	mov	r3, r2
 8009eac:	011b      	lsls	r3, r3, #4
 8009eae:	1a9b      	subs	r3, r3, r2
 8009eb0:	009b      	lsls	r3, r3, #2
 8009eb2:	440b      	add	r3, r1
 8009eb4:	333d      	adds	r3, #61	@ 0x3d
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	78fa      	ldrb	r2, [r7, #3]
 8009eba:	f083 0301 	eor.w	r3, r3, #1
 8009ebe:	b2d8      	uxtb	r0, r3
 8009ec0:	6879      	ldr	r1, [r7, #4]
 8009ec2:	4613      	mov	r3, r2
 8009ec4:	011b      	lsls	r3, r3, #4
 8009ec6:	1a9b      	subs	r3, r3, r2
 8009ec8:	009b      	lsls	r3, r3, #2
 8009eca:	440b      	add	r3, r1
 8009ecc:	333d      	adds	r3, #61	@ 0x3d
 8009ece:	4602      	mov	r2, r0
 8009ed0:	701a      	strb	r2, [r3, #0]
 8009ed2:	e127      	b.n	800a124 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8009ed4:	78fa      	ldrb	r2, [r7, #3]
 8009ed6:	6879      	ldr	r1, [r7, #4]
 8009ed8:	4613      	mov	r3, r2
 8009eda:	011b      	lsls	r3, r3, #4
 8009edc:	1a9b      	subs	r3, r3, r2
 8009ede:	009b      	lsls	r3, r3, #2
 8009ee0:	440b      	add	r3, r1
 8009ee2:	334d      	adds	r3, #77	@ 0x4d
 8009ee4:	781b      	ldrb	r3, [r3, #0]
 8009ee6:	2b03      	cmp	r3, #3
 8009ee8:	d120      	bne.n	8009f2c <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009eea:	78fa      	ldrb	r2, [r7, #3]
 8009eec:	6879      	ldr	r1, [r7, #4]
 8009eee:	4613      	mov	r3, r2
 8009ef0:	011b      	lsls	r3, r3, #4
 8009ef2:	1a9b      	subs	r3, r3, r2
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	440b      	add	r3, r1
 8009ef8:	334d      	adds	r3, #77	@ 0x4d
 8009efa:	2202      	movs	r2, #2
 8009efc:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8009efe:	78fa      	ldrb	r2, [r7, #3]
 8009f00:	6879      	ldr	r1, [r7, #4]
 8009f02:	4613      	mov	r3, r2
 8009f04:	011b      	lsls	r3, r3, #4
 8009f06:	1a9b      	subs	r3, r3, r2
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	440b      	add	r3, r1
 8009f0c:	331b      	adds	r3, #27
 8009f0e:	781b      	ldrb	r3, [r3, #0]
 8009f10:	2b01      	cmp	r3, #1
 8009f12:	f040 8107 	bne.w	800a124 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009f16:	78fa      	ldrb	r2, [r7, #3]
 8009f18:	6879      	ldr	r1, [r7, #4]
 8009f1a:	4613      	mov	r3, r2
 8009f1c:	011b      	lsls	r3, r3, #4
 8009f1e:	1a9b      	subs	r3, r3, r2
 8009f20:	009b      	lsls	r3, r3, #2
 8009f22:	440b      	add	r3, r1
 8009f24:	334c      	adds	r3, #76	@ 0x4c
 8009f26:	2202      	movs	r2, #2
 8009f28:	701a      	strb	r2, [r3, #0]
 8009f2a:	e0fb      	b.n	800a124 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8009f2c:	78fa      	ldrb	r2, [r7, #3]
 8009f2e:	6879      	ldr	r1, [r7, #4]
 8009f30:	4613      	mov	r3, r2
 8009f32:	011b      	lsls	r3, r3, #4
 8009f34:	1a9b      	subs	r3, r3, r2
 8009f36:	009b      	lsls	r3, r3, #2
 8009f38:	440b      	add	r3, r1
 8009f3a:	334d      	adds	r3, #77	@ 0x4d
 8009f3c:	781b      	ldrb	r3, [r3, #0]
 8009f3e:	2b04      	cmp	r3, #4
 8009f40:	d13a      	bne.n	8009fb8 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009f42:	78fa      	ldrb	r2, [r7, #3]
 8009f44:	6879      	ldr	r1, [r7, #4]
 8009f46:	4613      	mov	r3, r2
 8009f48:	011b      	lsls	r3, r3, #4
 8009f4a:	1a9b      	subs	r3, r3, r2
 8009f4c:	009b      	lsls	r3, r3, #2
 8009f4e:	440b      	add	r3, r1
 8009f50:	334d      	adds	r3, #77	@ 0x4d
 8009f52:	2202      	movs	r2, #2
 8009f54:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8009f56:	78fa      	ldrb	r2, [r7, #3]
 8009f58:	6879      	ldr	r1, [r7, #4]
 8009f5a:	4613      	mov	r3, r2
 8009f5c:	011b      	lsls	r3, r3, #4
 8009f5e:	1a9b      	subs	r3, r3, r2
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	440b      	add	r3, r1
 8009f64:	334c      	adds	r3, #76	@ 0x4c
 8009f66:	2202      	movs	r2, #2
 8009f68:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8009f6a:	78fa      	ldrb	r2, [r7, #3]
 8009f6c:	6879      	ldr	r1, [r7, #4]
 8009f6e:	4613      	mov	r3, r2
 8009f70:	011b      	lsls	r3, r3, #4
 8009f72:	1a9b      	subs	r3, r3, r2
 8009f74:	009b      	lsls	r3, r3, #2
 8009f76:	440b      	add	r3, r1
 8009f78:	331b      	adds	r3, #27
 8009f7a:	781b      	ldrb	r3, [r3, #0]
 8009f7c:	2b01      	cmp	r3, #1
 8009f7e:	f040 80d1 	bne.w	800a124 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8009f82:	78fa      	ldrb	r2, [r7, #3]
 8009f84:	6879      	ldr	r1, [r7, #4]
 8009f86:	4613      	mov	r3, r2
 8009f88:	011b      	lsls	r3, r3, #4
 8009f8a:	1a9b      	subs	r3, r3, r2
 8009f8c:	009b      	lsls	r3, r3, #2
 8009f8e:	440b      	add	r3, r1
 8009f90:	331b      	adds	r3, #27
 8009f92:	2200      	movs	r2, #0
 8009f94:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8009f96:	78fb      	ldrb	r3, [r7, #3]
 8009f98:	015a      	lsls	r2, r3, #5
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	78fa      	ldrb	r2, [r7, #3]
 8009fa6:	0151      	lsls	r1, r2, #5
 8009fa8:	693a      	ldr	r2, [r7, #16]
 8009faa:	440a      	add	r2, r1
 8009fac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009fb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009fb4:	6053      	str	r3, [r2, #4]
 8009fb6:	e0b5      	b.n	800a124 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8009fb8:	78fa      	ldrb	r2, [r7, #3]
 8009fba:	6879      	ldr	r1, [r7, #4]
 8009fbc:	4613      	mov	r3, r2
 8009fbe:	011b      	lsls	r3, r3, #4
 8009fc0:	1a9b      	subs	r3, r3, r2
 8009fc2:	009b      	lsls	r3, r3, #2
 8009fc4:	440b      	add	r3, r1
 8009fc6:	334d      	adds	r3, #77	@ 0x4d
 8009fc8:	781b      	ldrb	r3, [r3, #0]
 8009fca:	2b05      	cmp	r3, #5
 8009fcc:	d114      	bne.n	8009ff8 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8009fce:	78fa      	ldrb	r2, [r7, #3]
 8009fd0:	6879      	ldr	r1, [r7, #4]
 8009fd2:	4613      	mov	r3, r2
 8009fd4:	011b      	lsls	r3, r3, #4
 8009fd6:	1a9b      	subs	r3, r3, r2
 8009fd8:	009b      	lsls	r3, r3, #2
 8009fda:	440b      	add	r3, r1
 8009fdc:	334d      	adds	r3, #77	@ 0x4d
 8009fde:	2202      	movs	r2, #2
 8009fe0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8009fe2:	78fa      	ldrb	r2, [r7, #3]
 8009fe4:	6879      	ldr	r1, [r7, #4]
 8009fe6:	4613      	mov	r3, r2
 8009fe8:	011b      	lsls	r3, r3, #4
 8009fea:	1a9b      	subs	r3, r3, r2
 8009fec:	009b      	lsls	r3, r3, #2
 8009fee:	440b      	add	r3, r1
 8009ff0:	334c      	adds	r3, #76	@ 0x4c
 8009ff2:	2202      	movs	r2, #2
 8009ff4:	701a      	strb	r2, [r3, #0]
 8009ff6:	e095      	b.n	800a124 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8009ff8:	78fa      	ldrb	r2, [r7, #3]
 8009ffa:	6879      	ldr	r1, [r7, #4]
 8009ffc:	4613      	mov	r3, r2
 8009ffe:	011b      	lsls	r3, r3, #4
 800a000:	1a9b      	subs	r3, r3, r2
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	440b      	add	r3, r1
 800a006:	334d      	adds	r3, #77	@ 0x4d
 800a008:	781b      	ldrb	r3, [r3, #0]
 800a00a:	2b06      	cmp	r3, #6
 800a00c:	d114      	bne.n	800a038 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a00e:	78fa      	ldrb	r2, [r7, #3]
 800a010:	6879      	ldr	r1, [r7, #4]
 800a012:	4613      	mov	r3, r2
 800a014:	011b      	lsls	r3, r3, #4
 800a016:	1a9b      	subs	r3, r3, r2
 800a018:	009b      	lsls	r3, r3, #2
 800a01a:	440b      	add	r3, r1
 800a01c:	334d      	adds	r3, #77	@ 0x4d
 800a01e:	2202      	movs	r2, #2
 800a020:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 800a022:	78fa      	ldrb	r2, [r7, #3]
 800a024:	6879      	ldr	r1, [r7, #4]
 800a026:	4613      	mov	r3, r2
 800a028:	011b      	lsls	r3, r3, #4
 800a02a:	1a9b      	subs	r3, r3, r2
 800a02c:	009b      	lsls	r3, r3, #2
 800a02e:	440b      	add	r3, r1
 800a030:	334c      	adds	r3, #76	@ 0x4c
 800a032:	2205      	movs	r2, #5
 800a034:	701a      	strb	r2, [r3, #0]
 800a036:	e075      	b.n	800a124 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800a038:	78fa      	ldrb	r2, [r7, #3]
 800a03a:	6879      	ldr	r1, [r7, #4]
 800a03c:	4613      	mov	r3, r2
 800a03e:	011b      	lsls	r3, r3, #4
 800a040:	1a9b      	subs	r3, r3, r2
 800a042:	009b      	lsls	r3, r3, #2
 800a044:	440b      	add	r3, r1
 800a046:	334d      	adds	r3, #77	@ 0x4d
 800a048:	781b      	ldrb	r3, [r3, #0]
 800a04a:	2b07      	cmp	r3, #7
 800a04c:	d00a      	beq.n	800a064 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 800a04e:	78fa      	ldrb	r2, [r7, #3]
 800a050:	6879      	ldr	r1, [r7, #4]
 800a052:	4613      	mov	r3, r2
 800a054:	011b      	lsls	r3, r3, #4
 800a056:	1a9b      	subs	r3, r3, r2
 800a058:	009b      	lsls	r3, r3, #2
 800a05a:	440b      	add	r3, r1
 800a05c:	334d      	adds	r3, #77	@ 0x4d
 800a05e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 800a060:	2b09      	cmp	r3, #9
 800a062:	d170      	bne.n	800a146 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800a064:	78fa      	ldrb	r2, [r7, #3]
 800a066:	6879      	ldr	r1, [r7, #4]
 800a068:	4613      	mov	r3, r2
 800a06a:	011b      	lsls	r3, r3, #4
 800a06c:	1a9b      	subs	r3, r3, r2
 800a06e:	009b      	lsls	r3, r3, #2
 800a070:	440b      	add	r3, r1
 800a072:	334d      	adds	r3, #77	@ 0x4d
 800a074:	2202      	movs	r2, #2
 800a076:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800a078:	78fa      	ldrb	r2, [r7, #3]
 800a07a:	6879      	ldr	r1, [r7, #4]
 800a07c:	4613      	mov	r3, r2
 800a07e:	011b      	lsls	r3, r3, #4
 800a080:	1a9b      	subs	r3, r3, r2
 800a082:	009b      	lsls	r3, r3, #2
 800a084:	440b      	add	r3, r1
 800a086:	3344      	adds	r3, #68	@ 0x44
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	1c59      	adds	r1, r3, #1
 800a08c:	6878      	ldr	r0, [r7, #4]
 800a08e:	4613      	mov	r3, r2
 800a090:	011b      	lsls	r3, r3, #4
 800a092:	1a9b      	subs	r3, r3, r2
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	4403      	add	r3, r0
 800a098:	3344      	adds	r3, #68	@ 0x44
 800a09a:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a09c:	78fa      	ldrb	r2, [r7, #3]
 800a09e:	6879      	ldr	r1, [r7, #4]
 800a0a0:	4613      	mov	r3, r2
 800a0a2:	011b      	lsls	r3, r3, #4
 800a0a4:	1a9b      	subs	r3, r3, r2
 800a0a6:	009b      	lsls	r3, r3, #2
 800a0a8:	440b      	add	r3, r1
 800a0aa:	3344      	adds	r3, #68	@ 0x44
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	2b02      	cmp	r3, #2
 800a0b0:	d914      	bls.n	800a0dc <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 800a0b2:	78fa      	ldrb	r2, [r7, #3]
 800a0b4:	6879      	ldr	r1, [r7, #4]
 800a0b6:	4613      	mov	r3, r2
 800a0b8:	011b      	lsls	r3, r3, #4
 800a0ba:	1a9b      	subs	r3, r3, r2
 800a0bc:	009b      	lsls	r3, r3, #2
 800a0be:	440b      	add	r3, r1
 800a0c0:	3344      	adds	r3, #68	@ 0x44
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800a0c6:	78fa      	ldrb	r2, [r7, #3]
 800a0c8:	6879      	ldr	r1, [r7, #4]
 800a0ca:	4613      	mov	r3, r2
 800a0cc:	011b      	lsls	r3, r3, #4
 800a0ce:	1a9b      	subs	r3, r3, r2
 800a0d0:	009b      	lsls	r3, r3, #2
 800a0d2:	440b      	add	r3, r1
 800a0d4:	334c      	adds	r3, #76	@ 0x4c
 800a0d6:	2204      	movs	r2, #4
 800a0d8:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a0da:	e022      	b.n	800a122 <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800a0dc:	78fa      	ldrb	r2, [r7, #3]
 800a0de:	6879      	ldr	r1, [r7, #4]
 800a0e0:	4613      	mov	r3, r2
 800a0e2:	011b      	lsls	r3, r3, #4
 800a0e4:	1a9b      	subs	r3, r3, r2
 800a0e6:	009b      	lsls	r3, r3, #2
 800a0e8:	440b      	add	r3, r1
 800a0ea:	334c      	adds	r3, #76	@ 0x4c
 800a0ec:	2202      	movs	r2, #2
 800a0ee:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800a0f0:	78fb      	ldrb	r3, [r7, #3]
 800a0f2:	015a      	lsls	r2, r3, #5
 800a0f4:	693b      	ldr	r3, [r7, #16]
 800a0f6:	4413      	add	r3, r2
 800a0f8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a0fc:	681b      	ldr	r3, [r3, #0]
 800a0fe:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a106:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a10e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800a110:	78fb      	ldrb	r3, [r7, #3]
 800a112:	015a      	lsls	r2, r3, #5
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	4413      	add	r3, r2
 800a118:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a11c:	461a      	mov	r2, r3
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800a122:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800a124:	78fa      	ldrb	r2, [r7, #3]
 800a126:	6879      	ldr	r1, [r7, #4]
 800a128:	4613      	mov	r3, r2
 800a12a:	011b      	lsls	r3, r3, #4
 800a12c:	1a9b      	subs	r3, r3, r2
 800a12e:	009b      	lsls	r3, r3, #2
 800a130:	440b      	add	r3, r1
 800a132:	334c      	adds	r3, #76	@ 0x4c
 800a134:	781a      	ldrb	r2, [r3, #0]
 800a136:	78fb      	ldrb	r3, [r7, #3]
 800a138:	4619      	mov	r1, r3
 800a13a:	6878      	ldr	r0, [r7, #4]
 800a13c:	f004 ff00 	bl	800ef40 <HAL_HCD_HC_NotifyURBChange_Callback>
 800a140:	e002      	b.n	800a148 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 800a142:	bf00      	nop
 800a144:	e000      	b.n	800a148 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 800a146:	bf00      	nop
  }
}
 800a148:	3718      	adds	r7, #24
 800a14a:	46bd      	mov	sp, r7
 800a14c:	bd80      	pop	{r7, pc}

0800a14e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800a14e:	b580      	push	{r7, lr}
 800a150:	b08a      	sub	sp, #40	@ 0x28
 800a152:	af00      	add	r7, sp, #0
 800a154:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	681b      	ldr	r3, [r3, #0]
 800a15a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a15c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a15e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	6a1b      	ldr	r3, [r3, #32]
 800a166:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	f003 030f 	and.w	r3, r3, #15
 800a16e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	0c5b      	lsrs	r3, r3, #17
 800a174:	f003 030f 	and.w	r3, r3, #15
 800a178:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800a17a:	69fb      	ldr	r3, [r7, #28]
 800a17c:	091b      	lsrs	r3, r3, #4
 800a17e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800a182:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800a184:	697b      	ldr	r3, [r7, #20]
 800a186:	2b02      	cmp	r3, #2
 800a188:	d004      	beq.n	800a194 <HCD_RXQLVL_IRQHandler+0x46>
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	2b05      	cmp	r3, #5
 800a18e:	f000 80b6 	beq.w	800a2fe <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800a192:	e0b7      	b.n	800a304 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 800a194:	693b      	ldr	r3, [r7, #16]
 800a196:	2b00      	cmp	r3, #0
 800a198:	f000 80b3 	beq.w	800a302 <HCD_RXQLVL_IRQHandler+0x1b4>
 800a19c:	6879      	ldr	r1, [r7, #4]
 800a19e:	69ba      	ldr	r2, [r7, #24]
 800a1a0:	4613      	mov	r3, r2
 800a1a2:	011b      	lsls	r3, r3, #4
 800a1a4:	1a9b      	subs	r3, r3, r2
 800a1a6:	009b      	lsls	r3, r3, #2
 800a1a8:	440b      	add	r3, r1
 800a1aa:	332c      	adds	r3, #44	@ 0x2c
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	f000 80a7 	beq.w	800a302 <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 800a1b4:	6879      	ldr	r1, [r7, #4]
 800a1b6:	69ba      	ldr	r2, [r7, #24]
 800a1b8:	4613      	mov	r3, r2
 800a1ba:	011b      	lsls	r3, r3, #4
 800a1bc:	1a9b      	subs	r3, r3, r2
 800a1be:	009b      	lsls	r3, r3, #2
 800a1c0:	440b      	add	r3, r1
 800a1c2:	3338      	adds	r3, #56	@ 0x38
 800a1c4:	681a      	ldr	r2, [r3, #0]
 800a1c6:	693b      	ldr	r3, [r7, #16]
 800a1c8:	18d1      	adds	r1, r2, r3
 800a1ca:	6878      	ldr	r0, [r7, #4]
 800a1cc:	69ba      	ldr	r2, [r7, #24]
 800a1ce:	4613      	mov	r3, r2
 800a1d0:	011b      	lsls	r3, r3, #4
 800a1d2:	1a9b      	subs	r3, r3, r2
 800a1d4:	009b      	lsls	r3, r3, #2
 800a1d6:	4403      	add	r3, r0
 800a1d8:	3334      	adds	r3, #52	@ 0x34
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	4299      	cmp	r1, r3
 800a1de:	f200 8083 	bhi.w	800a2e8 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6818      	ldr	r0, [r3, #0]
 800a1e6:	6879      	ldr	r1, [r7, #4]
 800a1e8:	69ba      	ldr	r2, [r7, #24]
 800a1ea:	4613      	mov	r3, r2
 800a1ec:	011b      	lsls	r3, r3, #4
 800a1ee:	1a9b      	subs	r3, r3, r2
 800a1f0:	009b      	lsls	r3, r3, #2
 800a1f2:	440b      	add	r3, r1
 800a1f4:	332c      	adds	r3, #44	@ 0x2c
 800a1f6:	681b      	ldr	r3, [r3, #0]
 800a1f8:	693a      	ldr	r2, [r7, #16]
 800a1fa:	b292      	uxth	r2, r2
 800a1fc:	4619      	mov	r1, r3
 800a1fe:	f001 fd38 	bl	800bc72 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 800a202:	6879      	ldr	r1, [r7, #4]
 800a204:	69ba      	ldr	r2, [r7, #24]
 800a206:	4613      	mov	r3, r2
 800a208:	011b      	lsls	r3, r3, #4
 800a20a:	1a9b      	subs	r3, r3, r2
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	440b      	add	r3, r1
 800a210:	332c      	adds	r3, #44	@ 0x2c
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	18d1      	adds	r1, r2, r3
 800a218:	6878      	ldr	r0, [r7, #4]
 800a21a:	69ba      	ldr	r2, [r7, #24]
 800a21c:	4613      	mov	r3, r2
 800a21e:	011b      	lsls	r3, r3, #4
 800a220:	1a9b      	subs	r3, r3, r2
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	4403      	add	r3, r0
 800a226:	332c      	adds	r3, #44	@ 0x2c
 800a228:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 800a22a:	6879      	ldr	r1, [r7, #4]
 800a22c:	69ba      	ldr	r2, [r7, #24]
 800a22e:	4613      	mov	r3, r2
 800a230:	011b      	lsls	r3, r3, #4
 800a232:	1a9b      	subs	r3, r3, r2
 800a234:	009b      	lsls	r3, r3, #2
 800a236:	440b      	add	r3, r1
 800a238:	3338      	adds	r3, #56	@ 0x38
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	18d1      	adds	r1, r2, r3
 800a240:	6878      	ldr	r0, [r7, #4]
 800a242:	69ba      	ldr	r2, [r7, #24]
 800a244:	4613      	mov	r3, r2
 800a246:	011b      	lsls	r3, r3, #4
 800a248:	1a9b      	subs	r3, r3, r2
 800a24a:	009b      	lsls	r3, r3, #2
 800a24c:	4403      	add	r3, r0
 800a24e:	3338      	adds	r3, #56	@ 0x38
 800a250:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800a252:	69bb      	ldr	r3, [r7, #24]
 800a254:	015a      	lsls	r2, r3, #5
 800a256:	6a3b      	ldr	r3, [r7, #32]
 800a258:	4413      	add	r3, r2
 800a25a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a25e:	691b      	ldr	r3, [r3, #16]
 800a260:	0cdb      	lsrs	r3, r3, #19
 800a262:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a266:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 800a268:	6879      	ldr	r1, [r7, #4]
 800a26a:	69ba      	ldr	r2, [r7, #24]
 800a26c:	4613      	mov	r3, r2
 800a26e:	011b      	lsls	r3, r3, #4
 800a270:	1a9b      	subs	r3, r3, r2
 800a272:	009b      	lsls	r3, r3, #2
 800a274:	440b      	add	r3, r1
 800a276:	3328      	adds	r3, #40	@ 0x28
 800a278:	881b      	ldrh	r3, [r3, #0]
 800a27a:	461a      	mov	r2, r3
 800a27c:	693b      	ldr	r3, [r7, #16]
 800a27e:	4293      	cmp	r3, r2
 800a280:	d13f      	bne.n	800a302 <HCD_RXQLVL_IRQHandler+0x1b4>
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	2b00      	cmp	r3, #0
 800a286:	d03c      	beq.n	800a302 <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 800a288:	69bb      	ldr	r3, [r7, #24]
 800a28a:	015a      	lsls	r2, r3, #5
 800a28c:	6a3b      	ldr	r3, [r7, #32]
 800a28e:	4413      	add	r3, r2
 800a290:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a29e:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a2a6:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 800a2a8:	69bb      	ldr	r3, [r7, #24]
 800a2aa:	015a      	lsls	r2, r3, #5
 800a2ac:	6a3b      	ldr	r3, [r7, #32]
 800a2ae:	4413      	add	r3, r2
 800a2b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a2b4:	461a      	mov	r2, r3
 800a2b6:	68bb      	ldr	r3, [r7, #8]
 800a2b8:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 800a2ba:	6879      	ldr	r1, [r7, #4]
 800a2bc:	69ba      	ldr	r2, [r7, #24]
 800a2be:	4613      	mov	r3, r2
 800a2c0:	011b      	lsls	r3, r3, #4
 800a2c2:	1a9b      	subs	r3, r3, r2
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	440b      	add	r3, r1
 800a2c8:	333c      	adds	r3, #60	@ 0x3c
 800a2ca:	781b      	ldrb	r3, [r3, #0]
 800a2cc:	f083 0301 	eor.w	r3, r3, #1
 800a2d0:	b2d8      	uxtb	r0, r3
 800a2d2:	6879      	ldr	r1, [r7, #4]
 800a2d4:	69ba      	ldr	r2, [r7, #24]
 800a2d6:	4613      	mov	r3, r2
 800a2d8:	011b      	lsls	r3, r3, #4
 800a2da:	1a9b      	subs	r3, r3, r2
 800a2dc:	009b      	lsls	r3, r3, #2
 800a2de:	440b      	add	r3, r1
 800a2e0:	333c      	adds	r3, #60	@ 0x3c
 800a2e2:	4602      	mov	r2, r0
 800a2e4:	701a      	strb	r2, [r3, #0]
      break;
 800a2e6:	e00c      	b.n	800a302 <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 800a2e8:	6879      	ldr	r1, [r7, #4]
 800a2ea:	69ba      	ldr	r2, [r7, #24]
 800a2ec:	4613      	mov	r3, r2
 800a2ee:	011b      	lsls	r3, r3, #4
 800a2f0:	1a9b      	subs	r3, r3, r2
 800a2f2:	009b      	lsls	r3, r3, #2
 800a2f4:	440b      	add	r3, r1
 800a2f6:	334c      	adds	r3, #76	@ 0x4c
 800a2f8:	2204      	movs	r2, #4
 800a2fa:	701a      	strb	r2, [r3, #0]
      break;
 800a2fc:	e001      	b.n	800a302 <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 800a2fe:	bf00      	nop
 800a300:	e000      	b.n	800a304 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 800a302:	bf00      	nop
  }
}
 800a304:	bf00      	nop
 800a306:	3728      	adds	r7, #40	@ 0x28
 800a308:	46bd      	mov	sp, r7
 800a30a:	bd80      	pop	{r7, pc}

0800a30c <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b086      	sub	sp, #24
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a31a:	697b      	ldr	r3, [r7, #20]
 800a31c:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 800a31e:	693b      	ldr	r3, [r7, #16]
 800a320:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800a328:	693b      	ldr	r3, [r7, #16]
 800a32a:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800a332:	68bb      	ldr	r3, [r7, #8]
 800a334:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800a338:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f003 0302 	and.w	r3, r3, #2
 800a340:	2b02      	cmp	r3, #2
 800a342:	d10b      	bne.n	800a35c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f003 0301 	and.w	r3, r3, #1
 800a34a:	2b01      	cmp	r3, #1
 800a34c:	d102      	bne.n	800a354 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800a34e:	6878      	ldr	r0, [r7, #4]
 800a350:	f004 fdda 	bl	800ef08 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	f043 0302 	orr.w	r3, r3, #2
 800a35a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	f003 0308 	and.w	r3, r3, #8
 800a362:	2b08      	cmp	r3, #8
 800a364:	d132      	bne.n	800a3cc <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800a366:	68bb      	ldr	r3, [r7, #8]
 800a368:	f043 0308 	orr.w	r3, r3, #8
 800a36c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	f003 0304 	and.w	r3, r3, #4
 800a374:	2b04      	cmp	r3, #4
 800a376:	d126      	bne.n	800a3c6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	7a5b      	ldrb	r3, [r3, #9]
 800a37c:	2b02      	cmp	r3, #2
 800a37e:	d113      	bne.n	800a3a8 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800a386:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800a38a:	d106      	bne.n	800a39a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2102      	movs	r1, #2
 800a392:	4618      	mov	r0, r3
 800a394:	f001 fdfc 	bl	800bf90 <USB_InitFSLSPClkSel>
 800a398:	e011      	b.n	800a3be <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	681b      	ldr	r3, [r3, #0]
 800a39e:	2101      	movs	r1, #1
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f001 fdf5 	bl	800bf90 <USB_InitFSLSPClkSel>
 800a3a6:	e00a      	b.n	800a3be <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	79db      	ldrb	r3, [r3, #7]
 800a3ac:	2b01      	cmp	r3, #1
 800a3ae:	d106      	bne.n	800a3be <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800a3b0:	693b      	ldr	r3, [r7, #16]
 800a3b2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a3b6:	461a      	mov	r2, r3
 800a3b8:	f64e 2360 	movw	r3, #60000	@ 0xea60
 800a3bc:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800a3be:	6878      	ldr	r0, [r7, #4]
 800a3c0:	f004 fdcc 	bl	800ef5c <HAL_HCD_PortEnabled_Callback>
 800a3c4:	e002      	b.n	800a3cc <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f004 fdd6 	bl	800ef78 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	f003 0320 	and.w	r3, r3, #32
 800a3d2:	2b20      	cmp	r3, #32
 800a3d4:	d103      	bne.n	800a3de <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800a3d6:	68bb      	ldr	r3, [r7, #8]
 800a3d8:	f043 0320 	orr.w	r3, r3, #32
 800a3dc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800a3de:	693b      	ldr	r3, [r7, #16]
 800a3e0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800a3e4:	461a      	mov	r2, r3
 800a3e6:	68bb      	ldr	r3, [r7, #8]
 800a3e8:	6013      	str	r3, [r2, #0]
}
 800a3ea:	bf00      	nop
 800a3ec:	3718      	adds	r7, #24
 800a3ee:	46bd      	mov	sp, r7
 800a3f0:	bd80      	pop	{r7, pc}
	...

0800a3f4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800a3f4:	b580      	push	{r7, lr}
 800a3f6:	b088      	sub	sp, #32
 800a3f8:	af00      	add	r7, sp, #0
 800a3fa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d101      	bne.n	800a406 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800a402:	2301      	movs	r3, #1
 800a404:	e128      	b.n	800a658 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a40c:	b2db      	uxtb	r3, r3
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d109      	bne.n	800a426 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	2200      	movs	r2, #0
 800a416:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	4a90      	ldr	r2, [pc, #576]	@ (800a660 <HAL_I2S_Init+0x26c>)
 800a41e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800a420:	6878      	ldr	r0, [r7, #4]
 800a422:	f7fb ffbd 	bl	80063a0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	2202      	movs	r2, #2
 800a42a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	69db      	ldr	r3, [r3, #28]
 800a434:	687a      	ldr	r2, [r7, #4]
 800a436:	6812      	ldr	r2, [r2, #0]
 800a438:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800a43c:	f023 030f 	bic.w	r3, r3, #15
 800a440:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	2202      	movs	r2, #2
 800a448:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800a44a:	687b      	ldr	r3, [r7, #4]
 800a44c:	695b      	ldr	r3, [r3, #20]
 800a44e:	2b02      	cmp	r3, #2
 800a450:	d060      	beq.n	800a514 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	68db      	ldr	r3, [r3, #12]
 800a456:	2b00      	cmp	r3, #0
 800a458:	d102      	bne.n	800a460 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800a45a:	2310      	movs	r3, #16
 800a45c:	617b      	str	r3, [r7, #20]
 800a45e:	e001      	b.n	800a464 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800a460:	2320      	movs	r3, #32
 800a462:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	689b      	ldr	r3, [r3, #8]
 800a468:	2b20      	cmp	r3, #32
 800a46a:	d802      	bhi.n	800a472 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800a46c:	697b      	ldr	r3, [r7, #20]
 800a46e:	005b      	lsls	r3, r3, #1
 800a470:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800a472:	2001      	movs	r0, #1
 800a474:	f001 f9a4 	bl	800b7c0 <HAL_RCCEx_GetPeriphCLKFreq>
 800a478:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	691b      	ldr	r3, [r3, #16]
 800a47e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a482:	d125      	bne.n	800a4d0 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	68db      	ldr	r3, [r3, #12]
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d010      	beq.n	800a4ae <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800a48c:	697b      	ldr	r3, [r7, #20]
 800a48e:	009b      	lsls	r3, r3, #2
 800a490:	68fa      	ldr	r2, [r7, #12]
 800a492:	fbb2 f2f3 	udiv	r2, r2, r3
 800a496:	4613      	mov	r3, r2
 800a498:	009b      	lsls	r3, r3, #2
 800a49a:	4413      	add	r3, r2
 800a49c:	005b      	lsls	r3, r3, #1
 800a49e:	461a      	mov	r2, r3
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	695b      	ldr	r3, [r3, #20]
 800a4a4:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4a8:	3305      	adds	r3, #5
 800a4aa:	613b      	str	r3, [r7, #16]
 800a4ac:	e01f      	b.n	800a4ee <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800a4ae:	697b      	ldr	r3, [r7, #20]
 800a4b0:	00db      	lsls	r3, r3, #3
 800a4b2:	68fa      	ldr	r2, [r7, #12]
 800a4b4:	fbb2 f2f3 	udiv	r2, r2, r3
 800a4b8:	4613      	mov	r3, r2
 800a4ba:	009b      	lsls	r3, r3, #2
 800a4bc:	4413      	add	r3, r2
 800a4be:	005b      	lsls	r3, r3, #1
 800a4c0:	461a      	mov	r2, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	695b      	ldr	r3, [r3, #20]
 800a4c6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4ca:	3305      	adds	r3, #5
 800a4cc:	613b      	str	r3, [r7, #16]
 800a4ce:	e00e      	b.n	800a4ee <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800a4d0:	68fa      	ldr	r2, [r7, #12]
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	fbb2 f2f3 	udiv	r2, r2, r3
 800a4d8:	4613      	mov	r3, r2
 800a4da:	009b      	lsls	r3, r3, #2
 800a4dc:	4413      	add	r3, r2
 800a4de:	005b      	lsls	r3, r3, #1
 800a4e0:	461a      	mov	r2, r3
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	695b      	ldr	r3, [r3, #20]
 800a4e6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4ea:	3305      	adds	r3, #5
 800a4ec:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800a4ee:	693b      	ldr	r3, [r7, #16]
 800a4f0:	4a5c      	ldr	r2, [pc, #368]	@ (800a664 <HAL_I2S_Init+0x270>)
 800a4f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a4f6:	08db      	lsrs	r3, r3, #3
 800a4f8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800a4fa:	693b      	ldr	r3, [r7, #16]
 800a4fc:	f003 0301 	and.w	r3, r3, #1
 800a500:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800a502:	693a      	ldr	r2, [r7, #16]
 800a504:	69bb      	ldr	r3, [r7, #24]
 800a506:	1ad3      	subs	r3, r2, r3
 800a508:	085b      	lsrs	r3, r3, #1
 800a50a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800a50c:	69bb      	ldr	r3, [r7, #24]
 800a50e:	021b      	lsls	r3, r3, #8
 800a510:	61bb      	str	r3, [r7, #24]
 800a512:	e003      	b.n	800a51c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800a514:	2302      	movs	r3, #2
 800a516:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800a518:	2300      	movs	r3, #0
 800a51a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800a51c:	69fb      	ldr	r3, [r7, #28]
 800a51e:	2b01      	cmp	r3, #1
 800a520:	d902      	bls.n	800a528 <HAL_I2S_Init+0x134>
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	2bff      	cmp	r3, #255	@ 0xff
 800a526:	d907      	bls.n	800a538 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a52c:	f043 0210 	orr.w	r2, r3, #16
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 800a534:	2301      	movs	r3, #1
 800a536:	e08f      	b.n	800a658 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	691a      	ldr	r2, [r3, #16]
 800a53c:	69bb      	ldr	r3, [r7, #24]
 800a53e:	ea42 0103 	orr.w	r1, r2, r3
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	69fa      	ldr	r2, [r7, #28]
 800a548:	430a      	orrs	r2, r1
 800a54a:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	69db      	ldr	r3, [r3, #28]
 800a552:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800a556:	f023 030f 	bic.w	r3, r3, #15
 800a55a:	687a      	ldr	r2, [r7, #4]
 800a55c:	6851      	ldr	r1, [r2, #4]
 800a55e:	687a      	ldr	r2, [r7, #4]
 800a560:	6892      	ldr	r2, [r2, #8]
 800a562:	4311      	orrs	r1, r2
 800a564:	687a      	ldr	r2, [r7, #4]
 800a566:	68d2      	ldr	r2, [r2, #12]
 800a568:	4311      	orrs	r1, r2
 800a56a:	687a      	ldr	r2, [r7, #4]
 800a56c:	6992      	ldr	r2, [r2, #24]
 800a56e:	430a      	orrs	r2, r1
 800a570:	431a      	orrs	r2, r3
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800a57a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6a1b      	ldr	r3, [r3, #32]
 800a580:	2b01      	cmp	r3, #1
 800a582:	d161      	bne.n	800a648 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	4a38      	ldr	r2, [pc, #224]	@ (800a668 <HAL_I2S_Init+0x274>)
 800a588:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	4a37      	ldr	r2, [pc, #220]	@ (800a66c <HAL_I2S_Init+0x278>)
 800a590:	4293      	cmp	r3, r2
 800a592:	d101      	bne.n	800a598 <HAL_I2S_Init+0x1a4>
 800a594:	4b36      	ldr	r3, [pc, #216]	@ (800a670 <HAL_I2S_Init+0x27c>)
 800a596:	e001      	b.n	800a59c <HAL_I2S_Init+0x1a8>
 800a598:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800a59c:	69db      	ldr	r3, [r3, #28]
 800a59e:	687a      	ldr	r2, [r7, #4]
 800a5a0:	6812      	ldr	r2, [r2, #0]
 800a5a2:	4932      	ldr	r1, [pc, #200]	@ (800a66c <HAL_I2S_Init+0x278>)
 800a5a4:	428a      	cmp	r2, r1
 800a5a6:	d101      	bne.n	800a5ac <HAL_I2S_Init+0x1b8>
 800a5a8:	4a31      	ldr	r2, [pc, #196]	@ (800a670 <HAL_I2S_Init+0x27c>)
 800a5aa:	e001      	b.n	800a5b0 <HAL_I2S_Init+0x1bc>
 800a5ac:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800a5b0:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 800a5b4:	f023 030f 	bic.w	r3, r3, #15
 800a5b8:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	4a2b      	ldr	r2, [pc, #172]	@ (800a66c <HAL_I2S_Init+0x278>)
 800a5c0:	4293      	cmp	r3, r2
 800a5c2:	d101      	bne.n	800a5c8 <HAL_I2S_Init+0x1d4>
 800a5c4:	4b2a      	ldr	r3, [pc, #168]	@ (800a670 <HAL_I2S_Init+0x27c>)
 800a5c6:	e001      	b.n	800a5cc <HAL_I2S_Init+0x1d8>
 800a5c8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800a5cc:	2202      	movs	r2, #2
 800a5ce:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	4a25      	ldr	r2, [pc, #148]	@ (800a66c <HAL_I2S_Init+0x278>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d101      	bne.n	800a5de <HAL_I2S_Init+0x1ea>
 800a5da:	4b25      	ldr	r3, [pc, #148]	@ (800a670 <HAL_I2S_Init+0x27c>)
 800a5dc:	e001      	b.n	800a5e2 <HAL_I2S_Init+0x1ee>
 800a5de:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800a5e2:	69db      	ldr	r3, [r3, #28]
 800a5e4:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a5ee:	d003      	beq.n	800a5f8 <HAL_I2S_Init+0x204>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	685b      	ldr	r3, [r3, #4]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d103      	bne.n	800a600 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800a5f8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a5fc:	613b      	str	r3, [r7, #16]
 800a5fe:	e001      	b.n	800a604 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800a600:	2300      	movs	r3, #0
 800a602:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	689b      	ldr	r3, [r3, #8]
 800a60c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800a60e:	4313      	orrs	r3, r2
 800a610:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	68db      	ldr	r3, [r3, #12]
 800a616:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800a618:	4313      	orrs	r3, r2
 800a61a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	699b      	ldr	r3, [r3, #24]
 800a620:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800a622:	4313      	orrs	r3, r2
 800a624:	b29a      	uxth	r2, r3
 800a626:	897b      	ldrh	r3, [r7, #10]
 800a628:	4313      	orrs	r3, r2
 800a62a:	b29b      	uxth	r3, r3
 800a62c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800a630:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4a0d      	ldr	r2, [pc, #52]	@ (800a66c <HAL_I2S_Init+0x278>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d101      	bne.n	800a640 <HAL_I2S_Init+0x24c>
 800a63c:	4b0c      	ldr	r3, [pc, #48]	@ (800a670 <HAL_I2S_Init+0x27c>)
 800a63e:	e001      	b.n	800a644 <HAL_I2S_Init+0x250>
 800a640:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800a644:	897a      	ldrh	r2, [r7, #10]
 800a646:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	2200      	movs	r2, #0
 800a64c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	2201      	movs	r2, #1
 800a652:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 800a656:	2300      	movs	r3, #0
}
 800a658:	4618      	mov	r0, r3
 800a65a:	3720      	adds	r7, #32
 800a65c:	46bd      	mov	sp, r7
 800a65e:	bd80      	pop	{r7, pc}
 800a660:	0800a76b 	.word	0x0800a76b
 800a664:	cccccccd 	.word	0xcccccccd
 800a668:	0800a881 	.word	0x0800a881
 800a66c:	40003800 	.word	0x40003800
 800a670:	40003400 	.word	0x40003400

0800a674 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800a674:	b480      	push	{r7}
 800a676:	b083      	sub	sp, #12
 800a678:	af00      	add	r7, sp, #0
 800a67a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 800a67c:	bf00      	nop
 800a67e:	370c      	adds	r7, #12
 800a680:	46bd      	mov	sp, r7
 800a682:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a686:	4770      	bx	lr

0800a688 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800a688:	b480      	push	{r7}
 800a68a:	b083      	sub	sp, #12
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800a690:	bf00      	nop
 800a692:	370c      	adds	r7, #12
 800a694:	46bd      	mov	sp, r7
 800a696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a69a:	4770      	bx	lr

0800a69c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800a69c:	b480      	push	{r7}
 800a69e:	b083      	sub	sp, #12
 800a6a0:	af00      	add	r7, sp, #0
 800a6a2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 800a6a4:	bf00      	nop
 800a6a6:	370c      	adds	r7, #12
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ae:	4770      	bx	lr

0800a6b0 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b082      	sub	sp, #8
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6bc:	881a      	ldrh	r2, [r3, #0]
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a6c8:	1c9a      	adds	r2, r3, #2
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6d2:	b29b      	uxth	r3, r3
 800a6d4:	3b01      	subs	r3, #1
 800a6d6:	b29a      	uxth	r2, r3
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800a6e0:	b29b      	uxth	r3, r3
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d10e      	bne.n	800a704 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	685a      	ldr	r2, [r3, #4]
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800a6f4:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	2201      	movs	r2, #1
 800a6fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f7ff ffb8 	bl	800a674 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800a704:	bf00      	nop
 800a706:	3708      	adds	r7, #8
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}

0800a70c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68da      	ldr	r2, [r3, #12]
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a71e:	b292      	uxth	r2, r2
 800a720:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800a722:	687b      	ldr	r3, [r7, #4]
 800a724:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a726:	1c9a      	adds	r2, r3, #2
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a730:	b29b      	uxth	r3, r3
 800a732:	3b01      	subs	r3, #1
 800a734:	b29a      	uxth	r2, r3
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800a73e:	b29b      	uxth	r3, r3
 800a740:	2b00      	cmp	r3, #0
 800a742:	d10e      	bne.n	800a762 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	685a      	ldr	r2, [r3, #4]
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800a752:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800a754:	687b      	ldr	r3, [r7, #4]
 800a756:	2201      	movs	r2, #1
 800a758:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 800a75c:	6878      	ldr	r0, [r7, #4]
 800a75e:	f7ff ff93 	bl	800a688 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800a762:	bf00      	nop
 800a764:	3708      	adds	r7, #8
 800a766:	46bd      	mov	sp, r7
 800a768:	bd80      	pop	{r7, pc}

0800a76a <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800a76a:	b580      	push	{r7, lr}
 800a76c:	b086      	sub	sp, #24
 800a76e:	af00      	add	r7, sp, #0
 800a770:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a780:	b2db      	uxtb	r3, r3
 800a782:	2b04      	cmp	r3, #4
 800a784:	d13a      	bne.n	800a7fc <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800a786:	697b      	ldr	r3, [r7, #20]
 800a788:	f003 0301 	and.w	r3, r3, #1
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d109      	bne.n	800a7a4 <I2S_IRQHandler+0x3a>
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	685b      	ldr	r3, [r3, #4]
 800a796:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a79a:	2b40      	cmp	r3, #64	@ 0x40
 800a79c:	d102      	bne.n	800a7a4 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800a79e:	6878      	ldr	r0, [r7, #4]
 800a7a0:	f7ff ffb4 	bl	800a70c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800a7a4:	697b      	ldr	r3, [r7, #20]
 800a7a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a7aa:	2b40      	cmp	r3, #64	@ 0x40
 800a7ac:	d126      	bne.n	800a7fc <I2S_IRQHandler+0x92>
 800a7ae:	687b      	ldr	r3, [r7, #4]
 800a7b0:	681b      	ldr	r3, [r3, #0]
 800a7b2:	685b      	ldr	r3, [r3, #4]
 800a7b4:	f003 0320 	and.w	r3, r3, #32
 800a7b8:	2b20      	cmp	r3, #32
 800a7ba:	d11f      	bne.n	800a7fc <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	685a      	ldr	r2, [r3, #4]
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	681b      	ldr	r3, [r3, #0]
 800a7c6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800a7ca:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800a7cc:	2300      	movs	r3, #0
 800a7ce:	613b      	str	r3, [r7, #16]
 800a7d0:	687b      	ldr	r3, [r7, #4]
 800a7d2:	681b      	ldr	r3, [r3, #0]
 800a7d4:	68db      	ldr	r3, [r3, #12]
 800a7d6:	613b      	str	r3, [r7, #16]
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	681b      	ldr	r3, [r3, #0]
 800a7dc:	689b      	ldr	r3, [r3, #8]
 800a7de:	613b      	str	r3, [r7, #16]
 800a7e0:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	2201      	movs	r2, #1
 800a7e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a7ee:	f043 0202 	orr.w	r2, r3, #2
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a7f6:	6878      	ldr	r0, [r7, #4]
 800a7f8:	f7ff ff50 	bl	800a69c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800a802:	b2db      	uxtb	r3, r3
 800a804:	2b03      	cmp	r3, #3
 800a806:	d136      	bne.n	800a876 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 800a808:	697b      	ldr	r3, [r7, #20]
 800a80a:	f003 0302 	and.w	r3, r3, #2
 800a80e:	2b02      	cmp	r3, #2
 800a810:	d109      	bne.n	800a826 <I2S_IRQHandler+0xbc>
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	685b      	ldr	r3, [r3, #4]
 800a818:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a81c:	2b80      	cmp	r3, #128	@ 0x80
 800a81e:	d102      	bne.n	800a826 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800a820:	6878      	ldr	r0, [r7, #4]
 800a822:	f7ff ff45 	bl	800a6b0 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	f003 0308 	and.w	r3, r3, #8
 800a82c:	2b08      	cmp	r3, #8
 800a82e:	d122      	bne.n	800a876 <I2S_IRQHandler+0x10c>
 800a830:	687b      	ldr	r3, [r7, #4]
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	685b      	ldr	r3, [r3, #4]
 800a836:	f003 0320 	and.w	r3, r3, #32
 800a83a:	2b20      	cmp	r3, #32
 800a83c:	d11b      	bne.n	800a876 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	685a      	ldr	r2, [r3, #4]
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800a84c:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800a84e:	2300      	movs	r3, #0
 800a850:	60fb      	str	r3, [r7, #12]
 800a852:	687b      	ldr	r3, [r7, #4]
 800a854:	681b      	ldr	r3, [r3, #0]
 800a856:	689b      	ldr	r3, [r3, #8]
 800a858:	60fb      	str	r3, [r7, #12]
 800a85a:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a85c:	687b      	ldr	r3, [r7, #4]
 800a85e:	2201      	movs	r2, #1
 800a860:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a868:	f043 0204 	orr.w	r2, r3, #4
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a870:	6878      	ldr	r0, [r7, #4]
 800a872:	f7ff ff13 	bl	800a69c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800a876:	bf00      	nop
 800a878:	3718      	adds	r7, #24
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
	...

0800a880 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b088      	sub	sp, #32
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	689b      	ldr	r3, [r3, #8]
 800a88e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4a92      	ldr	r2, [pc, #584]	@ (800aae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d101      	bne.n	800a89e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800a89a:	4b92      	ldr	r3, [pc, #584]	@ (800aae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a89c:	e001      	b.n	800a8a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800a89e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800a8a2:	689b      	ldr	r3, [r3, #8]
 800a8a4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	685b      	ldr	r3, [r3, #4]
 800a8ac:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	4a8b      	ldr	r2, [pc, #556]	@ (800aae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a8b4:	4293      	cmp	r3, r2
 800a8b6:	d101      	bne.n	800a8bc <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 800a8b8:	4b8a      	ldr	r3, [pc, #552]	@ (800aae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a8ba:	e001      	b.n	800a8c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800a8bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800a8c0:	685b      	ldr	r3, [r3, #4]
 800a8c2:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	685b      	ldr	r3, [r3, #4]
 800a8c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a8cc:	d004      	beq.n	800a8d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	685b      	ldr	r3, [r3, #4]
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	f040 8099 	bne.w	800aa0a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 800a8d8:	69fb      	ldr	r3, [r7, #28]
 800a8da:	f003 0302 	and.w	r3, r3, #2
 800a8de:	2b02      	cmp	r3, #2
 800a8e0:	d107      	bne.n	800a8f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800a8e2:	697b      	ldr	r3, [r7, #20]
 800a8e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d002      	beq.n	800a8f2 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800a8ec:	6878      	ldr	r0, [r7, #4]
 800a8ee:	f000 f925 	bl	800ab3c <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800a8f2:	69bb      	ldr	r3, [r7, #24]
 800a8f4:	f003 0301 	and.w	r3, r3, #1
 800a8f8:	2b01      	cmp	r3, #1
 800a8fa:	d107      	bne.n	800a90c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a902:	2b00      	cmp	r3, #0
 800a904:	d002      	beq.n	800a90c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800a906:	6878      	ldr	r0, [r7, #4]
 800a908:	f000 f9c8 	bl	800ac9c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800a90c:	69bb      	ldr	r3, [r7, #24]
 800a90e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800a912:	2b40      	cmp	r3, #64	@ 0x40
 800a914:	d13a      	bne.n	800a98c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800a916:	693b      	ldr	r3, [r7, #16]
 800a918:	f003 0320 	and.w	r3, r3, #32
 800a91c:	2b00      	cmp	r3, #0
 800a91e:	d035      	beq.n	800a98c <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	4a6e      	ldr	r2, [pc, #440]	@ (800aae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a926:	4293      	cmp	r3, r2
 800a928:	d101      	bne.n	800a92e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800a92a:	4b6e      	ldr	r3, [pc, #440]	@ (800aae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a92c:	e001      	b.n	800a932 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800a92e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800a932:	685a      	ldr	r2, [r3, #4]
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	4969      	ldr	r1, [pc, #420]	@ (800aae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a93a:	428b      	cmp	r3, r1
 800a93c:	d101      	bne.n	800a942 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800a93e:	4b69      	ldr	r3, [pc, #420]	@ (800aae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a940:	e001      	b.n	800a946 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800a942:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800a946:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800a94a:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681b      	ldr	r3, [r3, #0]
 800a950:	685a      	ldr	r2, [r3, #4]
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800a95a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800a95c:	2300      	movs	r3, #0
 800a95e:	60fb      	str	r3, [r7, #12]
 800a960:	687b      	ldr	r3, [r7, #4]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	68db      	ldr	r3, [r3, #12]
 800a966:	60fb      	str	r3, [r7, #12]
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	681b      	ldr	r3, [r3, #0]
 800a96c:	689b      	ldr	r3, [r3, #8]
 800a96e:	60fb      	str	r3, [r7, #12]
 800a970:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2201      	movs	r2, #1
 800a976:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a97e:	f043 0202 	orr.w	r2, r3, #2
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800a986:	6878      	ldr	r0, [r7, #4]
 800a988:	f7ff fe88 	bl	800a69c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800a98c:	69fb      	ldr	r3, [r7, #28]
 800a98e:	f003 0308 	and.w	r3, r3, #8
 800a992:	2b08      	cmp	r3, #8
 800a994:	f040 80c3 	bne.w	800ab1e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 800a998:	697b      	ldr	r3, [r7, #20]
 800a99a:	f003 0320 	and.w	r3, r3, #32
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	f000 80bd 	beq.w	800ab1e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	685a      	ldr	r2, [r3, #4]
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800a9b2:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	4a49      	ldr	r2, [pc, #292]	@ (800aae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a9ba:	4293      	cmp	r3, r2
 800a9bc:	d101      	bne.n	800a9c2 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800a9be:	4b49      	ldr	r3, [pc, #292]	@ (800aae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a9c0:	e001      	b.n	800a9c6 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800a9c2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800a9c6:	685a      	ldr	r2, [r3, #4]
 800a9c8:	687b      	ldr	r3, [r7, #4]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	4944      	ldr	r1, [pc, #272]	@ (800aae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800a9ce:	428b      	cmp	r3, r1
 800a9d0:	d101      	bne.n	800a9d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800a9d2:	4b44      	ldr	r3, [pc, #272]	@ (800aae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800a9d4:	e001      	b.n	800a9da <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 800a9d6:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800a9da:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800a9de:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800a9e0:	2300      	movs	r3, #0
 800a9e2:	60bb      	str	r3, [r7, #8]
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	681b      	ldr	r3, [r3, #0]
 800a9e8:	689b      	ldr	r3, [r3, #8]
 800a9ea:	60bb      	str	r3, [r7, #8]
 800a9ec:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	2201      	movs	r2, #1
 800a9f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a9fa:	f043 0204 	orr.w	r2, r3, #4
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800aa02:	6878      	ldr	r0, [r7, #4]
 800aa04:	f7ff fe4a 	bl	800a69c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800aa08:	e089      	b.n	800ab1e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 800aa0a:	69bb      	ldr	r3, [r7, #24]
 800aa0c:	f003 0302 	and.w	r3, r3, #2
 800aa10:	2b02      	cmp	r3, #2
 800aa12:	d107      	bne.n	800aa24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d002      	beq.n	800aa24 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800aa1e:	6878      	ldr	r0, [r7, #4]
 800aa20:	f000 f8be 	bl	800aba0 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800aa24:	69fb      	ldr	r3, [r7, #28]
 800aa26:	f003 0301 	and.w	r3, r3, #1
 800aa2a:	2b01      	cmp	r3, #1
 800aa2c:	d107      	bne.n	800aa3e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800aa2e:	697b      	ldr	r3, [r7, #20]
 800aa30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d002      	beq.n	800aa3e <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f000 f8fd 	bl	800ac38 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800aa3e:	69fb      	ldr	r3, [r7, #28]
 800aa40:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800aa44:	2b40      	cmp	r3, #64	@ 0x40
 800aa46:	d12f      	bne.n	800aaa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 800aa48:	697b      	ldr	r3, [r7, #20]
 800aa4a:	f003 0320 	and.w	r3, r3, #32
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d02a      	beq.n	800aaa8 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	685a      	ldr	r2, [r3, #4]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800aa60:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	681b      	ldr	r3, [r3, #0]
 800aa66:	4a1e      	ldr	r2, [pc, #120]	@ (800aae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800aa68:	4293      	cmp	r3, r2
 800aa6a:	d101      	bne.n	800aa70 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 800aa6c:	4b1d      	ldr	r3, [pc, #116]	@ (800aae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800aa6e:	e001      	b.n	800aa74 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 800aa70:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800aa74:	685a      	ldr	r2, [r3, #4]
 800aa76:	687b      	ldr	r3, [r7, #4]
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	4919      	ldr	r1, [pc, #100]	@ (800aae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800aa7c:	428b      	cmp	r3, r1
 800aa7e:	d101      	bne.n	800aa84 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 800aa80:	4b18      	ldr	r3, [pc, #96]	@ (800aae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800aa82:	e001      	b.n	800aa88 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800aa84:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800aa88:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800aa8c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	2201      	movs	r2, #1
 800aa92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800aa96:	687b      	ldr	r3, [r7, #4]
 800aa98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800aa9a:	f043 0202 	orr.w	r2, r3, #2
 800aa9e:	687b      	ldr	r3, [r7, #4]
 800aaa0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	f7ff fdfa 	bl	800a69c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800aaa8:	69bb      	ldr	r3, [r7, #24]
 800aaaa:	f003 0308 	and.w	r3, r3, #8
 800aaae:	2b08      	cmp	r3, #8
 800aab0:	d136      	bne.n	800ab20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800aab2:	693b      	ldr	r3, [r7, #16]
 800aab4:	f003 0320 	and.w	r3, r3, #32
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d031      	beq.n	800ab20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	4a07      	ldr	r2, [pc, #28]	@ (800aae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800aac2:	4293      	cmp	r3, r2
 800aac4:	d101      	bne.n	800aaca <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800aac6:	4b07      	ldr	r3, [pc, #28]	@ (800aae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800aac8:	e001      	b.n	800aace <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800aaca:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800aace:	685a      	ldr	r2, [r3, #4]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	4902      	ldr	r1, [pc, #8]	@ (800aae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800aad6:	428b      	cmp	r3, r1
 800aad8:	d106      	bne.n	800aae8 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 800aada:	4b02      	ldr	r3, [pc, #8]	@ (800aae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800aadc:	e006      	b.n	800aaec <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800aade:	bf00      	nop
 800aae0:	40003800 	.word	0x40003800
 800aae4:	40003400 	.word	0x40003400
 800aae8:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800aaec:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800aaf0:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	685a      	ldr	r2, [r3, #4]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800ab00:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	2201      	movs	r2, #1
 800ab06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ab0e:	f043 0204 	orr.w	r2, r3, #4
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800ab16:	6878      	ldr	r0, [r7, #4]
 800ab18:	f7ff fdc0 	bl	800a69c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800ab1c:	e000      	b.n	800ab20 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800ab1e:	bf00      	nop
}
 800ab20:	bf00      	nop
 800ab22:	3720      	adds	r7, #32
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 800ab28:	b480      	push	{r7}
 800ab2a:	b083      	sub	sp, #12
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800ab30:	bf00      	nop
 800ab32:	370c      	adds	r7, #12
 800ab34:	46bd      	mov	sp, r7
 800ab36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3a:	4770      	bx	lr

0800ab3c <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800ab3c:	b580      	push	{r7, lr}
 800ab3e:	b082      	sub	sp, #8
 800ab40:	af00      	add	r7, sp, #0
 800ab42:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ab48:	1c99      	adds	r1, r3, #2
 800ab4a:	687a      	ldr	r2, [r7, #4]
 800ab4c:	6251      	str	r1, [r2, #36]	@ 0x24
 800ab4e:	881a      	ldrh	r2, [r3, #0]
 800ab50:	687b      	ldr	r3, [r7, #4]
 800ab52:	681b      	ldr	r3, [r3, #0]
 800ab54:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab5a:	b29b      	uxth	r3, r3
 800ab5c:	3b01      	subs	r3, #1
 800ab5e:	b29a      	uxth	r2, r3
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ab68:	b29b      	uxth	r3, r3
 800ab6a:	2b00      	cmp	r3, #0
 800ab6c:	d113      	bne.n	800ab96 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	681b      	ldr	r3, [r3, #0]
 800ab72:	685a      	ldr	r2, [r3, #4]
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800ab7c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ab82:	b29b      	uxth	r3, r3
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	d106      	bne.n	800ab96 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f7ff ffc9 	bl	800ab28 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800ab96:	bf00      	nop
 800ab98:	3708      	adds	r7, #8
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
	...

0800aba0 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800aba0:	b580      	push	{r7, lr}
 800aba2:	b082      	sub	sp, #8
 800aba4:	af00      	add	r7, sp, #0
 800aba6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800abac:	1c99      	adds	r1, r3, #2
 800abae:	687a      	ldr	r2, [r7, #4]
 800abb0:	6251      	str	r1, [r2, #36]	@ 0x24
 800abb2:	8819      	ldrh	r1, [r3, #0]
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a1d      	ldr	r2, [pc, #116]	@ (800ac30 <I2SEx_TxISR_I2SExt+0x90>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d101      	bne.n	800abc2 <I2SEx_TxISR_I2SExt+0x22>
 800abbe:	4b1d      	ldr	r3, [pc, #116]	@ (800ac34 <I2SEx_TxISR_I2SExt+0x94>)
 800abc0:	e001      	b.n	800abc6 <I2SEx_TxISR_I2SExt+0x26>
 800abc2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800abc6:	460a      	mov	r2, r1
 800abc8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abce:	b29b      	uxth	r3, r3
 800abd0:	3b01      	subs	r3, #1
 800abd2:	b29a      	uxth	r2, r3
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800abdc:	b29b      	uxth	r3, r3
 800abde:	2b00      	cmp	r3, #0
 800abe0:	d121      	bne.n	800ac26 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a12      	ldr	r2, [pc, #72]	@ (800ac30 <I2SEx_TxISR_I2SExt+0x90>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d101      	bne.n	800abf0 <I2SEx_TxISR_I2SExt+0x50>
 800abec:	4b11      	ldr	r3, [pc, #68]	@ (800ac34 <I2SEx_TxISR_I2SExt+0x94>)
 800abee:	e001      	b.n	800abf4 <I2SEx_TxISR_I2SExt+0x54>
 800abf0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800abf4:	685a      	ldr	r2, [r3, #4]
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	490d      	ldr	r1, [pc, #52]	@ (800ac30 <I2SEx_TxISR_I2SExt+0x90>)
 800abfc:	428b      	cmp	r3, r1
 800abfe:	d101      	bne.n	800ac04 <I2SEx_TxISR_I2SExt+0x64>
 800ac00:	4b0c      	ldr	r3, [pc, #48]	@ (800ac34 <I2SEx_TxISR_I2SExt+0x94>)
 800ac02:	e001      	b.n	800ac08 <I2SEx_TxISR_I2SExt+0x68>
 800ac04:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800ac08:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800ac0c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ac12:	b29b      	uxth	r3, r3
 800ac14:	2b00      	cmp	r3, #0
 800ac16:	d106      	bne.n	800ac26 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800ac20:	6878      	ldr	r0, [r7, #4]
 800ac22:	f7ff ff81 	bl	800ab28 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800ac26:	bf00      	nop
 800ac28:	3708      	adds	r7, #8
 800ac2a:	46bd      	mov	sp, r7
 800ac2c:	bd80      	pop	{r7, pc}
 800ac2e:	bf00      	nop
 800ac30:	40003800 	.word	0x40003800
 800ac34:	40003400 	.word	0x40003400

0800ac38 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 800ac38:	b580      	push	{r7, lr}
 800ac3a:	b082      	sub	sp, #8
 800ac3c:	af00      	add	r7, sp, #0
 800ac3e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	68d8      	ldr	r0, [r3, #12]
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ac4a:	1c99      	adds	r1, r3, #2
 800ac4c:	687a      	ldr	r2, [r7, #4]
 800ac4e:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800ac50:	b282      	uxth	r2, r0
 800ac52:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ac58:	b29b      	uxth	r3, r3
 800ac5a:	3b01      	subs	r3, #1
 800ac5c:	b29a      	uxth	r2, r3
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800ac66:	b29b      	uxth	r3, r3
 800ac68:	2b00      	cmp	r3, #0
 800ac6a:	d113      	bne.n	800ac94 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	685a      	ldr	r2, [r3, #4]
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800ac7a:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ac80:	b29b      	uxth	r3, r3
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d106      	bne.n	800ac94 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2201      	movs	r2, #1
 800ac8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f7ff ff4a 	bl	800ab28 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800ac94:	bf00      	nop
 800ac96:	3708      	adds	r7, #8
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b082      	sub	sp, #8
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a20      	ldr	r2, [pc, #128]	@ (800ad2c <I2SEx_RxISR_I2SExt+0x90>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d101      	bne.n	800acb2 <I2SEx_RxISR_I2SExt+0x16>
 800acae:	4b20      	ldr	r3, [pc, #128]	@ (800ad30 <I2SEx_RxISR_I2SExt+0x94>)
 800acb0:	e001      	b.n	800acb6 <I2SEx_RxISR_I2SExt+0x1a>
 800acb2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800acb6:	68d8      	ldr	r0, [r3, #12]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800acbc:	1c99      	adds	r1, r3, #2
 800acbe:	687a      	ldr	r2, [r7, #4]
 800acc0:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800acc2:	b282      	uxth	r2, r0
 800acc4:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800acca:	b29b      	uxth	r3, r3
 800accc:	3b01      	subs	r3, #1
 800acce:	b29a      	uxth	r2, r3
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800acd8:	b29b      	uxth	r3, r3
 800acda:	2b00      	cmp	r3, #0
 800acdc:	d121      	bne.n	800ad22 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	4a12      	ldr	r2, [pc, #72]	@ (800ad2c <I2SEx_RxISR_I2SExt+0x90>)
 800ace4:	4293      	cmp	r3, r2
 800ace6:	d101      	bne.n	800acec <I2SEx_RxISR_I2SExt+0x50>
 800ace8:	4b11      	ldr	r3, [pc, #68]	@ (800ad30 <I2SEx_RxISR_I2SExt+0x94>)
 800acea:	e001      	b.n	800acf0 <I2SEx_RxISR_I2SExt+0x54>
 800acec:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800acf0:	685a      	ldr	r2, [r3, #4]
 800acf2:	687b      	ldr	r3, [r7, #4]
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	490d      	ldr	r1, [pc, #52]	@ (800ad2c <I2SEx_RxISR_I2SExt+0x90>)
 800acf8:	428b      	cmp	r3, r1
 800acfa:	d101      	bne.n	800ad00 <I2SEx_RxISR_I2SExt+0x64>
 800acfc:	4b0c      	ldr	r3, [pc, #48]	@ (800ad30 <I2SEx_RxISR_I2SExt+0x94>)
 800acfe:	e001      	b.n	800ad04 <I2SEx_RxISR_I2SExt+0x68>
 800ad00:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800ad04:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800ad08:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ad0e:	b29b      	uxth	r3, r3
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d106      	bne.n	800ad22 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2201      	movs	r2, #1
 800ad18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f7ff ff03 	bl	800ab28 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800ad22:	bf00      	nop
 800ad24:	3708      	adds	r7, #8
 800ad26:	46bd      	mov	sp, r7
 800ad28:	bd80      	pop	{r7, pc}
 800ad2a:	bf00      	nop
 800ad2c:	40003800 	.word	0x40003800
 800ad30:	40003400 	.word	0x40003400

0800ad34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ad34:	b580      	push	{r7, lr}
 800ad36:	b086      	sub	sp, #24
 800ad38:	af00      	add	r7, sp, #0
 800ad3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	2b00      	cmp	r3, #0
 800ad40:	d101      	bne.n	800ad46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800ad42:	2301      	movs	r3, #1
 800ad44:	e267      	b.n	800b216 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	f003 0301 	and.w	r3, r3, #1
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d075      	beq.n	800ae3e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800ad52:	4b88      	ldr	r3, [pc, #544]	@ (800af74 <HAL_RCC_OscConfig+0x240>)
 800ad54:	689b      	ldr	r3, [r3, #8]
 800ad56:	f003 030c 	and.w	r3, r3, #12
 800ad5a:	2b04      	cmp	r3, #4
 800ad5c:	d00c      	beq.n	800ad78 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ad5e:	4b85      	ldr	r3, [pc, #532]	@ (800af74 <HAL_RCC_OscConfig+0x240>)
 800ad60:	689b      	ldr	r3, [r3, #8]
 800ad62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800ad66:	2b08      	cmp	r3, #8
 800ad68:	d112      	bne.n	800ad90 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800ad6a:	4b82      	ldr	r3, [pc, #520]	@ (800af74 <HAL_RCC_OscConfig+0x240>)
 800ad6c:	685b      	ldr	r3, [r3, #4]
 800ad6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ad72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ad76:	d10b      	bne.n	800ad90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ad78:	4b7e      	ldr	r3, [pc, #504]	@ (800af74 <HAL_RCC_OscConfig+0x240>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d05b      	beq.n	800ae3c <HAL_RCC_OscConfig+0x108>
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d157      	bne.n	800ae3c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800ad8c:	2301      	movs	r3, #1
 800ad8e:	e242      	b.n	800b216 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	685b      	ldr	r3, [r3, #4]
 800ad94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ad98:	d106      	bne.n	800ada8 <HAL_RCC_OscConfig+0x74>
 800ad9a:	4b76      	ldr	r3, [pc, #472]	@ (800af74 <HAL_RCC_OscConfig+0x240>)
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	4a75      	ldr	r2, [pc, #468]	@ (800af74 <HAL_RCC_OscConfig+0x240>)
 800ada0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800ada4:	6013      	str	r3, [r2, #0]
 800ada6:	e01d      	b.n	800ade4 <HAL_RCC_OscConfig+0xb0>
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	685b      	ldr	r3, [r3, #4]
 800adac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800adb0:	d10c      	bne.n	800adcc <HAL_RCC_OscConfig+0x98>
 800adb2:	4b70      	ldr	r3, [pc, #448]	@ (800af74 <HAL_RCC_OscConfig+0x240>)
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	4a6f      	ldr	r2, [pc, #444]	@ (800af74 <HAL_RCC_OscConfig+0x240>)
 800adb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800adbc:	6013      	str	r3, [r2, #0]
 800adbe:	4b6d      	ldr	r3, [pc, #436]	@ (800af74 <HAL_RCC_OscConfig+0x240>)
 800adc0:	681b      	ldr	r3, [r3, #0]
 800adc2:	4a6c      	ldr	r2, [pc, #432]	@ (800af74 <HAL_RCC_OscConfig+0x240>)
 800adc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800adc8:	6013      	str	r3, [r2, #0]
 800adca:	e00b      	b.n	800ade4 <HAL_RCC_OscConfig+0xb0>
 800adcc:	4b69      	ldr	r3, [pc, #420]	@ (800af74 <HAL_RCC_OscConfig+0x240>)
 800adce:	681b      	ldr	r3, [r3, #0]
 800add0:	4a68      	ldr	r2, [pc, #416]	@ (800af74 <HAL_RCC_OscConfig+0x240>)
 800add2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800add6:	6013      	str	r3, [r2, #0]
 800add8:	4b66      	ldr	r3, [pc, #408]	@ (800af74 <HAL_RCC_OscConfig+0x240>)
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	4a65      	ldr	r2, [pc, #404]	@ (800af74 <HAL_RCC_OscConfig+0x240>)
 800adde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800ade2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	685b      	ldr	r3, [r3, #4]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d013      	beq.n	800ae14 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800adec:	f7fb fd2a 	bl	8006844 <HAL_GetTick>
 800adf0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800adf2:	e008      	b.n	800ae06 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800adf4:	f7fb fd26 	bl	8006844 <HAL_GetTick>
 800adf8:	4602      	mov	r2, r0
 800adfa:	693b      	ldr	r3, [r7, #16]
 800adfc:	1ad3      	subs	r3, r2, r3
 800adfe:	2b64      	cmp	r3, #100	@ 0x64
 800ae00:	d901      	bls.n	800ae06 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800ae02:	2303      	movs	r3, #3
 800ae04:	e207      	b.n	800b216 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800ae06:	4b5b      	ldr	r3, [pc, #364]	@ (800af74 <HAL_RCC_OscConfig+0x240>)
 800ae08:	681b      	ldr	r3, [r3, #0]
 800ae0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d0f0      	beq.n	800adf4 <HAL_RCC_OscConfig+0xc0>
 800ae12:	e014      	b.n	800ae3e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800ae14:	f7fb fd16 	bl	8006844 <HAL_GetTick>
 800ae18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ae1a:	e008      	b.n	800ae2e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800ae1c:	f7fb fd12 	bl	8006844 <HAL_GetTick>
 800ae20:	4602      	mov	r2, r0
 800ae22:	693b      	ldr	r3, [r7, #16]
 800ae24:	1ad3      	subs	r3, r2, r3
 800ae26:	2b64      	cmp	r3, #100	@ 0x64
 800ae28:	d901      	bls.n	800ae2e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800ae2a:	2303      	movs	r3, #3
 800ae2c:	e1f3      	b.n	800b216 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800ae2e:	4b51      	ldr	r3, [pc, #324]	@ (800af74 <HAL_RCC_OscConfig+0x240>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	d1f0      	bne.n	800ae1c <HAL_RCC_OscConfig+0xe8>
 800ae3a:	e000      	b.n	800ae3e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800ae3c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	f003 0302 	and.w	r3, r3, #2
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d063      	beq.n	800af12 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ae4a:	4b4a      	ldr	r3, [pc, #296]	@ (800af74 <HAL_RCC_OscConfig+0x240>)
 800ae4c:	689b      	ldr	r3, [r3, #8]
 800ae4e:	f003 030c 	and.w	r3, r3, #12
 800ae52:	2b00      	cmp	r3, #0
 800ae54:	d00b      	beq.n	800ae6e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ae56:	4b47      	ldr	r3, [pc, #284]	@ (800af74 <HAL_RCC_OscConfig+0x240>)
 800ae58:	689b      	ldr	r3, [r3, #8]
 800ae5a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800ae5e:	2b08      	cmp	r3, #8
 800ae60:	d11c      	bne.n	800ae9c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800ae62:	4b44      	ldr	r3, [pc, #272]	@ (800af74 <HAL_RCC_OscConfig+0x240>)
 800ae64:	685b      	ldr	r3, [r3, #4]
 800ae66:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d116      	bne.n	800ae9c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ae6e:	4b41      	ldr	r3, [pc, #260]	@ (800af74 <HAL_RCC_OscConfig+0x240>)
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	f003 0302 	and.w	r3, r3, #2
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d005      	beq.n	800ae86 <HAL_RCC_OscConfig+0x152>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	68db      	ldr	r3, [r3, #12]
 800ae7e:	2b01      	cmp	r3, #1
 800ae80:	d001      	beq.n	800ae86 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800ae82:	2301      	movs	r3, #1
 800ae84:	e1c7      	b.n	800b216 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ae86:	4b3b      	ldr	r3, [pc, #236]	@ (800af74 <HAL_RCC_OscConfig+0x240>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	691b      	ldr	r3, [r3, #16]
 800ae92:	00db      	lsls	r3, r3, #3
 800ae94:	4937      	ldr	r1, [pc, #220]	@ (800af74 <HAL_RCC_OscConfig+0x240>)
 800ae96:	4313      	orrs	r3, r2
 800ae98:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ae9a:	e03a      	b.n	800af12 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	68db      	ldr	r3, [r3, #12]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d020      	beq.n	800aee6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800aea4:	4b34      	ldr	r3, [pc, #208]	@ (800af78 <HAL_RCC_OscConfig+0x244>)
 800aea6:	2201      	movs	r2, #1
 800aea8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aeaa:	f7fb fccb 	bl	8006844 <HAL_GetTick>
 800aeae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aeb0:	e008      	b.n	800aec4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aeb2:	f7fb fcc7 	bl	8006844 <HAL_GetTick>
 800aeb6:	4602      	mov	r2, r0
 800aeb8:	693b      	ldr	r3, [r7, #16]
 800aeba:	1ad3      	subs	r3, r2, r3
 800aebc:	2b02      	cmp	r3, #2
 800aebe:	d901      	bls.n	800aec4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800aec0:	2303      	movs	r3, #3
 800aec2:	e1a8      	b.n	800b216 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aec4:	4b2b      	ldr	r3, [pc, #172]	@ (800af74 <HAL_RCC_OscConfig+0x240>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	f003 0302 	and.w	r3, r3, #2
 800aecc:	2b00      	cmp	r3, #0
 800aece:	d0f0      	beq.n	800aeb2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800aed0:	4b28      	ldr	r3, [pc, #160]	@ (800af74 <HAL_RCC_OscConfig+0x240>)
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	691b      	ldr	r3, [r3, #16]
 800aedc:	00db      	lsls	r3, r3, #3
 800aede:	4925      	ldr	r1, [pc, #148]	@ (800af74 <HAL_RCC_OscConfig+0x240>)
 800aee0:	4313      	orrs	r3, r2
 800aee2:	600b      	str	r3, [r1, #0]
 800aee4:	e015      	b.n	800af12 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800aee6:	4b24      	ldr	r3, [pc, #144]	@ (800af78 <HAL_RCC_OscConfig+0x244>)
 800aee8:	2200      	movs	r2, #0
 800aeea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800aeec:	f7fb fcaa 	bl	8006844 <HAL_GetTick>
 800aef0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800aef2:	e008      	b.n	800af06 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800aef4:	f7fb fca6 	bl	8006844 <HAL_GetTick>
 800aef8:	4602      	mov	r2, r0
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	1ad3      	subs	r3, r2, r3
 800aefe:	2b02      	cmp	r3, #2
 800af00:	d901      	bls.n	800af06 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800af02:	2303      	movs	r3, #3
 800af04:	e187      	b.n	800b216 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800af06:	4b1b      	ldr	r3, [pc, #108]	@ (800af74 <HAL_RCC_OscConfig+0x240>)
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	f003 0302 	and.w	r3, r3, #2
 800af0e:	2b00      	cmp	r3, #0
 800af10:	d1f0      	bne.n	800aef4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	f003 0308 	and.w	r3, r3, #8
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d036      	beq.n	800af8c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	695b      	ldr	r3, [r3, #20]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d016      	beq.n	800af54 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800af26:	4b15      	ldr	r3, [pc, #84]	@ (800af7c <HAL_RCC_OscConfig+0x248>)
 800af28:	2201      	movs	r2, #1
 800af2a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800af2c:	f7fb fc8a 	bl	8006844 <HAL_GetTick>
 800af30:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800af32:	e008      	b.n	800af46 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800af34:	f7fb fc86 	bl	8006844 <HAL_GetTick>
 800af38:	4602      	mov	r2, r0
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	1ad3      	subs	r3, r2, r3
 800af3e:	2b02      	cmp	r3, #2
 800af40:	d901      	bls.n	800af46 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800af42:	2303      	movs	r3, #3
 800af44:	e167      	b.n	800b216 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800af46:	4b0b      	ldr	r3, [pc, #44]	@ (800af74 <HAL_RCC_OscConfig+0x240>)
 800af48:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af4a:	f003 0302 	and.w	r3, r3, #2
 800af4e:	2b00      	cmp	r3, #0
 800af50:	d0f0      	beq.n	800af34 <HAL_RCC_OscConfig+0x200>
 800af52:	e01b      	b.n	800af8c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800af54:	4b09      	ldr	r3, [pc, #36]	@ (800af7c <HAL_RCC_OscConfig+0x248>)
 800af56:	2200      	movs	r2, #0
 800af58:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800af5a:	f7fb fc73 	bl	8006844 <HAL_GetTick>
 800af5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800af60:	e00e      	b.n	800af80 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800af62:	f7fb fc6f 	bl	8006844 <HAL_GetTick>
 800af66:	4602      	mov	r2, r0
 800af68:	693b      	ldr	r3, [r7, #16]
 800af6a:	1ad3      	subs	r3, r2, r3
 800af6c:	2b02      	cmp	r3, #2
 800af6e:	d907      	bls.n	800af80 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800af70:	2303      	movs	r3, #3
 800af72:	e150      	b.n	800b216 <HAL_RCC_OscConfig+0x4e2>
 800af74:	40023800 	.word	0x40023800
 800af78:	42470000 	.word	0x42470000
 800af7c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800af80:	4b88      	ldr	r3, [pc, #544]	@ (800b1a4 <HAL_RCC_OscConfig+0x470>)
 800af82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800af84:	f003 0302 	and.w	r3, r3, #2
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d1ea      	bne.n	800af62 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	f003 0304 	and.w	r3, r3, #4
 800af94:	2b00      	cmp	r3, #0
 800af96:	f000 8097 	beq.w	800b0c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800af9a:	2300      	movs	r3, #0
 800af9c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800af9e:	4b81      	ldr	r3, [pc, #516]	@ (800b1a4 <HAL_RCC_OscConfig+0x470>)
 800afa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afa2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800afa6:	2b00      	cmp	r3, #0
 800afa8:	d10f      	bne.n	800afca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800afaa:	2300      	movs	r3, #0
 800afac:	60bb      	str	r3, [r7, #8]
 800afae:	4b7d      	ldr	r3, [pc, #500]	@ (800b1a4 <HAL_RCC_OscConfig+0x470>)
 800afb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afb2:	4a7c      	ldr	r2, [pc, #496]	@ (800b1a4 <HAL_RCC_OscConfig+0x470>)
 800afb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800afb8:	6413      	str	r3, [r2, #64]	@ 0x40
 800afba:	4b7a      	ldr	r3, [pc, #488]	@ (800b1a4 <HAL_RCC_OscConfig+0x470>)
 800afbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800afbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800afc2:	60bb      	str	r3, [r7, #8]
 800afc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800afc6:	2301      	movs	r3, #1
 800afc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800afca:	4b77      	ldr	r3, [pc, #476]	@ (800b1a8 <HAL_RCC_OscConfig+0x474>)
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d118      	bne.n	800b008 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800afd6:	4b74      	ldr	r3, [pc, #464]	@ (800b1a8 <HAL_RCC_OscConfig+0x474>)
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	4a73      	ldr	r2, [pc, #460]	@ (800b1a8 <HAL_RCC_OscConfig+0x474>)
 800afdc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800afe0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800afe2:	f7fb fc2f 	bl	8006844 <HAL_GetTick>
 800afe6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800afe8:	e008      	b.n	800affc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800afea:	f7fb fc2b 	bl	8006844 <HAL_GetTick>
 800afee:	4602      	mov	r2, r0
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	1ad3      	subs	r3, r2, r3
 800aff4:	2b02      	cmp	r3, #2
 800aff6:	d901      	bls.n	800affc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800aff8:	2303      	movs	r3, #3
 800affa:	e10c      	b.n	800b216 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800affc:	4b6a      	ldr	r3, [pc, #424]	@ (800b1a8 <HAL_RCC_OscConfig+0x474>)
 800affe:	681b      	ldr	r3, [r3, #0]
 800b000:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b004:	2b00      	cmp	r3, #0
 800b006:	d0f0      	beq.n	800afea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	689b      	ldr	r3, [r3, #8]
 800b00c:	2b01      	cmp	r3, #1
 800b00e:	d106      	bne.n	800b01e <HAL_RCC_OscConfig+0x2ea>
 800b010:	4b64      	ldr	r3, [pc, #400]	@ (800b1a4 <HAL_RCC_OscConfig+0x470>)
 800b012:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b014:	4a63      	ldr	r2, [pc, #396]	@ (800b1a4 <HAL_RCC_OscConfig+0x470>)
 800b016:	f043 0301 	orr.w	r3, r3, #1
 800b01a:	6713      	str	r3, [r2, #112]	@ 0x70
 800b01c:	e01c      	b.n	800b058 <HAL_RCC_OscConfig+0x324>
 800b01e:	687b      	ldr	r3, [r7, #4]
 800b020:	689b      	ldr	r3, [r3, #8]
 800b022:	2b05      	cmp	r3, #5
 800b024:	d10c      	bne.n	800b040 <HAL_RCC_OscConfig+0x30c>
 800b026:	4b5f      	ldr	r3, [pc, #380]	@ (800b1a4 <HAL_RCC_OscConfig+0x470>)
 800b028:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b02a:	4a5e      	ldr	r2, [pc, #376]	@ (800b1a4 <HAL_RCC_OscConfig+0x470>)
 800b02c:	f043 0304 	orr.w	r3, r3, #4
 800b030:	6713      	str	r3, [r2, #112]	@ 0x70
 800b032:	4b5c      	ldr	r3, [pc, #368]	@ (800b1a4 <HAL_RCC_OscConfig+0x470>)
 800b034:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b036:	4a5b      	ldr	r2, [pc, #364]	@ (800b1a4 <HAL_RCC_OscConfig+0x470>)
 800b038:	f043 0301 	orr.w	r3, r3, #1
 800b03c:	6713      	str	r3, [r2, #112]	@ 0x70
 800b03e:	e00b      	b.n	800b058 <HAL_RCC_OscConfig+0x324>
 800b040:	4b58      	ldr	r3, [pc, #352]	@ (800b1a4 <HAL_RCC_OscConfig+0x470>)
 800b042:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b044:	4a57      	ldr	r2, [pc, #348]	@ (800b1a4 <HAL_RCC_OscConfig+0x470>)
 800b046:	f023 0301 	bic.w	r3, r3, #1
 800b04a:	6713      	str	r3, [r2, #112]	@ 0x70
 800b04c:	4b55      	ldr	r3, [pc, #340]	@ (800b1a4 <HAL_RCC_OscConfig+0x470>)
 800b04e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b050:	4a54      	ldr	r2, [pc, #336]	@ (800b1a4 <HAL_RCC_OscConfig+0x470>)
 800b052:	f023 0304 	bic.w	r3, r3, #4
 800b056:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d015      	beq.n	800b08c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800b060:	f7fb fbf0 	bl	8006844 <HAL_GetTick>
 800b064:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b066:	e00a      	b.n	800b07e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b068:	f7fb fbec 	bl	8006844 <HAL_GetTick>
 800b06c:	4602      	mov	r2, r0
 800b06e:	693b      	ldr	r3, [r7, #16]
 800b070:	1ad3      	subs	r3, r2, r3
 800b072:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b076:	4293      	cmp	r3, r2
 800b078:	d901      	bls.n	800b07e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800b07a:	2303      	movs	r3, #3
 800b07c:	e0cb      	b.n	800b216 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b07e:	4b49      	ldr	r3, [pc, #292]	@ (800b1a4 <HAL_RCC_OscConfig+0x470>)
 800b080:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b082:	f003 0302 	and.w	r3, r3, #2
 800b086:	2b00      	cmp	r3, #0
 800b088:	d0ee      	beq.n	800b068 <HAL_RCC_OscConfig+0x334>
 800b08a:	e014      	b.n	800b0b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800b08c:	f7fb fbda 	bl	8006844 <HAL_GetTick>
 800b090:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b092:	e00a      	b.n	800b0aa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b094:	f7fb fbd6 	bl	8006844 <HAL_GetTick>
 800b098:	4602      	mov	r2, r0
 800b09a:	693b      	ldr	r3, [r7, #16]
 800b09c:	1ad3      	subs	r3, r2, r3
 800b09e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b0a2:	4293      	cmp	r3, r2
 800b0a4:	d901      	bls.n	800b0aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800b0a6:	2303      	movs	r3, #3
 800b0a8:	e0b5      	b.n	800b216 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800b0aa:	4b3e      	ldr	r3, [pc, #248]	@ (800b1a4 <HAL_RCC_OscConfig+0x470>)
 800b0ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b0ae:	f003 0302 	and.w	r3, r3, #2
 800b0b2:	2b00      	cmp	r3, #0
 800b0b4:	d1ee      	bne.n	800b094 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800b0b6:	7dfb      	ldrb	r3, [r7, #23]
 800b0b8:	2b01      	cmp	r3, #1
 800b0ba:	d105      	bne.n	800b0c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800b0bc:	4b39      	ldr	r3, [pc, #228]	@ (800b1a4 <HAL_RCC_OscConfig+0x470>)
 800b0be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b0c0:	4a38      	ldr	r2, [pc, #224]	@ (800b1a4 <HAL_RCC_OscConfig+0x470>)
 800b0c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b0c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	699b      	ldr	r3, [r3, #24]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	f000 80a1 	beq.w	800b214 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800b0d2:	4b34      	ldr	r3, [pc, #208]	@ (800b1a4 <HAL_RCC_OscConfig+0x470>)
 800b0d4:	689b      	ldr	r3, [r3, #8]
 800b0d6:	f003 030c 	and.w	r3, r3, #12
 800b0da:	2b08      	cmp	r3, #8
 800b0dc:	d05c      	beq.n	800b198 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	699b      	ldr	r3, [r3, #24]
 800b0e2:	2b02      	cmp	r3, #2
 800b0e4:	d141      	bne.n	800b16a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b0e6:	4b31      	ldr	r3, [pc, #196]	@ (800b1ac <HAL_RCC_OscConfig+0x478>)
 800b0e8:	2200      	movs	r2, #0
 800b0ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b0ec:	f7fb fbaa 	bl	8006844 <HAL_GetTick>
 800b0f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b0f2:	e008      	b.n	800b106 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b0f4:	f7fb fba6 	bl	8006844 <HAL_GetTick>
 800b0f8:	4602      	mov	r2, r0
 800b0fa:	693b      	ldr	r3, [r7, #16]
 800b0fc:	1ad3      	subs	r3, r2, r3
 800b0fe:	2b02      	cmp	r3, #2
 800b100:	d901      	bls.n	800b106 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800b102:	2303      	movs	r3, #3
 800b104:	e087      	b.n	800b216 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b106:	4b27      	ldr	r3, [pc, #156]	@ (800b1a4 <HAL_RCC_OscConfig+0x470>)
 800b108:	681b      	ldr	r3, [r3, #0]
 800b10a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d1f0      	bne.n	800b0f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	69da      	ldr	r2, [r3, #28]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	6a1b      	ldr	r3, [r3, #32]
 800b11a:	431a      	orrs	r2, r3
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b120:	019b      	lsls	r3, r3, #6
 800b122:	431a      	orrs	r2, r3
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b128:	085b      	lsrs	r3, r3, #1
 800b12a:	3b01      	subs	r3, #1
 800b12c:	041b      	lsls	r3, r3, #16
 800b12e:	431a      	orrs	r2, r3
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b134:	061b      	lsls	r3, r3, #24
 800b136:	491b      	ldr	r1, [pc, #108]	@ (800b1a4 <HAL_RCC_OscConfig+0x470>)
 800b138:	4313      	orrs	r3, r2
 800b13a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800b13c:	4b1b      	ldr	r3, [pc, #108]	@ (800b1ac <HAL_RCC_OscConfig+0x478>)
 800b13e:	2201      	movs	r2, #1
 800b140:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b142:	f7fb fb7f 	bl	8006844 <HAL_GetTick>
 800b146:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b148:	e008      	b.n	800b15c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b14a:	f7fb fb7b 	bl	8006844 <HAL_GetTick>
 800b14e:	4602      	mov	r2, r0
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	1ad3      	subs	r3, r2, r3
 800b154:	2b02      	cmp	r3, #2
 800b156:	d901      	bls.n	800b15c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800b158:	2303      	movs	r3, #3
 800b15a:	e05c      	b.n	800b216 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b15c:	4b11      	ldr	r3, [pc, #68]	@ (800b1a4 <HAL_RCC_OscConfig+0x470>)
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b164:	2b00      	cmp	r3, #0
 800b166:	d0f0      	beq.n	800b14a <HAL_RCC_OscConfig+0x416>
 800b168:	e054      	b.n	800b214 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800b16a:	4b10      	ldr	r3, [pc, #64]	@ (800b1ac <HAL_RCC_OscConfig+0x478>)
 800b16c:	2200      	movs	r2, #0
 800b16e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800b170:	f7fb fb68 	bl	8006844 <HAL_GetTick>
 800b174:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b176:	e008      	b.n	800b18a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b178:	f7fb fb64 	bl	8006844 <HAL_GetTick>
 800b17c:	4602      	mov	r2, r0
 800b17e:	693b      	ldr	r3, [r7, #16]
 800b180:	1ad3      	subs	r3, r2, r3
 800b182:	2b02      	cmp	r3, #2
 800b184:	d901      	bls.n	800b18a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800b186:	2303      	movs	r3, #3
 800b188:	e045      	b.n	800b216 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800b18a:	4b06      	ldr	r3, [pc, #24]	@ (800b1a4 <HAL_RCC_OscConfig+0x470>)
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b192:	2b00      	cmp	r3, #0
 800b194:	d1f0      	bne.n	800b178 <HAL_RCC_OscConfig+0x444>
 800b196:	e03d      	b.n	800b214 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	699b      	ldr	r3, [r3, #24]
 800b19c:	2b01      	cmp	r3, #1
 800b19e:	d107      	bne.n	800b1b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	e038      	b.n	800b216 <HAL_RCC_OscConfig+0x4e2>
 800b1a4:	40023800 	.word	0x40023800
 800b1a8:	40007000 	.word	0x40007000
 800b1ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800b1b0:	4b1b      	ldr	r3, [pc, #108]	@ (800b220 <HAL_RCC_OscConfig+0x4ec>)
 800b1b2:	685b      	ldr	r3, [r3, #4]
 800b1b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	699b      	ldr	r3, [r3, #24]
 800b1ba:	2b01      	cmp	r3, #1
 800b1bc:	d028      	beq.n	800b210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b1c8:	429a      	cmp	r2, r3
 800b1ca:	d121      	bne.n	800b210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b1d6:	429a      	cmp	r2, r3
 800b1d8:	d11a      	bne.n	800b210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b1da:	68fa      	ldr	r2, [r7, #12]
 800b1dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800b1e0:	4013      	ands	r3, r2
 800b1e2:	687a      	ldr	r2, [r7, #4]
 800b1e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800b1e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d111      	bne.n	800b210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b1ec:	68fb      	ldr	r3, [r7, #12]
 800b1ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b1f6:	085b      	lsrs	r3, r3, #1
 800b1f8:	3b01      	subs	r3, #1
 800b1fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800b1fc:	429a      	cmp	r2, r3
 800b1fe:	d107      	bne.n	800b210 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b20a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d001      	beq.n	800b214 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800b210:	2301      	movs	r3, #1
 800b212:	e000      	b.n	800b216 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800b214:	2300      	movs	r3, #0
}
 800b216:	4618      	mov	r0, r3
 800b218:	3718      	adds	r7, #24
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}
 800b21e:	bf00      	nop
 800b220:	40023800 	.word	0x40023800

0800b224 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800b224:	b580      	push	{r7, lr}
 800b226:	b084      	sub	sp, #16
 800b228:	af00      	add	r7, sp, #0
 800b22a:	6078      	str	r0, [r7, #4]
 800b22c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800b22e:	687b      	ldr	r3, [r7, #4]
 800b230:	2b00      	cmp	r3, #0
 800b232:	d101      	bne.n	800b238 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800b234:	2301      	movs	r3, #1
 800b236:	e0cc      	b.n	800b3d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b238:	4b68      	ldr	r3, [pc, #416]	@ (800b3dc <HAL_RCC_ClockConfig+0x1b8>)
 800b23a:	681b      	ldr	r3, [r3, #0]
 800b23c:	f003 0307 	and.w	r3, r3, #7
 800b240:	683a      	ldr	r2, [r7, #0]
 800b242:	429a      	cmp	r2, r3
 800b244:	d90c      	bls.n	800b260 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b246:	4b65      	ldr	r3, [pc, #404]	@ (800b3dc <HAL_RCC_ClockConfig+0x1b8>)
 800b248:	683a      	ldr	r2, [r7, #0]
 800b24a:	b2d2      	uxtb	r2, r2
 800b24c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b24e:	4b63      	ldr	r3, [pc, #396]	@ (800b3dc <HAL_RCC_ClockConfig+0x1b8>)
 800b250:	681b      	ldr	r3, [r3, #0]
 800b252:	f003 0307 	and.w	r3, r3, #7
 800b256:	683a      	ldr	r2, [r7, #0]
 800b258:	429a      	cmp	r2, r3
 800b25a:	d001      	beq.n	800b260 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800b25c:	2301      	movs	r3, #1
 800b25e:	e0b8      	b.n	800b3d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f003 0302 	and.w	r3, r3, #2
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d020      	beq.n	800b2ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	f003 0304 	and.w	r3, r3, #4
 800b274:	2b00      	cmp	r3, #0
 800b276:	d005      	beq.n	800b284 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800b278:	4b59      	ldr	r3, [pc, #356]	@ (800b3e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b27a:	689b      	ldr	r3, [r3, #8]
 800b27c:	4a58      	ldr	r2, [pc, #352]	@ (800b3e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b27e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800b282:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	f003 0308 	and.w	r3, r3, #8
 800b28c:	2b00      	cmp	r3, #0
 800b28e:	d005      	beq.n	800b29c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800b290:	4b53      	ldr	r3, [pc, #332]	@ (800b3e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b292:	689b      	ldr	r3, [r3, #8]
 800b294:	4a52      	ldr	r2, [pc, #328]	@ (800b3e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b296:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800b29a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b29c:	4b50      	ldr	r3, [pc, #320]	@ (800b3e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b29e:	689b      	ldr	r3, [r3, #8]
 800b2a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	689b      	ldr	r3, [r3, #8]
 800b2a8:	494d      	ldr	r1, [pc, #308]	@ (800b3e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b2aa:	4313      	orrs	r3, r2
 800b2ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f003 0301 	and.w	r3, r3, #1
 800b2b6:	2b00      	cmp	r3, #0
 800b2b8:	d044      	beq.n	800b344 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	685b      	ldr	r3, [r3, #4]
 800b2be:	2b01      	cmp	r3, #1
 800b2c0:	d107      	bne.n	800b2d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800b2c2:	4b47      	ldr	r3, [pc, #284]	@ (800b3e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b2c4:	681b      	ldr	r3, [r3, #0]
 800b2c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d119      	bne.n	800b302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b2ce:	2301      	movs	r3, #1
 800b2d0:	e07f      	b.n	800b3d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	2b02      	cmp	r3, #2
 800b2d8:	d003      	beq.n	800b2e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800b2de:	2b03      	cmp	r3, #3
 800b2e0:	d107      	bne.n	800b2f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800b2e2:	4b3f      	ldr	r3, [pc, #252]	@ (800b3e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d109      	bne.n	800b302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	e06f      	b.n	800b3d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800b2f2:	4b3b      	ldr	r3, [pc, #236]	@ (800b3e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	f003 0302 	and.w	r3, r3, #2
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d101      	bne.n	800b302 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800b2fe:	2301      	movs	r3, #1
 800b300:	e067      	b.n	800b3d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800b302:	4b37      	ldr	r3, [pc, #220]	@ (800b3e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b304:	689b      	ldr	r3, [r3, #8]
 800b306:	f023 0203 	bic.w	r2, r3, #3
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	685b      	ldr	r3, [r3, #4]
 800b30e:	4934      	ldr	r1, [pc, #208]	@ (800b3e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b310:	4313      	orrs	r3, r2
 800b312:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800b314:	f7fb fa96 	bl	8006844 <HAL_GetTick>
 800b318:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b31a:	e00a      	b.n	800b332 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b31c:	f7fb fa92 	bl	8006844 <HAL_GetTick>
 800b320:	4602      	mov	r2, r0
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	1ad3      	subs	r3, r2, r3
 800b326:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b32a:	4293      	cmp	r3, r2
 800b32c:	d901      	bls.n	800b332 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800b32e:	2303      	movs	r3, #3
 800b330:	e04f      	b.n	800b3d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b332:	4b2b      	ldr	r3, [pc, #172]	@ (800b3e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b334:	689b      	ldr	r3, [r3, #8]
 800b336:	f003 020c 	and.w	r2, r3, #12
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	685b      	ldr	r3, [r3, #4]
 800b33e:	009b      	lsls	r3, r3, #2
 800b340:	429a      	cmp	r2, r3
 800b342:	d1eb      	bne.n	800b31c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b344:	4b25      	ldr	r3, [pc, #148]	@ (800b3dc <HAL_RCC_ClockConfig+0x1b8>)
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f003 0307 	and.w	r3, r3, #7
 800b34c:	683a      	ldr	r2, [r7, #0]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d20c      	bcs.n	800b36c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b352:	4b22      	ldr	r3, [pc, #136]	@ (800b3dc <HAL_RCC_ClockConfig+0x1b8>)
 800b354:	683a      	ldr	r2, [r7, #0]
 800b356:	b2d2      	uxtb	r2, r2
 800b358:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b35a:	4b20      	ldr	r3, [pc, #128]	@ (800b3dc <HAL_RCC_ClockConfig+0x1b8>)
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	f003 0307 	and.w	r3, r3, #7
 800b362:	683a      	ldr	r2, [r7, #0]
 800b364:	429a      	cmp	r2, r3
 800b366:	d001      	beq.n	800b36c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800b368:	2301      	movs	r3, #1
 800b36a:	e032      	b.n	800b3d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f003 0304 	and.w	r3, r3, #4
 800b374:	2b00      	cmp	r3, #0
 800b376:	d008      	beq.n	800b38a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800b378:	4b19      	ldr	r3, [pc, #100]	@ (800b3e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b37a:	689b      	ldr	r3, [r3, #8]
 800b37c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	68db      	ldr	r3, [r3, #12]
 800b384:	4916      	ldr	r1, [pc, #88]	@ (800b3e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b386:	4313      	orrs	r3, r2
 800b388:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	681b      	ldr	r3, [r3, #0]
 800b38e:	f003 0308 	and.w	r3, r3, #8
 800b392:	2b00      	cmp	r3, #0
 800b394:	d009      	beq.n	800b3aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800b396:	4b12      	ldr	r3, [pc, #72]	@ (800b3e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b398:	689b      	ldr	r3, [r3, #8]
 800b39a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800b39e:	687b      	ldr	r3, [r7, #4]
 800b3a0:	691b      	ldr	r3, [r3, #16]
 800b3a2:	00db      	lsls	r3, r3, #3
 800b3a4:	490e      	ldr	r1, [pc, #56]	@ (800b3e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b3a6:	4313      	orrs	r3, r2
 800b3a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800b3aa:	f000 f821 	bl	800b3f0 <HAL_RCC_GetSysClockFreq>
 800b3ae:	4602      	mov	r2, r0
 800b3b0:	4b0b      	ldr	r3, [pc, #44]	@ (800b3e0 <HAL_RCC_ClockConfig+0x1bc>)
 800b3b2:	689b      	ldr	r3, [r3, #8]
 800b3b4:	091b      	lsrs	r3, r3, #4
 800b3b6:	f003 030f 	and.w	r3, r3, #15
 800b3ba:	490a      	ldr	r1, [pc, #40]	@ (800b3e4 <HAL_RCC_ClockConfig+0x1c0>)
 800b3bc:	5ccb      	ldrb	r3, [r1, r3]
 800b3be:	fa22 f303 	lsr.w	r3, r2, r3
 800b3c2:	4a09      	ldr	r2, [pc, #36]	@ (800b3e8 <HAL_RCC_ClockConfig+0x1c4>)
 800b3c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800b3c6:	4b09      	ldr	r3, [pc, #36]	@ (800b3ec <HAL_RCC_ClockConfig+0x1c8>)
 800b3c8:	681b      	ldr	r3, [r3, #0]
 800b3ca:	4618      	mov	r0, r3
 800b3cc:	f7fb f9f6 	bl	80067bc <HAL_InitTick>

  return HAL_OK;
 800b3d0:	2300      	movs	r3, #0
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3710      	adds	r7, #16
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop
 800b3dc:	40023c00 	.word	0x40023c00
 800b3e0:	40023800 	.word	0x40023800
 800b3e4:	08011344 	.word	0x08011344
 800b3e8:	20001918 	.word	0x20001918
 800b3ec:	2000191c 	.word	0x2000191c

0800b3f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800b3f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3f4:	b094      	sub	sp, #80	@ 0x50
 800b3f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800b3f8:	2300      	movs	r3, #0
 800b3fa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800b400:	2300      	movs	r3, #0
 800b402:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800b404:	2300      	movs	r3, #0
 800b406:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b408:	4b79      	ldr	r3, [pc, #484]	@ (800b5f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800b40a:	689b      	ldr	r3, [r3, #8]
 800b40c:	f003 030c 	and.w	r3, r3, #12
 800b410:	2b08      	cmp	r3, #8
 800b412:	d00d      	beq.n	800b430 <HAL_RCC_GetSysClockFreq+0x40>
 800b414:	2b08      	cmp	r3, #8
 800b416:	f200 80e1 	bhi.w	800b5dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d002      	beq.n	800b424 <HAL_RCC_GetSysClockFreq+0x34>
 800b41e:	2b04      	cmp	r3, #4
 800b420:	d003      	beq.n	800b42a <HAL_RCC_GetSysClockFreq+0x3a>
 800b422:	e0db      	b.n	800b5dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800b424:	4b73      	ldr	r3, [pc, #460]	@ (800b5f4 <HAL_RCC_GetSysClockFreq+0x204>)
 800b426:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b428:	e0db      	b.n	800b5e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800b42a:	4b73      	ldr	r3, [pc, #460]	@ (800b5f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800b42c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b42e:	e0d8      	b.n	800b5e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800b430:	4b6f      	ldr	r3, [pc, #444]	@ (800b5f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b438:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800b43a:	4b6d      	ldr	r3, [pc, #436]	@ (800b5f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800b43c:	685b      	ldr	r3, [r3, #4]
 800b43e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b442:	2b00      	cmp	r3, #0
 800b444:	d063      	beq.n	800b50e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b446:	4b6a      	ldr	r3, [pc, #424]	@ (800b5f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800b448:	685b      	ldr	r3, [r3, #4]
 800b44a:	099b      	lsrs	r3, r3, #6
 800b44c:	2200      	movs	r2, #0
 800b44e:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b450:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800b452:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b454:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b458:	633b      	str	r3, [r7, #48]	@ 0x30
 800b45a:	2300      	movs	r3, #0
 800b45c:	637b      	str	r3, [r7, #52]	@ 0x34
 800b45e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800b462:	4622      	mov	r2, r4
 800b464:	462b      	mov	r3, r5
 800b466:	f04f 0000 	mov.w	r0, #0
 800b46a:	f04f 0100 	mov.w	r1, #0
 800b46e:	0159      	lsls	r1, r3, #5
 800b470:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b474:	0150      	lsls	r0, r2, #5
 800b476:	4602      	mov	r2, r0
 800b478:	460b      	mov	r3, r1
 800b47a:	4621      	mov	r1, r4
 800b47c:	1a51      	subs	r1, r2, r1
 800b47e:	6139      	str	r1, [r7, #16]
 800b480:	4629      	mov	r1, r5
 800b482:	eb63 0301 	sbc.w	r3, r3, r1
 800b486:	617b      	str	r3, [r7, #20]
 800b488:	f04f 0200 	mov.w	r2, #0
 800b48c:	f04f 0300 	mov.w	r3, #0
 800b490:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800b494:	4659      	mov	r1, fp
 800b496:	018b      	lsls	r3, r1, #6
 800b498:	4651      	mov	r1, sl
 800b49a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800b49e:	4651      	mov	r1, sl
 800b4a0:	018a      	lsls	r2, r1, #6
 800b4a2:	4651      	mov	r1, sl
 800b4a4:	ebb2 0801 	subs.w	r8, r2, r1
 800b4a8:	4659      	mov	r1, fp
 800b4aa:	eb63 0901 	sbc.w	r9, r3, r1
 800b4ae:	f04f 0200 	mov.w	r2, #0
 800b4b2:	f04f 0300 	mov.w	r3, #0
 800b4b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800b4ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800b4be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800b4c2:	4690      	mov	r8, r2
 800b4c4:	4699      	mov	r9, r3
 800b4c6:	4623      	mov	r3, r4
 800b4c8:	eb18 0303 	adds.w	r3, r8, r3
 800b4cc:	60bb      	str	r3, [r7, #8]
 800b4ce:	462b      	mov	r3, r5
 800b4d0:	eb49 0303 	adc.w	r3, r9, r3
 800b4d4:	60fb      	str	r3, [r7, #12]
 800b4d6:	f04f 0200 	mov.w	r2, #0
 800b4da:	f04f 0300 	mov.w	r3, #0
 800b4de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800b4e2:	4629      	mov	r1, r5
 800b4e4:	024b      	lsls	r3, r1, #9
 800b4e6:	4621      	mov	r1, r4
 800b4e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800b4ec:	4621      	mov	r1, r4
 800b4ee:	024a      	lsls	r2, r1, #9
 800b4f0:	4610      	mov	r0, r2
 800b4f2:	4619      	mov	r1, r3
 800b4f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b4f6:	2200      	movs	r2, #0
 800b4f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 800b4fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800b4fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800b500:	f7f5 f93e 	bl	8000780 <__aeabi_uldivmod>
 800b504:	4602      	mov	r2, r0
 800b506:	460b      	mov	r3, r1
 800b508:	4613      	mov	r3, r2
 800b50a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800b50c:	e058      	b.n	800b5c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800b50e:	4b38      	ldr	r3, [pc, #224]	@ (800b5f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800b510:	685b      	ldr	r3, [r3, #4]
 800b512:	099b      	lsrs	r3, r3, #6
 800b514:	2200      	movs	r2, #0
 800b516:	4618      	mov	r0, r3
 800b518:	4611      	mov	r1, r2
 800b51a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800b51e:	623b      	str	r3, [r7, #32]
 800b520:	2300      	movs	r3, #0
 800b522:	627b      	str	r3, [r7, #36]	@ 0x24
 800b524:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800b528:	4642      	mov	r2, r8
 800b52a:	464b      	mov	r3, r9
 800b52c:	f04f 0000 	mov.w	r0, #0
 800b530:	f04f 0100 	mov.w	r1, #0
 800b534:	0159      	lsls	r1, r3, #5
 800b536:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800b53a:	0150      	lsls	r0, r2, #5
 800b53c:	4602      	mov	r2, r0
 800b53e:	460b      	mov	r3, r1
 800b540:	4641      	mov	r1, r8
 800b542:	ebb2 0a01 	subs.w	sl, r2, r1
 800b546:	4649      	mov	r1, r9
 800b548:	eb63 0b01 	sbc.w	fp, r3, r1
 800b54c:	f04f 0200 	mov.w	r2, #0
 800b550:	f04f 0300 	mov.w	r3, #0
 800b554:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800b558:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800b55c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800b560:	ebb2 040a 	subs.w	r4, r2, sl
 800b564:	eb63 050b 	sbc.w	r5, r3, fp
 800b568:	f04f 0200 	mov.w	r2, #0
 800b56c:	f04f 0300 	mov.w	r3, #0
 800b570:	00eb      	lsls	r3, r5, #3
 800b572:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800b576:	00e2      	lsls	r2, r4, #3
 800b578:	4614      	mov	r4, r2
 800b57a:	461d      	mov	r5, r3
 800b57c:	4643      	mov	r3, r8
 800b57e:	18e3      	adds	r3, r4, r3
 800b580:	603b      	str	r3, [r7, #0]
 800b582:	464b      	mov	r3, r9
 800b584:	eb45 0303 	adc.w	r3, r5, r3
 800b588:	607b      	str	r3, [r7, #4]
 800b58a:	f04f 0200 	mov.w	r2, #0
 800b58e:	f04f 0300 	mov.w	r3, #0
 800b592:	e9d7 4500 	ldrd	r4, r5, [r7]
 800b596:	4629      	mov	r1, r5
 800b598:	028b      	lsls	r3, r1, #10
 800b59a:	4621      	mov	r1, r4
 800b59c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800b5a0:	4621      	mov	r1, r4
 800b5a2:	028a      	lsls	r2, r1, #10
 800b5a4:	4610      	mov	r0, r2
 800b5a6:	4619      	mov	r1, r3
 800b5a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b5aa:	2200      	movs	r2, #0
 800b5ac:	61bb      	str	r3, [r7, #24]
 800b5ae:	61fa      	str	r2, [r7, #28]
 800b5b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800b5b4:	f7f5 f8e4 	bl	8000780 <__aeabi_uldivmod>
 800b5b8:	4602      	mov	r2, r0
 800b5ba:	460b      	mov	r3, r1
 800b5bc:	4613      	mov	r3, r2
 800b5be:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800b5c0:	4b0b      	ldr	r3, [pc, #44]	@ (800b5f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800b5c2:	685b      	ldr	r3, [r3, #4]
 800b5c4:	0c1b      	lsrs	r3, r3, #16
 800b5c6:	f003 0303 	and.w	r3, r3, #3
 800b5ca:	3301      	adds	r3, #1
 800b5cc:	005b      	lsls	r3, r3, #1
 800b5ce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800b5d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800b5d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b5d4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b5d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b5da:	e002      	b.n	800b5e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800b5dc:	4b05      	ldr	r3, [pc, #20]	@ (800b5f4 <HAL_RCC_GetSysClockFreq+0x204>)
 800b5de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800b5e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 800b5e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800b5e4:	4618      	mov	r0, r3
 800b5e6:	3750      	adds	r7, #80	@ 0x50
 800b5e8:	46bd      	mov	sp, r7
 800b5ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b5ee:	bf00      	nop
 800b5f0:	40023800 	.word	0x40023800
 800b5f4:	00f42400 	.word	0x00f42400
 800b5f8:	007a1200 	.word	0x007a1200

0800b5fc <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800b5fc:	b580      	push	{r7, lr}
 800b5fe:	b086      	sub	sp, #24
 800b600:	af00      	add	r7, sp, #0
 800b602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800b604:	2300      	movs	r3, #0
 800b606:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800b608:	2300      	movs	r3, #0
 800b60a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	f003 0301 	and.w	r3, r3, #1
 800b614:	2b00      	cmp	r3, #0
 800b616:	d105      	bne.n	800b624 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	681b      	ldr	r3, [r3, #0]
 800b61c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800b620:	2b00      	cmp	r3, #0
 800b622:	d035      	beq.n	800b690 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800b624:	4b62      	ldr	r3, [pc, #392]	@ (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800b626:	2200      	movs	r2, #0
 800b628:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b62a:	f7fb f90b 	bl	8006844 <HAL_GetTick>
 800b62e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b630:	e008      	b.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b632:	f7fb f907 	bl	8006844 <HAL_GetTick>
 800b636:	4602      	mov	r2, r0
 800b638:	697b      	ldr	r3, [r7, #20]
 800b63a:	1ad3      	subs	r3, r2, r3
 800b63c:	2b02      	cmp	r3, #2
 800b63e:	d901      	bls.n	800b644 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b640:	2303      	movs	r3, #3
 800b642:	e0b0      	b.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800b644:	4b5b      	ldr	r3, [pc, #364]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b646:	681b      	ldr	r3, [r3, #0]
 800b648:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d1f0      	bne.n	800b632 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	685b      	ldr	r3, [r3, #4]
 800b654:	019a      	lsls	r2, r3, #6
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	689b      	ldr	r3, [r3, #8]
 800b65a:	071b      	lsls	r3, r3, #28
 800b65c:	4955      	ldr	r1, [pc, #340]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b65e:	4313      	orrs	r3, r2
 800b660:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800b664:	4b52      	ldr	r3, [pc, #328]	@ (800b7b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800b666:	2201      	movs	r2, #1
 800b668:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800b66a:	f7fb f8eb 	bl	8006844 <HAL_GetTick>
 800b66e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b670:	e008      	b.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800b672:	f7fb f8e7 	bl	8006844 <HAL_GetTick>
 800b676:	4602      	mov	r2, r0
 800b678:	697b      	ldr	r3, [r7, #20]
 800b67a:	1ad3      	subs	r3, r2, r3
 800b67c:	2b02      	cmp	r3, #2
 800b67e:	d901      	bls.n	800b684 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800b680:	2303      	movs	r3, #3
 800b682:	e090      	b.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800b684:	4b4b      	ldr	r3, [pc, #300]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d0f0      	beq.n	800b672 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	f003 0302 	and.w	r3, r3, #2
 800b698:	2b00      	cmp	r3, #0
 800b69a:	f000 8083 	beq.w	800b7a4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800b69e:	2300      	movs	r3, #0
 800b6a0:	60fb      	str	r3, [r7, #12]
 800b6a2:	4b44      	ldr	r3, [pc, #272]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b6a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6a6:	4a43      	ldr	r2, [pc, #268]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b6a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800b6ac:	6413      	str	r3, [r2, #64]	@ 0x40
 800b6ae:	4b41      	ldr	r3, [pc, #260]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b6b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b6b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800b6b6:	60fb      	str	r3, [r7, #12]
 800b6b8:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800b6ba:	4b3f      	ldr	r3, [pc, #252]	@ (800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	4a3e      	ldr	r2, [pc, #248]	@ (800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b6c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b6c4:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b6c6:	f7fb f8bd 	bl	8006844 <HAL_GetTick>
 800b6ca:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800b6cc:	e008      	b.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b6ce:	f7fb f8b9 	bl	8006844 <HAL_GetTick>
 800b6d2:	4602      	mov	r2, r0
 800b6d4:	697b      	ldr	r3, [r7, #20]
 800b6d6:	1ad3      	subs	r3, r2, r3
 800b6d8:	2b02      	cmp	r3, #2
 800b6da:	d901      	bls.n	800b6e0 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800b6dc:	2303      	movs	r3, #3
 800b6de:	e062      	b.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800b6e0:	4b35      	ldr	r3, [pc, #212]	@ (800b7b8 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d0f0      	beq.n	800b6ce <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800b6ec:	4b31      	ldr	r3, [pc, #196]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b6ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b6f0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b6f4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800b6f6:	693b      	ldr	r3, [r7, #16]
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d02f      	beq.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x160>
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	68db      	ldr	r3, [r3, #12]
 800b700:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b704:	693a      	ldr	r2, [r7, #16]
 800b706:	429a      	cmp	r2, r3
 800b708:	d028      	beq.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800b70a:	4b2a      	ldr	r3, [pc, #168]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b70c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b70e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b712:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800b714:	4b29      	ldr	r3, [pc, #164]	@ (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800b716:	2201      	movs	r2, #1
 800b718:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800b71a:	4b28      	ldr	r3, [pc, #160]	@ (800b7bc <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800b71c:	2200      	movs	r2, #0
 800b71e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800b720:	4a24      	ldr	r2, [pc, #144]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800b726:	4b23      	ldr	r3, [pc, #140]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b728:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b72a:	f003 0301 	and.w	r3, r3, #1
 800b72e:	2b01      	cmp	r3, #1
 800b730:	d114      	bne.n	800b75c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800b732:	f7fb f887 	bl	8006844 <HAL_GetTick>
 800b736:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b738:	e00a      	b.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b73a:	f7fb f883 	bl	8006844 <HAL_GetTick>
 800b73e:	4602      	mov	r2, r0
 800b740:	697b      	ldr	r3, [r7, #20]
 800b742:	1ad3      	subs	r3, r2, r3
 800b744:	f241 3288 	movw	r2, #5000	@ 0x1388
 800b748:	4293      	cmp	r3, r2
 800b74a:	d901      	bls.n	800b750 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 800b74c:	2303      	movs	r3, #3
 800b74e:	e02a      	b.n	800b7a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800b750:	4b18      	ldr	r3, [pc, #96]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b752:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b754:	f003 0302 	and.w	r3, r3, #2
 800b758:	2b00      	cmp	r3, #0
 800b75a:	d0ee      	beq.n	800b73a <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	68db      	ldr	r3, [r3, #12]
 800b760:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800b764:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800b768:	d10d      	bne.n	800b786 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800b76a:	4b12      	ldr	r3, [pc, #72]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b76c:	689b      	ldr	r3, [r3, #8]
 800b76e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	68db      	ldr	r3, [r3, #12]
 800b776:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800b77a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b77e:	490d      	ldr	r1, [pc, #52]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b780:	4313      	orrs	r3, r2
 800b782:	608b      	str	r3, [r1, #8]
 800b784:	e005      	b.n	800b792 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800b786:	4b0b      	ldr	r3, [pc, #44]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b788:	689b      	ldr	r3, [r3, #8]
 800b78a:	4a0a      	ldr	r2, [pc, #40]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b78c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800b790:	6093      	str	r3, [r2, #8]
 800b792:	4b08      	ldr	r3, [pc, #32]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b794:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	68db      	ldr	r3, [r3, #12]
 800b79a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800b79e:	4905      	ldr	r1, [pc, #20]	@ (800b7b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800b7a0:	4313      	orrs	r3, r2
 800b7a2:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800b7a4:	2300      	movs	r3, #0
}
 800b7a6:	4618      	mov	r0, r3
 800b7a8:	3718      	adds	r7, #24
 800b7aa:	46bd      	mov	sp, r7
 800b7ac:	bd80      	pop	{r7, pc}
 800b7ae:	bf00      	nop
 800b7b0:	42470068 	.word	0x42470068
 800b7b4:	40023800 	.word	0x40023800
 800b7b8:	40007000 	.word	0x40007000
 800b7bc:	42470e40 	.word	0x42470e40

0800b7c0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800b7c0:	b480      	push	{r7}
 800b7c2:	b087      	sub	sp, #28
 800b7c4:	af00      	add	r7, sp, #0
 800b7c6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800b7c8:	2300      	movs	r3, #0
 800b7ca:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800b7d0:	2300      	movs	r3, #0
 800b7d2:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 800b7d4:	2300      	movs	r3, #0
 800b7d6:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2b01      	cmp	r3, #1
 800b7dc:	d13f      	bne.n	800b85e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800b7de:	4b24      	ldr	r3, [pc, #144]	@ (800b870 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800b7e0:	689b      	ldr	r3, [r3, #8]
 800b7e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800b7e6:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 800b7e8:	68fb      	ldr	r3, [r7, #12]
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d006      	beq.n	800b7fc <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800b7f4:	d12f      	bne.n	800b856 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 800b7f6:	4b1f      	ldr	r3, [pc, #124]	@ (800b874 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800b7f8:	617b      	str	r3, [r7, #20]
          break;
 800b7fa:	e02f      	b.n	800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800b7fc:	4b1c      	ldr	r3, [pc, #112]	@ (800b870 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800b804:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800b808:	d108      	bne.n	800b81c <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b80a:	4b19      	ldr	r3, [pc, #100]	@ (800b870 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800b80c:	685b      	ldr	r3, [r3, #4]
 800b80e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b812:	4a19      	ldr	r2, [pc, #100]	@ (800b878 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 800b814:	fbb2 f3f3 	udiv	r3, r2, r3
 800b818:	613b      	str	r3, [r7, #16]
 800b81a:	e007      	b.n	800b82c <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800b81c:	4b14      	ldr	r3, [pc, #80]	@ (800b870 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800b824:	4a15      	ldr	r2, [pc, #84]	@ (800b87c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 800b826:	fbb2 f3f3 	udiv	r3, r2, r3
 800b82a:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800b82c:	4b10      	ldr	r3, [pc, #64]	@ (800b870 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800b82e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b832:	099b      	lsrs	r3, r3, #6
 800b834:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800b838:	693b      	ldr	r3, [r7, #16]
 800b83a:	fb02 f303 	mul.w	r3, r2, r3
 800b83e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800b840:	4b0b      	ldr	r3, [pc, #44]	@ (800b870 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800b842:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800b846:	0f1b      	lsrs	r3, r3, #28
 800b848:	f003 0307 	and.w	r3, r3, #7
 800b84c:	68ba      	ldr	r2, [r7, #8]
 800b84e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b852:	617b      	str	r3, [r7, #20]
          break;
 800b854:	e002      	b.n	800b85c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 800b856:	2300      	movs	r3, #0
 800b858:	617b      	str	r3, [r7, #20]
          break;
 800b85a:	bf00      	nop
        }
      }
      break;
 800b85c:	e000      	b.n	800b860 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800b85e:	bf00      	nop
    }
  }
  return frequency;
 800b860:	697b      	ldr	r3, [r7, #20]
}
 800b862:	4618      	mov	r0, r3
 800b864:	371c      	adds	r7, #28
 800b866:	46bd      	mov	sp, r7
 800b868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b86c:	4770      	bx	lr
 800b86e:	bf00      	nop
 800b870:	40023800 	.word	0x40023800
 800b874:	00bb8000 	.word	0x00bb8000
 800b878:	007a1200 	.word	0x007a1200
 800b87c:	00f42400 	.word	0x00f42400

0800b880 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b082      	sub	sp, #8
 800b884:	af00      	add	r7, sp, #0
 800b886:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	d101      	bne.n	800b892 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800b88e:	2301      	movs	r3, #1
 800b890:	e07b      	b.n	800b98a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b896:	2b00      	cmp	r3, #0
 800b898:	d108      	bne.n	800b8ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	685b      	ldr	r3, [r3, #4]
 800b89e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800b8a2:	d009      	beq.n	800b8b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	61da      	str	r2, [r3, #28]
 800b8aa:	e005      	b.n	800b8b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	2200      	movs	r2, #0
 800b8b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	2200      	movs	r2, #0
 800b8b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800b8b8:	687b      	ldr	r3, [r7, #4]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800b8be:	687b      	ldr	r3, [r7, #4]
 800b8c0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800b8c4:	b2db      	uxtb	r3, r3
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	d106      	bne.n	800b8d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	2200      	movs	r2, #0
 800b8ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800b8d2:	6878      	ldr	r0, [r7, #4]
 800b8d4:	f7fa fde4 	bl	80064a0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2202      	movs	r2, #2
 800b8dc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	681a      	ldr	r2, [r3, #0]
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800b8ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	685b      	ldr	r3, [r3, #4]
 800b8f4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	689b      	ldr	r3, [r3, #8]
 800b8fc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800b900:	431a      	orrs	r2, r3
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	68db      	ldr	r3, [r3, #12]
 800b906:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800b90a:	431a      	orrs	r2, r3
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	691b      	ldr	r3, [r3, #16]
 800b910:	f003 0302 	and.w	r3, r3, #2
 800b914:	431a      	orrs	r2, r3
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	695b      	ldr	r3, [r3, #20]
 800b91a:	f003 0301 	and.w	r3, r3, #1
 800b91e:	431a      	orrs	r2, r3
 800b920:	687b      	ldr	r3, [r7, #4]
 800b922:	699b      	ldr	r3, [r3, #24]
 800b924:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800b928:	431a      	orrs	r2, r3
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	69db      	ldr	r3, [r3, #28]
 800b92e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b932:	431a      	orrs	r2, r3
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	6a1b      	ldr	r3, [r3, #32]
 800b938:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b93c:	ea42 0103 	orr.w	r1, r2, r3
 800b940:	687b      	ldr	r3, [r7, #4]
 800b942:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b944:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	430a      	orrs	r2, r1
 800b94e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	699b      	ldr	r3, [r3, #24]
 800b954:	0c1b      	lsrs	r3, r3, #16
 800b956:	f003 0104 	and.w	r1, r3, #4
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b95e:	f003 0210 	and.w	r2, r3, #16
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	430a      	orrs	r2, r1
 800b968:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	69da      	ldr	r2, [r3, #28]
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	681b      	ldr	r3, [r3, #0]
 800b974:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b978:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2200      	movs	r2, #0
 800b97e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	2201      	movs	r2, #1
 800b984:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800b988:	2300      	movs	r3, #0
}
 800b98a:	4618      	mov	r0, r3
 800b98c:	3708      	adds	r7, #8
 800b98e:	46bd      	mov	sp, r7
 800b990:	bd80      	pop	{r7, pc}

0800b992 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800b992:	b084      	sub	sp, #16
 800b994:	b580      	push	{r7, lr}
 800b996:	b084      	sub	sp, #16
 800b998:	af00      	add	r7, sp, #0
 800b99a:	6078      	str	r0, [r7, #4]
 800b99c:	f107 001c 	add.w	r0, r7, #28
 800b9a0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800b9a4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800b9a8:	2b01      	cmp	r3, #1
 800b9aa:	d123      	bne.n	800b9f4 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800b9ac:	687b      	ldr	r3, [r7, #4]
 800b9ae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800b9b0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	68db      	ldr	r3, [r3, #12]
 800b9bc:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800b9c0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800b9c4:	687a      	ldr	r2, [r7, #4]
 800b9c6:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	68db      	ldr	r3, [r3, #12]
 800b9cc:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800b9d4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	d105      	bne.n	800b9e8 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	68db      	ldr	r3, [r3, #12]
 800b9e0:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800b9e8:	6878      	ldr	r0, [r7, #4]
 800b9ea:	f000 f9dc 	bl	800bda6 <USB_CoreReset>
 800b9ee:	4603      	mov	r3, r0
 800b9f0:	73fb      	strb	r3, [r7, #15]
 800b9f2:	e01b      	b.n	800ba2c <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	68db      	ldr	r3, [r3, #12]
 800b9f8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f000 f9d0 	bl	800bda6 <USB_CoreReset>
 800ba06:	4603      	mov	r3, r0
 800ba08:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800ba0a:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d106      	bne.n	800ba20 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba16:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	639a      	str	r2, [r3, #56]	@ 0x38
 800ba1e:	e005      	b.n	800ba2c <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ba24:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800ba2c:	7fbb      	ldrb	r3, [r7, #30]
 800ba2e:	2b01      	cmp	r3, #1
 800ba30:	d10b      	bne.n	800ba4a <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	689b      	ldr	r3, [r3, #8]
 800ba36:	f043 0206 	orr.w	r2, r3, #6
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	689b      	ldr	r3, [r3, #8]
 800ba42:	f043 0220 	orr.w	r2, r3, #32
 800ba46:	687b      	ldr	r3, [r7, #4]
 800ba48:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800ba4a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba4c:	4618      	mov	r0, r3
 800ba4e:	3710      	adds	r7, #16
 800ba50:	46bd      	mov	sp, r7
 800ba52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ba56:	b004      	add	sp, #16
 800ba58:	4770      	bx	lr

0800ba5a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba5a:	b480      	push	{r7}
 800ba5c:	b083      	sub	sp, #12
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800ba62:	687b      	ldr	r3, [r7, #4]
 800ba64:	689b      	ldr	r3, [r3, #8]
 800ba66:	f043 0201 	orr.w	r2, r3, #1
 800ba6a:	687b      	ldr	r3, [r7, #4]
 800ba6c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ba6e:	2300      	movs	r3, #0
}
 800ba70:	4618      	mov	r0, r3
 800ba72:	370c      	adds	r7, #12
 800ba74:	46bd      	mov	sp, r7
 800ba76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba7a:	4770      	bx	lr

0800ba7c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800ba7c:	b480      	push	{r7}
 800ba7e:	b083      	sub	sp, #12
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	689b      	ldr	r3, [r3, #8]
 800ba88:	f023 0201 	bic.w	r2, r3, #1
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800ba90:	2300      	movs	r3, #0
}
 800ba92:	4618      	mov	r0, r3
 800ba94:	370c      	adds	r7, #12
 800ba96:	46bd      	mov	sp, r7
 800ba98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba9c:	4770      	bx	lr

0800ba9e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800ba9e:	b580      	push	{r7, lr}
 800baa0:	b084      	sub	sp, #16
 800baa2:	af00      	add	r7, sp, #0
 800baa4:	6078      	str	r0, [r7, #4]
 800baa6:	460b      	mov	r3, r1
 800baa8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800baaa:	2300      	movs	r3, #0
 800baac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800baae:	687b      	ldr	r3, [r7, #4]
 800bab0:	68db      	ldr	r3, [r3, #12]
 800bab2:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800bab6:	687b      	ldr	r3, [r7, #4]
 800bab8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800baba:	78fb      	ldrb	r3, [r7, #3]
 800babc:	2b01      	cmp	r3, #1
 800babe:	d115      	bne.n	800baec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	68db      	ldr	r3, [r3, #12]
 800bac4:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bacc:	200a      	movs	r0, #10
 800bace:	f7fa fec5 	bl	800685c <HAL_Delay>
      ms += 10U;
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	330a      	adds	r3, #10
 800bad6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bad8:	6878      	ldr	r0, [r7, #4]
 800bada:	f000 f956 	bl	800bd8a <USB_GetMode>
 800bade:	4603      	mov	r3, r0
 800bae0:	2b01      	cmp	r3, #1
 800bae2:	d01e      	beq.n	800bb22 <USB_SetCurrentMode+0x84>
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	2bc7      	cmp	r3, #199	@ 0xc7
 800bae8:	d9f0      	bls.n	800bacc <USB_SetCurrentMode+0x2e>
 800baea:	e01a      	b.n	800bb22 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800baec:	78fb      	ldrb	r3, [r7, #3]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d115      	bne.n	800bb1e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	68db      	ldr	r3, [r3, #12]
 800baf6:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800bafe:	200a      	movs	r0, #10
 800bb00:	f7fa feac 	bl	800685c <HAL_Delay>
      ms += 10U;
 800bb04:	68fb      	ldr	r3, [r7, #12]
 800bb06:	330a      	adds	r3, #10
 800bb08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800bb0a:	6878      	ldr	r0, [r7, #4]
 800bb0c:	f000 f93d 	bl	800bd8a <USB_GetMode>
 800bb10:	4603      	mov	r3, r0
 800bb12:	2b00      	cmp	r3, #0
 800bb14:	d005      	beq.n	800bb22 <USB_SetCurrentMode+0x84>
 800bb16:	68fb      	ldr	r3, [r7, #12]
 800bb18:	2bc7      	cmp	r3, #199	@ 0xc7
 800bb1a:	d9f0      	bls.n	800bafe <USB_SetCurrentMode+0x60>
 800bb1c:	e001      	b.n	800bb22 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800bb1e:	2301      	movs	r3, #1
 800bb20:	e005      	b.n	800bb2e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2bc8      	cmp	r3, #200	@ 0xc8
 800bb26:	d101      	bne.n	800bb2c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800bb28:	2301      	movs	r3, #1
 800bb2a:	e000      	b.n	800bb2e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800bb2c:	2300      	movs	r3, #0
}
 800bb2e:	4618      	mov	r0, r3
 800bb30:	3710      	adds	r7, #16
 800bb32:	46bd      	mov	sp, r7
 800bb34:	bd80      	pop	{r7, pc}

0800bb36 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800bb36:	b480      	push	{r7}
 800bb38:	b085      	sub	sp, #20
 800bb3a:	af00      	add	r7, sp, #0
 800bb3c:	6078      	str	r0, [r7, #4]
 800bb3e:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800bb40:	2300      	movs	r3, #0
 800bb42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	3301      	adds	r3, #1
 800bb48:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bb4a:	68fb      	ldr	r3, [r7, #12]
 800bb4c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bb50:	d901      	bls.n	800bb56 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800bb52:	2303      	movs	r3, #3
 800bb54:	e01b      	b.n	800bb8e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	691b      	ldr	r3, [r3, #16]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	daf2      	bge.n	800bb44 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800bb5e:	2300      	movs	r3, #0
 800bb60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800bb62:	683b      	ldr	r3, [r7, #0]
 800bb64:	019b      	lsls	r3, r3, #6
 800bb66:	f043 0220 	orr.w	r2, r3, #32
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	3301      	adds	r3, #1
 800bb72:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bb74:	68fb      	ldr	r3, [r7, #12]
 800bb76:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bb7a:	d901      	bls.n	800bb80 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800bb7c:	2303      	movs	r3, #3
 800bb7e:	e006      	b.n	800bb8e <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	691b      	ldr	r3, [r3, #16]
 800bb84:	f003 0320 	and.w	r3, r3, #32
 800bb88:	2b20      	cmp	r3, #32
 800bb8a:	d0f0      	beq.n	800bb6e <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800bb8c:	2300      	movs	r3, #0
}
 800bb8e:	4618      	mov	r0, r3
 800bb90:	3714      	adds	r7, #20
 800bb92:	46bd      	mov	sp, r7
 800bb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb98:	4770      	bx	lr

0800bb9a <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800bb9a:	b480      	push	{r7}
 800bb9c:	b085      	sub	sp, #20
 800bb9e:	af00      	add	r7, sp, #0
 800bba0:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bba2:	2300      	movs	r3, #0
 800bba4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	3301      	adds	r3, #1
 800bbaa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bbac:	68fb      	ldr	r3, [r7, #12]
 800bbae:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bbb2:	d901      	bls.n	800bbb8 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800bbb4:	2303      	movs	r3, #3
 800bbb6:	e018      	b.n	800bbea <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	691b      	ldr	r3, [r3, #16]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	daf2      	bge.n	800bba6 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2210      	movs	r2, #16
 800bbc8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bbca:	68fb      	ldr	r3, [r7, #12]
 800bbcc:	3301      	adds	r3, #1
 800bbce:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bbd0:	68fb      	ldr	r3, [r7, #12]
 800bbd2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bbd6:	d901      	bls.n	800bbdc <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800bbd8:	2303      	movs	r3, #3
 800bbda:	e006      	b.n	800bbea <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	691b      	ldr	r3, [r3, #16]
 800bbe0:	f003 0310 	and.w	r3, r3, #16
 800bbe4:	2b10      	cmp	r3, #16
 800bbe6:	d0f0      	beq.n	800bbca <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800bbe8:	2300      	movs	r3, #0
}
 800bbea:	4618      	mov	r0, r3
 800bbec:	3714      	adds	r7, #20
 800bbee:	46bd      	mov	sp, r7
 800bbf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf4:	4770      	bx	lr

0800bbf6 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800bbf6:	b480      	push	{r7}
 800bbf8:	b089      	sub	sp, #36	@ 0x24
 800bbfa:	af00      	add	r7, sp, #0
 800bbfc:	60f8      	str	r0, [r7, #12]
 800bbfe:	60b9      	str	r1, [r7, #8]
 800bc00:	4611      	mov	r1, r2
 800bc02:	461a      	mov	r2, r3
 800bc04:	460b      	mov	r3, r1
 800bc06:	71fb      	strb	r3, [r7, #7]
 800bc08:	4613      	mov	r3, r2
 800bc0a:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800bc10:	68bb      	ldr	r3, [r7, #8]
 800bc12:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800bc14:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800bc18:	2b00      	cmp	r3, #0
 800bc1a:	d123      	bne.n	800bc64 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800bc1c:	88bb      	ldrh	r3, [r7, #4]
 800bc1e:	3303      	adds	r3, #3
 800bc20:	089b      	lsrs	r3, r3, #2
 800bc22:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800bc24:	2300      	movs	r3, #0
 800bc26:	61bb      	str	r3, [r7, #24]
 800bc28:	e018      	b.n	800bc5c <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800bc2a:	79fb      	ldrb	r3, [r7, #7]
 800bc2c:	031a      	lsls	r2, r3, #12
 800bc2e:	697b      	ldr	r3, [r7, #20]
 800bc30:	4413      	add	r3, r2
 800bc32:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bc36:	461a      	mov	r2, r3
 800bc38:	69fb      	ldr	r3, [r7, #28]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	6013      	str	r3, [r2, #0]
      pSrc++;
 800bc3e:	69fb      	ldr	r3, [r7, #28]
 800bc40:	3301      	adds	r3, #1
 800bc42:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bc44:	69fb      	ldr	r3, [r7, #28]
 800bc46:	3301      	adds	r3, #1
 800bc48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bc4a:	69fb      	ldr	r3, [r7, #28]
 800bc4c:	3301      	adds	r3, #1
 800bc4e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800bc50:	69fb      	ldr	r3, [r7, #28]
 800bc52:	3301      	adds	r3, #1
 800bc54:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800bc56:	69bb      	ldr	r3, [r7, #24]
 800bc58:	3301      	adds	r3, #1
 800bc5a:	61bb      	str	r3, [r7, #24]
 800bc5c:	69ba      	ldr	r2, [r7, #24]
 800bc5e:	693b      	ldr	r3, [r7, #16]
 800bc60:	429a      	cmp	r2, r3
 800bc62:	d3e2      	bcc.n	800bc2a <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800bc64:	2300      	movs	r3, #0
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	3724      	adds	r7, #36	@ 0x24
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr

0800bc72 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800bc72:	b480      	push	{r7}
 800bc74:	b08b      	sub	sp, #44	@ 0x2c
 800bc76:	af00      	add	r7, sp, #0
 800bc78:	60f8      	str	r0, [r7, #12]
 800bc7a:	60b9      	str	r1, [r7, #8]
 800bc7c:	4613      	mov	r3, r2
 800bc7e:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc80:	68fb      	ldr	r3, [r7, #12]
 800bc82:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800bc84:	68bb      	ldr	r3, [r7, #8]
 800bc86:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800bc88:	88fb      	ldrh	r3, [r7, #6]
 800bc8a:	089b      	lsrs	r3, r3, #2
 800bc8c:	b29b      	uxth	r3, r3
 800bc8e:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800bc90:	88fb      	ldrh	r3, [r7, #6]
 800bc92:	f003 0303 	and.w	r3, r3, #3
 800bc96:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800bc98:	2300      	movs	r3, #0
 800bc9a:	623b      	str	r3, [r7, #32]
 800bc9c:	e014      	b.n	800bcc8 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800bc9e:	69bb      	ldr	r3, [r7, #24]
 800bca0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bca4:	681a      	ldr	r2, [r3, #0]
 800bca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bca8:	601a      	str	r2, [r3, #0]
    pDest++;
 800bcaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcac:	3301      	adds	r3, #1
 800bcae:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800bcb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcb2:	3301      	adds	r3, #1
 800bcb4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800bcb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcb8:	3301      	adds	r3, #1
 800bcba:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800bcbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcbe:	3301      	adds	r3, #1
 800bcc0:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800bcc2:	6a3b      	ldr	r3, [r7, #32]
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	623b      	str	r3, [r7, #32]
 800bcc8:	6a3a      	ldr	r2, [r7, #32]
 800bcca:	697b      	ldr	r3, [r7, #20]
 800bccc:	429a      	cmp	r2, r3
 800bcce:	d3e6      	bcc.n	800bc9e <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800bcd0:	8bfb      	ldrh	r3, [r7, #30]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d01e      	beq.n	800bd14 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800bcd6:	2300      	movs	r3, #0
 800bcd8:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800bcda:	69bb      	ldr	r3, [r7, #24]
 800bcdc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800bce0:	461a      	mov	r2, r3
 800bce2:	f107 0310 	add.w	r3, r7, #16
 800bce6:	6812      	ldr	r2, [r2, #0]
 800bce8:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800bcea:	693a      	ldr	r2, [r7, #16]
 800bcec:	6a3b      	ldr	r3, [r7, #32]
 800bcee:	b2db      	uxtb	r3, r3
 800bcf0:	00db      	lsls	r3, r3, #3
 800bcf2:	fa22 f303 	lsr.w	r3, r2, r3
 800bcf6:	b2da      	uxtb	r2, r3
 800bcf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bcfa:	701a      	strb	r2, [r3, #0]
      i++;
 800bcfc:	6a3b      	ldr	r3, [r7, #32]
 800bcfe:	3301      	adds	r3, #1
 800bd00:	623b      	str	r3, [r7, #32]
      pDest++;
 800bd02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd04:	3301      	adds	r3, #1
 800bd06:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800bd08:	8bfb      	ldrh	r3, [r7, #30]
 800bd0a:	3b01      	subs	r3, #1
 800bd0c:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800bd0e:	8bfb      	ldrh	r3, [r7, #30]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d1ea      	bne.n	800bcea <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800bd14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bd16:	4618      	mov	r0, r3
 800bd18:	372c      	adds	r7, #44	@ 0x2c
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr

0800bd22 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800bd22:	b480      	push	{r7}
 800bd24:	b085      	sub	sp, #20
 800bd26:	af00      	add	r7, sp, #0
 800bd28:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800bd2a:	687b      	ldr	r3, [r7, #4]
 800bd2c:	695b      	ldr	r3, [r3, #20]
 800bd2e:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800bd30:	687b      	ldr	r3, [r7, #4]
 800bd32:	699b      	ldr	r3, [r3, #24]
 800bd34:	68fa      	ldr	r2, [r7, #12]
 800bd36:	4013      	ands	r3, r2
 800bd38:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800bd3a:	68fb      	ldr	r3, [r7, #12]
}
 800bd3c:	4618      	mov	r0, r3
 800bd3e:	3714      	adds	r7, #20
 800bd40:	46bd      	mov	sp, r7
 800bd42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd46:	4770      	bx	lr

0800bd48 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800bd48:	b480      	push	{r7}
 800bd4a:	b085      	sub	sp, #20
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
 800bd50:	460b      	mov	r3, r1
 800bd52:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800bd58:	78fb      	ldrb	r3, [r7, #3]
 800bd5a:	015a      	lsls	r2, r3, #5
 800bd5c:	68fb      	ldr	r3, [r7, #12]
 800bd5e:	4413      	add	r3, r2
 800bd60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bd64:	689b      	ldr	r3, [r3, #8]
 800bd66:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 800bd68:	78fb      	ldrb	r3, [r7, #3]
 800bd6a:	015a      	lsls	r2, r3, #5
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	4413      	add	r3, r2
 800bd70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800bd74:	68db      	ldr	r3, [r3, #12]
 800bd76:	68ba      	ldr	r2, [r7, #8]
 800bd78:	4013      	ands	r3, r2
 800bd7a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800bd7c:	68bb      	ldr	r3, [r7, #8]
}
 800bd7e:	4618      	mov	r0, r3
 800bd80:	3714      	adds	r7, #20
 800bd82:	46bd      	mov	sp, r7
 800bd84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd88:	4770      	bx	lr

0800bd8a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 800bd8a:	b480      	push	{r7}
 800bd8c:	b083      	sub	sp, #12
 800bd8e:	af00      	add	r7, sp, #0
 800bd90:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800bd92:	687b      	ldr	r3, [r7, #4]
 800bd94:	695b      	ldr	r3, [r3, #20]
 800bd96:	f003 0301 	and.w	r3, r3, #1
}
 800bd9a:	4618      	mov	r0, r3
 800bd9c:	370c      	adds	r7, #12
 800bd9e:	46bd      	mov	sp, r7
 800bda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bda4:	4770      	bx	lr

0800bda6 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800bda6:	b480      	push	{r7}
 800bda8:	b085      	sub	sp, #20
 800bdaa:	af00      	add	r7, sp, #0
 800bdac:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	3301      	adds	r3, #1
 800bdb6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bdbe:	d901      	bls.n	800bdc4 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800bdc0:	2303      	movs	r3, #3
 800bdc2:	e01b      	b.n	800bdfc <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800bdc4:	687b      	ldr	r3, [r7, #4]
 800bdc6:	691b      	ldr	r3, [r3, #16]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	daf2      	bge.n	800bdb2 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800bdcc:	2300      	movs	r3, #0
 800bdce:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	691b      	ldr	r3, [r3, #16]
 800bdd4:	f043 0201 	orr.w	r2, r3, #1
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800bddc:	68fb      	ldr	r3, [r7, #12]
 800bdde:	3301      	adds	r3, #1
 800bde0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800bde8:	d901      	bls.n	800bdee <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800bdea:	2303      	movs	r3, #3
 800bdec:	e006      	b.n	800bdfc <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	691b      	ldr	r3, [r3, #16]
 800bdf2:	f003 0301 	and.w	r3, r3, #1
 800bdf6:	2b01      	cmp	r3, #1
 800bdf8:	d0f0      	beq.n	800bddc <USB_CoreReset+0x36>

  return HAL_OK;
 800bdfa:	2300      	movs	r3, #0
}
 800bdfc:	4618      	mov	r0, r3
 800bdfe:	3714      	adds	r7, #20
 800be00:	46bd      	mov	sp, r7
 800be02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be06:	4770      	bx	lr

0800be08 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800be08:	b084      	sub	sp, #16
 800be0a:	b580      	push	{r7, lr}
 800be0c:	b086      	sub	sp, #24
 800be0e:	af00      	add	r7, sp, #0
 800be10:	6078      	str	r0, [r7, #4]
 800be12:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800be16:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800be1a:	2300      	movs	r3, #0
 800be1c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800be28:	461a      	mov	r2, r3
 800be2a:	2300      	movs	r3, #0
 800be2c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be32:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800be36:	687b      	ldr	r3, [r7, #4]
 800be38:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be3e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800be46:	687b      	ldr	r3, [r7, #4]
 800be48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800be4a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800be4e:	687b      	ldr	r3, [r7, #4]
 800be50:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 800be52:	687b      	ldr	r3, [r7, #4]
 800be54:	68db      	ldr	r3, [r3, #12]
 800be56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800be5a:	2b00      	cmp	r3, #0
 800be5c:	d119      	bne.n	800be92 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800be5e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800be62:	2b01      	cmp	r3, #1
 800be64:	d10a      	bne.n	800be7c <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	68fa      	ldr	r2, [r7, #12]
 800be70:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800be74:	f043 0304 	orr.w	r3, r3, #4
 800be78:	6013      	str	r3, [r2, #0]
 800be7a:	e014      	b.n	800bea6 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800be82:	681b      	ldr	r3, [r3, #0]
 800be84:	68fa      	ldr	r2, [r7, #12]
 800be86:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800be8a:	f023 0304 	bic.w	r3, r3, #4
 800be8e:	6013      	str	r3, [r2, #0]
 800be90:	e009      	b.n	800bea6 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800be92:	68fb      	ldr	r3, [r7, #12]
 800be94:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800be98:	681b      	ldr	r3, [r3, #0]
 800be9a:	68fa      	ldr	r2, [r7, #12]
 800be9c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800bea0:	f023 0304 	bic.w	r3, r3, #4
 800bea4:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800bea6:	2110      	movs	r1, #16
 800bea8:	6878      	ldr	r0, [r7, #4]
 800beaa:	f7ff fe44 	bl	800bb36 <USB_FlushTxFifo>
 800beae:	4603      	mov	r3, r0
 800beb0:	2b00      	cmp	r3, #0
 800beb2:	d001      	beq.n	800beb8 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 800beb4:	2301      	movs	r3, #1
 800beb6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800beb8:	6878      	ldr	r0, [r7, #4]
 800beba:	f7ff fe6e 	bl	800bb9a <USB_FlushRxFifo>
 800bebe:	4603      	mov	r3, r0
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d001      	beq.n	800bec8 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 800bec4:	2301      	movs	r3, #1
 800bec6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800bec8:	2300      	movs	r3, #0
 800beca:	613b      	str	r3, [r7, #16]
 800becc:	e015      	b.n	800befa <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 800bece:	693b      	ldr	r3, [r7, #16]
 800bed0:	015a      	lsls	r2, r3, #5
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	4413      	add	r3, r2
 800bed6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800beda:	461a      	mov	r2, r3
 800bedc:	f04f 33ff 	mov.w	r3, #4294967295
 800bee0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800bee2:	693b      	ldr	r3, [r7, #16]
 800bee4:	015a      	lsls	r2, r3, #5
 800bee6:	68fb      	ldr	r3, [r7, #12]
 800bee8:	4413      	add	r3, r2
 800beea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800beee:	461a      	mov	r2, r3
 800bef0:	2300      	movs	r3, #0
 800bef2:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800bef4:	693b      	ldr	r3, [r7, #16]
 800bef6:	3301      	adds	r3, #1
 800bef8:	613b      	str	r3, [r7, #16]
 800befa:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800befe:	461a      	mov	r2, r3
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d3e3      	bcc.n	800bece <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	f04f 32ff 	mov.w	r2, #4294967295
 800bf12:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	4a18      	ldr	r2, [pc, #96]	@ (800bf78 <USB_HostInit+0x170>)
 800bf18:	4293      	cmp	r3, r2
 800bf1a:	d10b      	bne.n	800bf34 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bf22:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	4a15      	ldr	r2, [pc, #84]	@ (800bf7c <USB_HostInit+0x174>)
 800bf28:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	4a14      	ldr	r2, [pc, #80]	@ (800bf80 <USB_HostInit+0x178>)
 800bf2e:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 800bf32:	e009      	b.n	800bf48 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2280      	movs	r2, #128	@ 0x80
 800bf38:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800bf3a:	687b      	ldr	r3, [r7, #4]
 800bf3c:	4a11      	ldr	r2, [pc, #68]	@ (800bf84 <USB_HostInit+0x17c>)
 800bf3e:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	4a11      	ldr	r2, [pc, #68]	@ (800bf88 <USB_HostInit+0x180>)
 800bf44:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800bf48:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d105      	bne.n	800bf5c <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	699b      	ldr	r3, [r3, #24]
 800bf54:	f043 0210 	orr.w	r2, r3, #16
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	699a      	ldr	r2, [r3, #24]
 800bf60:	4b0a      	ldr	r3, [pc, #40]	@ (800bf8c <USB_HostInit+0x184>)
 800bf62:	4313      	orrs	r3, r2
 800bf64:	687a      	ldr	r2, [r7, #4]
 800bf66:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800bf68:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	3718      	adds	r7, #24
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800bf74:	b004      	add	sp, #16
 800bf76:	4770      	bx	lr
 800bf78:	40040000 	.word	0x40040000
 800bf7c:	01000200 	.word	0x01000200
 800bf80:	00e00300 	.word	0x00e00300
 800bf84:	00600080 	.word	0x00600080
 800bf88:	004000e0 	.word	0x004000e0
 800bf8c:	a3200008 	.word	0xa3200008

0800bf90 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 800bf90:	b480      	push	{r7}
 800bf92:	b085      	sub	sp, #20
 800bf94:	af00      	add	r7, sp, #0
 800bf96:	6078      	str	r0, [r7, #4]
 800bf98:	460b      	mov	r3, r1
 800bf9a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	68fa      	ldr	r2, [r7, #12]
 800bfaa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800bfae:	f023 0303 	bic.w	r3, r3, #3
 800bfb2:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800bfb4:	68fb      	ldr	r3, [r7, #12]
 800bfb6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bfba:	681a      	ldr	r2, [r3, #0]
 800bfbc:	78fb      	ldrb	r3, [r7, #3]
 800bfbe:	f003 0303 	and.w	r3, r3, #3
 800bfc2:	68f9      	ldr	r1, [r7, #12]
 800bfc4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800bfc8:	4313      	orrs	r3, r2
 800bfca:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 800bfcc:	78fb      	ldrb	r3, [r7, #3]
 800bfce:	2b01      	cmp	r3, #1
 800bfd0:	d107      	bne.n	800bfe2 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bfd8:	461a      	mov	r2, r3
 800bfda:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 800bfde:	6053      	str	r3, [r2, #4]
 800bfe0:	e00c      	b.n	800bffc <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 800bfe2:	78fb      	ldrb	r3, [r7, #3]
 800bfe4:	2b02      	cmp	r3, #2
 800bfe6:	d107      	bne.n	800bff8 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800bfee:	461a      	mov	r2, r3
 800bff0:	f241 7370 	movw	r3, #6000	@ 0x1770
 800bff4:	6053      	str	r3, [r2, #4]
 800bff6:	e001      	b.n	800bffc <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800bff8:	2301      	movs	r3, #1
 800bffa:	e000      	b.n	800bffe <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 800bffc:	2300      	movs	r3, #0
}
 800bffe:	4618      	mov	r0, r3
 800c000:	3714      	adds	r7, #20
 800c002:	46bd      	mov	sp, r7
 800c004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c008:	4770      	bx	lr

0800c00a <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800c00a:	b580      	push	{r7, lr}
 800c00c:	b084      	sub	sp, #16
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c012:	687b      	ldr	r3, [r7, #4]
 800c014:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800c016:	2300      	movs	r3, #0
 800c018:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c024:	68bb      	ldr	r3, [r7, #8]
 800c026:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800c02a:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 800c02c:	68bb      	ldr	r3, [r7, #8]
 800c02e:	68fa      	ldr	r2, [r7, #12]
 800c030:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800c034:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c038:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800c03a:	2064      	movs	r0, #100	@ 0x64
 800c03c:	f7fa fc0e 	bl	800685c <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 800c040:	68bb      	ldr	r3, [r7, #8]
 800c042:	68fa      	ldr	r2, [r7, #12]
 800c044:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800c048:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800c04c:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 800c04e:	200a      	movs	r0, #10
 800c050:	f7fa fc04 	bl	800685c <HAL_Delay>

  return HAL_OK;
 800c054:	2300      	movs	r3, #0
}
 800c056:	4618      	mov	r0, r3
 800c058:	3710      	adds	r7, #16
 800c05a:	46bd      	mov	sp, r7
 800c05c:	bd80      	pop	{r7, pc}

0800c05e <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800c05e:	b480      	push	{r7}
 800c060:	b085      	sub	sp, #20
 800c062:	af00      	add	r7, sp, #0
 800c064:	6078      	str	r0, [r7, #4]
 800c066:	460b      	mov	r3, r1
 800c068:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c06a:	687b      	ldr	r3, [r7, #4]
 800c06c:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c06e:	2300      	movs	r3, #0
 800c070:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c072:	68fb      	ldr	r3, [r7, #12]
 800c074:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800c07c:	68bb      	ldr	r3, [r7, #8]
 800c07e:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800c082:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 800c084:	68bb      	ldr	r3, [r7, #8]
 800c086:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d109      	bne.n	800c0a2 <USB_DriveVbus+0x44>
 800c08e:	78fb      	ldrb	r3, [r7, #3]
 800c090:	2b01      	cmp	r3, #1
 800c092:	d106      	bne.n	800c0a2 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 800c094:	68bb      	ldr	r3, [r7, #8]
 800c096:	68fa      	ldr	r2, [r7, #12]
 800c098:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800c09c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c0a0:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 800c0a2:	68bb      	ldr	r3, [r7, #8]
 800c0a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800c0a8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c0ac:	d109      	bne.n	800c0c2 <USB_DriveVbus+0x64>
 800c0ae:	78fb      	ldrb	r3, [r7, #3]
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d106      	bne.n	800c0c2 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 800c0b4:	68bb      	ldr	r3, [r7, #8]
 800c0b6:	68fa      	ldr	r2, [r7, #12]
 800c0b8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800c0bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c0c0:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 800c0c2:	2300      	movs	r3, #0
}
 800c0c4:	4618      	mov	r0, r3
 800c0c6:	3714      	adds	r7, #20
 800c0c8:	46bd      	mov	sp, r7
 800c0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0ce:	4770      	bx	lr

0800c0d0 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 800c0d0:	b480      	push	{r7}
 800c0d2:	b085      	sub	sp, #20
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c0d8:	687b      	ldr	r3, [r7, #4]
 800c0da:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	0c5b      	lsrs	r3, r3, #17
 800c0ee:	f003 0303 	and.w	r3, r3, #3
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	3714      	adds	r7, #20
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0fc:	4770      	bx	lr

0800c0fe <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 800c0fe:	b480      	push	{r7}
 800c100:	b085      	sub	sp, #20
 800c102:	af00      	add	r7, sp, #0
 800c104:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c110:	689b      	ldr	r3, [r3, #8]
 800c112:	b29b      	uxth	r3, r3
}
 800c114:	4618      	mov	r0, r3
 800c116:	3714      	adds	r7, #20
 800c118:	46bd      	mov	sp, r7
 800c11a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c11e:	4770      	bx	lr

0800c120 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 800c120:	b580      	push	{r7, lr}
 800c122:	b088      	sub	sp, #32
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	4608      	mov	r0, r1
 800c12a:	4611      	mov	r1, r2
 800c12c:	461a      	mov	r2, r3
 800c12e:	4603      	mov	r3, r0
 800c130:	70fb      	strb	r3, [r7, #3]
 800c132:	460b      	mov	r3, r1
 800c134:	70bb      	strb	r3, [r7, #2]
 800c136:	4613      	mov	r3, r2
 800c138:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800c13a:	2300      	movs	r3, #0
 800c13c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 800c142:	78fb      	ldrb	r3, [r7, #3]
 800c144:	015a      	lsls	r2, r3, #5
 800c146:	693b      	ldr	r3, [r7, #16]
 800c148:	4413      	add	r3, r2
 800c14a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c14e:	461a      	mov	r2, r3
 800c150:	f04f 33ff 	mov.w	r3, #4294967295
 800c154:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800c156:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c15a:	2b03      	cmp	r3, #3
 800c15c:	d87c      	bhi.n	800c258 <USB_HC_Init+0x138>
 800c15e:	a201      	add	r2, pc, #4	@ (adr r2, 800c164 <USB_HC_Init+0x44>)
 800c160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c164:	0800c175 	.word	0x0800c175
 800c168:	0800c21b 	.word	0x0800c21b
 800c16c:	0800c175 	.word	0x0800c175
 800c170:	0800c1dd 	.word	0x0800c1dd
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c174:	78fb      	ldrb	r3, [r7, #3]
 800c176:	015a      	lsls	r2, r3, #5
 800c178:	693b      	ldr	r3, [r7, #16]
 800c17a:	4413      	add	r3, r2
 800c17c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c180:	461a      	mov	r2, r3
 800c182:	f240 439d 	movw	r3, #1181	@ 0x49d
 800c186:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800c188:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	da10      	bge.n	800c1b2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c190:	78fb      	ldrb	r3, [r7, #3]
 800c192:	015a      	lsls	r2, r3, #5
 800c194:	693b      	ldr	r3, [r7, #16]
 800c196:	4413      	add	r3, r2
 800c198:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c19c:	68db      	ldr	r3, [r3, #12]
 800c19e:	78fa      	ldrb	r2, [r7, #3]
 800c1a0:	0151      	lsls	r1, r2, #5
 800c1a2:	693a      	ldr	r2, [r7, #16]
 800c1a4:	440a      	add	r2, r1
 800c1a6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c1aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c1ae:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 800c1b0:	e055      	b.n	800c25e <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 800c1b2:	687b      	ldr	r3, [r7, #4]
 800c1b4:	4a6f      	ldr	r2, [pc, #444]	@ (800c374 <USB_HC_Init+0x254>)
 800c1b6:	4293      	cmp	r3, r2
 800c1b8:	d151      	bne.n	800c25e <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800c1ba:	78fb      	ldrb	r3, [r7, #3]
 800c1bc:	015a      	lsls	r2, r3, #5
 800c1be:	693b      	ldr	r3, [r7, #16]
 800c1c0:	4413      	add	r3, r2
 800c1c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c1c6:	68db      	ldr	r3, [r3, #12]
 800c1c8:	78fa      	ldrb	r2, [r7, #3]
 800c1ca:	0151      	lsls	r1, r2, #5
 800c1cc:	693a      	ldr	r2, [r7, #16]
 800c1ce:	440a      	add	r2, r1
 800c1d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c1d4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800c1d8:	60d3      	str	r3, [r2, #12]
      break;
 800c1da:	e040      	b.n	800c25e <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c1dc:	78fb      	ldrb	r3, [r7, #3]
 800c1de:	015a      	lsls	r2, r3, #5
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	4413      	add	r3, r2
 800c1e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c1e8:	461a      	mov	r2, r3
 800c1ea:	f240 639d 	movw	r3, #1693	@ 0x69d
 800c1ee:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c1f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c1f4:	2b00      	cmp	r3, #0
 800c1f6:	da34      	bge.n	800c262 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800c1f8:	78fb      	ldrb	r3, [r7, #3]
 800c1fa:	015a      	lsls	r2, r3, #5
 800c1fc:	693b      	ldr	r3, [r7, #16]
 800c1fe:	4413      	add	r3, r2
 800c200:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c204:	68db      	ldr	r3, [r3, #12]
 800c206:	78fa      	ldrb	r2, [r7, #3]
 800c208:	0151      	lsls	r1, r2, #5
 800c20a:	693a      	ldr	r2, [r7, #16]
 800c20c:	440a      	add	r2, r1
 800c20e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c212:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c216:	60d3      	str	r3, [r2, #12]
      }

      break;
 800c218:	e023      	b.n	800c262 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800c21a:	78fb      	ldrb	r3, [r7, #3]
 800c21c:	015a      	lsls	r2, r3, #5
 800c21e:	693b      	ldr	r3, [r7, #16]
 800c220:	4413      	add	r3, r2
 800c222:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c226:	461a      	mov	r2, r3
 800c228:	f240 2325 	movw	r3, #549	@ 0x225
 800c22c:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 800c22e:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c232:	2b00      	cmp	r3, #0
 800c234:	da17      	bge.n	800c266 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800c236:	78fb      	ldrb	r3, [r7, #3]
 800c238:	015a      	lsls	r2, r3, #5
 800c23a:	693b      	ldr	r3, [r7, #16]
 800c23c:	4413      	add	r3, r2
 800c23e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c242:	68db      	ldr	r3, [r3, #12]
 800c244:	78fa      	ldrb	r2, [r7, #3]
 800c246:	0151      	lsls	r1, r2, #5
 800c248:	693a      	ldr	r2, [r7, #16]
 800c24a:	440a      	add	r2, r1
 800c24c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c250:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 800c254:	60d3      	str	r3, [r2, #12]
      }
      break;
 800c256:	e006      	b.n	800c266 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800c258:	2301      	movs	r3, #1
 800c25a:	77fb      	strb	r3, [r7, #31]
      break;
 800c25c:	e004      	b.n	800c268 <USB_HC_Init+0x148>
      break;
 800c25e:	bf00      	nop
 800c260:	e002      	b.n	800c268 <USB_HC_Init+0x148>
      break;
 800c262:	bf00      	nop
 800c264:	e000      	b.n	800c268 <USB_HC_Init+0x148>
      break;
 800c266:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800c268:	78fb      	ldrb	r3, [r7, #3]
 800c26a:	015a      	lsls	r2, r3, #5
 800c26c:	693b      	ldr	r3, [r7, #16]
 800c26e:	4413      	add	r3, r2
 800c270:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c274:	461a      	mov	r2, r3
 800c276:	2300      	movs	r3, #0
 800c278:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800c27a:	78fb      	ldrb	r3, [r7, #3]
 800c27c:	015a      	lsls	r2, r3, #5
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	4413      	add	r3, r2
 800c282:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c286:	68db      	ldr	r3, [r3, #12]
 800c288:	78fa      	ldrb	r2, [r7, #3]
 800c28a:	0151      	lsls	r1, r2, #5
 800c28c:	693a      	ldr	r2, [r7, #16]
 800c28e:	440a      	add	r2, r1
 800c290:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c294:	f043 0302 	orr.w	r3, r3, #2
 800c298:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800c29a:	693b      	ldr	r3, [r7, #16]
 800c29c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c2a0:	699a      	ldr	r2, [r3, #24]
 800c2a2:	78fb      	ldrb	r3, [r7, #3]
 800c2a4:	f003 030f 	and.w	r3, r3, #15
 800c2a8:	2101      	movs	r1, #1
 800c2aa:	fa01 f303 	lsl.w	r3, r1, r3
 800c2ae:	6939      	ldr	r1, [r7, #16]
 800c2b0:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800c2b4:	4313      	orrs	r3, r2
 800c2b6:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	699b      	ldr	r3, [r3, #24]
 800c2bc:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 800c2c4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800c2c8:	2b00      	cmp	r3, #0
 800c2ca:	da03      	bge.n	800c2d4 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800c2cc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800c2d0:	61bb      	str	r3, [r7, #24]
 800c2d2:	e001      	b.n	800c2d8 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f7ff fef9 	bl	800c0d0 <USB_GetHostSpeed>
 800c2de:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 800c2e0:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800c2e4:	2b02      	cmp	r3, #2
 800c2e6:	d106      	bne.n	800c2f6 <USB_HC_Init+0x1d6>
 800c2e8:	68fb      	ldr	r3, [r7, #12]
 800c2ea:	2b02      	cmp	r3, #2
 800c2ec:	d003      	beq.n	800c2f6 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 800c2ee:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800c2f2:	617b      	str	r3, [r7, #20]
 800c2f4:	e001      	b.n	800c2fa <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800c2f6:	2300      	movs	r3, #0
 800c2f8:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c2fa:	787b      	ldrb	r3, [r7, #1]
 800c2fc:	059b      	lsls	r3, r3, #22
 800c2fe:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c302:	78bb      	ldrb	r3, [r7, #2]
 800c304:	02db      	lsls	r3, r3, #11
 800c306:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c30a:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c30c:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c310:	049b      	lsls	r3, r3, #18
 800c312:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800c316:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800c318:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800c31a:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800c31e:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800c320:	69bb      	ldr	r3, [r7, #24]
 800c322:	431a      	orrs	r2, r3
 800c324:	697b      	ldr	r3, [r7, #20]
 800c326:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c328:	78fa      	ldrb	r2, [r7, #3]
 800c32a:	0151      	lsls	r1, r2, #5
 800c32c:	693a      	ldr	r2, [r7, #16]
 800c32e:	440a      	add	r2, r1
 800c330:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 800c334:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800c338:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800c33a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c33e:	2b03      	cmp	r3, #3
 800c340:	d003      	beq.n	800c34a <USB_HC_Init+0x22a>
 800c342:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800c346:	2b01      	cmp	r3, #1
 800c348:	d10f      	bne.n	800c36a <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800c34a:	78fb      	ldrb	r3, [r7, #3]
 800c34c:	015a      	lsls	r2, r3, #5
 800c34e:	693b      	ldr	r3, [r7, #16]
 800c350:	4413      	add	r3, r2
 800c352:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	78fa      	ldrb	r2, [r7, #3]
 800c35a:	0151      	lsls	r1, r2, #5
 800c35c:	693a      	ldr	r2, [r7, #16]
 800c35e:	440a      	add	r2, r1
 800c360:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c364:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800c368:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800c36a:	7ffb      	ldrb	r3, [r7, #31]
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3720      	adds	r7, #32
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}
 800c374:	40040000 	.word	0x40040000

0800c378 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800c378:	b580      	push	{r7, lr}
 800c37a:	b08c      	sub	sp, #48	@ 0x30
 800c37c:	af02      	add	r7, sp, #8
 800c37e:	60f8      	str	r0, [r7, #12]
 800c380:	60b9      	str	r1, [r7, #8]
 800c382:	4613      	mov	r3, r2
 800c384:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c386:	68fb      	ldr	r3, [r7, #12]
 800c388:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800c38a:	68bb      	ldr	r3, [r7, #8]
 800c38c:	785b      	ldrb	r3, [r3, #1]
 800c38e:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 800c390:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800c394:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800c396:	68fb      	ldr	r3, [r7, #12]
 800c398:	4a5d      	ldr	r2, [pc, #372]	@ (800c510 <USB_HC_StartXfer+0x198>)
 800c39a:	4293      	cmp	r3, r2
 800c39c:	d12f      	bne.n	800c3fe <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 800c39e:	79fb      	ldrb	r3, [r7, #7]
 800c3a0:	2b01      	cmp	r3, #1
 800c3a2:	d11c      	bne.n	800c3de <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 800c3a4:	68bb      	ldr	r3, [r7, #8]
 800c3a6:	7c9b      	ldrb	r3, [r3, #18]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	d003      	beq.n	800c3b4 <USB_HC_StartXfer+0x3c>
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	7c9b      	ldrb	r3, [r3, #18]
 800c3b0:	2b02      	cmp	r3, #2
 800c3b2:	d124      	bne.n	800c3fe <USB_HC_StartXfer+0x86>
 800c3b4:	68bb      	ldr	r3, [r7, #8]
 800c3b6:	799b      	ldrb	r3, [r3, #6]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d120      	bne.n	800c3fe <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800c3bc:	69fb      	ldr	r3, [r7, #28]
 800c3be:	015a      	lsls	r2, r3, #5
 800c3c0:	6a3b      	ldr	r3, [r7, #32]
 800c3c2:	4413      	add	r3, r2
 800c3c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c3c8:	68db      	ldr	r3, [r3, #12]
 800c3ca:	69fa      	ldr	r2, [r7, #28]
 800c3cc:	0151      	lsls	r1, r2, #5
 800c3ce:	6a3a      	ldr	r2, [r7, #32]
 800c3d0:	440a      	add	r2, r1
 800c3d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c3d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800c3da:	60d3      	str	r3, [r2, #12]
 800c3dc:	e00f      	b.n	800c3fe <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800c3de:	68bb      	ldr	r3, [r7, #8]
 800c3e0:	791b      	ldrb	r3, [r3, #4]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d10b      	bne.n	800c3fe <USB_HC_StartXfer+0x86>
 800c3e6:	68bb      	ldr	r3, [r7, #8]
 800c3e8:	795b      	ldrb	r3, [r3, #5]
 800c3ea:	2b01      	cmp	r3, #1
 800c3ec:	d107      	bne.n	800c3fe <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800c3ee:	68bb      	ldr	r3, [r7, #8]
 800c3f0:	785b      	ldrb	r3, [r3, #1]
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	68f8      	ldr	r0, [r7, #12]
 800c3f6:	f000 fb6b 	bl	800cad0 <USB_DoPing>
        return HAL_OK;
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	e232      	b.n	800c864 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	799b      	ldrb	r3, [r3, #6]
 800c402:	2b01      	cmp	r3, #1
 800c404:	d158      	bne.n	800c4b8 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800c406:	2301      	movs	r3, #1
 800c408:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800c40a:	68bb      	ldr	r3, [r7, #8]
 800c40c:	78db      	ldrb	r3, [r3, #3]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d007      	beq.n	800c422 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c412:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c414:	68ba      	ldr	r2, [r7, #8]
 800c416:	8a92      	ldrh	r2, [r2, #20]
 800c418:	fb03 f202 	mul.w	r2, r3, r2
 800c41c:	68bb      	ldr	r3, [r7, #8]
 800c41e:	61da      	str	r2, [r3, #28]
 800c420:	e07c      	b.n	800c51c <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800c422:	68bb      	ldr	r3, [r7, #8]
 800c424:	7c9b      	ldrb	r3, [r3, #18]
 800c426:	2b01      	cmp	r3, #1
 800c428:	d130      	bne.n	800c48c <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800c42a:	68bb      	ldr	r3, [r7, #8]
 800c42c:	6a1b      	ldr	r3, [r3, #32]
 800c42e:	2bbc      	cmp	r3, #188	@ 0xbc
 800c430:	d918      	bls.n	800c464 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800c432:	68bb      	ldr	r3, [r7, #8]
 800c434:	8a9b      	ldrh	r3, [r3, #20]
 800c436:	461a      	mov	r2, r3
 800c438:	68bb      	ldr	r3, [r7, #8]
 800c43a:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800c43c:	68bb      	ldr	r3, [r7, #8]
 800c43e:	69da      	ldr	r2, [r3, #28]
 800c440:	68bb      	ldr	r3, [r7, #8]
 800c442:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	68db      	ldr	r3, [r3, #12]
 800c448:	2b01      	cmp	r3, #1
 800c44a:	d003      	beq.n	800c454 <USB_HC_StartXfer+0xdc>
 800c44c:	68bb      	ldr	r3, [r7, #8]
 800c44e:	68db      	ldr	r3, [r3, #12]
 800c450:	2b02      	cmp	r3, #2
 800c452:	d103      	bne.n	800c45c <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800c454:	68bb      	ldr	r3, [r7, #8]
 800c456:	2202      	movs	r2, #2
 800c458:	60da      	str	r2, [r3, #12]
 800c45a:	e05f      	b.n	800c51c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	2201      	movs	r2, #1
 800c460:	60da      	str	r2, [r3, #12]
 800c462:	e05b      	b.n	800c51c <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800c464:	68bb      	ldr	r3, [r7, #8]
 800c466:	6a1a      	ldr	r2, [r3, #32]
 800c468:	68bb      	ldr	r3, [r7, #8]
 800c46a:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	68db      	ldr	r3, [r3, #12]
 800c470:	2b01      	cmp	r3, #1
 800c472:	d007      	beq.n	800c484 <USB_HC_StartXfer+0x10c>
 800c474:	68bb      	ldr	r3, [r7, #8]
 800c476:	68db      	ldr	r3, [r3, #12]
 800c478:	2b02      	cmp	r3, #2
 800c47a:	d003      	beq.n	800c484 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800c47c:	68bb      	ldr	r3, [r7, #8]
 800c47e:	2204      	movs	r2, #4
 800c480:	60da      	str	r2, [r3, #12]
 800c482:	e04b      	b.n	800c51c <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800c484:	68bb      	ldr	r3, [r7, #8]
 800c486:	2203      	movs	r2, #3
 800c488:	60da      	str	r2, [r3, #12]
 800c48a:	e047      	b.n	800c51c <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800c48c:	79fb      	ldrb	r3, [r7, #7]
 800c48e:	2b01      	cmp	r3, #1
 800c490:	d10d      	bne.n	800c4ae <USB_HC_StartXfer+0x136>
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	6a1b      	ldr	r3, [r3, #32]
 800c496:	68ba      	ldr	r2, [r7, #8]
 800c498:	8a92      	ldrh	r2, [r2, #20]
 800c49a:	4293      	cmp	r3, r2
 800c49c:	d907      	bls.n	800c4ae <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c49e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c4a0:	68ba      	ldr	r2, [r7, #8]
 800c4a2:	8a92      	ldrh	r2, [r2, #20]
 800c4a4:	fb03 f202 	mul.w	r2, r3, r2
 800c4a8:	68bb      	ldr	r3, [r7, #8]
 800c4aa:	61da      	str	r2, [r3, #28]
 800c4ac:	e036      	b.n	800c51c <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	6a1a      	ldr	r2, [r3, #32]
 800c4b2:	68bb      	ldr	r3, [r7, #8]
 800c4b4:	61da      	str	r2, [r3, #28]
 800c4b6:	e031      	b.n	800c51c <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	6a1b      	ldr	r3, [r3, #32]
 800c4bc:	2b00      	cmp	r3, #0
 800c4be:	d018      	beq.n	800c4f2 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800c4c0:	68bb      	ldr	r3, [r7, #8]
 800c4c2:	6a1b      	ldr	r3, [r3, #32]
 800c4c4:	68ba      	ldr	r2, [r7, #8]
 800c4c6:	8a92      	ldrh	r2, [r2, #20]
 800c4c8:	4413      	add	r3, r2
 800c4ca:	3b01      	subs	r3, #1
 800c4cc:	68ba      	ldr	r2, [r7, #8]
 800c4ce:	8a92      	ldrh	r2, [r2, #20]
 800c4d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800c4d4:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800c4d6:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800c4d8:	8b7b      	ldrh	r3, [r7, #26]
 800c4da:	429a      	cmp	r2, r3
 800c4dc:	d90b      	bls.n	800c4f6 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800c4de:	8b7b      	ldrh	r3, [r7, #26]
 800c4e0:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c4e2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c4e4:	68ba      	ldr	r2, [r7, #8]
 800c4e6:	8a92      	ldrh	r2, [r2, #20]
 800c4e8:	fb03 f202 	mul.w	r2, r3, r2
 800c4ec:	68bb      	ldr	r3, [r7, #8]
 800c4ee:	61da      	str	r2, [r3, #28]
 800c4f0:	e001      	b.n	800c4f6 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	78db      	ldrb	r3, [r3, #3]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d00a      	beq.n	800c514 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800c4fe:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c500:	68ba      	ldr	r2, [r7, #8]
 800c502:	8a92      	ldrh	r2, [r2, #20]
 800c504:	fb03 f202 	mul.w	r2, r3, r2
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	61da      	str	r2, [r3, #28]
 800c50c:	e006      	b.n	800c51c <USB_HC_StartXfer+0x1a4>
 800c50e:	bf00      	nop
 800c510:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	6a1a      	ldr	r2, [r3, #32]
 800c518:	68bb      	ldr	r3, [r7, #8]
 800c51a:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c51c:	68bb      	ldr	r3, [r7, #8]
 800c51e:	69db      	ldr	r3, [r3, #28]
 800c520:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c524:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800c526:	04d9      	lsls	r1, r3, #19
 800c528:	4ba3      	ldr	r3, [pc, #652]	@ (800c7b8 <USB_HC_StartXfer+0x440>)
 800c52a:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c52c:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800c52e:	68bb      	ldr	r3, [r7, #8]
 800c530:	7d9b      	ldrb	r3, [r3, #22]
 800c532:	075b      	lsls	r3, r3, #29
 800c534:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c538:	69f9      	ldr	r1, [r7, #28]
 800c53a:	0148      	lsls	r0, r1, #5
 800c53c:	6a39      	ldr	r1, [r7, #32]
 800c53e:	4401      	add	r1, r0
 800c540:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800c544:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800c546:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800c548:	79fb      	ldrb	r3, [r7, #7]
 800c54a:	2b00      	cmp	r3, #0
 800c54c:	d009      	beq.n	800c562 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	6999      	ldr	r1, [r3, #24]
 800c552:	69fb      	ldr	r3, [r7, #28]
 800c554:	015a      	lsls	r2, r3, #5
 800c556:	6a3b      	ldr	r3, [r7, #32]
 800c558:	4413      	add	r3, r2
 800c55a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c55e:	460a      	mov	r2, r1
 800c560:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800c562:	6a3b      	ldr	r3, [r7, #32]
 800c564:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c568:	689b      	ldr	r3, [r3, #8]
 800c56a:	f003 0301 	and.w	r3, r3, #1
 800c56e:	2b00      	cmp	r3, #0
 800c570:	bf0c      	ite	eq
 800c572:	2301      	moveq	r3, #1
 800c574:	2300      	movne	r3, #0
 800c576:	b2db      	uxtb	r3, r3
 800c578:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800c57a:	69fb      	ldr	r3, [r7, #28]
 800c57c:	015a      	lsls	r2, r3, #5
 800c57e:	6a3b      	ldr	r3, [r7, #32]
 800c580:	4413      	add	r3, r2
 800c582:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c586:	681b      	ldr	r3, [r3, #0]
 800c588:	69fa      	ldr	r2, [r7, #28]
 800c58a:	0151      	lsls	r1, r2, #5
 800c58c:	6a3a      	ldr	r2, [r7, #32]
 800c58e:	440a      	add	r2, r1
 800c590:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c594:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800c598:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800c59a:	69fb      	ldr	r3, [r7, #28]
 800c59c:	015a      	lsls	r2, r3, #5
 800c59e:	6a3b      	ldr	r3, [r7, #32]
 800c5a0:	4413      	add	r3, r2
 800c5a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c5a6:	681a      	ldr	r2, [r3, #0]
 800c5a8:	7e7b      	ldrb	r3, [r7, #25]
 800c5aa:	075b      	lsls	r3, r3, #29
 800c5ac:	69f9      	ldr	r1, [r7, #28]
 800c5ae:	0148      	lsls	r0, r1, #5
 800c5b0:	6a39      	ldr	r1, [r7, #32]
 800c5b2:	4401      	add	r1, r0
 800c5b4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800c5b8:	4313      	orrs	r3, r2
 800c5ba:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	799b      	ldrb	r3, [r3, #6]
 800c5c0:	2b01      	cmp	r3, #1
 800c5c2:	f040 80c3 	bne.w	800c74c <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800c5c6:	68bb      	ldr	r3, [r7, #8]
 800c5c8:	7c5b      	ldrb	r3, [r3, #17]
 800c5ca:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800c5cc:	68ba      	ldr	r2, [r7, #8]
 800c5ce:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800c5d0:	4313      	orrs	r3, r2
 800c5d2:	69fa      	ldr	r2, [r7, #28]
 800c5d4:	0151      	lsls	r1, r2, #5
 800c5d6:	6a3a      	ldr	r2, [r7, #32]
 800c5d8:	440a      	add	r2, r1
 800c5da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800c5de:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800c5e2:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800c5e4:	69fb      	ldr	r3, [r7, #28]
 800c5e6:	015a      	lsls	r2, r3, #5
 800c5e8:	6a3b      	ldr	r3, [r7, #32]
 800c5ea:	4413      	add	r3, r2
 800c5ec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c5f0:	68db      	ldr	r3, [r3, #12]
 800c5f2:	69fa      	ldr	r2, [r7, #28]
 800c5f4:	0151      	lsls	r1, r2, #5
 800c5f6:	6a3a      	ldr	r2, [r7, #32]
 800c5f8:	440a      	add	r2, r1
 800c5fa:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c5fe:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800c602:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	79db      	ldrb	r3, [r3, #7]
 800c608:	2b01      	cmp	r3, #1
 800c60a:	d123      	bne.n	800c654 <USB_HC_StartXfer+0x2dc>
 800c60c:	68bb      	ldr	r3, [r7, #8]
 800c60e:	78db      	ldrb	r3, [r3, #3]
 800c610:	2b00      	cmp	r3, #0
 800c612:	d11f      	bne.n	800c654 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800c614:	69fb      	ldr	r3, [r7, #28]
 800c616:	015a      	lsls	r2, r3, #5
 800c618:	6a3b      	ldr	r3, [r7, #32]
 800c61a:	4413      	add	r3, r2
 800c61c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c620:	685b      	ldr	r3, [r3, #4]
 800c622:	69fa      	ldr	r2, [r7, #28]
 800c624:	0151      	lsls	r1, r2, #5
 800c626:	6a3a      	ldr	r2, [r7, #32]
 800c628:	440a      	add	r2, r1
 800c62a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c62e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c632:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800c634:	69fb      	ldr	r3, [r7, #28]
 800c636:	015a      	lsls	r2, r3, #5
 800c638:	6a3b      	ldr	r3, [r7, #32]
 800c63a:	4413      	add	r3, r2
 800c63c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c640:	68db      	ldr	r3, [r3, #12]
 800c642:	69fa      	ldr	r2, [r7, #28]
 800c644:	0151      	lsls	r1, r2, #5
 800c646:	6a3a      	ldr	r2, [r7, #32]
 800c648:	440a      	add	r2, r1
 800c64a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c64e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c652:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800c654:	68bb      	ldr	r3, [r7, #8]
 800c656:	7c9b      	ldrb	r3, [r3, #18]
 800c658:	2b01      	cmp	r3, #1
 800c65a:	d003      	beq.n	800c664 <USB_HC_StartXfer+0x2ec>
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	7c9b      	ldrb	r3, [r3, #18]
 800c660:	2b03      	cmp	r3, #3
 800c662:	d117      	bne.n	800c694 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800c664:	68bb      	ldr	r3, [r7, #8]
 800c666:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800c668:	2b01      	cmp	r3, #1
 800c66a:	d113      	bne.n	800c694 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800c66c:	68bb      	ldr	r3, [r7, #8]
 800c66e:	78db      	ldrb	r3, [r3, #3]
 800c670:	2b01      	cmp	r3, #1
 800c672:	d10f      	bne.n	800c694 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800c674:	69fb      	ldr	r3, [r7, #28]
 800c676:	015a      	lsls	r2, r3, #5
 800c678:	6a3b      	ldr	r3, [r7, #32]
 800c67a:	4413      	add	r3, r2
 800c67c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c680:	685b      	ldr	r3, [r3, #4]
 800c682:	69fa      	ldr	r2, [r7, #28]
 800c684:	0151      	lsls	r1, r2, #5
 800c686:	6a3a      	ldr	r2, [r7, #32]
 800c688:	440a      	add	r2, r1
 800c68a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c68e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c692:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800c694:	68bb      	ldr	r3, [r7, #8]
 800c696:	7c9b      	ldrb	r3, [r3, #18]
 800c698:	2b01      	cmp	r3, #1
 800c69a:	d162      	bne.n	800c762 <USB_HC_StartXfer+0x3ea>
 800c69c:	68bb      	ldr	r3, [r7, #8]
 800c69e:	78db      	ldrb	r3, [r3, #3]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d15e      	bne.n	800c762 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800c6a4:	68bb      	ldr	r3, [r7, #8]
 800c6a6:	68db      	ldr	r3, [r3, #12]
 800c6a8:	3b01      	subs	r3, #1
 800c6aa:	2b03      	cmp	r3, #3
 800c6ac:	d858      	bhi.n	800c760 <USB_HC_StartXfer+0x3e8>
 800c6ae:	a201      	add	r2, pc, #4	@ (adr r2, 800c6b4 <USB_HC_StartXfer+0x33c>)
 800c6b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6b4:	0800c6c5 	.word	0x0800c6c5
 800c6b8:	0800c6e7 	.word	0x0800c6e7
 800c6bc:	0800c709 	.word	0x0800c709
 800c6c0:	0800c72b 	.word	0x0800c72b
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800c6c4:	69fb      	ldr	r3, [r7, #28]
 800c6c6:	015a      	lsls	r2, r3, #5
 800c6c8:	6a3b      	ldr	r3, [r7, #32]
 800c6ca:	4413      	add	r3, r2
 800c6cc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c6d0:	685b      	ldr	r3, [r3, #4]
 800c6d2:	69fa      	ldr	r2, [r7, #28]
 800c6d4:	0151      	lsls	r1, r2, #5
 800c6d6:	6a3a      	ldr	r2, [r7, #32]
 800c6d8:	440a      	add	r2, r1
 800c6da:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c6de:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c6e2:	6053      	str	r3, [r2, #4]
          break;
 800c6e4:	e03d      	b.n	800c762 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800c6e6:	69fb      	ldr	r3, [r7, #28]
 800c6e8:	015a      	lsls	r2, r3, #5
 800c6ea:	6a3b      	ldr	r3, [r7, #32]
 800c6ec:	4413      	add	r3, r2
 800c6ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c6f2:	685b      	ldr	r3, [r3, #4]
 800c6f4:	69fa      	ldr	r2, [r7, #28]
 800c6f6:	0151      	lsls	r1, r2, #5
 800c6f8:	6a3a      	ldr	r2, [r7, #32]
 800c6fa:	440a      	add	r2, r1
 800c6fc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c700:	f043 030e 	orr.w	r3, r3, #14
 800c704:	6053      	str	r3, [r2, #4]
          break;
 800c706:	e02c      	b.n	800c762 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800c708:	69fb      	ldr	r3, [r7, #28]
 800c70a:	015a      	lsls	r2, r3, #5
 800c70c:	6a3b      	ldr	r3, [r7, #32]
 800c70e:	4413      	add	r3, r2
 800c710:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c714:	685b      	ldr	r3, [r3, #4]
 800c716:	69fa      	ldr	r2, [r7, #28]
 800c718:	0151      	lsls	r1, r2, #5
 800c71a:	6a3a      	ldr	r2, [r7, #32]
 800c71c:	440a      	add	r2, r1
 800c71e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c722:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c726:	6053      	str	r3, [r2, #4]
          break;
 800c728:	e01b      	b.n	800c762 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800c72a:	69fb      	ldr	r3, [r7, #28]
 800c72c:	015a      	lsls	r2, r3, #5
 800c72e:	6a3b      	ldr	r3, [r7, #32]
 800c730:	4413      	add	r3, r2
 800c732:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c736:	685b      	ldr	r3, [r3, #4]
 800c738:	69fa      	ldr	r2, [r7, #28]
 800c73a:	0151      	lsls	r1, r2, #5
 800c73c:	6a3a      	ldr	r2, [r7, #32]
 800c73e:	440a      	add	r2, r1
 800c740:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c744:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800c748:	6053      	str	r3, [r2, #4]
          break;
 800c74a:	e00a      	b.n	800c762 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800c74c:	69fb      	ldr	r3, [r7, #28]
 800c74e:	015a      	lsls	r2, r3, #5
 800c750:	6a3b      	ldr	r3, [r7, #32]
 800c752:	4413      	add	r3, r2
 800c754:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c758:	461a      	mov	r2, r3
 800c75a:	2300      	movs	r3, #0
 800c75c:	6053      	str	r3, [r2, #4]
 800c75e:	e000      	b.n	800c762 <USB_HC_StartXfer+0x3ea>
          break;
 800c760:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800c762:	69fb      	ldr	r3, [r7, #28]
 800c764:	015a      	lsls	r2, r3, #5
 800c766:	6a3b      	ldr	r3, [r7, #32]
 800c768:	4413      	add	r3, r2
 800c76a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800c772:	693b      	ldr	r3, [r7, #16]
 800c774:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800c778:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800c77a:	68bb      	ldr	r3, [r7, #8]
 800c77c:	78db      	ldrb	r3, [r3, #3]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d004      	beq.n	800c78c <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800c782:	693b      	ldr	r3, [r7, #16]
 800c784:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800c788:	613b      	str	r3, [r7, #16]
 800c78a:	e003      	b.n	800c794 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800c792:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800c794:	693b      	ldr	r3, [r7, #16]
 800c796:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c79a:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800c79c:	69fb      	ldr	r3, [r7, #28]
 800c79e:	015a      	lsls	r2, r3, #5
 800c7a0:	6a3b      	ldr	r3, [r7, #32]
 800c7a2:	4413      	add	r3, r2
 800c7a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c7a8:	461a      	mov	r2, r3
 800c7aa:	693b      	ldr	r3, [r7, #16]
 800c7ac:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800c7ae:	79fb      	ldrb	r3, [r7, #7]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d003      	beq.n	800c7bc <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	e055      	b.n	800c864 <USB_HC_StartXfer+0x4ec>
 800c7b8:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800c7bc:	68bb      	ldr	r3, [r7, #8]
 800c7be:	78db      	ldrb	r3, [r3, #3]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d14e      	bne.n	800c862 <USB_HC_StartXfer+0x4ea>
 800c7c4:	68bb      	ldr	r3, [r7, #8]
 800c7c6:	6a1b      	ldr	r3, [r3, #32]
 800c7c8:	2b00      	cmp	r3, #0
 800c7ca:	d04a      	beq.n	800c862 <USB_HC_StartXfer+0x4ea>
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	79db      	ldrb	r3, [r3, #7]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d146      	bne.n	800c862 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800c7d4:	68bb      	ldr	r3, [r7, #8]
 800c7d6:	7c9b      	ldrb	r3, [r3, #18]
 800c7d8:	2b03      	cmp	r3, #3
 800c7da:	d831      	bhi.n	800c840 <USB_HC_StartXfer+0x4c8>
 800c7dc:	a201      	add	r2, pc, #4	@ (adr r2, 800c7e4 <USB_HC_StartXfer+0x46c>)
 800c7de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7e2:	bf00      	nop
 800c7e4:	0800c7f5 	.word	0x0800c7f5
 800c7e8:	0800c819 	.word	0x0800c819
 800c7ec:	0800c7f5 	.word	0x0800c7f5
 800c7f0:	0800c819 	.word	0x0800c819
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c7f4:	68bb      	ldr	r3, [r7, #8]
 800c7f6:	6a1b      	ldr	r3, [r3, #32]
 800c7f8:	3303      	adds	r3, #3
 800c7fa:	089b      	lsrs	r3, r3, #2
 800c7fc:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800c7fe:	8afa      	ldrh	r2, [r7, #22]
 800c800:	68fb      	ldr	r3, [r7, #12]
 800c802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c804:	b29b      	uxth	r3, r3
 800c806:	429a      	cmp	r2, r3
 800c808:	d91c      	bls.n	800c844 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800c80a:	68fb      	ldr	r3, [r7, #12]
 800c80c:	699b      	ldr	r3, [r3, #24]
 800c80e:	f043 0220 	orr.w	r2, r3, #32
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	619a      	str	r2, [r3, #24]
        }
        break;
 800c816:	e015      	b.n	800c844 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	6a1b      	ldr	r3, [r3, #32]
 800c81c:	3303      	adds	r3, #3
 800c81e:	089b      	lsrs	r3, r3, #2
 800c820:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800c822:	8afa      	ldrh	r2, [r7, #22]
 800c824:	6a3b      	ldr	r3, [r7, #32]
 800c826:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c82a:	691b      	ldr	r3, [r3, #16]
 800c82c:	b29b      	uxth	r3, r3
 800c82e:	429a      	cmp	r2, r3
 800c830:	d90a      	bls.n	800c848 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	699b      	ldr	r3, [r3, #24]
 800c836:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	619a      	str	r2, [r3, #24]
        }
        break;
 800c83e:	e003      	b.n	800c848 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800c840:	bf00      	nop
 800c842:	e002      	b.n	800c84a <USB_HC_StartXfer+0x4d2>
        break;
 800c844:	bf00      	nop
 800c846:	e000      	b.n	800c84a <USB_HC_StartXfer+0x4d2>
        break;
 800c848:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	6999      	ldr	r1, [r3, #24]
 800c84e:	68bb      	ldr	r3, [r7, #8]
 800c850:	785a      	ldrb	r2, [r3, #1]
 800c852:	68bb      	ldr	r3, [r7, #8]
 800c854:	6a1b      	ldr	r3, [r3, #32]
 800c856:	b29b      	uxth	r3, r3
 800c858:	2000      	movs	r0, #0
 800c85a:	9000      	str	r0, [sp, #0]
 800c85c:	68f8      	ldr	r0, [r7, #12]
 800c85e:	f7ff f9ca 	bl	800bbf6 <USB_WritePacket>
  }

  return HAL_OK;
 800c862:	2300      	movs	r3, #0
}
 800c864:	4618      	mov	r0, r3
 800c866:	3728      	adds	r7, #40	@ 0x28
 800c868:	46bd      	mov	sp, r7
 800c86a:	bd80      	pop	{r7, pc}

0800c86c <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800c86c:	b480      	push	{r7}
 800c86e:	b085      	sub	sp, #20
 800c870:	af00      	add	r7, sp, #0
 800c872:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800c878:	68fb      	ldr	r3, [r7, #12]
 800c87a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800c87e:	695b      	ldr	r3, [r3, #20]
 800c880:	b29b      	uxth	r3, r3
}
 800c882:	4618      	mov	r0, r3
 800c884:	3714      	adds	r7, #20
 800c886:	46bd      	mov	sp, r7
 800c888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c88c:	4770      	bx	lr

0800c88e <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800c88e:	b480      	push	{r7}
 800c890:	b089      	sub	sp, #36	@ 0x24
 800c892:	af00      	add	r7, sp, #0
 800c894:	6078      	str	r0, [r7, #4]
 800c896:	460b      	mov	r3, r1
 800c898:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800c89a:	687b      	ldr	r3, [r7, #4]
 800c89c:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800c89e:	78fb      	ldrb	r3, [r7, #3]
 800c8a0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800c8a6:	69bb      	ldr	r3, [r7, #24]
 800c8a8:	015a      	lsls	r2, r3, #5
 800c8aa:	69fb      	ldr	r3, [r7, #28]
 800c8ac:	4413      	add	r3, r2
 800c8ae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	0c9b      	lsrs	r3, r3, #18
 800c8b6:	f003 0303 	and.w	r3, r3, #3
 800c8ba:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800c8bc:	69bb      	ldr	r3, [r7, #24]
 800c8be:	015a      	lsls	r2, r3, #5
 800c8c0:	69fb      	ldr	r3, [r7, #28]
 800c8c2:	4413      	add	r3, r2
 800c8c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	0fdb      	lsrs	r3, r3, #31
 800c8cc:	f003 0301 	and.w	r3, r3, #1
 800c8d0:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800c8d2:	69bb      	ldr	r3, [r7, #24]
 800c8d4:	015a      	lsls	r2, r3, #5
 800c8d6:	69fb      	ldr	r3, [r7, #28]
 800c8d8:	4413      	add	r3, r2
 800c8da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c8de:	685b      	ldr	r3, [r3, #4]
 800c8e0:	0fdb      	lsrs	r3, r3, #31
 800c8e2:	f003 0301 	and.w	r3, r3, #1
 800c8e6:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	689b      	ldr	r3, [r3, #8]
 800c8ec:	f003 0320 	and.w	r3, r3, #32
 800c8f0:	2b20      	cmp	r3, #32
 800c8f2:	d10d      	bne.n	800c910 <USB_HC_Halt+0x82>
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d10a      	bne.n	800c910 <USB_HC_Halt+0x82>
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d005      	beq.n	800c90c <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800c900:	697b      	ldr	r3, [r7, #20]
 800c902:	2b01      	cmp	r3, #1
 800c904:	d002      	beq.n	800c90c <USB_HC_Halt+0x7e>
 800c906:	697b      	ldr	r3, [r7, #20]
 800c908:	2b03      	cmp	r3, #3
 800c90a:	d101      	bne.n	800c910 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800c90c:	2300      	movs	r3, #0
 800c90e:	e0d8      	b.n	800cac2 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800c910:	697b      	ldr	r3, [r7, #20]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d002      	beq.n	800c91c <USB_HC_Halt+0x8e>
 800c916:	697b      	ldr	r3, [r7, #20]
 800c918:	2b02      	cmp	r3, #2
 800c91a:	d173      	bne.n	800ca04 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800c91c:	69bb      	ldr	r3, [r7, #24]
 800c91e:	015a      	lsls	r2, r3, #5
 800c920:	69fb      	ldr	r3, [r7, #28]
 800c922:	4413      	add	r3, r2
 800c924:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	69ba      	ldr	r2, [r7, #24]
 800c92c:	0151      	lsls	r1, r2, #5
 800c92e:	69fa      	ldr	r2, [r7, #28]
 800c930:	440a      	add	r2, r1
 800c932:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c936:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c93a:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	689b      	ldr	r3, [r3, #8]
 800c940:	f003 0320 	and.w	r3, r3, #32
 800c944:	2b00      	cmp	r3, #0
 800c946:	d14a      	bne.n	800c9de <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c94c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c950:	2b00      	cmp	r3, #0
 800c952:	d133      	bne.n	800c9bc <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800c954:	69bb      	ldr	r3, [r7, #24]
 800c956:	015a      	lsls	r2, r3, #5
 800c958:	69fb      	ldr	r3, [r7, #28]
 800c95a:	4413      	add	r3, r2
 800c95c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c960:	681b      	ldr	r3, [r3, #0]
 800c962:	69ba      	ldr	r2, [r7, #24]
 800c964:	0151      	lsls	r1, r2, #5
 800c966:	69fa      	ldr	r2, [r7, #28]
 800c968:	440a      	add	r2, r1
 800c96a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c96e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c972:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c974:	69bb      	ldr	r3, [r7, #24]
 800c976:	015a      	lsls	r2, r3, #5
 800c978:	69fb      	ldr	r3, [r7, #28]
 800c97a:	4413      	add	r3, r2
 800c97c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	69ba      	ldr	r2, [r7, #24]
 800c984:	0151      	lsls	r1, r2, #5
 800c986:	69fa      	ldr	r2, [r7, #28]
 800c988:	440a      	add	r2, r1
 800c98a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c98e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c992:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800c994:	68bb      	ldr	r3, [r7, #8]
 800c996:	3301      	adds	r3, #1
 800c998:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800c99a:	68bb      	ldr	r3, [r7, #8]
 800c99c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800c9a0:	d82e      	bhi.n	800ca00 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800c9a2:	69bb      	ldr	r3, [r7, #24]
 800c9a4:	015a      	lsls	r2, r3, #5
 800c9a6:	69fb      	ldr	r3, [r7, #28]
 800c9a8:	4413      	add	r3, r2
 800c9aa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c9ae:	681b      	ldr	r3, [r3, #0]
 800c9b0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800c9b4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800c9b8:	d0ec      	beq.n	800c994 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c9ba:	e081      	b.n	800cac0 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c9bc:	69bb      	ldr	r3, [r7, #24]
 800c9be:	015a      	lsls	r2, r3, #5
 800c9c0:	69fb      	ldr	r3, [r7, #28]
 800c9c2:	4413      	add	r3, r2
 800c9c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c9c8:	681b      	ldr	r3, [r3, #0]
 800c9ca:	69ba      	ldr	r2, [r7, #24]
 800c9cc:	0151      	lsls	r1, r2, #5
 800c9ce:	69fa      	ldr	r2, [r7, #28]
 800c9d0:	440a      	add	r2, r1
 800c9d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c9d6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c9da:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c9dc:	e070      	b.n	800cac0 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800c9de:	69bb      	ldr	r3, [r7, #24]
 800c9e0:	015a      	lsls	r2, r3, #5
 800c9e2:	69fb      	ldr	r3, [r7, #28]
 800c9e4:	4413      	add	r3, r2
 800c9e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	69ba      	ldr	r2, [r7, #24]
 800c9ee:	0151      	lsls	r1, r2, #5
 800c9f0:	69fa      	ldr	r2, [r7, #28]
 800c9f2:	440a      	add	r2, r1
 800c9f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800c9f8:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c9fc:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800c9fe:	e05f      	b.n	800cac0 <USB_HC_Halt+0x232>
            break;
 800ca00:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800ca02:	e05d      	b.n	800cac0 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800ca04:	69bb      	ldr	r3, [r7, #24]
 800ca06:	015a      	lsls	r2, r3, #5
 800ca08:	69fb      	ldr	r3, [r7, #28]
 800ca0a:	4413      	add	r3, r2
 800ca0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	69ba      	ldr	r2, [r7, #24]
 800ca14:	0151      	lsls	r1, r2, #5
 800ca16:	69fa      	ldr	r2, [r7, #28]
 800ca18:	440a      	add	r2, r1
 800ca1a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ca1e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800ca22:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800ca24:	69fb      	ldr	r3, [r7, #28]
 800ca26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800ca2a:	691b      	ldr	r3, [r3, #16]
 800ca2c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d133      	bne.n	800ca9c <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800ca34:	69bb      	ldr	r3, [r7, #24]
 800ca36:	015a      	lsls	r2, r3, #5
 800ca38:	69fb      	ldr	r3, [r7, #28]
 800ca3a:	4413      	add	r3, r2
 800ca3c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	69ba      	ldr	r2, [r7, #24]
 800ca44:	0151      	lsls	r1, r2, #5
 800ca46:	69fa      	ldr	r2, [r7, #28]
 800ca48:	440a      	add	r2, r1
 800ca4a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ca4e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ca52:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ca54:	69bb      	ldr	r3, [r7, #24]
 800ca56:	015a      	lsls	r2, r3, #5
 800ca58:	69fb      	ldr	r3, [r7, #28]
 800ca5a:	4413      	add	r3, r2
 800ca5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	69ba      	ldr	r2, [r7, #24]
 800ca64:	0151      	lsls	r1, r2, #5
 800ca66:	69fa      	ldr	r2, [r7, #28]
 800ca68:	440a      	add	r2, r1
 800ca6a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800ca6e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800ca72:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800ca74:	68bb      	ldr	r3, [r7, #8]
 800ca76:	3301      	adds	r3, #1
 800ca78:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800ca7a:	68bb      	ldr	r3, [r7, #8]
 800ca7c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ca80:	d81d      	bhi.n	800cabe <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800ca82:	69bb      	ldr	r3, [r7, #24]
 800ca84:	015a      	lsls	r2, r3, #5
 800ca86:	69fb      	ldr	r3, [r7, #28]
 800ca88:	4413      	add	r3, r2
 800ca8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800ca94:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800ca98:	d0ec      	beq.n	800ca74 <USB_HC_Halt+0x1e6>
 800ca9a:	e011      	b.n	800cac0 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800ca9c:	69bb      	ldr	r3, [r7, #24]
 800ca9e:	015a      	lsls	r2, r3, #5
 800caa0:	69fb      	ldr	r3, [r7, #28]
 800caa2:	4413      	add	r3, r2
 800caa4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	69ba      	ldr	r2, [r7, #24]
 800caac:	0151      	lsls	r1, r2, #5
 800caae:	69fa      	ldr	r2, [r7, #28]
 800cab0:	440a      	add	r2, r1
 800cab2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cab6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800caba:	6013      	str	r3, [r2, #0]
 800cabc:	e000      	b.n	800cac0 <USB_HC_Halt+0x232>
          break;
 800cabe:	bf00      	nop
    }
  }

  return HAL_OK;
 800cac0:	2300      	movs	r3, #0
}
 800cac2:	4618      	mov	r0, r3
 800cac4:	3724      	adds	r7, #36	@ 0x24
 800cac6:	46bd      	mov	sp, r7
 800cac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cacc:	4770      	bx	lr
	...

0800cad0 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800cad0:	b480      	push	{r7}
 800cad2:	b087      	sub	sp, #28
 800cad4:	af00      	add	r7, sp, #0
 800cad6:	6078      	str	r0, [r7, #4]
 800cad8:	460b      	mov	r3, r1
 800cada:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800cae0:	78fb      	ldrb	r3, [r7, #3]
 800cae2:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800cae4:	2301      	movs	r3, #1
 800cae6:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800cae8:	68fb      	ldr	r3, [r7, #12]
 800caea:	04da      	lsls	r2, r3, #19
 800caec:	4b15      	ldr	r3, [pc, #84]	@ (800cb44 <USB_DoPing+0x74>)
 800caee:	4013      	ands	r3, r2
 800caf0:	693a      	ldr	r2, [r7, #16]
 800caf2:	0151      	lsls	r1, r2, #5
 800caf4:	697a      	ldr	r2, [r7, #20]
 800caf6:	440a      	add	r2, r1
 800caf8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800cafc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cb00:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	015a      	lsls	r2, r3, #5
 800cb06:	697b      	ldr	r3, [r7, #20]
 800cb08:	4413      	add	r3, r2
 800cb0a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800cb18:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800cb1a:	68bb      	ldr	r3, [r7, #8]
 800cb1c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cb20:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	015a      	lsls	r2, r3, #5
 800cb26:	697b      	ldr	r3, [r7, #20]
 800cb28:	4413      	add	r3, r2
 800cb2a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cb2e:	461a      	mov	r2, r3
 800cb30:	68bb      	ldr	r3, [r7, #8]
 800cb32:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800cb34:	2300      	movs	r3, #0
}
 800cb36:	4618      	mov	r0, r3
 800cb38:	371c      	adds	r7, #28
 800cb3a:	46bd      	mov	sp, r7
 800cb3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb40:	4770      	bx	lr
 800cb42:	bf00      	nop
 800cb44:	1ff80000 	.word	0x1ff80000

0800cb48 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b088      	sub	sp, #32
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800cb50:	2300      	movs	r3, #0
 800cb52:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800cb58:	2300      	movs	r3, #0
 800cb5a:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f7fe ff8d 	bl	800ba7c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800cb62:	2110      	movs	r1, #16
 800cb64:	6878      	ldr	r0, [r7, #4]
 800cb66:	f7fe ffe6 	bl	800bb36 <USB_FlushTxFifo>
 800cb6a:	4603      	mov	r3, r0
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	d001      	beq.n	800cb74 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800cb70:	2301      	movs	r3, #1
 800cb72:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f7ff f810 	bl	800bb9a <USB_FlushRxFifo>
 800cb7a:	4603      	mov	r3, r0
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d001      	beq.n	800cb84 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800cb80:	2301      	movs	r3, #1
 800cb82:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800cb84:	2300      	movs	r3, #0
 800cb86:	61bb      	str	r3, [r7, #24]
 800cb88:	e01f      	b.n	800cbca <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800cb8a:	69bb      	ldr	r3, [r7, #24]
 800cb8c:	015a      	lsls	r2, r3, #5
 800cb8e:	697b      	ldr	r3, [r7, #20]
 800cb90:	4413      	add	r3, r2
 800cb92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cb96:	681b      	ldr	r3, [r3, #0]
 800cb98:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cba0:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800cba2:	693b      	ldr	r3, [r7, #16]
 800cba4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800cba8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cbaa:	693b      	ldr	r3, [r7, #16]
 800cbac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800cbb0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800cbb2:	69bb      	ldr	r3, [r7, #24]
 800cbb4:	015a      	lsls	r2, r3, #5
 800cbb6:	697b      	ldr	r3, [r7, #20]
 800cbb8:	4413      	add	r3, r2
 800cbba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cbbe:	461a      	mov	r2, r3
 800cbc0:	693b      	ldr	r3, [r7, #16]
 800cbc2:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800cbc4:	69bb      	ldr	r3, [r7, #24]
 800cbc6:	3301      	adds	r3, #1
 800cbc8:	61bb      	str	r3, [r7, #24]
 800cbca:	69bb      	ldr	r3, [r7, #24]
 800cbcc:	2b0f      	cmp	r3, #15
 800cbce:	d9dc      	bls.n	800cb8a <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800cbd0:	2300      	movs	r3, #0
 800cbd2:	61bb      	str	r3, [r7, #24]
 800cbd4:	e034      	b.n	800cc40 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800cbd6:	69bb      	ldr	r3, [r7, #24]
 800cbd8:	015a      	lsls	r2, r3, #5
 800cbda:	697b      	ldr	r3, [r7, #20]
 800cbdc:	4413      	add	r3, r2
 800cbde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cbe2:	681b      	ldr	r3, [r3, #0]
 800cbe4:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800cbe6:	693b      	ldr	r3, [r7, #16]
 800cbe8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800cbec:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800cbee:	693b      	ldr	r3, [r7, #16]
 800cbf0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800cbf4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800cbf6:	693b      	ldr	r3, [r7, #16]
 800cbf8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800cbfc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800cbfe:	69bb      	ldr	r3, [r7, #24]
 800cc00:	015a      	lsls	r2, r3, #5
 800cc02:	697b      	ldr	r3, [r7, #20]
 800cc04:	4413      	add	r3, r2
 800cc06:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cc0a:	461a      	mov	r2, r3
 800cc0c:	693b      	ldr	r3, [r7, #16]
 800cc0e:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	3301      	adds	r3, #1
 800cc14:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800cc16:	68fb      	ldr	r3, [r7, #12]
 800cc18:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cc1c:	d80c      	bhi.n	800cc38 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800cc1e:	69bb      	ldr	r3, [r7, #24]
 800cc20:	015a      	lsls	r2, r3, #5
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	4413      	add	r3, r2
 800cc26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800cc30:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800cc34:	d0ec      	beq.n	800cc10 <USB_StopHost+0xc8>
 800cc36:	e000      	b.n	800cc3a <USB_StopHost+0xf2>
        break;
 800cc38:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800cc3a:	69bb      	ldr	r3, [r7, #24]
 800cc3c:	3301      	adds	r3, #1
 800cc3e:	61bb      	str	r3, [r7, #24]
 800cc40:	69bb      	ldr	r3, [r7, #24]
 800cc42:	2b0f      	cmp	r3, #15
 800cc44:	d9c7      	bls.n	800cbd6 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800cc46:	697b      	ldr	r3, [r7, #20]
 800cc48:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800cc4c:	461a      	mov	r2, r3
 800cc4e:	f04f 33ff 	mov.w	r3, #4294967295
 800cc52:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	f04f 32ff 	mov.w	r2, #4294967295
 800cc5a:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800cc5c:	6878      	ldr	r0, [r7, #4]
 800cc5e:	f7fe fefc 	bl	800ba5a <USB_EnableGlobalInt>

  return ret;
 800cc62:	7ffb      	ldrb	r3, [r7, #31]
}
 800cc64:	4618      	mov	r0, r3
 800cc66:	3720      	adds	r7, #32
 800cc68:	46bd      	mov	sp, r7
 800cc6a:	bd80      	pop	{r7, pc}

0800cc6c <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800cc6c:	b590      	push	{r4, r7, lr}
 800cc6e:	b089      	sub	sp, #36	@ 0x24
 800cc70:	af04      	add	r7, sp, #16
 800cc72:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800cc74:	2301      	movs	r3, #1
 800cc76:	2202      	movs	r2, #2
 800cc78:	2102      	movs	r1, #2
 800cc7a:	6878      	ldr	r0, [r7, #4]
 800cc7c:	f000 fc85 	bl	800d58a <USBH_FindInterface>
 800cc80:	4603      	mov	r3, r0
 800cc82:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800cc84:	7bfb      	ldrb	r3, [r7, #15]
 800cc86:	2bff      	cmp	r3, #255	@ 0xff
 800cc88:	d002      	beq.n	800cc90 <USBH_CDC_InterfaceInit+0x24>
 800cc8a:	7bfb      	ldrb	r3, [r7, #15]
 800cc8c:	2b01      	cmp	r3, #1
 800cc8e:	d901      	bls.n	800cc94 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800cc90:	2302      	movs	r3, #2
 800cc92:	e13d      	b.n	800cf10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800cc94:	7bfb      	ldrb	r3, [r7, #15]
 800cc96:	4619      	mov	r1, r3
 800cc98:	6878      	ldr	r0, [r7, #4]
 800cc9a:	f000 fc5a 	bl	800d552 <USBH_SelectInterface>
 800cc9e:	4603      	mov	r3, r0
 800cca0:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800cca2:	7bbb      	ldrb	r3, [r7, #14]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d001      	beq.n	800ccac <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800cca8:	2302      	movs	r3, #2
 800ccaa:	e131      	b.n	800cf10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800ccac:	687b      	ldr	r3, [r7, #4]
 800ccae:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800ccb2:	2050      	movs	r0, #80	@ 0x50
 800ccb4:	f002 fb40 	bl	800f338 <malloc>
 800ccb8:	4603      	mov	r3, r0
 800ccba:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ccc2:	69db      	ldr	r3, [r3, #28]
 800ccc4:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800ccc6:	68bb      	ldr	r3, [r7, #8]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d101      	bne.n	800ccd0 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800cccc:	2302      	movs	r3, #2
 800ccce:	e11f      	b.n	800cf10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800ccd0:	2250      	movs	r2, #80	@ 0x50
 800ccd2:	2100      	movs	r1, #0
 800ccd4:	68b8      	ldr	r0, [r7, #8]
 800ccd6:	f002 fde5 	bl	800f8a4 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800ccda:	7bfb      	ldrb	r3, [r7, #15]
 800ccdc:	687a      	ldr	r2, [r7, #4]
 800ccde:	211a      	movs	r1, #26
 800cce0:	fb01 f303 	mul.w	r3, r1, r3
 800cce4:	4413      	add	r3, r2
 800cce6:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800ccea:	781b      	ldrb	r3, [r3, #0]
 800ccec:	b25b      	sxtb	r3, r3
 800ccee:	2b00      	cmp	r3, #0
 800ccf0:	da15      	bge.n	800cd1e <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800ccf2:	7bfb      	ldrb	r3, [r7, #15]
 800ccf4:	687a      	ldr	r2, [r7, #4]
 800ccf6:	211a      	movs	r1, #26
 800ccf8:	fb01 f303 	mul.w	r3, r1, r3
 800ccfc:	4413      	add	r3, r2
 800ccfe:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800cd02:	781a      	ldrb	r2, [r3, #0]
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800cd08:	7bfb      	ldrb	r3, [r7, #15]
 800cd0a:	687a      	ldr	r2, [r7, #4]
 800cd0c:	211a      	movs	r1, #26
 800cd0e:	fb01 f303 	mul.w	r3, r1, r3
 800cd12:	4413      	add	r3, r2
 800cd14:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800cd18:	881a      	ldrh	r2, [r3, #0]
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800cd1e:	68bb      	ldr	r3, [r7, #8]
 800cd20:	785b      	ldrb	r3, [r3, #1]
 800cd22:	4619      	mov	r1, r3
 800cd24:	6878      	ldr	r0, [r7, #4]
 800cd26:	f001 ffbe 	bl	800eca6 <USBH_AllocPipe>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	461a      	mov	r2, r3
 800cd2e:	68bb      	ldr	r3, [r7, #8]
 800cd30:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	7819      	ldrb	r1, [r3, #0]
 800cd36:	68bb      	ldr	r3, [r7, #8]
 800cd38:	7858      	ldrb	r0, [r3, #1]
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800cd46:	68ba      	ldr	r2, [r7, #8]
 800cd48:	8952      	ldrh	r2, [r2, #10]
 800cd4a:	9202      	str	r2, [sp, #8]
 800cd4c:	2203      	movs	r2, #3
 800cd4e:	9201      	str	r2, [sp, #4]
 800cd50:	9300      	str	r3, [sp, #0]
 800cd52:	4623      	mov	r3, r4
 800cd54:	4602      	mov	r2, r0
 800cd56:	6878      	ldr	r0, [r7, #4]
 800cd58:	f001 ff76 	bl	800ec48 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800cd5c:	68bb      	ldr	r3, [r7, #8]
 800cd5e:	781b      	ldrb	r3, [r3, #0]
 800cd60:	2200      	movs	r2, #0
 800cd62:	4619      	mov	r1, r3
 800cd64:	6878      	ldr	r0, [r7, #4]
 800cd66:	f002 fa7c 	bl	800f262 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800cd6a:	2300      	movs	r3, #0
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	210a      	movs	r1, #10
 800cd70:	6878      	ldr	r0, [r7, #4]
 800cd72:	f000 fc0a 	bl	800d58a <USBH_FindInterface>
 800cd76:	4603      	mov	r3, r0
 800cd78:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800cd7a:	7bfb      	ldrb	r3, [r7, #15]
 800cd7c:	2bff      	cmp	r3, #255	@ 0xff
 800cd7e:	d002      	beq.n	800cd86 <USBH_CDC_InterfaceInit+0x11a>
 800cd80:	7bfb      	ldrb	r3, [r7, #15]
 800cd82:	2b01      	cmp	r3, #1
 800cd84:	d901      	bls.n	800cd8a <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800cd86:	2302      	movs	r3, #2
 800cd88:	e0c2      	b.n	800cf10 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800cd8a:	7bfb      	ldrb	r3, [r7, #15]
 800cd8c:	687a      	ldr	r2, [r7, #4]
 800cd8e:	211a      	movs	r1, #26
 800cd90:	fb01 f303 	mul.w	r3, r1, r3
 800cd94:	4413      	add	r3, r2
 800cd96:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800cd9a:	781b      	ldrb	r3, [r3, #0]
 800cd9c:	b25b      	sxtb	r3, r3
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	da16      	bge.n	800cdd0 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800cda2:	7bfb      	ldrb	r3, [r7, #15]
 800cda4:	687a      	ldr	r2, [r7, #4]
 800cda6:	211a      	movs	r1, #26
 800cda8:	fb01 f303 	mul.w	r3, r1, r3
 800cdac:	4413      	add	r3, r2
 800cdae:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800cdb2:	781a      	ldrb	r2, [r3, #0]
 800cdb4:	68bb      	ldr	r3, [r7, #8]
 800cdb6:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800cdb8:	7bfb      	ldrb	r3, [r7, #15]
 800cdba:	687a      	ldr	r2, [r7, #4]
 800cdbc:	211a      	movs	r1, #26
 800cdbe:	fb01 f303 	mul.w	r3, r1, r3
 800cdc2:	4413      	add	r3, r2
 800cdc4:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800cdc8:	881a      	ldrh	r2, [r3, #0]
 800cdca:	68bb      	ldr	r3, [r7, #8]
 800cdcc:	835a      	strh	r2, [r3, #26]
 800cdce:	e015      	b.n	800cdfc <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800cdd0:	7bfb      	ldrb	r3, [r7, #15]
 800cdd2:	687a      	ldr	r2, [r7, #4]
 800cdd4:	211a      	movs	r1, #26
 800cdd6:	fb01 f303 	mul.w	r3, r1, r3
 800cdda:	4413      	add	r3, r2
 800cddc:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800cde0:	781a      	ldrb	r2, [r3, #0]
 800cde2:	68bb      	ldr	r3, [r7, #8]
 800cde4:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800cde6:	7bfb      	ldrb	r3, [r7, #15]
 800cde8:	687a      	ldr	r2, [r7, #4]
 800cdea:	211a      	movs	r1, #26
 800cdec:	fb01 f303 	mul.w	r3, r1, r3
 800cdf0:	4413      	add	r3, r2
 800cdf2:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800cdf6:	881a      	ldrh	r2, [r3, #0]
 800cdf8:	68bb      	ldr	r3, [r7, #8]
 800cdfa:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800cdfc:	7bfb      	ldrb	r3, [r7, #15]
 800cdfe:	687a      	ldr	r2, [r7, #4]
 800ce00:	211a      	movs	r1, #26
 800ce02:	fb01 f303 	mul.w	r3, r1, r3
 800ce06:	4413      	add	r3, r2
 800ce08:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800ce0c:	781b      	ldrb	r3, [r3, #0]
 800ce0e:	b25b      	sxtb	r3, r3
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	da16      	bge.n	800ce42 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ce14:	7bfb      	ldrb	r3, [r7, #15]
 800ce16:	687a      	ldr	r2, [r7, #4]
 800ce18:	211a      	movs	r1, #26
 800ce1a:	fb01 f303 	mul.w	r3, r1, r3
 800ce1e:	4413      	add	r3, r2
 800ce20:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800ce24:	781a      	ldrb	r2, [r3, #0]
 800ce26:	68bb      	ldr	r3, [r7, #8]
 800ce28:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ce2a:	7bfb      	ldrb	r3, [r7, #15]
 800ce2c:	687a      	ldr	r2, [r7, #4]
 800ce2e:	211a      	movs	r1, #26
 800ce30:	fb01 f303 	mul.w	r3, r1, r3
 800ce34:	4413      	add	r3, r2
 800ce36:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800ce3a:	881a      	ldrh	r2, [r3, #0]
 800ce3c:	68bb      	ldr	r3, [r7, #8]
 800ce3e:	835a      	strh	r2, [r3, #26]
 800ce40:	e015      	b.n	800ce6e <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800ce42:	7bfb      	ldrb	r3, [r7, #15]
 800ce44:	687a      	ldr	r2, [r7, #4]
 800ce46:	211a      	movs	r1, #26
 800ce48:	fb01 f303 	mul.w	r3, r1, r3
 800ce4c:	4413      	add	r3, r2
 800ce4e:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800ce52:	781a      	ldrb	r2, [r3, #0]
 800ce54:	68bb      	ldr	r3, [r7, #8]
 800ce56:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800ce58:	7bfb      	ldrb	r3, [r7, #15]
 800ce5a:	687a      	ldr	r2, [r7, #4]
 800ce5c:	211a      	movs	r1, #26
 800ce5e:	fb01 f303 	mul.w	r3, r1, r3
 800ce62:	4413      	add	r3, r2
 800ce64:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800ce68:	881a      	ldrh	r2, [r3, #0]
 800ce6a:	68bb      	ldr	r3, [r7, #8]
 800ce6c:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800ce6e:	68bb      	ldr	r3, [r7, #8]
 800ce70:	7b9b      	ldrb	r3, [r3, #14]
 800ce72:	4619      	mov	r1, r3
 800ce74:	6878      	ldr	r0, [r7, #4]
 800ce76:	f001 ff16 	bl	800eca6 <USBH_AllocPipe>
 800ce7a:	4603      	mov	r3, r0
 800ce7c:	461a      	mov	r2, r3
 800ce7e:	68bb      	ldr	r3, [r7, #8]
 800ce80:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800ce82:	68bb      	ldr	r3, [r7, #8]
 800ce84:	7bdb      	ldrb	r3, [r3, #15]
 800ce86:	4619      	mov	r1, r3
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f001 ff0c 	bl	800eca6 <USBH_AllocPipe>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	461a      	mov	r2, r3
 800ce92:	68bb      	ldr	r3, [r7, #8]
 800ce94:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800ce96:	68bb      	ldr	r3, [r7, #8]
 800ce98:	7b59      	ldrb	r1, [r3, #13]
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	7b98      	ldrb	r0, [r3, #14]
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800cea4:	687b      	ldr	r3, [r7, #4]
 800cea6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ceaa:	68ba      	ldr	r2, [r7, #8]
 800ceac:	8b12      	ldrh	r2, [r2, #24]
 800ceae:	9202      	str	r2, [sp, #8]
 800ceb0:	2202      	movs	r2, #2
 800ceb2:	9201      	str	r2, [sp, #4]
 800ceb4:	9300      	str	r3, [sp, #0]
 800ceb6:	4623      	mov	r3, r4
 800ceb8:	4602      	mov	r2, r0
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f001 fec4 	bl	800ec48 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800cec0:	68bb      	ldr	r3, [r7, #8]
 800cec2:	7b19      	ldrb	r1, [r3, #12]
 800cec4:	68bb      	ldr	r3, [r7, #8]
 800cec6:	7bd8      	ldrb	r0, [r3, #15]
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ced4:	68ba      	ldr	r2, [r7, #8]
 800ced6:	8b52      	ldrh	r2, [r2, #26]
 800ced8:	9202      	str	r2, [sp, #8]
 800ceda:	2202      	movs	r2, #2
 800cedc:	9201      	str	r2, [sp, #4]
 800cede:	9300      	str	r3, [sp, #0]
 800cee0:	4623      	mov	r3, r4
 800cee2:	4602      	mov	r2, r0
 800cee4:	6878      	ldr	r0, [r7, #4]
 800cee6:	f001 feaf 	bl	800ec48 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800ceea:	68bb      	ldr	r3, [r7, #8]
 800ceec:	2200      	movs	r2, #0
 800ceee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800cef2:	68bb      	ldr	r3, [r7, #8]
 800cef4:	7b5b      	ldrb	r3, [r3, #13]
 800cef6:	2200      	movs	r2, #0
 800cef8:	4619      	mov	r1, r3
 800cefa:	6878      	ldr	r0, [r7, #4]
 800cefc:	f002 f9b1 	bl	800f262 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800cf00:	68bb      	ldr	r3, [r7, #8]
 800cf02:	7b1b      	ldrb	r3, [r3, #12]
 800cf04:	2200      	movs	r2, #0
 800cf06:	4619      	mov	r1, r3
 800cf08:	6878      	ldr	r0, [r7, #4]
 800cf0a:	f002 f9aa 	bl	800f262 <USBH_LL_SetToggle>

  return USBH_OK;
 800cf0e:	2300      	movs	r3, #0
}
 800cf10:	4618      	mov	r0, r3
 800cf12:	3714      	adds	r7, #20
 800cf14:	46bd      	mov	sp, r7
 800cf16:	bd90      	pop	{r4, r7, pc}

0800cf18 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800cf18:	b580      	push	{r7, lr}
 800cf1a:	b084      	sub	sp, #16
 800cf1c:	af00      	add	r7, sp, #0
 800cf1e:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cf26:	69db      	ldr	r3, [r3, #28]
 800cf28:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	781b      	ldrb	r3, [r3, #0]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d00e      	beq.n	800cf50 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800cf32:	68fb      	ldr	r3, [r7, #12]
 800cf34:	781b      	ldrb	r3, [r3, #0]
 800cf36:	4619      	mov	r1, r3
 800cf38:	6878      	ldr	r0, [r7, #4]
 800cf3a:	f001 fea4 	bl	800ec86 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800cf3e:	68fb      	ldr	r3, [r7, #12]
 800cf40:	781b      	ldrb	r3, [r3, #0]
 800cf42:	4619      	mov	r1, r3
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	f001 fecf 	bl	800ece8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800cf4a:	68fb      	ldr	r3, [r7, #12]
 800cf4c:	2200      	movs	r2, #0
 800cf4e:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800cf50:	68fb      	ldr	r3, [r7, #12]
 800cf52:	7b1b      	ldrb	r3, [r3, #12]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d00e      	beq.n	800cf76 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800cf58:	68fb      	ldr	r3, [r7, #12]
 800cf5a:	7b1b      	ldrb	r3, [r3, #12]
 800cf5c:	4619      	mov	r1, r3
 800cf5e:	6878      	ldr	r0, [r7, #4]
 800cf60:	f001 fe91 	bl	800ec86 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	7b1b      	ldrb	r3, [r3, #12]
 800cf68:	4619      	mov	r1, r3
 800cf6a:	6878      	ldr	r0, [r7, #4]
 800cf6c:	f001 febc 	bl	800ece8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	2200      	movs	r2, #0
 800cf74:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800cf76:	68fb      	ldr	r3, [r7, #12]
 800cf78:	7b5b      	ldrb	r3, [r3, #13]
 800cf7a:	2b00      	cmp	r3, #0
 800cf7c:	d00e      	beq.n	800cf9c <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	7b5b      	ldrb	r3, [r3, #13]
 800cf82:	4619      	mov	r1, r3
 800cf84:	6878      	ldr	r0, [r7, #4]
 800cf86:	f001 fe7e 	bl	800ec86 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800cf8a:	68fb      	ldr	r3, [r7, #12]
 800cf8c:	7b5b      	ldrb	r3, [r3, #13]
 800cf8e:	4619      	mov	r1, r3
 800cf90:	6878      	ldr	r0, [r7, #4]
 800cf92:	f001 fea9 	bl	800ece8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800cf96:	68fb      	ldr	r3, [r7, #12]
 800cf98:	2200      	movs	r2, #0
 800cf9a:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cfa2:	69db      	ldr	r3, [r3, #28]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d00b      	beq.n	800cfc0 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cfae:	69db      	ldr	r3, [r3, #28]
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	f002 f9c9 	bl	800f348 <free>
    phost->pActiveClass->pData = 0U;
 800cfb6:	687b      	ldr	r3, [r7, #4]
 800cfb8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cfbc:	2200      	movs	r2, #0
 800cfbe:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800cfc0:	2300      	movs	r3, #0
}
 800cfc2:	4618      	mov	r0, r3
 800cfc4:	3710      	adds	r7, #16
 800cfc6:	46bd      	mov	sp, r7
 800cfc8:	bd80      	pop	{r7, pc}

0800cfca <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800cfca:	b580      	push	{r7, lr}
 800cfcc:	b084      	sub	sp, #16
 800cfce:	af00      	add	r7, sp, #0
 800cfd0:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800cfd2:	687b      	ldr	r3, [r7, #4]
 800cfd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800cfd8:	69db      	ldr	r3, [r3, #28]
 800cfda:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800cfdc:	68fb      	ldr	r3, [r7, #12]
 800cfde:	3340      	adds	r3, #64	@ 0x40
 800cfe0:	4619      	mov	r1, r3
 800cfe2:	6878      	ldr	r0, [r7, #4]
 800cfe4:	f000 f8b1 	bl	800d14a <GetLineCoding>
 800cfe8:	4603      	mov	r3, r0
 800cfea:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800cfec:	7afb      	ldrb	r3, [r7, #11]
 800cfee:	2b00      	cmp	r3, #0
 800cff0:	d105      	bne.n	800cffe <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800cff8:	2102      	movs	r1, #2
 800cffa:	6878      	ldr	r0, [r7, #4]
 800cffc:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800cffe:	7afb      	ldrb	r3, [r7, #11]
}
 800d000:	4618      	mov	r0, r3
 800d002:	3710      	adds	r7, #16
 800d004:	46bd      	mov	sp, r7
 800d006:	bd80      	pop	{r7, pc}

0800d008 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800d008:	b580      	push	{r7, lr}
 800d00a:	b084      	sub	sp, #16
 800d00c:	af00      	add	r7, sp, #0
 800d00e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800d010:	2301      	movs	r3, #1
 800d012:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800d014:	2300      	movs	r3, #0
 800d016:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d01e:	69db      	ldr	r3, [r3, #28]
 800d020:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800d028:	2b04      	cmp	r3, #4
 800d02a:	d877      	bhi.n	800d11c <USBH_CDC_Process+0x114>
 800d02c:	a201      	add	r2, pc, #4	@ (adr r2, 800d034 <USBH_CDC_Process+0x2c>)
 800d02e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d032:	bf00      	nop
 800d034:	0800d049 	.word	0x0800d049
 800d038:	0800d04f 	.word	0x0800d04f
 800d03c:	0800d07f 	.word	0x0800d07f
 800d040:	0800d0f3 	.word	0x0800d0f3
 800d044:	0800d101 	.word	0x0800d101
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800d048:	2300      	movs	r3, #0
 800d04a:	73fb      	strb	r3, [r7, #15]
      break;
 800d04c:	e06d      	b.n	800d12a <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800d04e:	68bb      	ldr	r3, [r7, #8]
 800d050:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d052:	4619      	mov	r1, r3
 800d054:	6878      	ldr	r0, [r7, #4]
 800d056:	f000 f897 	bl	800d188 <SetLineCoding>
 800d05a:	4603      	mov	r3, r0
 800d05c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d05e:	7bbb      	ldrb	r3, [r7, #14]
 800d060:	2b00      	cmp	r3, #0
 800d062:	d104      	bne.n	800d06e <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800d064:	68bb      	ldr	r3, [r7, #8]
 800d066:	2202      	movs	r2, #2
 800d068:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800d06c:	e058      	b.n	800d120 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800d06e:	7bbb      	ldrb	r3, [r7, #14]
 800d070:	2b01      	cmp	r3, #1
 800d072:	d055      	beq.n	800d120 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800d074:	68bb      	ldr	r3, [r7, #8]
 800d076:	2204      	movs	r2, #4
 800d078:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800d07c:	e050      	b.n	800d120 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800d07e:	68bb      	ldr	r3, [r7, #8]
 800d080:	3340      	adds	r3, #64	@ 0x40
 800d082:	4619      	mov	r1, r3
 800d084:	6878      	ldr	r0, [r7, #4]
 800d086:	f000 f860 	bl	800d14a <GetLineCoding>
 800d08a:	4603      	mov	r3, r0
 800d08c:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d08e:	7bbb      	ldrb	r3, [r7, #14]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d126      	bne.n	800d0e2 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800d094:	68bb      	ldr	r3, [r7, #8]
 800d096:	2200      	movs	r2, #0
 800d098:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800d0a2:	68bb      	ldr	r3, [r7, #8]
 800d0a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d0a6:	791b      	ldrb	r3, [r3, #4]
 800d0a8:	429a      	cmp	r2, r3
 800d0aa:	d13b      	bne.n	800d124 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800d0ac:	68bb      	ldr	r3, [r7, #8]
 800d0ae:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d0b6:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d133      	bne.n	800d124 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800d0bc:	68bb      	ldr	r3, [r7, #8]
 800d0be:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800d0c2:	68bb      	ldr	r3, [r7, #8]
 800d0c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d0c6:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800d0c8:	429a      	cmp	r2, r3
 800d0ca:	d12b      	bne.n	800d124 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d0d0:	68bb      	ldr	r3, [r7, #8]
 800d0d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d0d4:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800d0d6:	429a      	cmp	r2, r3
 800d0d8:	d124      	bne.n	800d124 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800d0da:	6878      	ldr	r0, [r7, #4]
 800d0dc:	f000 f958 	bl	800d390 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800d0e0:	e020      	b.n	800d124 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800d0e2:	7bbb      	ldrb	r3, [r7, #14]
 800d0e4:	2b01      	cmp	r3, #1
 800d0e6:	d01d      	beq.n	800d124 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800d0e8:	68bb      	ldr	r3, [r7, #8]
 800d0ea:	2204      	movs	r2, #4
 800d0ec:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800d0f0:	e018      	b.n	800d124 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800d0f2:	6878      	ldr	r0, [r7, #4]
 800d0f4:	f000 f867 	bl	800d1c6 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800d0f8:	6878      	ldr	r0, [r7, #4]
 800d0fa:	f000 f8da 	bl	800d2b2 <CDC_ProcessReception>
      break;
 800d0fe:	e014      	b.n	800d12a <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800d100:	2100      	movs	r1, #0
 800d102:	6878      	ldr	r0, [r7, #4]
 800d104:	f001 f81a 	bl	800e13c <USBH_ClrFeature>
 800d108:	4603      	mov	r3, r0
 800d10a:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800d10c:	7bbb      	ldrb	r3, [r7, #14]
 800d10e:	2b00      	cmp	r3, #0
 800d110:	d10a      	bne.n	800d128 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800d112:	68bb      	ldr	r3, [r7, #8]
 800d114:	2200      	movs	r2, #0
 800d116:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800d11a:	e005      	b.n	800d128 <USBH_CDC_Process+0x120>

    default:
      break;
 800d11c:	bf00      	nop
 800d11e:	e004      	b.n	800d12a <USBH_CDC_Process+0x122>
      break;
 800d120:	bf00      	nop
 800d122:	e002      	b.n	800d12a <USBH_CDC_Process+0x122>
      break;
 800d124:	bf00      	nop
 800d126:	e000      	b.n	800d12a <USBH_CDC_Process+0x122>
      break;
 800d128:	bf00      	nop

  }

  return status;
 800d12a:	7bfb      	ldrb	r3, [r7, #15]
}
 800d12c:	4618      	mov	r0, r3
 800d12e:	3710      	adds	r7, #16
 800d130:	46bd      	mov	sp, r7
 800d132:	bd80      	pop	{r7, pc}

0800d134 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800d134:	b480      	push	{r7}
 800d136:	b083      	sub	sp, #12
 800d138:	af00      	add	r7, sp, #0
 800d13a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800d13c:	2300      	movs	r3, #0
}
 800d13e:	4618      	mov	r0, r3
 800d140:	370c      	adds	r7, #12
 800d142:	46bd      	mov	sp, r7
 800d144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d148:	4770      	bx	lr

0800d14a <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800d14a:	b580      	push	{r7, lr}
 800d14c:	b082      	sub	sp, #8
 800d14e:	af00      	add	r7, sp, #0
 800d150:	6078      	str	r0, [r7, #4]
 800d152:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	22a1      	movs	r2, #161	@ 0xa1
 800d158:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2221      	movs	r2, #33	@ 0x21
 800d15e:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	2200      	movs	r2, #0
 800d164:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	2200      	movs	r2, #0
 800d16a:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	2207      	movs	r2, #7
 800d170:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	2207      	movs	r2, #7
 800d176:	4619      	mov	r1, r3
 800d178:	6878      	ldr	r0, [r7, #4]
 800d17a:	f001 fb14 	bl	800e7a6 <USBH_CtlReq>
 800d17e:	4603      	mov	r3, r0
}
 800d180:	4618      	mov	r0, r3
 800d182:	3708      	adds	r7, #8
 800d184:	46bd      	mov	sp, r7
 800d186:	bd80      	pop	{r7, pc}

0800d188 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
 800d190:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	2221      	movs	r2, #33	@ 0x21
 800d196:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	2220      	movs	r2, #32
 800d19c:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	2200      	movs	r2, #0
 800d1a2:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	2207      	movs	r2, #7
 800d1ae:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800d1b0:	683b      	ldr	r3, [r7, #0]
 800d1b2:	2207      	movs	r2, #7
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	6878      	ldr	r0, [r7, #4]
 800d1b8:	f001 faf5 	bl	800e7a6 <USBH_CtlReq>
 800d1bc:	4603      	mov	r3, r0
}
 800d1be:	4618      	mov	r0, r3
 800d1c0:	3708      	adds	r7, #8
 800d1c2:	46bd      	mov	sp, r7
 800d1c4:	bd80      	pop	{r7, pc}

0800d1c6 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800d1c6:	b580      	push	{r7, lr}
 800d1c8:	b086      	sub	sp, #24
 800d1ca:	af02      	add	r7, sp, #8
 800d1cc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d1d4:	69db      	ldr	r3, [r3, #28]
 800d1d6:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d1d8:	2300      	movs	r3, #0
 800d1da:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800d1e2:	2b01      	cmp	r3, #1
 800d1e4:	d002      	beq.n	800d1ec <CDC_ProcessTransmission+0x26>
 800d1e6:	2b02      	cmp	r3, #2
 800d1e8:	d023      	beq.n	800d232 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800d1ea:	e05e      	b.n	800d2aa <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800d1ec:	68fb      	ldr	r3, [r7, #12]
 800d1ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d1f0:	68fa      	ldr	r2, [r7, #12]
 800d1f2:	8b12      	ldrh	r2, [r2, #24]
 800d1f4:	4293      	cmp	r3, r2
 800d1f6:	d90b      	bls.n	800d210 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	69d9      	ldr	r1, [r3, #28]
 800d1fc:	68fb      	ldr	r3, [r7, #12]
 800d1fe:	8b1a      	ldrh	r2, [r3, #24]
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	7b5b      	ldrb	r3, [r3, #13]
 800d204:	2001      	movs	r0, #1
 800d206:	9000      	str	r0, [sp, #0]
 800d208:	6878      	ldr	r0, [r7, #4]
 800d20a:	f001 fcda 	bl	800ebc2 <USBH_BulkSendData>
 800d20e:	e00b      	b.n	800d228 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800d214:	68fb      	ldr	r3, [r7, #12]
 800d216:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800d218:	b29a      	uxth	r2, r3
 800d21a:	68fb      	ldr	r3, [r7, #12]
 800d21c:	7b5b      	ldrb	r3, [r3, #13]
 800d21e:	2001      	movs	r0, #1
 800d220:	9000      	str	r0, [sp, #0]
 800d222:	6878      	ldr	r0, [r7, #4]
 800d224:	f001 fccd 	bl	800ebc2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800d228:	68fb      	ldr	r3, [r7, #12]
 800d22a:	2202      	movs	r2, #2
 800d22c:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800d230:	e03b      	b.n	800d2aa <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800d232:	68fb      	ldr	r3, [r7, #12]
 800d234:	7b5b      	ldrb	r3, [r3, #13]
 800d236:	4619      	mov	r1, r3
 800d238:	6878      	ldr	r0, [r7, #4]
 800d23a:	f001 fff1 	bl	800f220 <USBH_LL_GetURBState>
 800d23e:	4603      	mov	r3, r0
 800d240:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800d242:	7afb      	ldrb	r3, [r7, #11]
 800d244:	2b01      	cmp	r3, #1
 800d246:	d128      	bne.n	800d29a <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800d248:	68fb      	ldr	r3, [r7, #12]
 800d24a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d24c:	68fa      	ldr	r2, [r7, #12]
 800d24e:	8b12      	ldrh	r2, [r2, #24]
 800d250:	4293      	cmp	r3, r2
 800d252:	d90e      	bls.n	800d272 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800d254:	68fb      	ldr	r3, [r7, #12]
 800d256:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d258:	68fa      	ldr	r2, [r7, #12]
 800d25a:	8b12      	ldrh	r2, [r2, #24]
 800d25c:	1a9a      	subs	r2, r3, r2
 800d25e:	68fb      	ldr	r3, [r7, #12]
 800d260:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	69db      	ldr	r3, [r3, #28]
 800d266:	68fa      	ldr	r2, [r7, #12]
 800d268:	8b12      	ldrh	r2, [r2, #24]
 800d26a:	441a      	add	r2, r3
 800d26c:	68fb      	ldr	r3, [r7, #12]
 800d26e:	61da      	str	r2, [r3, #28]
 800d270:	e002      	b.n	800d278 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	2200      	movs	r2, #0
 800d276:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800d278:	68fb      	ldr	r3, [r7, #12]
 800d27a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d004      	beq.n	800d28a <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800d280:	68fb      	ldr	r3, [r7, #12]
 800d282:	2201      	movs	r2, #1
 800d284:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800d288:	e00e      	b.n	800d2a8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800d28a:	68fb      	ldr	r3, [r7, #12]
 800d28c:	2200      	movs	r2, #0
 800d28e:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800d292:	6878      	ldr	r0, [r7, #4]
 800d294:	f000 f868 	bl	800d368 <USBH_CDC_TransmitCallback>
      break;
 800d298:	e006      	b.n	800d2a8 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800d29a:	7afb      	ldrb	r3, [r7, #11]
 800d29c:	2b02      	cmp	r3, #2
 800d29e:	d103      	bne.n	800d2a8 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	2201      	movs	r2, #1
 800d2a4:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800d2a8:	bf00      	nop
  }
}
 800d2aa:	bf00      	nop
 800d2ac:	3710      	adds	r7, #16
 800d2ae:	46bd      	mov	sp, r7
 800d2b0:	bd80      	pop	{r7, pc}

0800d2b2 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800d2b2:	b580      	push	{r7, lr}
 800d2b4:	b086      	sub	sp, #24
 800d2b6:	af00      	add	r7, sp, #0
 800d2b8:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d2c0:	69db      	ldr	r3, [r3, #28]
 800d2c2:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800d2c8:	697b      	ldr	r3, [r7, #20]
 800d2ca:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800d2ce:	2b03      	cmp	r3, #3
 800d2d0:	d002      	beq.n	800d2d8 <CDC_ProcessReception+0x26>
 800d2d2:	2b04      	cmp	r3, #4
 800d2d4:	d00e      	beq.n	800d2f4 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800d2d6:	e043      	b.n	800d360 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800d2d8:	697b      	ldr	r3, [r7, #20]
 800d2da:	6a19      	ldr	r1, [r3, #32]
 800d2dc:	697b      	ldr	r3, [r7, #20]
 800d2de:	8b5a      	ldrh	r2, [r3, #26]
 800d2e0:	697b      	ldr	r3, [r7, #20]
 800d2e2:	7b1b      	ldrb	r3, [r3, #12]
 800d2e4:	6878      	ldr	r0, [r7, #4]
 800d2e6:	f001 fc91 	bl	800ec0c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800d2ea:	697b      	ldr	r3, [r7, #20]
 800d2ec:	2204      	movs	r2, #4
 800d2ee:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800d2f2:	e035      	b.n	800d360 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800d2f4:	697b      	ldr	r3, [r7, #20]
 800d2f6:	7b1b      	ldrb	r3, [r3, #12]
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f001 ff90 	bl	800f220 <USBH_LL_GetURBState>
 800d300:	4603      	mov	r3, r0
 800d302:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800d304:	7cfb      	ldrb	r3, [r7, #19]
 800d306:	2b01      	cmp	r3, #1
 800d308:	d129      	bne.n	800d35e <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800d30a:	697b      	ldr	r3, [r7, #20]
 800d30c:	7b1b      	ldrb	r3, [r3, #12]
 800d30e:	4619      	mov	r1, r3
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	f001 fef3 	bl	800f0fc <USBH_LL_GetLastXferSize>
 800d316:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800d318:	697b      	ldr	r3, [r7, #20]
 800d31a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800d31c:	68fa      	ldr	r2, [r7, #12]
 800d31e:	429a      	cmp	r2, r3
 800d320:	d016      	beq.n	800d350 <CDC_ProcessReception+0x9e>
 800d322:	697b      	ldr	r3, [r7, #20]
 800d324:	8b5b      	ldrh	r3, [r3, #26]
 800d326:	461a      	mov	r2, r3
 800d328:	68fb      	ldr	r3, [r7, #12]
 800d32a:	4293      	cmp	r3, r2
 800d32c:	d110      	bne.n	800d350 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	1ad2      	subs	r2, r2, r3
 800d336:	697b      	ldr	r3, [r7, #20]
 800d338:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	6a1a      	ldr	r2, [r3, #32]
 800d33e:	68fb      	ldr	r3, [r7, #12]
 800d340:	441a      	add	r2, r3
 800d342:	697b      	ldr	r3, [r7, #20]
 800d344:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800d346:	697b      	ldr	r3, [r7, #20]
 800d348:	2203      	movs	r2, #3
 800d34a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800d34e:	e006      	b.n	800d35e <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800d350:	697b      	ldr	r3, [r7, #20]
 800d352:	2200      	movs	r2, #0
 800d354:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800d358:	6878      	ldr	r0, [r7, #4]
 800d35a:	f000 f80f 	bl	800d37c <USBH_CDC_ReceiveCallback>
      break;
 800d35e:	bf00      	nop
  }
}
 800d360:	bf00      	nop
 800d362:	3718      	adds	r7, #24
 800d364:	46bd      	mov	sp, r7
 800d366:	bd80      	pop	{r7, pc}

0800d368 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800d368:	b480      	push	{r7}
 800d36a:	b083      	sub	sp, #12
 800d36c:	af00      	add	r7, sp, #0
 800d36e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d370:	bf00      	nop
 800d372:	370c      	adds	r7, #12
 800d374:	46bd      	mov	sp, r7
 800d376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d37a:	4770      	bx	lr

0800d37c <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800d37c:	b480      	push	{r7}
 800d37e:	b083      	sub	sp, #12
 800d380:	af00      	add	r7, sp, #0
 800d382:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d384:	bf00      	nop
 800d386:	370c      	adds	r7, #12
 800d388:	46bd      	mov	sp, r7
 800d38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d38e:	4770      	bx	lr

0800d390 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800d390:	b480      	push	{r7}
 800d392:	b083      	sub	sp, #12
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800d398:	bf00      	nop
 800d39a:	370c      	adds	r7, #12
 800d39c:	46bd      	mov	sp, r7
 800d39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3a2:	4770      	bx	lr

0800d3a4 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b084      	sub	sp, #16
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	60f8      	str	r0, [r7, #12]
 800d3ac:	60b9      	str	r1, [r7, #8]
 800d3ae:	4613      	mov	r3, r2
 800d3b0:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800d3b2:	68fb      	ldr	r3, [r7, #12]
 800d3b4:	2b00      	cmp	r3, #0
 800d3b6:	d101      	bne.n	800d3bc <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800d3b8:	2302      	movs	r3, #2
 800d3ba:	e029      	b.n	800d410 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	79fa      	ldrb	r2, [r7, #7]
 800d3c0:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	2200      	movs	r2, #0
 800d3c8:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	2200      	movs	r2, #0
 800d3d0:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800d3d4:	68f8      	ldr	r0, [r7, #12]
 800d3d6:	f000 f81f 	bl	800d418 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800d3da:	68fb      	ldr	r3, [r7, #12]
 800d3dc:	2200      	movs	r2, #0
 800d3de:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800d3ea:	68fb      	ldr	r3, [r7, #12]
 800d3ec:	2200      	movs	r2, #0
 800d3ee:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	2200      	movs	r2, #0
 800d3f6:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	2b00      	cmp	r3, #0
 800d3fe:	d003      	beq.n	800d408 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800d400:	68fb      	ldr	r3, [r7, #12]
 800d402:	68ba      	ldr	r2, [r7, #8]
 800d404:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800d408:	68f8      	ldr	r0, [r7, #12]
 800d40a:	f001 fdc3 	bl	800ef94 <USBH_LL_Init>

  return USBH_OK;
 800d40e:	2300      	movs	r3, #0
}
 800d410:	4618      	mov	r0, r3
 800d412:	3710      	adds	r7, #16
 800d414:	46bd      	mov	sp, r7
 800d416:	bd80      	pop	{r7, pc}

0800d418 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800d418:	b580      	push	{r7, lr}
 800d41a:	b084      	sub	sp, #16
 800d41c:	af00      	add	r7, sp, #0
 800d41e:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800d420:	2300      	movs	r3, #0
 800d422:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d424:	2300      	movs	r3, #0
 800d426:	60fb      	str	r3, [r7, #12]
 800d428:	e009      	b.n	800d43e <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800d42a:	687a      	ldr	r2, [r7, #4]
 800d42c:	68fb      	ldr	r3, [r7, #12]
 800d42e:	33e0      	adds	r3, #224	@ 0xe0
 800d430:	009b      	lsls	r3, r3, #2
 800d432:	4413      	add	r3, r2
 800d434:	2200      	movs	r2, #0
 800d436:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	3301      	adds	r3, #1
 800d43c:	60fb      	str	r3, [r7, #12]
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	2b0f      	cmp	r3, #15
 800d442:	d9f2      	bls.n	800d42a <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d444:	2300      	movs	r3, #0
 800d446:	60fb      	str	r3, [r7, #12]
 800d448:	e009      	b.n	800d45e <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800d44a:	687a      	ldr	r2, [r7, #4]
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	4413      	add	r3, r2
 800d450:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d454:	2200      	movs	r2, #0
 800d456:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800d458:	68fb      	ldr	r3, [r7, #12]
 800d45a:	3301      	adds	r3, #1
 800d45c:	60fb      	str	r3, [r7, #12]
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d464:	d3f1      	bcc.n	800d44a <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2200      	movs	r2, #0
 800d46a:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	2200      	movs	r2, #0
 800d470:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800d472:	687b      	ldr	r3, [r7, #4]
 800d474:	2201      	movs	r2, #1
 800d476:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800d478:	687b      	ldr	r3, [r7, #4]
 800d47a:	2200      	movs	r2, #0
 800d47c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	2201      	movs	r2, #1
 800d484:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	2240      	movs	r2, #64	@ 0x40
 800d48a:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	2200      	movs	r2, #0
 800d490:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800d492:	687b      	ldr	r3, [r7, #4]
 800d494:	2200      	movs	r2, #0
 800d496:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800d49a:	687b      	ldr	r3, [r7, #4]
 800d49c:	2201      	movs	r2, #1
 800d49e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	2200      	movs	r2, #0
 800d4a6:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800d4aa:	687b      	ldr	r3, [r7, #4]
 800d4ac:	2200      	movs	r2, #0
 800d4ae:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	331c      	adds	r3, #28
 800d4b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d4ba:	2100      	movs	r1, #0
 800d4bc:	4618      	mov	r0, r3
 800d4be:	f002 f9f1 	bl	800f8a4 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800d4c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800d4cc:	2100      	movs	r1, #0
 800d4ce:	4618      	mov	r0, r3
 800d4d0:	f002 f9e8 	bl	800f8a4 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800d4d4:	687b      	ldr	r3, [r7, #4]
 800d4d6:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800d4da:	2212      	movs	r2, #18
 800d4dc:	2100      	movs	r1, #0
 800d4de:	4618      	mov	r0, r3
 800d4e0:	f002 f9e0 	bl	800f8a4 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800d4ea:	223e      	movs	r2, #62	@ 0x3e
 800d4ec:	2100      	movs	r1, #0
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f002 f9d8 	bl	800f8a4 <memset>

  return USBH_OK;
 800d4f4:	2300      	movs	r3, #0
}
 800d4f6:	4618      	mov	r0, r3
 800d4f8:	3710      	adds	r7, #16
 800d4fa:	46bd      	mov	sp, r7
 800d4fc:	bd80      	pop	{r7, pc}

0800d4fe <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800d4fe:	b480      	push	{r7}
 800d500:	b085      	sub	sp, #20
 800d502:	af00      	add	r7, sp, #0
 800d504:	6078      	str	r0, [r7, #4]
 800d506:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800d508:	2300      	movs	r3, #0
 800d50a:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800d50c:	683b      	ldr	r3, [r7, #0]
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d016      	beq.n	800d540 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800d518:	2b00      	cmp	r3, #0
 800d51a:	d10e      	bne.n	800d53a <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800d522:	1c59      	adds	r1, r3, #1
 800d524:	687a      	ldr	r2, [r7, #4]
 800d526:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800d52a:	687a      	ldr	r2, [r7, #4]
 800d52c:	33de      	adds	r3, #222	@ 0xde
 800d52e:	6839      	ldr	r1, [r7, #0]
 800d530:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800d534:	2300      	movs	r3, #0
 800d536:	73fb      	strb	r3, [r7, #15]
 800d538:	e004      	b.n	800d544 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800d53a:	2302      	movs	r3, #2
 800d53c:	73fb      	strb	r3, [r7, #15]
 800d53e:	e001      	b.n	800d544 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800d540:	2302      	movs	r3, #2
 800d542:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d544:	7bfb      	ldrb	r3, [r7, #15]
}
 800d546:	4618      	mov	r0, r3
 800d548:	3714      	adds	r7, #20
 800d54a:	46bd      	mov	sp, r7
 800d54c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d550:	4770      	bx	lr

0800d552 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800d552:	b480      	push	{r7}
 800d554:	b085      	sub	sp, #20
 800d556:	af00      	add	r7, sp, #0
 800d558:	6078      	str	r0, [r7, #4]
 800d55a:	460b      	mov	r3, r1
 800d55c:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800d55e:	2300      	movs	r3, #0
 800d560:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800d562:	687b      	ldr	r3, [r7, #4]
 800d564:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800d568:	78fa      	ldrb	r2, [r7, #3]
 800d56a:	429a      	cmp	r2, r3
 800d56c:	d204      	bcs.n	800d578 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	78fa      	ldrb	r2, [r7, #3]
 800d572:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800d576:	e001      	b.n	800d57c <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800d578:	2302      	movs	r3, #2
 800d57a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d57c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d57e:	4618      	mov	r0, r3
 800d580:	3714      	adds	r7, #20
 800d582:	46bd      	mov	sp, r7
 800d584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d588:	4770      	bx	lr

0800d58a <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800d58a:	b480      	push	{r7}
 800d58c:	b087      	sub	sp, #28
 800d58e:	af00      	add	r7, sp, #0
 800d590:	6078      	str	r0, [r7, #4]
 800d592:	4608      	mov	r0, r1
 800d594:	4611      	mov	r1, r2
 800d596:	461a      	mov	r2, r3
 800d598:	4603      	mov	r3, r0
 800d59a:	70fb      	strb	r3, [r7, #3]
 800d59c:	460b      	mov	r3, r1
 800d59e:	70bb      	strb	r3, [r7, #2]
 800d5a0:	4613      	mov	r3, r2
 800d5a2:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800d5ac:	687b      	ldr	r3, [r7, #4]
 800d5ae:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800d5b2:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d5b4:	e025      	b.n	800d602 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800d5b6:	7dfb      	ldrb	r3, [r7, #23]
 800d5b8:	221a      	movs	r2, #26
 800d5ba:	fb02 f303 	mul.w	r3, r2, r3
 800d5be:	3308      	adds	r3, #8
 800d5c0:	68fa      	ldr	r2, [r7, #12]
 800d5c2:	4413      	add	r3, r2
 800d5c4:	3302      	adds	r3, #2
 800d5c6:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d5c8:	693b      	ldr	r3, [r7, #16]
 800d5ca:	795b      	ldrb	r3, [r3, #5]
 800d5cc:	78fa      	ldrb	r2, [r7, #3]
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	d002      	beq.n	800d5d8 <USBH_FindInterface+0x4e>
 800d5d2:	78fb      	ldrb	r3, [r7, #3]
 800d5d4:	2bff      	cmp	r3, #255	@ 0xff
 800d5d6:	d111      	bne.n	800d5fc <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d5d8:	693b      	ldr	r3, [r7, #16]
 800d5da:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800d5dc:	78ba      	ldrb	r2, [r7, #2]
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	d002      	beq.n	800d5e8 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d5e2:	78bb      	ldrb	r3, [r7, #2]
 800d5e4:	2bff      	cmp	r3, #255	@ 0xff
 800d5e6:	d109      	bne.n	800d5fc <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d5e8:	693b      	ldr	r3, [r7, #16]
 800d5ea:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800d5ec:	787a      	ldrb	r2, [r7, #1]
 800d5ee:	429a      	cmp	r2, r3
 800d5f0:	d002      	beq.n	800d5f8 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800d5f2:	787b      	ldrb	r3, [r7, #1]
 800d5f4:	2bff      	cmp	r3, #255	@ 0xff
 800d5f6:	d101      	bne.n	800d5fc <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800d5f8:	7dfb      	ldrb	r3, [r7, #23]
 800d5fa:	e006      	b.n	800d60a <USBH_FindInterface+0x80>
    }
    if_ix++;
 800d5fc:	7dfb      	ldrb	r3, [r7, #23]
 800d5fe:	3301      	adds	r3, #1
 800d600:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800d602:	7dfb      	ldrb	r3, [r7, #23]
 800d604:	2b01      	cmp	r3, #1
 800d606:	d9d6      	bls.n	800d5b6 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800d608:	23ff      	movs	r3, #255	@ 0xff
}
 800d60a:	4618      	mov	r0, r3
 800d60c:	371c      	adds	r7, #28
 800d60e:	46bd      	mov	sp, r7
 800d610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d614:	4770      	bx	lr

0800d616 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800d616:	b580      	push	{r7, lr}
 800d618:	b082      	sub	sp, #8
 800d61a:	af00      	add	r7, sp, #0
 800d61c:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800d61e:	6878      	ldr	r0, [r7, #4]
 800d620:	f001 fcf4 	bl	800f00c <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800d624:	2101      	movs	r1, #1
 800d626:	6878      	ldr	r0, [r7, #4]
 800d628:	f001 fe0d 	bl	800f246 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800d62c:	2300      	movs	r3, #0
}
 800d62e:	4618      	mov	r0, r3
 800d630:	3708      	adds	r7, #8
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}
	...

0800d638 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b088      	sub	sp, #32
 800d63c:	af04      	add	r7, sp, #16
 800d63e:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800d640:	2302      	movs	r3, #2
 800d642:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800d644:	2300      	movs	r3, #0
 800d646:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800d648:	687b      	ldr	r3, [r7, #4]
 800d64a:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800d64e:	b2db      	uxtb	r3, r3
 800d650:	2b01      	cmp	r3, #1
 800d652:	d102      	bne.n	800d65a <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2203      	movs	r2, #3
 800d658:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	781b      	ldrb	r3, [r3, #0]
 800d65e:	b2db      	uxtb	r3, r3
 800d660:	2b0b      	cmp	r3, #11
 800d662:	f200 81bb 	bhi.w	800d9dc <USBH_Process+0x3a4>
 800d666:	a201      	add	r2, pc, #4	@ (adr r2, 800d66c <USBH_Process+0x34>)
 800d668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d66c:	0800d69d 	.word	0x0800d69d
 800d670:	0800d6cf 	.word	0x0800d6cf
 800d674:	0800d737 	.word	0x0800d737
 800d678:	0800d977 	.word	0x0800d977
 800d67c:	0800d9dd 	.word	0x0800d9dd
 800d680:	0800d7d7 	.word	0x0800d7d7
 800d684:	0800d91d 	.word	0x0800d91d
 800d688:	0800d80d 	.word	0x0800d80d
 800d68c:	0800d82d 	.word	0x0800d82d
 800d690:	0800d84b 	.word	0x0800d84b
 800d694:	0800d88f 	.word	0x0800d88f
 800d698:	0800d95f 	.word	0x0800d95f
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800d6a2:	b2db      	uxtb	r3, r3
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	f000 819b 	beq.w	800d9e0 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800d6aa:	687b      	ldr	r3, [r7, #4]
 800d6ac:	2201      	movs	r2, #1
 800d6ae:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800d6b0:	20c8      	movs	r0, #200	@ 0xc8
 800d6b2:	f001 fe09 	bl	800f2c8 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800d6b6:	6878      	ldr	r0, [r7, #4]
 800d6b8:	f001 fd05 	bl	800f0c6 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800d6bc:	687b      	ldr	r3, [r7, #4]
 800d6be:	2200      	movs	r2, #0
 800d6c0:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800d6c4:	687b      	ldr	r3, [r7, #4]
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d6cc:	e188      	b.n	800d9e0 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800d6d4:	2b01      	cmp	r3, #1
 800d6d6:	d107      	bne.n	800d6e8 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	2200      	movs	r2, #0
 800d6dc:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800d6e0:	687b      	ldr	r3, [r7, #4]
 800d6e2:	2202      	movs	r2, #2
 800d6e4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d6e6:	e18a      	b.n	800d9fe <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800d6e8:	687b      	ldr	r3, [r7, #4]
 800d6ea:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800d6ee:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d6f2:	d914      	bls.n	800d71e <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800d6f4:	687b      	ldr	r3, [r7, #4]
 800d6f6:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800d6fa:	3301      	adds	r3, #1
 800d6fc:	b2da      	uxtb	r2, r3
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800d70a:	2b03      	cmp	r3, #3
 800d70c:	d903      	bls.n	800d716 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800d70e:	687b      	ldr	r3, [r7, #4]
 800d710:	220d      	movs	r2, #13
 800d712:	701a      	strb	r2, [r3, #0]
      break;
 800d714:	e173      	b.n	800d9fe <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800d716:	687b      	ldr	r3, [r7, #4]
 800d718:	2200      	movs	r2, #0
 800d71a:	701a      	strb	r2, [r3, #0]
      break;
 800d71c:	e16f      	b.n	800d9fe <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800d71e:	687b      	ldr	r3, [r7, #4]
 800d720:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800d724:	f103 020a 	add.w	r2, r3, #10
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800d72e:	200a      	movs	r0, #10
 800d730:	f001 fdca 	bl	800f2c8 <USBH_Delay>
      break;
 800d734:	e163      	b.n	800d9fe <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d005      	beq.n	800d74c <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800d740:	687b      	ldr	r3, [r7, #4]
 800d742:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d746:	2104      	movs	r1, #4
 800d748:	6878      	ldr	r0, [r7, #4]
 800d74a:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800d74c:	2064      	movs	r0, #100	@ 0x64
 800d74e:	f001 fdbb 	bl	800f2c8 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800d752:	6878      	ldr	r0, [r7, #4]
 800d754:	f001 fc90 	bl	800f078 <USBH_LL_GetSpeed>
 800d758:	4603      	mov	r3, r0
 800d75a:	461a      	mov	r2, r3
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2205      	movs	r2, #5
 800d766:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800d768:	2100      	movs	r1, #0
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f001 fa9b 	bl	800eca6 <USBH_AllocPipe>
 800d770:	4603      	mov	r3, r0
 800d772:	461a      	mov	r2, r3
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800d778:	2180      	movs	r1, #128	@ 0x80
 800d77a:	6878      	ldr	r0, [r7, #4]
 800d77c:	f001 fa93 	bl	800eca6 <USBH_AllocPipe>
 800d780:	4603      	mov	r3, r0
 800d782:	461a      	mov	r2, r3
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d788:	687b      	ldr	r3, [r7, #4]
 800d78a:	7919      	ldrb	r1, [r3, #4]
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d792:	687b      	ldr	r3, [r7, #4]
 800d794:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d798:	687a      	ldr	r2, [r7, #4]
 800d79a:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800d79c:	9202      	str	r2, [sp, #8]
 800d79e:	2200      	movs	r2, #0
 800d7a0:	9201      	str	r2, [sp, #4]
 800d7a2:	9300      	str	r3, [sp, #0]
 800d7a4:	4603      	mov	r3, r0
 800d7a6:	2280      	movs	r2, #128	@ 0x80
 800d7a8:	6878      	ldr	r0, [r7, #4]
 800d7aa:	f001 fa4d 	bl	800ec48 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d7ae:	687b      	ldr	r3, [r7, #4]
 800d7b0:	7959      	ldrb	r1, [r3, #5]
 800d7b2:	687b      	ldr	r3, [r7, #4]
 800d7b4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800d7b8:	687b      	ldr	r3, [r7, #4]
 800d7ba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800d7be:	687a      	ldr	r2, [r7, #4]
 800d7c0:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800d7c2:	9202      	str	r2, [sp, #8]
 800d7c4:	2200      	movs	r2, #0
 800d7c6:	9201      	str	r2, [sp, #4]
 800d7c8:	9300      	str	r3, [sp, #0]
 800d7ca:	4603      	mov	r3, r0
 800d7cc:	2200      	movs	r2, #0
 800d7ce:	6878      	ldr	r0, [r7, #4]
 800d7d0:	f001 fa3a 	bl	800ec48 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d7d4:	e113      	b.n	800d9fe <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800d7d6:	6878      	ldr	r0, [r7, #4]
 800d7d8:	f000 f916 	bl	800da08 <USBH_HandleEnum>
 800d7dc:	4603      	mov	r3, r0
 800d7de:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800d7e0:	7bbb      	ldrb	r3, [r7, #14]
 800d7e2:	b2db      	uxtb	r3, r3
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	f040 80fd 	bne.w	800d9e4 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	2200      	movs	r2, #0
 800d7ee:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800d7f8:	2b01      	cmp	r3, #1
 800d7fa:	d103      	bne.n	800d804 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	2208      	movs	r2, #8
 800d800:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800d802:	e0ef      	b.n	800d9e4 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800d804:	687b      	ldr	r3, [r7, #4]
 800d806:	2207      	movs	r2, #7
 800d808:	701a      	strb	r2, [r3, #0]
      break;
 800d80a:	e0eb      	b.n	800d9e4 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d812:	2b00      	cmp	r3, #0
 800d814:	f000 80e8 	beq.w	800d9e8 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d81e:	2101      	movs	r1, #1
 800d820:	6878      	ldr	r0, [r7, #4]
 800d822:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	2208      	movs	r2, #8
 800d828:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800d82a:	e0dd      	b.n	800d9e8 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800d832:	4619      	mov	r1, r3
 800d834:	6878      	ldr	r0, [r7, #4]
 800d836:	f000 fc3a 	bl	800e0ae <USBH_SetCfg>
 800d83a:	4603      	mov	r3, r0
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	f040 80d5 	bne.w	800d9ec <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800d842:	687b      	ldr	r3, [r7, #4]
 800d844:	2209      	movs	r2, #9
 800d846:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d848:	e0d0      	b.n	800d9ec <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800d850:	f003 0320 	and.w	r3, r3, #32
 800d854:	2b00      	cmp	r3, #0
 800d856:	d016      	beq.n	800d886 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800d858:	2101      	movs	r1, #1
 800d85a:	6878      	ldr	r0, [r7, #4]
 800d85c:	f000 fc4a 	bl	800e0f4 <USBH_SetFeature>
 800d860:	4603      	mov	r3, r0
 800d862:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d864:	7bbb      	ldrb	r3, [r7, #14]
 800d866:	b2db      	uxtb	r3, r3
 800d868:	2b00      	cmp	r3, #0
 800d86a:	d103      	bne.n	800d874 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	220a      	movs	r2, #10
 800d870:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d872:	e0bd      	b.n	800d9f0 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800d874:	7bbb      	ldrb	r3, [r7, #14]
 800d876:	b2db      	uxtb	r3, r3
 800d878:	2b03      	cmp	r3, #3
 800d87a:	f040 80b9 	bne.w	800d9f0 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800d87e:	687b      	ldr	r3, [r7, #4]
 800d880:	220a      	movs	r2, #10
 800d882:	701a      	strb	r2, [r3, #0]
      break;
 800d884:	e0b4      	b.n	800d9f0 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	220a      	movs	r2, #10
 800d88a:	701a      	strb	r2, [r3, #0]
      break;
 800d88c:	e0b0      	b.n	800d9f0 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800d88e:	687b      	ldr	r3, [r7, #4]
 800d890:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800d894:	2b00      	cmp	r3, #0
 800d896:	f000 80ad 	beq.w	800d9f4 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	2200      	movs	r2, #0
 800d89e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d8a2:	2300      	movs	r3, #0
 800d8a4:	73fb      	strb	r3, [r7, #15]
 800d8a6:	e016      	b.n	800d8d6 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800d8a8:	7bfa      	ldrb	r2, [r7, #15]
 800d8aa:	687b      	ldr	r3, [r7, #4]
 800d8ac:	32de      	adds	r2, #222	@ 0xde
 800d8ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8b2:	791a      	ldrb	r2, [r3, #4]
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800d8ba:	429a      	cmp	r2, r3
 800d8bc:	d108      	bne.n	800d8d0 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800d8be:	7bfa      	ldrb	r2, [r7, #15]
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	32de      	adds	r2, #222	@ 0xde
 800d8c4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800d8ce:	e005      	b.n	800d8dc <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800d8d0:	7bfb      	ldrb	r3, [r7, #15]
 800d8d2:	3301      	adds	r3, #1
 800d8d4:	73fb      	strb	r3, [r7, #15]
 800d8d6:	7bfb      	ldrb	r3, [r7, #15]
 800d8d8:	2b00      	cmp	r3, #0
 800d8da:	d0e5      	beq.n	800d8a8 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d8e2:	2b00      	cmp	r3, #0
 800d8e4:	d016      	beq.n	800d914 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800d8e6:	687b      	ldr	r3, [r7, #4]
 800d8e8:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d8ec:	689b      	ldr	r3, [r3, #8]
 800d8ee:	6878      	ldr	r0, [r7, #4]
 800d8f0:	4798      	blx	r3
 800d8f2:	4603      	mov	r3, r0
 800d8f4:	2b00      	cmp	r3, #0
 800d8f6:	d109      	bne.n	800d90c <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	2206      	movs	r2, #6
 800d8fc:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d904:	2103      	movs	r1, #3
 800d906:	6878      	ldr	r0, [r7, #4]
 800d908:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d90a:	e073      	b.n	800d9f4 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	220d      	movs	r2, #13
 800d910:	701a      	strb	r2, [r3, #0]
      break;
 800d912:	e06f      	b.n	800d9f4 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800d914:	687b      	ldr	r3, [r7, #4]
 800d916:	220d      	movs	r2, #13
 800d918:	701a      	strb	r2, [r3, #0]
      break;
 800d91a:	e06b      	b.n	800d9f4 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d922:	2b00      	cmp	r3, #0
 800d924:	d017      	beq.n	800d956 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800d926:	687b      	ldr	r3, [r7, #4]
 800d928:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d92c:	691b      	ldr	r3, [r3, #16]
 800d92e:	6878      	ldr	r0, [r7, #4]
 800d930:	4798      	blx	r3
 800d932:	4603      	mov	r3, r0
 800d934:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800d936:	7bbb      	ldrb	r3, [r7, #14]
 800d938:	b2db      	uxtb	r3, r3
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d103      	bne.n	800d946 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	220b      	movs	r2, #11
 800d942:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d944:	e058      	b.n	800d9f8 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800d946:	7bbb      	ldrb	r3, [r7, #14]
 800d948:	b2db      	uxtb	r3, r3
 800d94a:	2b02      	cmp	r3, #2
 800d94c:	d154      	bne.n	800d9f8 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800d94e:	687b      	ldr	r3, [r7, #4]
 800d950:	220d      	movs	r2, #13
 800d952:	701a      	strb	r2, [r3, #0]
      break;
 800d954:	e050      	b.n	800d9f8 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	220d      	movs	r2, #13
 800d95a:	701a      	strb	r2, [r3, #0]
      break;
 800d95c:	e04c      	b.n	800d9f8 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d964:	2b00      	cmp	r3, #0
 800d966:	d049      	beq.n	800d9fc <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800d968:	687b      	ldr	r3, [r7, #4]
 800d96a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d96e:	695b      	ldr	r3, [r3, #20]
 800d970:	6878      	ldr	r0, [r7, #4]
 800d972:	4798      	blx	r3
      }
      break;
 800d974:	e042      	b.n	800d9fc <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800d976:	687b      	ldr	r3, [r7, #4]
 800d978:	2200      	movs	r2, #0
 800d97a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800d97e:	6878      	ldr	r0, [r7, #4]
 800d980:	f7ff fd4a 	bl	800d418 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d009      	beq.n	800d9a2 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800d994:	68db      	ldr	r3, [r3, #12]
 800d996:	6878      	ldr	r0, [r7, #4]
 800d998:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800d99a:	687b      	ldr	r3, [r7, #4]
 800d99c:	2200      	movs	r2, #0
 800d99e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d005      	beq.n	800d9b8 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800d9ac:	687b      	ldr	r3, [r7, #4]
 800d9ae:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800d9b2:	2105      	movs	r1, #5
 800d9b4:	6878      	ldr	r0, [r7, #4]
 800d9b6:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800d9b8:	687b      	ldr	r3, [r7, #4]
 800d9ba:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800d9be:	b2db      	uxtb	r3, r3
 800d9c0:	2b01      	cmp	r3, #1
 800d9c2:	d107      	bne.n	800d9d4 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	2200      	movs	r2, #0
 800d9c8:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800d9cc:	6878      	ldr	r0, [r7, #4]
 800d9ce:	f7ff fe22 	bl	800d616 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800d9d2:	e014      	b.n	800d9fe <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800d9d4:	6878      	ldr	r0, [r7, #4]
 800d9d6:	f001 fb19 	bl	800f00c <USBH_LL_Start>
      break;
 800d9da:	e010      	b.n	800d9fe <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800d9dc:	bf00      	nop
 800d9de:	e00e      	b.n	800d9fe <USBH_Process+0x3c6>
      break;
 800d9e0:	bf00      	nop
 800d9e2:	e00c      	b.n	800d9fe <USBH_Process+0x3c6>
      break;
 800d9e4:	bf00      	nop
 800d9e6:	e00a      	b.n	800d9fe <USBH_Process+0x3c6>
    break;
 800d9e8:	bf00      	nop
 800d9ea:	e008      	b.n	800d9fe <USBH_Process+0x3c6>
      break;
 800d9ec:	bf00      	nop
 800d9ee:	e006      	b.n	800d9fe <USBH_Process+0x3c6>
      break;
 800d9f0:	bf00      	nop
 800d9f2:	e004      	b.n	800d9fe <USBH_Process+0x3c6>
      break;
 800d9f4:	bf00      	nop
 800d9f6:	e002      	b.n	800d9fe <USBH_Process+0x3c6>
      break;
 800d9f8:	bf00      	nop
 800d9fa:	e000      	b.n	800d9fe <USBH_Process+0x3c6>
      break;
 800d9fc:	bf00      	nop
  }
  return USBH_OK;
 800d9fe:	2300      	movs	r3, #0
}
 800da00:	4618      	mov	r0, r3
 800da02:	3710      	adds	r7, #16
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}

0800da08 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800da08:	b580      	push	{r7, lr}
 800da0a:	b088      	sub	sp, #32
 800da0c:	af04      	add	r7, sp, #16
 800da0e:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800da10:	2301      	movs	r3, #1
 800da12:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800da14:	2301      	movs	r3, #1
 800da16:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800da18:	687b      	ldr	r3, [r7, #4]
 800da1a:	785b      	ldrb	r3, [r3, #1]
 800da1c:	2b07      	cmp	r3, #7
 800da1e:	f200 81bd 	bhi.w	800dd9c <USBH_HandleEnum+0x394>
 800da22:	a201      	add	r2, pc, #4	@ (adr r2, 800da28 <USBH_HandleEnum+0x20>)
 800da24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da28:	0800da49 	.word	0x0800da49
 800da2c:	0800db03 	.word	0x0800db03
 800da30:	0800db6d 	.word	0x0800db6d
 800da34:	0800dbf7 	.word	0x0800dbf7
 800da38:	0800dc61 	.word	0x0800dc61
 800da3c:	0800dcd1 	.word	0x0800dcd1
 800da40:	0800dd17 	.word	0x0800dd17
 800da44:	0800dd5d 	.word	0x0800dd5d
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800da48:	2108      	movs	r1, #8
 800da4a:	6878      	ldr	r0, [r7, #4]
 800da4c:	f000 fa4c 	bl	800dee8 <USBH_Get_DevDesc>
 800da50:	4603      	mov	r3, r0
 800da52:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800da54:	7bbb      	ldrb	r3, [r7, #14]
 800da56:	2b00      	cmp	r3, #0
 800da58:	d12e      	bne.n	800dab8 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800da60:	687b      	ldr	r3, [r7, #4]
 800da62:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	2201      	movs	r2, #1
 800da68:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	7919      	ldrb	r1, [r3, #4]
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800da7a:	687a      	ldr	r2, [r7, #4]
 800da7c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800da7e:	9202      	str	r2, [sp, #8]
 800da80:	2200      	movs	r2, #0
 800da82:	9201      	str	r2, [sp, #4]
 800da84:	9300      	str	r3, [sp, #0]
 800da86:	4603      	mov	r3, r0
 800da88:	2280      	movs	r2, #128	@ 0x80
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f001 f8dc 	bl	800ec48 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	7959      	ldrb	r1, [r3, #5]
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800daa0:	687a      	ldr	r2, [r7, #4]
 800daa2:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800daa4:	9202      	str	r2, [sp, #8]
 800daa6:	2200      	movs	r2, #0
 800daa8:	9201      	str	r2, [sp, #4]
 800daaa:	9300      	str	r3, [sp, #0]
 800daac:	4603      	mov	r3, r0
 800daae:	2200      	movs	r2, #0
 800dab0:	6878      	ldr	r0, [r7, #4]
 800dab2:	f001 f8c9 	bl	800ec48 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800dab6:	e173      	b.n	800dda0 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dab8:	7bbb      	ldrb	r3, [r7, #14]
 800daba:	2b03      	cmp	r3, #3
 800dabc:	f040 8170 	bne.w	800dda0 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800dac6:	3301      	adds	r3, #1
 800dac8:	b2da      	uxtb	r2, r3
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800dad6:	2b03      	cmp	r3, #3
 800dad8:	d903      	bls.n	800dae2 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800dada:	687b      	ldr	r3, [r7, #4]
 800dadc:	220d      	movs	r2, #13
 800dade:	701a      	strb	r2, [r3, #0]
      break;
 800dae0:	e15e      	b.n	800dda0 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800dae2:	687b      	ldr	r3, [r7, #4]
 800dae4:	795b      	ldrb	r3, [r3, #5]
 800dae6:	4619      	mov	r1, r3
 800dae8:	6878      	ldr	r0, [r7, #4]
 800daea:	f001 f8fd 	bl	800ece8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	791b      	ldrb	r3, [r3, #4]
 800daf2:	4619      	mov	r1, r3
 800daf4:	6878      	ldr	r0, [r7, #4]
 800daf6:	f001 f8f7 	bl	800ece8 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2200      	movs	r2, #0
 800dafe:	701a      	strb	r2, [r3, #0]
      break;
 800db00:	e14e      	b.n	800dda0 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800db02:	2112      	movs	r1, #18
 800db04:	6878      	ldr	r0, [r7, #4]
 800db06:	f000 f9ef 	bl	800dee8 <USBH_Get_DevDesc>
 800db0a:	4603      	mov	r3, r0
 800db0c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800db0e:	7bbb      	ldrb	r3, [r7, #14]
 800db10:	2b00      	cmp	r3, #0
 800db12:	d103      	bne.n	800db1c <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2202      	movs	r2, #2
 800db18:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800db1a:	e143      	b.n	800dda4 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800db1c:	7bbb      	ldrb	r3, [r7, #14]
 800db1e:	2b03      	cmp	r3, #3
 800db20:	f040 8140 	bne.w	800dda4 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800db24:	687b      	ldr	r3, [r7, #4]
 800db26:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800db2a:	3301      	adds	r3, #1
 800db2c:	b2da      	uxtb	r2, r3
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800db3a:	2b03      	cmp	r3, #3
 800db3c:	d903      	bls.n	800db46 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800db3e:	687b      	ldr	r3, [r7, #4]
 800db40:	220d      	movs	r2, #13
 800db42:	701a      	strb	r2, [r3, #0]
      break;
 800db44:	e12e      	b.n	800dda4 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	795b      	ldrb	r3, [r3, #5]
 800db4a:	4619      	mov	r1, r3
 800db4c:	6878      	ldr	r0, [r7, #4]
 800db4e:	f001 f8cb 	bl	800ece8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	791b      	ldrb	r3, [r3, #4]
 800db56:	4619      	mov	r1, r3
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	f001 f8c5 	bl	800ece8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	2200      	movs	r2, #0
 800db62:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	2200      	movs	r2, #0
 800db68:	701a      	strb	r2, [r3, #0]
      break;
 800db6a:	e11b      	b.n	800dda4 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800db6c:	2101      	movs	r1, #1
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	f000 fa79 	bl	800e066 <USBH_SetAddress>
 800db74:	4603      	mov	r3, r0
 800db76:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800db78:	7bbb      	ldrb	r3, [r7, #14]
 800db7a:	2b00      	cmp	r3, #0
 800db7c:	d130      	bne.n	800dbe0 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800db7e:	2002      	movs	r0, #2
 800db80:	f001 fba2 	bl	800f2c8 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2201      	movs	r2, #1
 800db88:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	2203      	movs	r2, #3
 800db90:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	7919      	ldrb	r1, [r3, #4]
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800dba2:	687a      	ldr	r2, [r7, #4]
 800dba4:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800dba6:	9202      	str	r2, [sp, #8]
 800dba8:	2200      	movs	r2, #0
 800dbaa:	9201      	str	r2, [sp, #4]
 800dbac:	9300      	str	r3, [sp, #0]
 800dbae:	4603      	mov	r3, r0
 800dbb0:	2280      	movs	r2, #128	@ 0x80
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f001 f848 	bl	800ec48 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800dbb8:	687b      	ldr	r3, [r7, #4]
 800dbba:	7959      	ldrb	r1, [r3, #5]
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800dbc2:	687b      	ldr	r3, [r7, #4]
 800dbc4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800dbc8:	687a      	ldr	r2, [r7, #4]
 800dbca:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800dbcc:	9202      	str	r2, [sp, #8]
 800dbce:	2200      	movs	r2, #0
 800dbd0:	9201      	str	r2, [sp, #4]
 800dbd2:	9300      	str	r3, [sp, #0]
 800dbd4:	4603      	mov	r3, r0
 800dbd6:	2200      	movs	r2, #0
 800dbd8:	6878      	ldr	r0, [r7, #4]
 800dbda:	f001 f835 	bl	800ec48 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800dbde:	e0e3      	b.n	800dda8 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dbe0:	7bbb      	ldrb	r3, [r7, #14]
 800dbe2:	2b03      	cmp	r3, #3
 800dbe4:	f040 80e0 	bne.w	800dda8 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	220d      	movs	r2, #13
 800dbec:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	2200      	movs	r2, #0
 800dbf2:	705a      	strb	r2, [r3, #1]
      break;
 800dbf4:	e0d8      	b.n	800dda8 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800dbf6:	2109      	movs	r1, #9
 800dbf8:	6878      	ldr	r0, [r7, #4]
 800dbfa:	f000 f9a1 	bl	800df40 <USBH_Get_CfgDesc>
 800dbfe:	4603      	mov	r3, r0
 800dc00:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800dc02:	7bbb      	ldrb	r3, [r7, #14]
 800dc04:	2b00      	cmp	r3, #0
 800dc06:	d103      	bne.n	800dc10 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	2204      	movs	r2, #4
 800dc0c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800dc0e:	e0cd      	b.n	800ddac <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dc10:	7bbb      	ldrb	r3, [r7, #14]
 800dc12:	2b03      	cmp	r3, #3
 800dc14:	f040 80ca 	bne.w	800ddac <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800dc1e:	3301      	adds	r3, #1
 800dc20:	b2da      	uxtb	r2, r3
 800dc22:	687b      	ldr	r3, [r7, #4]
 800dc24:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800dc2e:	2b03      	cmp	r3, #3
 800dc30:	d903      	bls.n	800dc3a <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	220d      	movs	r2, #13
 800dc36:	701a      	strb	r2, [r3, #0]
      break;
 800dc38:	e0b8      	b.n	800ddac <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	795b      	ldrb	r3, [r3, #5]
 800dc3e:	4619      	mov	r1, r3
 800dc40:	6878      	ldr	r0, [r7, #4]
 800dc42:	f001 f851 	bl	800ece8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800dc46:	687b      	ldr	r3, [r7, #4]
 800dc48:	791b      	ldrb	r3, [r3, #4]
 800dc4a:	4619      	mov	r1, r3
 800dc4c:	6878      	ldr	r0, [r7, #4]
 800dc4e:	f001 f84b 	bl	800ece8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	2200      	movs	r2, #0
 800dc56:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800dc58:	687b      	ldr	r3, [r7, #4]
 800dc5a:	2200      	movs	r2, #0
 800dc5c:	701a      	strb	r2, [r3, #0]
      break;
 800dc5e:	e0a5      	b.n	800ddac <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800dc60:	687b      	ldr	r3, [r7, #4]
 800dc62:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800dc66:	4619      	mov	r1, r3
 800dc68:	6878      	ldr	r0, [r7, #4]
 800dc6a:	f000 f969 	bl	800df40 <USBH_Get_CfgDesc>
 800dc6e:	4603      	mov	r3, r0
 800dc70:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800dc72:	7bbb      	ldrb	r3, [r7, #14]
 800dc74:	2b00      	cmp	r3, #0
 800dc76:	d103      	bne.n	800dc80 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800dc78:	687b      	ldr	r3, [r7, #4]
 800dc7a:	2205      	movs	r2, #5
 800dc7c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800dc7e:	e097      	b.n	800ddb0 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dc80:	7bbb      	ldrb	r3, [r7, #14]
 800dc82:	2b03      	cmp	r3, #3
 800dc84:	f040 8094 	bne.w	800ddb0 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800dc8e:	3301      	adds	r3, #1
 800dc90:	b2da      	uxtb	r2, r3
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800dc9e:	2b03      	cmp	r3, #3
 800dca0:	d903      	bls.n	800dcaa <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	220d      	movs	r2, #13
 800dca6:	701a      	strb	r2, [r3, #0]
      break;
 800dca8:	e082      	b.n	800ddb0 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800dcaa:	687b      	ldr	r3, [r7, #4]
 800dcac:	795b      	ldrb	r3, [r3, #5]
 800dcae:	4619      	mov	r1, r3
 800dcb0:	6878      	ldr	r0, [r7, #4]
 800dcb2:	f001 f819 	bl	800ece8 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800dcb6:	687b      	ldr	r3, [r7, #4]
 800dcb8:	791b      	ldrb	r3, [r3, #4]
 800dcba:	4619      	mov	r1, r3
 800dcbc:	6878      	ldr	r0, [r7, #4]
 800dcbe:	f001 f813 	bl	800ece8 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800dcc2:	687b      	ldr	r3, [r7, #4]
 800dcc4:	2200      	movs	r2, #0
 800dcc6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800dcc8:	687b      	ldr	r3, [r7, #4]
 800dcca:	2200      	movs	r2, #0
 800dccc:	701a      	strb	r2, [r3, #0]
      break;
 800dcce:	e06f      	b.n	800ddb0 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d019      	beq.n	800dd0e <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800dcda:	687b      	ldr	r3, [r7, #4]
 800dcdc:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800dce0:	687b      	ldr	r3, [r7, #4]
 800dce2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800dce6:	23ff      	movs	r3, #255	@ 0xff
 800dce8:	6878      	ldr	r0, [r7, #4]
 800dcea:	f000 f953 	bl	800df94 <USBH_Get_StringDesc>
 800dcee:	4603      	mov	r3, r0
 800dcf0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800dcf2:	7bbb      	ldrb	r3, [r7, #14]
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d103      	bne.n	800dd00 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	2206      	movs	r2, #6
 800dcfc:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800dcfe:	e059      	b.n	800ddb4 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dd00:	7bbb      	ldrb	r3, [r7, #14]
 800dd02:	2b03      	cmp	r3, #3
 800dd04:	d156      	bne.n	800ddb4 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800dd06:	687b      	ldr	r3, [r7, #4]
 800dd08:	2206      	movs	r2, #6
 800dd0a:	705a      	strb	r2, [r3, #1]
      break;
 800dd0c:	e052      	b.n	800ddb4 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800dd0e:	687b      	ldr	r3, [r7, #4]
 800dd10:	2206      	movs	r2, #6
 800dd12:	705a      	strb	r2, [r3, #1]
      break;
 800dd14:	e04e      	b.n	800ddb4 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800dd1c:	2b00      	cmp	r3, #0
 800dd1e:	d019      	beq.n	800dd54 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800dd20:	687b      	ldr	r3, [r7, #4]
 800dd22:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800dd26:	687b      	ldr	r3, [r7, #4]
 800dd28:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800dd2c:	23ff      	movs	r3, #255	@ 0xff
 800dd2e:	6878      	ldr	r0, [r7, #4]
 800dd30:	f000 f930 	bl	800df94 <USBH_Get_StringDesc>
 800dd34:	4603      	mov	r3, r0
 800dd36:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800dd38:	7bbb      	ldrb	r3, [r7, #14]
 800dd3a:	2b00      	cmp	r3, #0
 800dd3c:	d103      	bne.n	800dd46 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	2207      	movs	r2, #7
 800dd42:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800dd44:	e038      	b.n	800ddb8 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dd46:	7bbb      	ldrb	r3, [r7, #14]
 800dd48:	2b03      	cmp	r3, #3
 800dd4a:	d135      	bne.n	800ddb8 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2207      	movs	r2, #7
 800dd50:	705a      	strb	r2, [r3, #1]
      break;
 800dd52:	e031      	b.n	800ddb8 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	2207      	movs	r2, #7
 800dd58:	705a      	strb	r2, [r3, #1]
      break;
 800dd5a:	e02d      	b.n	800ddb8 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	d017      	beq.n	800dd96 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800dd66:	687b      	ldr	r3, [r7, #4]
 800dd68:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800dd72:	23ff      	movs	r3, #255	@ 0xff
 800dd74:	6878      	ldr	r0, [r7, #4]
 800dd76:	f000 f90d 	bl	800df94 <USBH_Get_StringDesc>
 800dd7a:	4603      	mov	r3, r0
 800dd7c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800dd7e:	7bbb      	ldrb	r3, [r7, #14]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d102      	bne.n	800dd8a <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800dd84:	2300      	movs	r3, #0
 800dd86:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800dd88:	e018      	b.n	800ddbc <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800dd8a:	7bbb      	ldrb	r3, [r7, #14]
 800dd8c:	2b03      	cmp	r3, #3
 800dd8e:	d115      	bne.n	800ddbc <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800dd90:	2300      	movs	r3, #0
 800dd92:	73fb      	strb	r3, [r7, #15]
      break;
 800dd94:	e012      	b.n	800ddbc <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800dd96:	2300      	movs	r3, #0
 800dd98:	73fb      	strb	r3, [r7, #15]
      break;
 800dd9a:	e00f      	b.n	800ddbc <USBH_HandleEnum+0x3b4>

    default:
      break;
 800dd9c:	bf00      	nop
 800dd9e:	e00e      	b.n	800ddbe <USBH_HandleEnum+0x3b6>
      break;
 800dda0:	bf00      	nop
 800dda2:	e00c      	b.n	800ddbe <USBH_HandleEnum+0x3b6>
      break;
 800dda4:	bf00      	nop
 800dda6:	e00a      	b.n	800ddbe <USBH_HandleEnum+0x3b6>
      break;
 800dda8:	bf00      	nop
 800ddaa:	e008      	b.n	800ddbe <USBH_HandleEnum+0x3b6>
      break;
 800ddac:	bf00      	nop
 800ddae:	e006      	b.n	800ddbe <USBH_HandleEnum+0x3b6>
      break;
 800ddb0:	bf00      	nop
 800ddb2:	e004      	b.n	800ddbe <USBH_HandleEnum+0x3b6>
      break;
 800ddb4:	bf00      	nop
 800ddb6:	e002      	b.n	800ddbe <USBH_HandleEnum+0x3b6>
      break;
 800ddb8:	bf00      	nop
 800ddba:	e000      	b.n	800ddbe <USBH_HandleEnum+0x3b6>
      break;
 800ddbc:	bf00      	nop
  }
  return Status;
 800ddbe:	7bfb      	ldrb	r3, [r7, #15]
}
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	3710      	adds	r7, #16
 800ddc4:	46bd      	mov	sp, r7
 800ddc6:	bd80      	pop	{r7, pc}

0800ddc8 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ddc8:	b480      	push	{r7}
 800ddca:	b083      	sub	sp, #12
 800ddcc:	af00      	add	r7, sp, #0
 800ddce:	6078      	str	r0, [r7, #4]
 800ddd0:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	683a      	ldr	r2, [r7, #0]
 800ddd6:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800ddda:	bf00      	nop
 800dddc:	370c      	adds	r7, #12
 800ddde:	46bd      	mov	sp, r7
 800dde0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dde4:	4770      	bx	lr

0800dde6 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800dde6:	b580      	push	{r7, lr}
 800dde8:	b082      	sub	sp, #8
 800ddea:	af00      	add	r7, sp, #0
 800ddec:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ddee:	687b      	ldr	r3, [r7, #4]
 800ddf0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ddf4:	1c5a      	adds	r2, r3, #1
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800ddfc:	6878      	ldr	r0, [r7, #4]
 800ddfe:	f000 f804 	bl	800de0a <USBH_HandleSof>
}
 800de02:	bf00      	nop
 800de04:	3708      	adds	r7, #8
 800de06:	46bd      	mov	sp, r7
 800de08:	bd80      	pop	{r7, pc}

0800de0a <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800de0a:	b580      	push	{r7, lr}
 800de0c:	b082      	sub	sp, #8
 800de0e:	af00      	add	r7, sp, #0
 800de10:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800de12:	687b      	ldr	r3, [r7, #4]
 800de14:	781b      	ldrb	r3, [r3, #0]
 800de16:	b2db      	uxtb	r3, r3
 800de18:	2b0b      	cmp	r3, #11
 800de1a:	d10a      	bne.n	800de32 <USBH_HandleSof+0x28>
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800de22:	2b00      	cmp	r3, #0
 800de24:	d005      	beq.n	800de32 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800de26:	687b      	ldr	r3, [r7, #4]
 800de28:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800de2c:	699b      	ldr	r3, [r3, #24]
 800de2e:	6878      	ldr	r0, [r7, #4]
 800de30:	4798      	blx	r3
  }
}
 800de32:	bf00      	nop
 800de34:	3708      	adds	r7, #8
 800de36:	46bd      	mov	sp, r7
 800de38:	bd80      	pop	{r7, pc}

0800de3a <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800de3a:	b480      	push	{r7}
 800de3c:	b083      	sub	sp, #12
 800de3e:	af00      	add	r7, sp, #0
 800de40:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2201      	movs	r2, #1
 800de46:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800de4a:	bf00      	nop
}
 800de4c:	370c      	adds	r7, #12
 800de4e:	46bd      	mov	sp, r7
 800de50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de54:	4770      	bx	lr

0800de56 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800de56:	b480      	push	{r7}
 800de58:	b083      	sub	sp, #12
 800de5a:	af00      	add	r7, sp, #0
 800de5c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	2200      	movs	r2, #0
 800de62:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800de66:	bf00      	nop
}
 800de68:	370c      	adds	r7, #12
 800de6a:	46bd      	mov	sp, r7
 800de6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de70:	4770      	bx	lr

0800de72 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800de72:	b480      	push	{r7}
 800de74:	b083      	sub	sp, #12
 800de76:	af00      	add	r7, sp, #0
 800de78:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800de7a:	687b      	ldr	r3, [r7, #4]
 800de7c:	2201      	movs	r2, #1
 800de7e:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	2200      	movs	r2, #0
 800de86:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800de8a:	687b      	ldr	r3, [r7, #4]
 800de8c:	2200      	movs	r2, #0
 800de8e:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800de92:	2300      	movs	r3, #0
}
 800de94:	4618      	mov	r0, r3
 800de96:	370c      	adds	r7, #12
 800de98:	46bd      	mov	sp, r7
 800de9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de9e:	4770      	bx	lr

0800dea0 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800dea0:	b580      	push	{r7, lr}
 800dea2:	b082      	sub	sp, #8
 800dea4:	af00      	add	r7, sp, #0
 800dea6:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2201      	movs	r2, #1
 800deac:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800deb0:	687b      	ldr	r3, [r7, #4]
 800deb2:	2200      	movs	r2, #0
 800deb4:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	2200      	movs	r2, #0
 800debc:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800dec0:	6878      	ldr	r0, [r7, #4]
 800dec2:	f001 f8be 	bl	800f042 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800dec6:	687b      	ldr	r3, [r7, #4]
 800dec8:	791b      	ldrb	r3, [r3, #4]
 800deca:	4619      	mov	r1, r3
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f000 ff0b 	bl	800ece8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	795b      	ldrb	r3, [r3, #5]
 800ded6:	4619      	mov	r1, r3
 800ded8:	6878      	ldr	r0, [r7, #4]
 800deda:	f000 ff05 	bl	800ece8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800dede:	2300      	movs	r3, #0
}
 800dee0:	4618      	mov	r0, r3
 800dee2:	3708      	adds	r7, #8
 800dee4:	46bd      	mov	sp, r7
 800dee6:	bd80      	pop	{r7, pc}

0800dee8 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800dee8:	b580      	push	{r7, lr}
 800deea:	b086      	sub	sp, #24
 800deec:	af02      	add	r7, sp, #8
 800deee:	6078      	str	r0, [r7, #4]
 800def0:	460b      	mov	r3, r1
 800def2:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800def4:	887b      	ldrh	r3, [r7, #2]
 800def6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800defa:	d901      	bls.n	800df00 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800defc:	2303      	movs	r3, #3
 800defe:	e01b      	b.n	800df38 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800df00:	687b      	ldr	r3, [r7, #4]
 800df02:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800df06:	887b      	ldrh	r3, [r7, #2]
 800df08:	9300      	str	r3, [sp, #0]
 800df0a:	4613      	mov	r3, r2
 800df0c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800df10:	2100      	movs	r1, #0
 800df12:	6878      	ldr	r0, [r7, #4]
 800df14:	f000 f872 	bl	800dffc <USBH_GetDescriptor>
 800df18:	4603      	mov	r3, r0
 800df1a:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800df1c:	7bfb      	ldrb	r3, [r7, #15]
 800df1e:	2b00      	cmp	r3, #0
 800df20:	d109      	bne.n	800df36 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800df22:	687b      	ldr	r3, [r7, #4]
 800df24:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800df28:	887a      	ldrh	r2, [r7, #2]
 800df2a:	4619      	mov	r1, r3
 800df2c:	6878      	ldr	r0, [r7, #4]
 800df2e:	f000 f929 	bl	800e184 <USBH_ParseDevDesc>
 800df32:	4603      	mov	r3, r0
 800df34:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800df36:	7bfb      	ldrb	r3, [r7, #15]
}
 800df38:	4618      	mov	r0, r3
 800df3a:	3710      	adds	r7, #16
 800df3c:	46bd      	mov	sp, r7
 800df3e:	bd80      	pop	{r7, pc}

0800df40 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b086      	sub	sp, #24
 800df44:	af02      	add	r7, sp, #8
 800df46:	6078      	str	r0, [r7, #4]
 800df48:	460b      	mov	r3, r1
 800df4a:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	331c      	adds	r3, #28
 800df50:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800df52:	887b      	ldrh	r3, [r7, #2]
 800df54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800df58:	d901      	bls.n	800df5e <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800df5a:	2303      	movs	r3, #3
 800df5c:	e016      	b.n	800df8c <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800df5e:	887b      	ldrh	r3, [r7, #2]
 800df60:	9300      	str	r3, [sp, #0]
 800df62:	68bb      	ldr	r3, [r7, #8]
 800df64:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800df68:	2100      	movs	r1, #0
 800df6a:	6878      	ldr	r0, [r7, #4]
 800df6c:	f000 f846 	bl	800dffc <USBH_GetDescriptor>
 800df70:	4603      	mov	r3, r0
 800df72:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800df74:	7bfb      	ldrb	r3, [r7, #15]
 800df76:	2b00      	cmp	r3, #0
 800df78:	d107      	bne.n	800df8a <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800df7a:	887b      	ldrh	r3, [r7, #2]
 800df7c:	461a      	mov	r2, r3
 800df7e:	68b9      	ldr	r1, [r7, #8]
 800df80:	6878      	ldr	r0, [r7, #4]
 800df82:	f000 f9af 	bl	800e2e4 <USBH_ParseCfgDesc>
 800df86:	4603      	mov	r3, r0
 800df88:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800df8a:	7bfb      	ldrb	r3, [r7, #15]
}
 800df8c:	4618      	mov	r0, r3
 800df8e:	3710      	adds	r7, #16
 800df90:	46bd      	mov	sp, r7
 800df92:	bd80      	pop	{r7, pc}

0800df94 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800df94:	b580      	push	{r7, lr}
 800df96:	b088      	sub	sp, #32
 800df98:	af02      	add	r7, sp, #8
 800df9a:	60f8      	str	r0, [r7, #12]
 800df9c:	607a      	str	r2, [r7, #4]
 800df9e:	461a      	mov	r2, r3
 800dfa0:	460b      	mov	r3, r1
 800dfa2:	72fb      	strb	r3, [r7, #11]
 800dfa4:	4613      	mov	r3, r2
 800dfa6:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800dfa8:	893b      	ldrh	r3, [r7, #8]
 800dfaa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dfae:	d802      	bhi.n	800dfb6 <USBH_Get_StringDesc+0x22>
 800dfb0:	687b      	ldr	r3, [r7, #4]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d101      	bne.n	800dfba <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800dfb6:	2303      	movs	r3, #3
 800dfb8:	e01c      	b.n	800dff4 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800dfba:	7afb      	ldrb	r3, [r7, #11]
 800dfbc:	b29b      	uxth	r3, r3
 800dfbe:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800dfc2:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800dfca:	893b      	ldrh	r3, [r7, #8]
 800dfcc:	9300      	str	r3, [sp, #0]
 800dfce:	460b      	mov	r3, r1
 800dfd0:	2100      	movs	r1, #0
 800dfd2:	68f8      	ldr	r0, [r7, #12]
 800dfd4:	f000 f812 	bl	800dffc <USBH_GetDescriptor>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800dfdc:	7dfb      	ldrb	r3, [r7, #23]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d107      	bne.n	800dff2 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800dfe2:	68fb      	ldr	r3, [r7, #12]
 800dfe4:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800dfe8:	893a      	ldrh	r2, [r7, #8]
 800dfea:	6879      	ldr	r1, [r7, #4]
 800dfec:	4618      	mov	r0, r3
 800dfee:	f000 fb8d 	bl	800e70c <USBH_ParseStringDesc>
  }

  return status;
 800dff2:	7dfb      	ldrb	r3, [r7, #23]
}
 800dff4:	4618      	mov	r0, r3
 800dff6:	3718      	adds	r7, #24
 800dff8:	46bd      	mov	sp, r7
 800dffa:	bd80      	pop	{r7, pc}

0800dffc <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800dffc:	b580      	push	{r7, lr}
 800dffe:	b084      	sub	sp, #16
 800e000:	af00      	add	r7, sp, #0
 800e002:	60f8      	str	r0, [r7, #12]
 800e004:	607b      	str	r3, [r7, #4]
 800e006:	460b      	mov	r3, r1
 800e008:	72fb      	strb	r3, [r7, #11]
 800e00a:	4613      	mov	r3, r2
 800e00c:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800e00e:	68fb      	ldr	r3, [r7, #12]
 800e010:	789b      	ldrb	r3, [r3, #2]
 800e012:	2b01      	cmp	r3, #1
 800e014:	d11c      	bne.n	800e050 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800e016:	7afb      	ldrb	r3, [r7, #11]
 800e018:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800e01c:	b2da      	uxtb	r2, r3
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800e022:	68fb      	ldr	r3, [r7, #12]
 800e024:	2206      	movs	r2, #6
 800e026:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800e028:	68fb      	ldr	r3, [r7, #12]
 800e02a:	893a      	ldrh	r2, [r7, #8]
 800e02c:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800e02e:	893b      	ldrh	r3, [r7, #8]
 800e030:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e034:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800e038:	d104      	bne.n	800e044 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800e03a:	68fb      	ldr	r3, [r7, #12]
 800e03c:	f240 4209 	movw	r2, #1033	@ 0x409
 800e040:	829a      	strh	r2, [r3, #20]
 800e042:	e002      	b.n	800e04a <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800e044:	68fb      	ldr	r3, [r7, #12]
 800e046:	2200      	movs	r2, #0
 800e048:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800e04a:	68fb      	ldr	r3, [r7, #12]
 800e04c:	8b3a      	ldrh	r2, [r7, #24]
 800e04e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800e050:	8b3b      	ldrh	r3, [r7, #24]
 800e052:	461a      	mov	r2, r3
 800e054:	6879      	ldr	r1, [r7, #4]
 800e056:	68f8      	ldr	r0, [r7, #12]
 800e058:	f000 fba5 	bl	800e7a6 <USBH_CtlReq>
 800e05c:	4603      	mov	r3, r0
}
 800e05e:	4618      	mov	r0, r3
 800e060:	3710      	adds	r7, #16
 800e062:	46bd      	mov	sp, r7
 800e064:	bd80      	pop	{r7, pc}

0800e066 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800e066:	b580      	push	{r7, lr}
 800e068:	b082      	sub	sp, #8
 800e06a:	af00      	add	r7, sp, #0
 800e06c:	6078      	str	r0, [r7, #4]
 800e06e:	460b      	mov	r3, r1
 800e070:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e072:	687b      	ldr	r3, [r7, #4]
 800e074:	789b      	ldrb	r3, [r3, #2]
 800e076:	2b01      	cmp	r3, #1
 800e078:	d10f      	bne.n	800e09a <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800e07a:	687b      	ldr	r3, [r7, #4]
 800e07c:	2200      	movs	r2, #0
 800e07e:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800e080:	687b      	ldr	r3, [r7, #4]
 800e082:	2205      	movs	r2, #5
 800e084:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800e086:	78fb      	ldrb	r3, [r7, #3]
 800e088:	b29a      	uxth	r2, r3
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e08e:	687b      	ldr	r3, [r7, #4]
 800e090:	2200      	movs	r2, #0
 800e092:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	2200      	movs	r2, #0
 800e098:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800e09a:	2200      	movs	r2, #0
 800e09c:	2100      	movs	r1, #0
 800e09e:	6878      	ldr	r0, [r7, #4]
 800e0a0:	f000 fb81 	bl	800e7a6 <USBH_CtlReq>
 800e0a4:	4603      	mov	r3, r0
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3708      	adds	r7, #8
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}

0800e0ae <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800e0ae:	b580      	push	{r7, lr}
 800e0b0:	b082      	sub	sp, #8
 800e0b2:	af00      	add	r7, sp, #0
 800e0b4:	6078      	str	r0, [r7, #4]
 800e0b6:	460b      	mov	r3, r1
 800e0b8:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800e0ba:	687b      	ldr	r3, [r7, #4]
 800e0bc:	789b      	ldrb	r3, [r3, #2]
 800e0be:	2b01      	cmp	r3, #1
 800e0c0:	d10e      	bne.n	800e0e0 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e0c2:	687b      	ldr	r3, [r7, #4]
 800e0c4:	2200      	movs	r2, #0
 800e0c6:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	2209      	movs	r2, #9
 800e0cc:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	887a      	ldrh	r2, [r7, #2]
 800e0d2:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	2200      	movs	r2, #0
 800e0d8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2200      	movs	r2, #0
 800e0de:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800e0e0:	2200      	movs	r2, #0
 800e0e2:	2100      	movs	r1, #0
 800e0e4:	6878      	ldr	r0, [r7, #4]
 800e0e6:	f000 fb5e 	bl	800e7a6 <USBH_CtlReq>
 800e0ea:	4603      	mov	r3, r0
}
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	3708      	adds	r7, #8
 800e0f0:	46bd      	mov	sp, r7
 800e0f2:	bd80      	pop	{r7, pc}

0800e0f4 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800e0f4:	b580      	push	{r7, lr}
 800e0f6:	b082      	sub	sp, #8
 800e0f8:	af00      	add	r7, sp, #0
 800e0fa:	6078      	str	r0, [r7, #4]
 800e0fc:	460b      	mov	r3, r1
 800e0fe:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e100:	687b      	ldr	r3, [r7, #4]
 800e102:	789b      	ldrb	r3, [r3, #2]
 800e104:	2b01      	cmp	r3, #1
 800e106:	d10f      	bne.n	800e128 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	2200      	movs	r2, #0
 800e10c:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800e10e:	687b      	ldr	r3, [r7, #4]
 800e110:	2203      	movs	r2, #3
 800e112:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800e114:	78fb      	ldrb	r3, [r7, #3]
 800e116:	b29a      	uxth	r2, r3
 800e118:	687b      	ldr	r3, [r7, #4]
 800e11a:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800e11c:	687b      	ldr	r3, [r7, #4]
 800e11e:	2200      	movs	r2, #0
 800e120:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e122:	687b      	ldr	r3, [r7, #4]
 800e124:	2200      	movs	r2, #0
 800e126:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800e128:	2200      	movs	r2, #0
 800e12a:	2100      	movs	r1, #0
 800e12c:	6878      	ldr	r0, [r7, #4]
 800e12e:	f000 fb3a 	bl	800e7a6 <USBH_CtlReq>
 800e132:	4603      	mov	r3, r0
}
 800e134:	4618      	mov	r0, r3
 800e136:	3708      	adds	r7, #8
 800e138:	46bd      	mov	sp, r7
 800e13a:	bd80      	pop	{r7, pc}

0800e13c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800e13c:	b580      	push	{r7, lr}
 800e13e:	b082      	sub	sp, #8
 800e140:	af00      	add	r7, sp, #0
 800e142:	6078      	str	r0, [r7, #4]
 800e144:	460b      	mov	r3, r1
 800e146:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800e148:	687b      	ldr	r3, [r7, #4]
 800e14a:	789b      	ldrb	r3, [r3, #2]
 800e14c:	2b01      	cmp	r3, #1
 800e14e:	d10f      	bne.n	800e170 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2202      	movs	r2, #2
 800e154:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2201      	movs	r2, #1
 800e15a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2200      	movs	r2, #0
 800e160:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800e162:	78fb      	ldrb	r3, [r7, #3]
 800e164:	b29a      	uxth	r2, r3
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800e16a:	687b      	ldr	r3, [r7, #4]
 800e16c:	2200      	movs	r2, #0
 800e16e:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800e170:	2200      	movs	r2, #0
 800e172:	2100      	movs	r1, #0
 800e174:	6878      	ldr	r0, [r7, #4]
 800e176:	f000 fb16 	bl	800e7a6 <USBH_CtlReq>
 800e17a:	4603      	mov	r3, r0
}
 800e17c:	4618      	mov	r0, r3
 800e17e:	3708      	adds	r7, #8
 800e180:	46bd      	mov	sp, r7
 800e182:	bd80      	pop	{r7, pc}

0800e184 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800e184:	b480      	push	{r7}
 800e186:	b087      	sub	sp, #28
 800e188:	af00      	add	r7, sp, #0
 800e18a:	60f8      	str	r0, [r7, #12]
 800e18c:	60b9      	str	r1, [r7, #8]
 800e18e:	4613      	mov	r3, r2
 800e190:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800e198:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800e19a:	2300      	movs	r3, #0
 800e19c:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800e19e:	68bb      	ldr	r3, [r7, #8]
 800e1a0:	2b00      	cmp	r3, #0
 800e1a2:	d101      	bne.n	800e1a8 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800e1a4:	2302      	movs	r3, #2
 800e1a6:	e094      	b.n	800e2d2 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800e1a8:	68bb      	ldr	r3, [r7, #8]
 800e1aa:	781a      	ldrb	r2, [r3, #0]
 800e1ac:	693b      	ldr	r3, [r7, #16]
 800e1ae:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800e1b0:	68bb      	ldr	r3, [r7, #8]
 800e1b2:	785a      	ldrb	r2, [r3, #1]
 800e1b4:	693b      	ldr	r3, [r7, #16]
 800e1b6:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800e1b8:	68bb      	ldr	r3, [r7, #8]
 800e1ba:	3302      	adds	r3, #2
 800e1bc:	781b      	ldrb	r3, [r3, #0]
 800e1be:	461a      	mov	r2, r3
 800e1c0:	68bb      	ldr	r3, [r7, #8]
 800e1c2:	3303      	adds	r3, #3
 800e1c4:	781b      	ldrb	r3, [r3, #0]
 800e1c6:	021b      	lsls	r3, r3, #8
 800e1c8:	b29b      	uxth	r3, r3
 800e1ca:	4313      	orrs	r3, r2
 800e1cc:	b29a      	uxth	r2, r3
 800e1ce:	693b      	ldr	r3, [r7, #16]
 800e1d0:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800e1d2:	68bb      	ldr	r3, [r7, #8]
 800e1d4:	791a      	ldrb	r2, [r3, #4]
 800e1d6:	693b      	ldr	r3, [r7, #16]
 800e1d8:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800e1da:	68bb      	ldr	r3, [r7, #8]
 800e1dc:	795a      	ldrb	r2, [r3, #5]
 800e1de:	693b      	ldr	r3, [r7, #16]
 800e1e0:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	799a      	ldrb	r2, [r3, #6]
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800e1ea:	68bb      	ldr	r3, [r7, #8]
 800e1ec:	79da      	ldrb	r2, [r3, #7]
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d004      	beq.n	800e206 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800e202:	2b01      	cmp	r3, #1
 800e204:	d11b      	bne.n	800e23e <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800e206:	693b      	ldr	r3, [r7, #16]
 800e208:	79db      	ldrb	r3, [r3, #7]
 800e20a:	2b20      	cmp	r3, #32
 800e20c:	dc0f      	bgt.n	800e22e <USBH_ParseDevDesc+0xaa>
 800e20e:	2b08      	cmp	r3, #8
 800e210:	db0f      	blt.n	800e232 <USBH_ParseDevDesc+0xae>
 800e212:	3b08      	subs	r3, #8
 800e214:	4a32      	ldr	r2, [pc, #200]	@ (800e2e0 <USBH_ParseDevDesc+0x15c>)
 800e216:	fa22 f303 	lsr.w	r3, r2, r3
 800e21a:	f003 0301 	and.w	r3, r3, #1
 800e21e:	2b00      	cmp	r3, #0
 800e220:	bf14      	ite	ne
 800e222:	2301      	movne	r3, #1
 800e224:	2300      	moveq	r3, #0
 800e226:	b2db      	uxtb	r3, r3
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d106      	bne.n	800e23a <USBH_ParseDevDesc+0xb6>
 800e22c:	e001      	b.n	800e232 <USBH_ParseDevDesc+0xae>
 800e22e:	2b40      	cmp	r3, #64	@ 0x40
 800e230:	d003      	beq.n	800e23a <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800e232:	693b      	ldr	r3, [r7, #16]
 800e234:	2208      	movs	r2, #8
 800e236:	71da      	strb	r2, [r3, #7]
        break;
 800e238:	e000      	b.n	800e23c <USBH_ParseDevDesc+0xb8>
        break;
 800e23a:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800e23c:	e00e      	b.n	800e25c <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e244:	2b02      	cmp	r3, #2
 800e246:	d107      	bne.n	800e258 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800e248:	693b      	ldr	r3, [r7, #16]
 800e24a:	79db      	ldrb	r3, [r3, #7]
 800e24c:	2b08      	cmp	r3, #8
 800e24e:	d005      	beq.n	800e25c <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800e250:	693b      	ldr	r3, [r7, #16]
 800e252:	2208      	movs	r2, #8
 800e254:	71da      	strb	r2, [r3, #7]
 800e256:	e001      	b.n	800e25c <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800e258:	2303      	movs	r3, #3
 800e25a:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800e25c:	88fb      	ldrh	r3, [r7, #6]
 800e25e:	2b08      	cmp	r3, #8
 800e260:	d936      	bls.n	800e2d0 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800e262:	68bb      	ldr	r3, [r7, #8]
 800e264:	3308      	adds	r3, #8
 800e266:	781b      	ldrb	r3, [r3, #0]
 800e268:	461a      	mov	r2, r3
 800e26a:	68bb      	ldr	r3, [r7, #8]
 800e26c:	3309      	adds	r3, #9
 800e26e:	781b      	ldrb	r3, [r3, #0]
 800e270:	021b      	lsls	r3, r3, #8
 800e272:	b29b      	uxth	r3, r3
 800e274:	4313      	orrs	r3, r2
 800e276:	b29a      	uxth	r2, r3
 800e278:	693b      	ldr	r3, [r7, #16]
 800e27a:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800e27c:	68bb      	ldr	r3, [r7, #8]
 800e27e:	330a      	adds	r3, #10
 800e280:	781b      	ldrb	r3, [r3, #0]
 800e282:	461a      	mov	r2, r3
 800e284:	68bb      	ldr	r3, [r7, #8]
 800e286:	330b      	adds	r3, #11
 800e288:	781b      	ldrb	r3, [r3, #0]
 800e28a:	021b      	lsls	r3, r3, #8
 800e28c:	b29b      	uxth	r3, r3
 800e28e:	4313      	orrs	r3, r2
 800e290:	b29a      	uxth	r2, r3
 800e292:	693b      	ldr	r3, [r7, #16]
 800e294:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800e296:	68bb      	ldr	r3, [r7, #8]
 800e298:	330c      	adds	r3, #12
 800e29a:	781b      	ldrb	r3, [r3, #0]
 800e29c:	461a      	mov	r2, r3
 800e29e:	68bb      	ldr	r3, [r7, #8]
 800e2a0:	330d      	adds	r3, #13
 800e2a2:	781b      	ldrb	r3, [r3, #0]
 800e2a4:	021b      	lsls	r3, r3, #8
 800e2a6:	b29b      	uxth	r3, r3
 800e2a8:	4313      	orrs	r3, r2
 800e2aa:	b29a      	uxth	r2, r3
 800e2ac:	693b      	ldr	r3, [r7, #16]
 800e2ae:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800e2b0:	68bb      	ldr	r3, [r7, #8]
 800e2b2:	7b9a      	ldrb	r2, [r3, #14]
 800e2b4:	693b      	ldr	r3, [r7, #16]
 800e2b6:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800e2b8:	68bb      	ldr	r3, [r7, #8]
 800e2ba:	7bda      	ldrb	r2, [r3, #15]
 800e2bc:	693b      	ldr	r3, [r7, #16]
 800e2be:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800e2c0:	68bb      	ldr	r3, [r7, #8]
 800e2c2:	7c1a      	ldrb	r2, [r3, #16]
 800e2c4:	693b      	ldr	r3, [r7, #16]
 800e2c6:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800e2c8:	68bb      	ldr	r3, [r7, #8]
 800e2ca:	7c5a      	ldrb	r2, [r3, #17]
 800e2cc:	693b      	ldr	r3, [r7, #16]
 800e2ce:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800e2d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800e2d2:	4618      	mov	r0, r3
 800e2d4:	371c      	adds	r7, #28
 800e2d6:	46bd      	mov	sp, r7
 800e2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2dc:	4770      	bx	lr
 800e2de:	bf00      	nop
 800e2e0:	01000101 	.word	0x01000101

0800e2e4 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800e2e4:	b580      	push	{r7, lr}
 800e2e6:	b08c      	sub	sp, #48	@ 0x30
 800e2e8:	af00      	add	r7, sp, #0
 800e2ea:	60f8      	str	r0, [r7, #12]
 800e2ec:	60b9      	str	r1, [r7, #8]
 800e2ee:	4613      	mov	r3, r2
 800e2f0:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800e2f8:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800e300:	2300      	movs	r3, #0
 800e302:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800e306:	2300      	movs	r3, #0
 800e308:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800e30c:	68bb      	ldr	r3, [r7, #8]
 800e30e:	2b00      	cmp	r3, #0
 800e310:	d101      	bne.n	800e316 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800e312:	2302      	movs	r3, #2
 800e314:	e0da      	b.n	800e4cc <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800e316:	68bb      	ldr	r3, [r7, #8]
 800e318:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800e31a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e31c:	781b      	ldrb	r3, [r3, #0]
 800e31e:	2b09      	cmp	r3, #9
 800e320:	d002      	beq.n	800e328 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800e322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e324:	2209      	movs	r2, #9
 800e326:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800e328:	68bb      	ldr	r3, [r7, #8]
 800e32a:	781a      	ldrb	r2, [r3, #0]
 800e32c:	6a3b      	ldr	r3, [r7, #32]
 800e32e:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800e330:	68bb      	ldr	r3, [r7, #8]
 800e332:	785a      	ldrb	r2, [r3, #1]
 800e334:	6a3b      	ldr	r3, [r7, #32]
 800e336:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800e338:	68bb      	ldr	r3, [r7, #8]
 800e33a:	3302      	adds	r3, #2
 800e33c:	781b      	ldrb	r3, [r3, #0]
 800e33e:	461a      	mov	r2, r3
 800e340:	68bb      	ldr	r3, [r7, #8]
 800e342:	3303      	adds	r3, #3
 800e344:	781b      	ldrb	r3, [r3, #0]
 800e346:	021b      	lsls	r3, r3, #8
 800e348:	b29b      	uxth	r3, r3
 800e34a:	4313      	orrs	r3, r2
 800e34c:	b29b      	uxth	r3, r3
 800e34e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e352:	bf28      	it	cs
 800e354:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800e358:	b29a      	uxth	r2, r3
 800e35a:	6a3b      	ldr	r3, [r7, #32]
 800e35c:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800e35e:	68bb      	ldr	r3, [r7, #8]
 800e360:	791a      	ldrb	r2, [r3, #4]
 800e362:	6a3b      	ldr	r3, [r7, #32]
 800e364:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800e366:	68bb      	ldr	r3, [r7, #8]
 800e368:	795a      	ldrb	r2, [r3, #5]
 800e36a:	6a3b      	ldr	r3, [r7, #32]
 800e36c:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800e36e:	68bb      	ldr	r3, [r7, #8]
 800e370:	799a      	ldrb	r2, [r3, #6]
 800e372:	6a3b      	ldr	r3, [r7, #32]
 800e374:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800e376:	68bb      	ldr	r3, [r7, #8]
 800e378:	79da      	ldrb	r2, [r3, #7]
 800e37a:	6a3b      	ldr	r3, [r7, #32]
 800e37c:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800e37e:	68bb      	ldr	r3, [r7, #8]
 800e380:	7a1a      	ldrb	r2, [r3, #8]
 800e382:	6a3b      	ldr	r3, [r7, #32]
 800e384:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800e386:	88fb      	ldrh	r3, [r7, #6]
 800e388:	2b09      	cmp	r3, #9
 800e38a:	f240 809d 	bls.w	800e4c8 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800e38e:	2309      	movs	r3, #9
 800e390:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800e392:	2300      	movs	r3, #0
 800e394:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e396:	e081      	b.n	800e49c <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e398:	f107 0316 	add.w	r3, r7, #22
 800e39c:	4619      	mov	r1, r3
 800e39e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e3a0:	f000 f9e7 	bl	800e772 <USBH_GetNextDesc>
 800e3a4:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800e3a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3a8:	785b      	ldrb	r3, [r3, #1]
 800e3aa:	2b04      	cmp	r3, #4
 800e3ac:	d176      	bne.n	800e49c <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800e3ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3b0:	781b      	ldrb	r3, [r3, #0]
 800e3b2:	2b09      	cmp	r3, #9
 800e3b4:	d002      	beq.n	800e3bc <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800e3b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3b8:	2209      	movs	r2, #9
 800e3ba:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800e3bc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e3c0:	221a      	movs	r2, #26
 800e3c2:	fb02 f303 	mul.w	r3, r2, r3
 800e3c6:	3308      	adds	r3, #8
 800e3c8:	6a3a      	ldr	r2, [r7, #32]
 800e3ca:	4413      	add	r3, r2
 800e3cc:	3302      	adds	r3, #2
 800e3ce:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800e3d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e3d2:	69f8      	ldr	r0, [r7, #28]
 800e3d4:	f000 f87e 	bl	800e4d4 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800e3d8:	2300      	movs	r3, #0
 800e3da:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800e3de:	2300      	movs	r3, #0
 800e3e0:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e3e2:	e043      	b.n	800e46c <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800e3e4:	f107 0316 	add.w	r3, r7, #22
 800e3e8:	4619      	mov	r1, r3
 800e3ea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800e3ec:	f000 f9c1 	bl	800e772 <USBH_GetNextDesc>
 800e3f0:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800e3f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3f4:	785b      	ldrb	r3, [r3, #1]
 800e3f6:	2b05      	cmp	r3, #5
 800e3f8:	d138      	bne.n	800e46c <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800e3fa:	69fb      	ldr	r3, [r7, #28]
 800e3fc:	795b      	ldrb	r3, [r3, #5]
 800e3fe:	2b01      	cmp	r3, #1
 800e400:	d113      	bne.n	800e42a <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800e402:	69fb      	ldr	r3, [r7, #28]
 800e404:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800e406:	2b02      	cmp	r3, #2
 800e408:	d003      	beq.n	800e412 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800e40a:	69fb      	ldr	r3, [r7, #28]
 800e40c:	799b      	ldrb	r3, [r3, #6]
 800e40e:	2b03      	cmp	r3, #3
 800e410:	d10b      	bne.n	800e42a <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e412:	69fb      	ldr	r3, [r7, #28]
 800e414:	79db      	ldrb	r3, [r3, #7]
 800e416:	2b00      	cmp	r3, #0
 800e418:	d10b      	bne.n	800e432 <USBH_ParseCfgDesc+0x14e>
 800e41a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e41c:	781b      	ldrb	r3, [r3, #0]
 800e41e:	2b09      	cmp	r3, #9
 800e420:	d007      	beq.n	800e432 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800e422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e424:	2209      	movs	r2, #9
 800e426:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e428:	e003      	b.n	800e432 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800e42a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e42c:	2207      	movs	r2, #7
 800e42e:	701a      	strb	r2, [r3, #0]
 800e430:	e000      	b.n	800e434 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800e432:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800e434:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e438:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800e43c:	3201      	adds	r2, #1
 800e43e:	00d2      	lsls	r2, r2, #3
 800e440:	211a      	movs	r1, #26
 800e442:	fb01 f303 	mul.w	r3, r1, r3
 800e446:	4413      	add	r3, r2
 800e448:	3308      	adds	r3, #8
 800e44a:	6a3a      	ldr	r2, [r7, #32]
 800e44c:	4413      	add	r3, r2
 800e44e:	3304      	adds	r3, #4
 800e450:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800e452:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800e454:	69b9      	ldr	r1, [r7, #24]
 800e456:	68f8      	ldr	r0, [r7, #12]
 800e458:	f000 f870 	bl	800e53c <USBH_ParseEPDesc>
 800e45c:	4603      	mov	r3, r0
 800e45e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800e462:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800e466:	3301      	adds	r3, #1
 800e468:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800e46c:	69fb      	ldr	r3, [r7, #28]
 800e46e:	791b      	ldrb	r3, [r3, #4]
 800e470:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800e474:	429a      	cmp	r2, r3
 800e476:	d204      	bcs.n	800e482 <USBH_ParseCfgDesc+0x19e>
 800e478:	6a3b      	ldr	r3, [r7, #32]
 800e47a:	885a      	ldrh	r2, [r3, #2]
 800e47c:	8afb      	ldrh	r3, [r7, #22]
 800e47e:	429a      	cmp	r2, r3
 800e480:	d8b0      	bhi.n	800e3e4 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800e482:	69fb      	ldr	r3, [r7, #28]
 800e484:	791b      	ldrb	r3, [r3, #4]
 800e486:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800e48a:	429a      	cmp	r2, r3
 800e48c:	d201      	bcs.n	800e492 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800e48e:	2303      	movs	r3, #3
 800e490:	e01c      	b.n	800e4cc <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800e492:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e496:	3301      	adds	r3, #1
 800e498:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800e49c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e4a0:	2b01      	cmp	r3, #1
 800e4a2:	d805      	bhi.n	800e4b0 <USBH_ParseCfgDesc+0x1cc>
 800e4a4:	6a3b      	ldr	r3, [r7, #32]
 800e4a6:	885a      	ldrh	r2, [r3, #2]
 800e4a8:	8afb      	ldrh	r3, [r7, #22]
 800e4aa:	429a      	cmp	r2, r3
 800e4ac:	f63f af74 	bhi.w	800e398 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800e4b0:	6a3b      	ldr	r3, [r7, #32]
 800e4b2:	791b      	ldrb	r3, [r3, #4]
 800e4b4:	2b02      	cmp	r3, #2
 800e4b6:	bf28      	it	cs
 800e4b8:	2302      	movcs	r3, #2
 800e4ba:	b2db      	uxtb	r3, r3
 800e4bc:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	d201      	bcs.n	800e4c8 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800e4c4:	2303      	movs	r3, #3
 800e4c6:	e001      	b.n	800e4cc <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800e4c8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800e4cc:	4618      	mov	r0, r3
 800e4ce:	3730      	adds	r7, #48	@ 0x30
 800e4d0:	46bd      	mov	sp, r7
 800e4d2:	bd80      	pop	{r7, pc}

0800e4d4 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800e4d4:	b480      	push	{r7}
 800e4d6:	b083      	sub	sp, #12
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	6078      	str	r0, [r7, #4]
 800e4dc:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	781a      	ldrb	r2, [r3, #0]
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800e4e6:	683b      	ldr	r3, [r7, #0]
 800e4e8:	785a      	ldrb	r2, [r3, #1]
 800e4ea:	687b      	ldr	r3, [r7, #4]
 800e4ec:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	789a      	ldrb	r2, [r3, #2]
 800e4f2:	687b      	ldr	r3, [r7, #4]
 800e4f4:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800e4f6:	683b      	ldr	r3, [r7, #0]
 800e4f8:	78da      	ldrb	r2, [r3, #3]
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800e4fe:	683b      	ldr	r3, [r7, #0]
 800e500:	3304      	adds	r3, #4
 800e502:	781b      	ldrb	r3, [r3, #0]
 800e504:	2b02      	cmp	r3, #2
 800e506:	bf28      	it	cs
 800e508:	2302      	movcs	r3, #2
 800e50a:	b2da      	uxtb	r2, r3
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800e510:	683b      	ldr	r3, [r7, #0]
 800e512:	795a      	ldrb	r2, [r3, #5]
 800e514:	687b      	ldr	r3, [r7, #4]
 800e516:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800e518:	683b      	ldr	r3, [r7, #0]
 800e51a:	799a      	ldrb	r2, [r3, #6]
 800e51c:	687b      	ldr	r3, [r7, #4]
 800e51e:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	79da      	ldrb	r2, [r3, #7]
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800e528:	683b      	ldr	r3, [r7, #0]
 800e52a:	7a1a      	ldrb	r2, [r3, #8]
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	721a      	strb	r2, [r3, #8]
}
 800e530:	bf00      	nop
 800e532:	370c      	adds	r7, #12
 800e534:	46bd      	mov	sp, r7
 800e536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e53a:	4770      	bx	lr

0800e53c <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800e53c:	b480      	push	{r7}
 800e53e:	b087      	sub	sp, #28
 800e540:	af00      	add	r7, sp, #0
 800e542:	60f8      	str	r0, [r7, #12]
 800e544:	60b9      	str	r1, [r7, #8]
 800e546:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800e548:	2300      	movs	r3, #0
 800e54a:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	781a      	ldrb	r2, [r3, #0]
 800e550:	68bb      	ldr	r3, [r7, #8]
 800e552:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	785a      	ldrb	r2, [r3, #1]
 800e558:	68bb      	ldr	r3, [r7, #8]
 800e55a:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	789a      	ldrb	r2, [r3, #2]
 800e560:	68bb      	ldr	r3, [r7, #8]
 800e562:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	78da      	ldrb	r2, [r3, #3]
 800e568:	68bb      	ldr	r3, [r7, #8]
 800e56a:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	3304      	adds	r3, #4
 800e570:	781b      	ldrb	r3, [r3, #0]
 800e572:	461a      	mov	r2, r3
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	3305      	adds	r3, #5
 800e578:	781b      	ldrb	r3, [r3, #0]
 800e57a:	021b      	lsls	r3, r3, #8
 800e57c:	b29b      	uxth	r3, r3
 800e57e:	4313      	orrs	r3, r2
 800e580:	b29a      	uxth	r2, r3
 800e582:	68bb      	ldr	r3, [r7, #8]
 800e584:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	799a      	ldrb	r2, [r3, #6]
 800e58a:	68bb      	ldr	r3, [r7, #8]
 800e58c:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800e58e:	68bb      	ldr	r3, [r7, #8]
 800e590:	889b      	ldrh	r3, [r3, #4]
 800e592:	2b00      	cmp	r3, #0
 800e594:	d009      	beq.n	800e5aa <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800e596:	68bb      	ldr	r3, [r7, #8]
 800e598:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800e59a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e59e:	d804      	bhi.n	800e5aa <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800e5a0:	68bb      	ldr	r3, [r7, #8]
 800e5a2:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800e5a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e5a8:	d901      	bls.n	800e5ae <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800e5aa:	2303      	movs	r3, #3
 800e5ac:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e5b4:	2b00      	cmp	r3, #0
 800e5b6:	d136      	bne.n	800e626 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	78db      	ldrb	r3, [r3, #3]
 800e5bc:	f003 0303 	and.w	r3, r3, #3
 800e5c0:	2b02      	cmp	r3, #2
 800e5c2:	d108      	bne.n	800e5d6 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	889b      	ldrh	r3, [r3, #4]
 800e5c8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e5cc:	f240 8097 	bls.w	800e6fe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e5d0:	2303      	movs	r3, #3
 800e5d2:	75fb      	strb	r3, [r7, #23]
 800e5d4:	e093      	b.n	800e6fe <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800e5d6:	68bb      	ldr	r3, [r7, #8]
 800e5d8:	78db      	ldrb	r3, [r3, #3]
 800e5da:	f003 0303 	and.w	r3, r3, #3
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d107      	bne.n	800e5f2 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800e5e2:	68bb      	ldr	r3, [r7, #8]
 800e5e4:	889b      	ldrh	r3, [r3, #4]
 800e5e6:	2b40      	cmp	r3, #64	@ 0x40
 800e5e8:	f240 8089 	bls.w	800e6fe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e5ec:	2303      	movs	r3, #3
 800e5ee:	75fb      	strb	r3, [r7, #23]
 800e5f0:	e085      	b.n	800e6fe <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e5f2:	68bb      	ldr	r3, [r7, #8]
 800e5f4:	78db      	ldrb	r3, [r3, #3]
 800e5f6:	f003 0303 	and.w	r3, r3, #3
 800e5fa:	2b01      	cmp	r3, #1
 800e5fc:	d005      	beq.n	800e60a <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800e5fe:	68bb      	ldr	r3, [r7, #8]
 800e600:	78db      	ldrb	r3, [r3, #3]
 800e602:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800e606:	2b03      	cmp	r3, #3
 800e608:	d10a      	bne.n	800e620 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e60a:	68bb      	ldr	r3, [r7, #8]
 800e60c:	799b      	ldrb	r3, [r3, #6]
 800e60e:	2b00      	cmp	r3, #0
 800e610:	d003      	beq.n	800e61a <USBH_ParseEPDesc+0xde>
 800e612:	68bb      	ldr	r3, [r7, #8]
 800e614:	799b      	ldrb	r3, [r3, #6]
 800e616:	2b10      	cmp	r3, #16
 800e618:	d970      	bls.n	800e6fc <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800e61a:	2303      	movs	r3, #3
 800e61c:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e61e:	e06d      	b.n	800e6fc <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800e620:	2303      	movs	r3, #3
 800e622:	75fb      	strb	r3, [r7, #23]
 800e624:	e06b      	b.n	800e6fe <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	d13c      	bne.n	800e6aa <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800e630:	68bb      	ldr	r3, [r7, #8]
 800e632:	78db      	ldrb	r3, [r3, #3]
 800e634:	f003 0303 	and.w	r3, r3, #3
 800e638:	2b02      	cmp	r3, #2
 800e63a:	d005      	beq.n	800e648 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800e63c:	68bb      	ldr	r3, [r7, #8]
 800e63e:	78db      	ldrb	r3, [r3, #3]
 800e640:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800e644:	2b00      	cmp	r3, #0
 800e646:	d106      	bne.n	800e656 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	889b      	ldrh	r3, [r3, #4]
 800e64c:	2b40      	cmp	r3, #64	@ 0x40
 800e64e:	d956      	bls.n	800e6fe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e650:	2303      	movs	r3, #3
 800e652:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800e654:	e053      	b.n	800e6fe <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800e656:	68bb      	ldr	r3, [r7, #8]
 800e658:	78db      	ldrb	r3, [r3, #3]
 800e65a:	f003 0303 	and.w	r3, r3, #3
 800e65e:	2b01      	cmp	r3, #1
 800e660:	d10e      	bne.n	800e680 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800e662:	68bb      	ldr	r3, [r7, #8]
 800e664:	799b      	ldrb	r3, [r3, #6]
 800e666:	2b00      	cmp	r3, #0
 800e668:	d007      	beq.n	800e67a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800e66a:	68bb      	ldr	r3, [r7, #8]
 800e66c:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800e66e:	2b10      	cmp	r3, #16
 800e670:	d803      	bhi.n	800e67a <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800e672:	68bb      	ldr	r3, [r7, #8]
 800e674:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800e676:	2b40      	cmp	r3, #64	@ 0x40
 800e678:	d941      	bls.n	800e6fe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e67a:	2303      	movs	r3, #3
 800e67c:	75fb      	strb	r3, [r7, #23]
 800e67e:	e03e      	b.n	800e6fe <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	78db      	ldrb	r3, [r3, #3]
 800e684:	f003 0303 	and.w	r3, r3, #3
 800e688:	2b03      	cmp	r3, #3
 800e68a:	d10b      	bne.n	800e6a4 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800e68c:	68bb      	ldr	r3, [r7, #8]
 800e68e:	799b      	ldrb	r3, [r3, #6]
 800e690:	2b00      	cmp	r3, #0
 800e692:	d004      	beq.n	800e69e <USBH_ParseEPDesc+0x162>
 800e694:	68bb      	ldr	r3, [r7, #8]
 800e696:	889b      	ldrh	r3, [r3, #4]
 800e698:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800e69c:	d32f      	bcc.n	800e6fe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e69e:	2303      	movs	r3, #3
 800e6a0:	75fb      	strb	r3, [r7, #23]
 800e6a2:	e02c      	b.n	800e6fe <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800e6a4:	2303      	movs	r3, #3
 800e6a6:	75fb      	strb	r3, [r7, #23]
 800e6a8:	e029      	b.n	800e6fe <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800e6aa:	68fb      	ldr	r3, [r7, #12]
 800e6ac:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800e6b0:	2b02      	cmp	r3, #2
 800e6b2:	d120      	bne.n	800e6f6 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800e6b4:	68bb      	ldr	r3, [r7, #8]
 800e6b6:	78db      	ldrb	r3, [r3, #3]
 800e6b8:	f003 0303 	and.w	r3, r3, #3
 800e6bc:	2b00      	cmp	r3, #0
 800e6be:	d106      	bne.n	800e6ce <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800e6c0:	68bb      	ldr	r3, [r7, #8]
 800e6c2:	889b      	ldrh	r3, [r3, #4]
 800e6c4:	2b08      	cmp	r3, #8
 800e6c6:	d01a      	beq.n	800e6fe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e6c8:	2303      	movs	r3, #3
 800e6ca:	75fb      	strb	r3, [r7, #23]
 800e6cc:	e017      	b.n	800e6fe <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800e6ce:	68bb      	ldr	r3, [r7, #8]
 800e6d0:	78db      	ldrb	r3, [r3, #3]
 800e6d2:	f003 0303 	and.w	r3, r3, #3
 800e6d6:	2b03      	cmp	r3, #3
 800e6d8:	d10a      	bne.n	800e6f0 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	799b      	ldrb	r3, [r3, #6]
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d003      	beq.n	800e6ea <USBH_ParseEPDesc+0x1ae>
 800e6e2:	68bb      	ldr	r3, [r7, #8]
 800e6e4:	889b      	ldrh	r3, [r3, #4]
 800e6e6:	2b08      	cmp	r3, #8
 800e6e8:	d909      	bls.n	800e6fe <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800e6ea:	2303      	movs	r3, #3
 800e6ec:	75fb      	strb	r3, [r7, #23]
 800e6ee:	e006      	b.n	800e6fe <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800e6f0:	2303      	movs	r3, #3
 800e6f2:	75fb      	strb	r3, [r7, #23]
 800e6f4:	e003      	b.n	800e6fe <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800e6f6:	2303      	movs	r3, #3
 800e6f8:	75fb      	strb	r3, [r7, #23]
 800e6fa:	e000      	b.n	800e6fe <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800e6fc:	bf00      	nop
  }

  return status;
 800e6fe:	7dfb      	ldrb	r3, [r7, #23]
}
 800e700:	4618      	mov	r0, r3
 800e702:	371c      	adds	r7, #28
 800e704:	46bd      	mov	sp, r7
 800e706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e70a:	4770      	bx	lr

0800e70c <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800e70c:	b480      	push	{r7}
 800e70e:	b087      	sub	sp, #28
 800e710:	af00      	add	r7, sp, #0
 800e712:	60f8      	str	r0, [r7, #12]
 800e714:	60b9      	str	r1, [r7, #8]
 800e716:	4613      	mov	r3, r2
 800e718:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	3301      	adds	r3, #1
 800e71e:	781b      	ldrb	r3, [r3, #0]
 800e720:	2b03      	cmp	r3, #3
 800e722:	d120      	bne.n	800e766 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800e724:	68fb      	ldr	r3, [r7, #12]
 800e726:	781b      	ldrb	r3, [r3, #0]
 800e728:	1e9a      	subs	r2, r3, #2
 800e72a:	88fb      	ldrh	r3, [r7, #6]
 800e72c:	4293      	cmp	r3, r2
 800e72e:	bf28      	it	cs
 800e730:	4613      	movcs	r3, r2
 800e732:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800e734:	68fb      	ldr	r3, [r7, #12]
 800e736:	3302      	adds	r3, #2
 800e738:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800e73a:	2300      	movs	r3, #0
 800e73c:	82fb      	strh	r3, [r7, #22]
 800e73e:	e00b      	b.n	800e758 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800e740:	8afb      	ldrh	r3, [r7, #22]
 800e742:	68fa      	ldr	r2, [r7, #12]
 800e744:	4413      	add	r3, r2
 800e746:	781a      	ldrb	r2, [r3, #0]
 800e748:	68bb      	ldr	r3, [r7, #8]
 800e74a:	701a      	strb	r2, [r3, #0]
      pdest++;
 800e74c:	68bb      	ldr	r3, [r7, #8]
 800e74e:	3301      	adds	r3, #1
 800e750:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800e752:	8afb      	ldrh	r3, [r7, #22]
 800e754:	3302      	adds	r3, #2
 800e756:	82fb      	strh	r3, [r7, #22]
 800e758:	8afa      	ldrh	r2, [r7, #22]
 800e75a:	8abb      	ldrh	r3, [r7, #20]
 800e75c:	429a      	cmp	r2, r3
 800e75e:	d3ef      	bcc.n	800e740 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800e760:	68bb      	ldr	r3, [r7, #8]
 800e762:	2200      	movs	r2, #0
 800e764:	701a      	strb	r2, [r3, #0]
  }
}
 800e766:	bf00      	nop
 800e768:	371c      	adds	r7, #28
 800e76a:	46bd      	mov	sp, r7
 800e76c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e770:	4770      	bx	lr

0800e772 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800e772:	b480      	push	{r7}
 800e774:	b085      	sub	sp, #20
 800e776:	af00      	add	r7, sp, #0
 800e778:	6078      	str	r0, [r7, #4]
 800e77a:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	881b      	ldrh	r3, [r3, #0]
 800e780:	687a      	ldr	r2, [r7, #4]
 800e782:	7812      	ldrb	r2, [r2, #0]
 800e784:	4413      	add	r3, r2
 800e786:	b29a      	uxth	r2, r3
 800e788:	683b      	ldr	r3, [r7, #0]
 800e78a:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	781b      	ldrb	r3, [r3, #0]
 800e790:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	4413      	add	r3, r2
 800e796:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800e798:	68fb      	ldr	r3, [r7, #12]
}
 800e79a:	4618      	mov	r0, r3
 800e79c:	3714      	adds	r7, #20
 800e79e:	46bd      	mov	sp, r7
 800e7a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7a4:	4770      	bx	lr

0800e7a6 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800e7a6:	b580      	push	{r7, lr}
 800e7a8:	b086      	sub	sp, #24
 800e7aa:	af00      	add	r7, sp, #0
 800e7ac:	60f8      	str	r0, [r7, #12]
 800e7ae:	60b9      	str	r1, [r7, #8]
 800e7b0:	4613      	mov	r3, r2
 800e7b2:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800e7b4:	2301      	movs	r3, #1
 800e7b6:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800e7b8:	68fb      	ldr	r3, [r7, #12]
 800e7ba:	789b      	ldrb	r3, [r3, #2]
 800e7bc:	2b01      	cmp	r3, #1
 800e7be:	d002      	beq.n	800e7c6 <USBH_CtlReq+0x20>
 800e7c0:	2b02      	cmp	r3, #2
 800e7c2:	d00f      	beq.n	800e7e4 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800e7c4:	e027      	b.n	800e816 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	68ba      	ldr	r2, [r7, #8]
 800e7ca:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	88fa      	ldrh	r2, [r7, #6]
 800e7d0:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800e7d2:	68fb      	ldr	r3, [r7, #12]
 800e7d4:	2201      	movs	r2, #1
 800e7d6:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	2202      	movs	r2, #2
 800e7dc:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800e7de:	2301      	movs	r3, #1
 800e7e0:	75fb      	strb	r3, [r7, #23]
      break;
 800e7e2:	e018      	b.n	800e816 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800e7e4:	68f8      	ldr	r0, [r7, #12]
 800e7e6:	f000 f81b 	bl	800e820 <USBH_HandleControl>
 800e7ea:	4603      	mov	r3, r0
 800e7ec:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800e7ee:	7dfb      	ldrb	r3, [r7, #23]
 800e7f0:	2b00      	cmp	r3, #0
 800e7f2:	d002      	beq.n	800e7fa <USBH_CtlReq+0x54>
 800e7f4:	7dfb      	ldrb	r3, [r7, #23]
 800e7f6:	2b03      	cmp	r3, #3
 800e7f8:	d106      	bne.n	800e808 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800e7fa:	68fb      	ldr	r3, [r7, #12]
 800e7fc:	2201      	movs	r2, #1
 800e7fe:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800e800:	68fb      	ldr	r3, [r7, #12]
 800e802:	2200      	movs	r2, #0
 800e804:	761a      	strb	r2, [r3, #24]
      break;
 800e806:	e005      	b.n	800e814 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800e808:	7dfb      	ldrb	r3, [r7, #23]
 800e80a:	2b02      	cmp	r3, #2
 800e80c:	d102      	bne.n	800e814 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800e80e:	68fb      	ldr	r3, [r7, #12]
 800e810:	2201      	movs	r2, #1
 800e812:	709a      	strb	r2, [r3, #2]
      break;
 800e814:	bf00      	nop
  }
  return status;
 800e816:	7dfb      	ldrb	r3, [r7, #23]
}
 800e818:	4618      	mov	r0, r3
 800e81a:	3718      	adds	r7, #24
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}

0800e820 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b086      	sub	sp, #24
 800e824:	af02      	add	r7, sp, #8
 800e826:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800e828:	2301      	movs	r3, #1
 800e82a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800e82c:	2300      	movs	r3, #0
 800e82e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	7e1b      	ldrb	r3, [r3, #24]
 800e834:	3b01      	subs	r3, #1
 800e836:	2b0a      	cmp	r3, #10
 800e838:	f200 8156 	bhi.w	800eae8 <USBH_HandleControl+0x2c8>
 800e83c:	a201      	add	r2, pc, #4	@ (adr r2, 800e844 <USBH_HandleControl+0x24>)
 800e83e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e842:	bf00      	nop
 800e844:	0800e871 	.word	0x0800e871
 800e848:	0800e88b 	.word	0x0800e88b
 800e84c:	0800e8f5 	.word	0x0800e8f5
 800e850:	0800e91b 	.word	0x0800e91b
 800e854:	0800e953 	.word	0x0800e953
 800e858:	0800e97d 	.word	0x0800e97d
 800e85c:	0800e9cf 	.word	0x0800e9cf
 800e860:	0800e9f1 	.word	0x0800e9f1
 800e864:	0800ea2d 	.word	0x0800ea2d
 800e868:	0800ea53 	.word	0x0800ea53
 800e86c:	0800ea91 	.word	0x0800ea91
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	f103 0110 	add.w	r1, r3, #16
 800e876:	687b      	ldr	r3, [r7, #4]
 800e878:	795b      	ldrb	r3, [r3, #5]
 800e87a:	461a      	mov	r2, r3
 800e87c:	6878      	ldr	r0, [r7, #4]
 800e87e:	f000 f943 	bl	800eb08 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	2202      	movs	r2, #2
 800e886:	761a      	strb	r2, [r3, #24]
      break;
 800e888:	e139      	b.n	800eafe <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e88a:	687b      	ldr	r3, [r7, #4]
 800e88c:	795b      	ldrb	r3, [r3, #5]
 800e88e:	4619      	mov	r1, r3
 800e890:	6878      	ldr	r0, [r7, #4]
 800e892:	f000 fcc5 	bl	800f220 <USBH_LL_GetURBState>
 800e896:	4603      	mov	r3, r0
 800e898:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800e89a:	7bbb      	ldrb	r3, [r7, #14]
 800e89c:	2b01      	cmp	r3, #1
 800e89e:	d11e      	bne.n	800e8de <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	7c1b      	ldrb	r3, [r3, #16]
 800e8a4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e8a8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800e8aa:	687b      	ldr	r3, [r7, #4]
 800e8ac:	8adb      	ldrh	r3, [r3, #22]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	d00a      	beq.n	800e8c8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800e8b2:	7b7b      	ldrb	r3, [r7, #13]
 800e8b4:	2b80      	cmp	r3, #128	@ 0x80
 800e8b6:	d103      	bne.n	800e8c0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2203      	movs	r2, #3
 800e8bc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e8be:	e115      	b.n	800eaec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2205      	movs	r2, #5
 800e8c4:	761a      	strb	r2, [r3, #24]
      break;
 800e8c6:	e111      	b.n	800eaec <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800e8c8:	7b7b      	ldrb	r3, [r7, #13]
 800e8ca:	2b80      	cmp	r3, #128	@ 0x80
 800e8cc:	d103      	bne.n	800e8d6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800e8ce:	687b      	ldr	r3, [r7, #4]
 800e8d0:	2209      	movs	r2, #9
 800e8d2:	761a      	strb	r2, [r3, #24]
      break;
 800e8d4:	e10a      	b.n	800eaec <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	2207      	movs	r2, #7
 800e8da:	761a      	strb	r2, [r3, #24]
      break;
 800e8dc:	e106      	b.n	800eaec <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800e8de:	7bbb      	ldrb	r3, [r7, #14]
 800e8e0:	2b04      	cmp	r3, #4
 800e8e2:	d003      	beq.n	800e8ec <USBH_HandleControl+0xcc>
 800e8e4:	7bbb      	ldrb	r3, [r7, #14]
 800e8e6:	2b02      	cmp	r3, #2
 800e8e8:	f040 8100 	bne.w	800eaec <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	220b      	movs	r2, #11
 800e8f0:	761a      	strb	r2, [r3, #24]
      break;
 800e8f2:	e0fb      	b.n	800eaec <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800e8f4:	687b      	ldr	r3, [r7, #4]
 800e8f6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e8fa:	b29a      	uxth	r2, r3
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800e900:	687b      	ldr	r3, [r7, #4]
 800e902:	6899      	ldr	r1, [r3, #8]
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	899a      	ldrh	r2, [r3, #12]
 800e908:	687b      	ldr	r3, [r7, #4]
 800e90a:	791b      	ldrb	r3, [r3, #4]
 800e90c:	6878      	ldr	r0, [r7, #4]
 800e90e:	f000 f93a 	bl	800eb86 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	2204      	movs	r2, #4
 800e916:	761a      	strb	r2, [r3, #24]
      break;
 800e918:	e0f1      	b.n	800eafe <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	791b      	ldrb	r3, [r3, #4]
 800e91e:	4619      	mov	r1, r3
 800e920:	6878      	ldr	r0, [r7, #4]
 800e922:	f000 fc7d 	bl	800f220 <USBH_LL_GetURBState>
 800e926:	4603      	mov	r3, r0
 800e928:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800e92a:	7bbb      	ldrb	r3, [r7, #14]
 800e92c:	2b01      	cmp	r3, #1
 800e92e:	d102      	bne.n	800e936 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800e930:	687b      	ldr	r3, [r7, #4]
 800e932:	2209      	movs	r2, #9
 800e934:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800e936:	7bbb      	ldrb	r3, [r7, #14]
 800e938:	2b05      	cmp	r3, #5
 800e93a:	d102      	bne.n	800e942 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800e93c:	2303      	movs	r3, #3
 800e93e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e940:	e0d6      	b.n	800eaf0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800e942:	7bbb      	ldrb	r3, [r7, #14]
 800e944:	2b04      	cmp	r3, #4
 800e946:	f040 80d3 	bne.w	800eaf0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800e94a:	687b      	ldr	r3, [r7, #4]
 800e94c:	220b      	movs	r2, #11
 800e94e:	761a      	strb	r2, [r3, #24]
      break;
 800e950:	e0ce      	b.n	800eaf0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	6899      	ldr	r1, [r3, #8]
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	899a      	ldrh	r2, [r3, #12]
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	795b      	ldrb	r3, [r3, #5]
 800e95e:	2001      	movs	r0, #1
 800e960:	9000      	str	r0, [sp, #0]
 800e962:	6878      	ldr	r0, [r7, #4]
 800e964:	f000 f8ea 	bl	800eb3c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e96e:	b29a      	uxth	r2, r3
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800e974:	687b      	ldr	r3, [r7, #4]
 800e976:	2206      	movs	r2, #6
 800e978:	761a      	strb	r2, [r3, #24]
      break;
 800e97a:	e0c0      	b.n	800eafe <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	795b      	ldrb	r3, [r3, #5]
 800e980:	4619      	mov	r1, r3
 800e982:	6878      	ldr	r0, [r7, #4]
 800e984:	f000 fc4c 	bl	800f220 <USBH_LL_GetURBState>
 800e988:	4603      	mov	r3, r0
 800e98a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800e98c:	7bbb      	ldrb	r3, [r7, #14]
 800e98e:	2b01      	cmp	r3, #1
 800e990:	d103      	bne.n	800e99a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	2207      	movs	r2, #7
 800e996:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800e998:	e0ac      	b.n	800eaf4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800e99a:	7bbb      	ldrb	r3, [r7, #14]
 800e99c:	2b05      	cmp	r3, #5
 800e99e:	d105      	bne.n	800e9ac <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	220c      	movs	r2, #12
 800e9a4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800e9a6:	2303      	movs	r3, #3
 800e9a8:	73fb      	strb	r3, [r7, #15]
      break;
 800e9aa:	e0a3      	b.n	800eaf4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800e9ac:	7bbb      	ldrb	r3, [r7, #14]
 800e9ae:	2b02      	cmp	r3, #2
 800e9b0:	d103      	bne.n	800e9ba <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800e9b2:	687b      	ldr	r3, [r7, #4]
 800e9b4:	2205      	movs	r2, #5
 800e9b6:	761a      	strb	r2, [r3, #24]
      break;
 800e9b8:	e09c      	b.n	800eaf4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800e9ba:	7bbb      	ldrb	r3, [r7, #14]
 800e9bc:	2b04      	cmp	r3, #4
 800e9be:	f040 8099 	bne.w	800eaf4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800e9c2:	687b      	ldr	r3, [r7, #4]
 800e9c4:	220b      	movs	r2, #11
 800e9c6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800e9c8:	2302      	movs	r3, #2
 800e9ca:	73fb      	strb	r3, [r7, #15]
      break;
 800e9cc:	e092      	b.n	800eaf4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	791b      	ldrb	r3, [r3, #4]
 800e9d2:	2200      	movs	r2, #0
 800e9d4:	2100      	movs	r1, #0
 800e9d6:	6878      	ldr	r0, [r7, #4]
 800e9d8:	f000 f8d5 	bl	800eb86 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800e9e2:	b29a      	uxth	r2, r3
 800e9e4:	687b      	ldr	r3, [r7, #4]
 800e9e6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	2208      	movs	r2, #8
 800e9ec:	761a      	strb	r2, [r3, #24]

      break;
 800e9ee:	e086      	b.n	800eafe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	791b      	ldrb	r3, [r3, #4]
 800e9f4:	4619      	mov	r1, r3
 800e9f6:	6878      	ldr	r0, [r7, #4]
 800e9f8:	f000 fc12 	bl	800f220 <USBH_LL_GetURBState>
 800e9fc:	4603      	mov	r3, r0
 800e9fe:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800ea00:	7bbb      	ldrb	r3, [r7, #14]
 800ea02:	2b01      	cmp	r3, #1
 800ea04:	d105      	bne.n	800ea12 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	220d      	movs	r2, #13
 800ea0a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800ea0c:	2300      	movs	r3, #0
 800ea0e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ea10:	e072      	b.n	800eaf8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800ea12:	7bbb      	ldrb	r3, [r7, #14]
 800ea14:	2b04      	cmp	r3, #4
 800ea16:	d103      	bne.n	800ea20 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800ea18:	687b      	ldr	r3, [r7, #4]
 800ea1a:	220b      	movs	r2, #11
 800ea1c:	761a      	strb	r2, [r3, #24]
      break;
 800ea1e:	e06b      	b.n	800eaf8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800ea20:	7bbb      	ldrb	r3, [r7, #14]
 800ea22:	2b05      	cmp	r3, #5
 800ea24:	d168      	bne.n	800eaf8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800ea26:	2303      	movs	r3, #3
 800ea28:	73fb      	strb	r3, [r7, #15]
      break;
 800ea2a:	e065      	b.n	800eaf8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800ea2c:	687b      	ldr	r3, [r7, #4]
 800ea2e:	795b      	ldrb	r3, [r3, #5]
 800ea30:	2201      	movs	r2, #1
 800ea32:	9200      	str	r2, [sp, #0]
 800ea34:	2200      	movs	r2, #0
 800ea36:	2100      	movs	r1, #0
 800ea38:	6878      	ldr	r0, [r7, #4]
 800ea3a:	f000 f87f 	bl	800eb3c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800ea3e:	687b      	ldr	r3, [r7, #4]
 800ea40:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ea44:	b29a      	uxth	r2, r3
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	220a      	movs	r2, #10
 800ea4e:	761a      	strb	r2, [r3, #24]
      break;
 800ea50:	e055      	b.n	800eafe <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	795b      	ldrb	r3, [r3, #5]
 800ea56:	4619      	mov	r1, r3
 800ea58:	6878      	ldr	r0, [r7, #4]
 800ea5a:	f000 fbe1 	bl	800f220 <USBH_LL_GetURBState>
 800ea5e:	4603      	mov	r3, r0
 800ea60:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800ea62:	7bbb      	ldrb	r3, [r7, #14]
 800ea64:	2b01      	cmp	r3, #1
 800ea66:	d105      	bne.n	800ea74 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800ea68:	2300      	movs	r3, #0
 800ea6a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	220d      	movs	r2, #13
 800ea70:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800ea72:	e043      	b.n	800eafc <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800ea74:	7bbb      	ldrb	r3, [r7, #14]
 800ea76:	2b02      	cmp	r3, #2
 800ea78:	d103      	bne.n	800ea82 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	2209      	movs	r2, #9
 800ea7e:	761a      	strb	r2, [r3, #24]
      break;
 800ea80:	e03c      	b.n	800eafc <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800ea82:	7bbb      	ldrb	r3, [r7, #14]
 800ea84:	2b04      	cmp	r3, #4
 800ea86:	d139      	bne.n	800eafc <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	220b      	movs	r2, #11
 800ea8c:	761a      	strb	r2, [r3, #24]
      break;
 800ea8e:	e035      	b.n	800eafc <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	7e5b      	ldrb	r3, [r3, #25]
 800ea94:	3301      	adds	r3, #1
 800ea96:	b2da      	uxtb	r2, r3
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	765a      	strb	r2, [r3, #25]
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	7e5b      	ldrb	r3, [r3, #25]
 800eaa0:	2b02      	cmp	r3, #2
 800eaa2:	d806      	bhi.n	800eab2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	2201      	movs	r2, #1
 800eaa8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	2201      	movs	r2, #1
 800eaae:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800eab0:	e025      	b.n	800eafe <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800eab2:	687b      	ldr	r3, [r7, #4]
 800eab4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800eab8:	2106      	movs	r1, #6
 800eaba:	6878      	ldr	r0, [r7, #4]
 800eabc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	2200      	movs	r2, #0
 800eac2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	795b      	ldrb	r3, [r3, #5]
 800eac8:	4619      	mov	r1, r3
 800eaca:	6878      	ldr	r0, [r7, #4]
 800eacc:	f000 f90c 	bl	800ece8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800ead0:	687b      	ldr	r3, [r7, #4]
 800ead2:	791b      	ldrb	r3, [r3, #4]
 800ead4:	4619      	mov	r1, r3
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f000 f906 	bl	800ece8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2200      	movs	r2, #0
 800eae0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800eae2:	2302      	movs	r3, #2
 800eae4:	73fb      	strb	r3, [r7, #15]
      break;
 800eae6:	e00a      	b.n	800eafe <USBH_HandleControl+0x2de>

    default:
      break;
 800eae8:	bf00      	nop
 800eaea:	e008      	b.n	800eafe <USBH_HandleControl+0x2de>
      break;
 800eaec:	bf00      	nop
 800eaee:	e006      	b.n	800eafe <USBH_HandleControl+0x2de>
      break;
 800eaf0:	bf00      	nop
 800eaf2:	e004      	b.n	800eafe <USBH_HandleControl+0x2de>
      break;
 800eaf4:	bf00      	nop
 800eaf6:	e002      	b.n	800eafe <USBH_HandleControl+0x2de>
      break;
 800eaf8:	bf00      	nop
 800eafa:	e000      	b.n	800eafe <USBH_HandleControl+0x2de>
      break;
 800eafc:	bf00      	nop
  }

  return status;
 800eafe:	7bfb      	ldrb	r3, [r7, #15]
}
 800eb00:	4618      	mov	r0, r3
 800eb02:	3710      	adds	r7, #16
 800eb04:	46bd      	mov	sp, r7
 800eb06:	bd80      	pop	{r7, pc}

0800eb08 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800eb08:	b580      	push	{r7, lr}
 800eb0a:	b088      	sub	sp, #32
 800eb0c:	af04      	add	r7, sp, #16
 800eb0e:	60f8      	str	r0, [r7, #12]
 800eb10:	60b9      	str	r1, [r7, #8]
 800eb12:	4613      	mov	r3, r2
 800eb14:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800eb16:	79f9      	ldrb	r1, [r7, #7]
 800eb18:	2300      	movs	r3, #0
 800eb1a:	9303      	str	r3, [sp, #12]
 800eb1c:	2308      	movs	r3, #8
 800eb1e:	9302      	str	r3, [sp, #8]
 800eb20:	68bb      	ldr	r3, [r7, #8]
 800eb22:	9301      	str	r3, [sp, #4]
 800eb24:	2300      	movs	r3, #0
 800eb26:	9300      	str	r3, [sp, #0]
 800eb28:	2300      	movs	r3, #0
 800eb2a:	2200      	movs	r2, #0
 800eb2c:	68f8      	ldr	r0, [r7, #12]
 800eb2e:	f000 fb46 	bl	800f1be <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800eb32:	2300      	movs	r3, #0
}
 800eb34:	4618      	mov	r0, r3
 800eb36:	3710      	adds	r7, #16
 800eb38:	46bd      	mov	sp, r7
 800eb3a:	bd80      	pop	{r7, pc}

0800eb3c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800eb3c:	b580      	push	{r7, lr}
 800eb3e:	b088      	sub	sp, #32
 800eb40:	af04      	add	r7, sp, #16
 800eb42:	60f8      	str	r0, [r7, #12]
 800eb44:	60b9      	str	r1, [r7, #8]
 800eb46:	4611      	mov	r1, r2
 800eb48:	461a      	mov	r2, r3
 800eb4a:	460b      	mov	r3, r1
 800eb4c:	80fb      	strh	r3, [r7, #6]
 800eb4e:	4613      	mov	r3, r2
 800eb50:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d001      	beq.n	800eb60 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800eb5c:	2300      	movs	r3, #0
 800eb5e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800eb60:	7979      	ldrb	r1, [r7, #5]
 800eb62:	7e3b      	ldrb	r3, [r7, #24]
 800eb64:	9303      	str	r3, [sp, #12]
 800eb66:	88fb      	ldrh	r3, [r7, #6]
 800eb68:	9302      	str	r3, [sp, #8]
 800eb6a:	68bb      	ldr	r3, [r7, #8]
 800eb6c:	9301      	str	r3, [sp, #4]
 800eb6e:	2301      	movs	r3, #1
 800eb70:	9300      	str	r3, [sp, #0]
 800eb72:	2300      	movs	r3, #0
 800eb74:	2200      	movs	r2, #0
 800eb76:	68f8      	ldr	r0, [r7, #12]
 800eb78:	f000 fb21 	bl	800f1be <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800eb7c:	2300      	movs	r3, #0
}
 800eb7e:	4618      	mov	r0, r3
 800eb80:	3710      	adds	r7, #16
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}

0800eb86 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800eb86:	b580      	push	{r7, lr}
 800eb88:	b088      	sub	sp, #32
 800eb8a:	af04      	add	r7, sp, #16
 800eb8c:	60f8      	str	r0, [r7, #12]
 800eb8e:	60b9      	str	r1, [r7, #8]
 800eb90:	4611      	mov	r1, r2
 800eb92:	461a      	mov	r2, r3
 800eb94:	460b      	mov	r3, r1
 800eb96:	80fb      	strh	r3, [r7, #6]
 800eb98:	4613      	mov	r3, r2
 800eb9a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800eb9c:	7979      	ldrb	r1, [r7, #5]
 800eb9e:	2300      	movs	r3, #0
 800eba0:	9303      	str	r3, [sp, #12]
 800eba2:	88fb      	ldrh	r3, [r7, #6]
 800eba4:	9302      	str	r3, [sp, #8]
 800eba6:	68bb      	ldr	r3, [r7, #8]
 800eba8:	9301      	str	r3, [sp, #4]
 800ebaa:	2301      	movs	r3, #1
 800ebac:	9300      	str	r3, [sp, #0]
 800ebae:	2300      	movs	r3, #0
 800ebb0:	2201      	movs	r2, #1
 800ebb2:	68f8      	ldr	r0, [r7, #12]
 800ebb4:	f000 fb03 	bl	800f1be <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ebb8:	2300      	movs	r3, #0

}
 800ebba:	4618      	mov	r0, r3
 800ebbc:	3710      	adds	r7, #16
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	bd80      	pop	{r7, pc}

0800ebc2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800ebc2:	b580      	push	{r7, lr}
 800ebc4:	b088      	sub	sp, #32
 800ebc6:	af04      	add	r7, sp, #16
 800ebc8:	60f8      	str	r0, [r7, #12]
 800ebca:	60b9      	str	r1, [r7, #8]
 800ebcc:	4611      	mov	r1, r2
 800ebce:	461a      	mov	r2, r3
 800ebd0:	460b      	mov	r3, r1
 800ebd2:	80fb      	strh	r3, [r7, #6]
 800ebd4:	4613      	mov	r3, r2
 800ebd6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800ebd8:	68fb      	ldr	r3, [r7, #12]
 800ebda:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ebde:	2b00      	cmp	r3, #0
 800ebe0:	d001      	beq.n	800ebe6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800ebe2:	2300      	movs	r3, #0
 800ebe4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ebe6:	7979      	ldrb	r1, [r7, #5]
 800ebe8:	7e3b      	ldrb	r3, [r7, #24]
 800ebea:	9303      	str	r3, [sp, #12]
 800ebec:	88fb      	ldrh	r3, [r7, #6]
 800ebee:	9302      	str	r3, [sp, #8]
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	9301      	str	r3, [sp, #4]
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	9300      	str	r3, [sp, #0]
 800ebf8:	2302      	movs	r3, #2
 800ebfa:	2200      	movs	r2, #0
 800ebfc:	68f8      	ldr	r0, [r7, #12]
 800ebfe:	f000 fade 	bl	800f1be <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800ec02:	2300      	movs	r3, #0
}
 800ec04:	4618      	mov	r0, r3
 800ec06:	3710      	adds	r7, #16
 800ec08:	46bd      	mov	sp, r7
 800ec0a:	bd80      	pop	{r7, pc}

0800ec0c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800ec0c:	b580      	push	{r7, lr}
 800ec0e:	b088      	sub	sp, #32
 800ec10:	af04      	add	r7, sp, #16
 800ec12:	60f8      	str	r0, [r7, #12]
 800ec14:	60b9      	str	r1, [r7, #8]
 800ec16:	4611      	mov	r1, r2
 800ec18:	461a      	mov	r2, r3
 800ec1a:	460b      	mov	r3, r1
 800ec1c:	80fb      	strh	r3, [r7, #6]
 800ec1e:	4613      	mov	r3, r2
 800ec20:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800ec22:	7979      	ldrb	r1, [r7, #5]
 800ec24:	2300      	movs	r3, #0
 800ec26:	9303      	str	r3, [sp, #12]
 800ec28:	88fb      	ldrh	r3, [r7, #6]
 800ec2a:	9302      	str	r3, [sp, #8]
 800ec2c:	68bb      	ldr	r3, [r7, #8]
 800ec2e:	9301      	str	r3, [sp, #4]
 800ec30:	2301      	movs	r3, #1
 800ec32:	9300      	str	r3, [sp, #0]
 800ec34:	2302      	movs	r3, #2
 800ec36:	2201      	movs	r2, #1
 800ec38:	68f8      	ldr	r0, [r7, #12]
 800ec3a:	f000 fac0 	bl	800f1be <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800ec3e:	2300      	movs	r3, #0
}
 800ec40:	4618      	mov	r0, r3
 800ec42:	3710      	adds	r7, #16
 800ec44:	46bd      	mov	sp, r7
 800ec46:	bd80      	pop	{r7, pc}

0800ec48 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800ec48:	b580      	push	{r7, lr}
 800ec4a:	b086      	sub	sp, #24
 800ec4c:	af04      	add	r7, sp, #16
 800ec4e:	6078      	str	r0, [r7, #4]
 800ec50:	4608      	mov	r0, r1
 800ec52:	4611      	mov	r1, r2
 800ec54:	461a      	mov	r2, r3
 800ec56:	4603      	mov	r3, r0
 800ec58:	70fb      	strb	r3, [r7, #3]
 800ec5a:	460b      	mov	r3, r1
 800ec5c:	70bb      	strb	r3, [r7, #2]
 800ec5e:	4613      	mov	r3, r2
 800ec60:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800ec62:	7878      	ldrb	r0, [r7, #1]
 800ec64:	78ba      	ldrb	r2, [r7, #2]
 800ec66:	78f9      	ldrb	r1, [r7, #3]
 800ec68:	8b3b      	ldrh	r3, [r7, #24]
 800ec6a:	9302      	str	r3, [sp, #8]
 800ec6c:	7d3b      	ldrb	r3, [r7, #20]
 800ec6e:	9301      	str	r3, [sp, #4]
 800ec70:	7c3b      	ldrb	r3, [r7, #16]
 800ec72:	9300      	str	r3, [sp, #0]
 800ec74:	4603      	mov	r3, r0
 800ec76:	6878      	ldr	r0, [r7, #4]
 800ec78:	f000 fa53 	bl	800f122 <USBH_LL_OpenPipe>

  return USBH_OK;
 800ec7c:	2300      	movs	r3, #0
}
 800ec7e:	4618      	mov	r0, r3
 800ec80:	3708      	adds	r7, #8
 800ec82:	46bd      	mov	sp, r7
 800ec84:	bd80      	pop	{r7, pc}

0800ec86 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800ec86:	b580      	push	{r7, lr}
 800ec88:	b082      	sub	sp, #8
 800ec8a:	af00      	add	r7, sp, #0
 800ec8c:	6078      	str	r0, [r7, #4]
 800ec8e:	460b      	mov	r3, r1
 800ec90:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800ec92:	78fb      	ldrb	r3, [r7, #3]
 800ec94:	4619      	mov	r1, r3
 800ec96:	6878      	ldr	r0, [r7, #4]
 800ec98:	f000 fa72 	bl	800f180 <USBH_LL_ClosePipe>

  return USBH_OK;
 800ec9c:	2300      	movs	r3, #0
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	3708      	adds	r7, #8
 800eca2:	46bd      	mov	sp, r7
 800eca4:	bd80      	pop	{r7, pc}

0800eca6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800eca6:	b580      	push	{r7, lr}
 800eca8:	b084      	sub	sp, #16
 800ecaa:	af00      	add	r7, sp, #0
 800ecac:	6078      	str	r0, [r7, #4]
 800ecae:	460b      	mov	r3, r1
 800ecb0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800ecb2:	6878      	ldr	r0, [r7, #4]
 800ecb4:	f000 f836 	bl	800ed24 <USBH_GetFreePipe>
 800ecb8:	4603      	mov	r3, r0
 800ecba:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800ecbc:	89fb      	ldrh	r3, [r7, #14]
 800ecbe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800ecc2:	4293      	cmp	r3, r2
 800ecc4:	d00a      	beq.n	800ecdc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800ecc6:	78fa      	ldrb	r2, [r7, #3]
 800ecc8:	89fb      	ldrh	r3, [r7, #14]
 800ecca:	f003 030f 	and.w	r3, r3, #15
 800ecce:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800ecd2:	6879      	ldr	r1, [r7, #4]
 800ecd4:	33e0      	adds	r3, #224	@ 0xe0
 800ecd6:	009b      	lsls	r3, r3, #2
 800ecd8:	440b      	add	r3, r1
 800ecda:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800ecdc:	89fb      	ldrh	r3, [r7, #14]
 800ecde:	b2db      	uxtb	r3, r3
}
 800ece0:	4618      	mov	r0, r3
 800ece2:	3710      	adds	r7, #16
 800ece4:	46bd      	mov	sp, r7
 800ece6:	bd80      	pop	{r7, pc}

0800ece8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800ece8:	b480      	push	{r7}
 800ecea:	b083      	sub	sp, #12
 800ecec:	af00      	add	r7, sp, #0
 800ecee:	6078      	str	r0, [r7, #4]
 800ecf0:	460b      	mov	r3, r1
 800ecf2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800ecf4:	78fb      	ldrb	r3, [r7, #3]
 800ecf6:	2b0f      	cmp	r3, #15
 800ecf8:	d80d      	bhi.n	800ed16 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800ecfa:	78fb      	ldrb	r3, [r7, #3]
 800ecfc:	687a      	ldr	r2, [r7, #4]
 800ecfe:	33e0      	adds	r3, #224	@ 0xe0
 800ed00:	009b      	lsls	r3, r3, #2
 800ed02:	4413      	add	r3, r2
 800ed04:	685a      	ldr	r2, [r3, #4]
 800ed06:	78fb      	ldrb	r3, [r7, #3]
 800ed08:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800ed0c:	6879      	ldr	r1, [r7, #4]
 800ed0e:	33e0      	adds	r3, #224	@ 0xe0
 800ed10:	009b      	lsls	r3, r3, #2
 800ed12:	440b      	add	r3, r1
 800ed14:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800ed16:	2300      	movs	r3, #0
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	370c      	adds	r7, #12
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed22:	4770      	bx	lr

0800ed24 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800ed24:	b480      	push	{r7}
 800ed26:	b085      	sub	sp, #20
 800ed28:	af00      	add	r7, sp, #0
 800ed2a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800ed2c:	2300      	movs	r3, #0
 800ed2e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ed30:	2300      	movs	r3, #0
 800ed32:	73fb      	strb	r3, [r7, #15]
 800ed34:	e00f      	b.n	800ed56 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800ed36:	7bfb      	ldrb	r3, [r7, #15]
 800ed38:	687a      	ldr	r2, [r7, #4]
 800ed3a:	33e0      	adds	r3, #224	@ 0xe0
 800ed3c:	009b      	lsls	r3, r3, #2
 800ed3e:	4413      	add	r3, r2
 800ed40:	685b      	ldr	r3, [r3, #4]
 800ed42:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ed46:	2b00      	cmp	r3, #0
 800ed48:	d102      	bne.n	800ed50 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800ed4a:	7bfb      	ldrb	r3, [r7, #15]
 800ed4c:	b29b      	uxth	r3, r3
 800ed4e:	e007      	b.n	800ed60 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800ed50:	7bfb      	ldrb	r3, [r7, #15]
 800ed52:	3301      	adds	r3, #1
 800ed54:	73fb      	strb	r3, [r7, #15]
 800ed56:	7bfb      	ldrb	r3, [r7, #15]
 800ed58:	2b0f      	cmp	r3, #15
 800ed5a:	d9ec      	bls.n	800ed36 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800ed5c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800ed60:	4618      	mov	r0, r3
 800ed62:	3714      	adds	r7, #20
 800ed64:	46bd      	mov	sp, r7
 800ed66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed6a:	4770      	bx	lr

0800ed6c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800ed70:	2201      	movs	r2, #1
 800ed72:	490e      	ldr	r1, [pc, #56]	@ (800edac <MX_USB_HOST_Init+0x40>)
 800ed74:	480e      	ldr	r0, [pc, #56]	@ (800edb0 <MX_USB_HOST_Init+0x44>)
 800ed76:	f7fe fb15 	bl	800d3a4 <USBH_Init>
 800ed7a:	4603      	mov	r3, r0
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d001      	beq.n	800ed84 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800ed80:	f7f5 fc42 	bl	8004608 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800ed84:	490b      	ldr	r1, [pc, #44]	@ (800edb4 <MX_USB_HOST_Init+0x48>)
 800ed86:	480a      	ldr	r0, [pc, #40]	@ (800edb0 <MX_USB_HOST_Init+0x44>)
 800ed88:	f7fe fbb9 	bl	800d4fe <USBH_RegisterClass>
 800ed8c:	4603      	mov	r3, r0
 800ed8e:	2b00      	cmp	r3, #0
 800ed90:	d001      	beq.n	800ed96 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800ed92:	f7f5 fc39 	bl	8004608 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800ed96:	4806      	ldr	r0, [pc, #24]	@ (800edb0 <MX_USB_HOST_Init+0x44>)
 800ed98:	f7fe fc3d 	bl	800d616 <USBH_Start>
 800ed9c:	4603      	mov	r3, r0
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d001      	beq.n	800eda6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800eda2:	f7f5 fc31 	bl	8004608 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800eda6:	bf00      	nop
 800eda8:	bd80      	pop	{r7, pc}
 800edaa:	bf00      	nop
 800edac:	0800edcd 	.word	0x0800edcd
 800edb0:	20005b54 	.word	0x20005b54
 800edb4:	20001924 	.word	0x20001924

0800edb8 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800edb8:	b580      	push	{r7, lr}
 800edba:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800edbc:	4802      	ldr	r0, [pc, #8]	@ (800edc8 <MX_USB_HOST_Process+0x10>)
 800edbe:	f7fe fc3b 	bl	800d638 <USBH_Process>
}
 800edc2:	bf00      	nop
 800edc4:	bd80      	pop	{r7, pc}
 800edc6:	bf00      	nop
 800edc8:	20005b54 	.word	0x20005b54

0800edcc <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800edcc:	b480      	push	{r7}
 800edce:	b083      	sub	sp, #12
 800edd0:	af00      	add	r7, sp, #0
 800edd2:	6078      	str	r0, [r7, #4]
 800edd4:	460b      	mov	r3, r1
 800edd6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800edd8:	78fb      	ldrb	r3, [r7, #3]
 800edda:	3b01      	subs	r3, #1
 800eddc:	2b04      	cmp	r3, #4
 800edde:	d819      	bhi.n	800ee14 <USBH_UserProcess+0x48>
 800ede0:	a201      	add	r2, pc, #4	@ (adr r2, 800ede8 <USBH_UserProcess+0x1c>)
 800ede2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ede6:	bf00      	nop
 800ede8:	0800ee15 	.word	0x0800ee15
 800edec:	0800ee05 	.word	0x0800ee05
 800edf0:	0800ee15 	.word	0x0800ee15
 800edf4:	0800ee0d 	.word	0x0800ee0d
 800edf8:	0800edfd 	.word	0x0800edfd
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800edfc:	4b09      	ldr	r3, [pc, #36]	@ (800ee24 <USBH_UserProcess+0x58>)
 800edfe:	2203      	movs	r2, #3
 800ee00:	701a      	strb	r2, [r3, #0]
  break;
 800ee02:	e008      	b.n	800ee16 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ee04:	4b07      	ldr	r3, [pc, #28]	@ (800ee24 <USBH_UserProcess+0x58>)
 800ee06:	2202      	movs	r2, #2
 800ee08:	701a      	strb	r2, [r3, #0]
  break;
 800ee0a:	e004      	b.n	800ee16 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ee0c:	4b05      	ldr	r3, [pc, #20]	@ (800ee24 <USBH_UserProcess+0x58>)
 800ee0e:	2201      	movs	r2, #1
 800ee10:	701a      	strb	r2, [r3, #0]
  break;
 800ee12:	e000      	b.n	800ee16 <USBH_UserProcess+0x4a>

  default:
  break;
 800ee14:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ee16:	bf00      	nop
 800ee18:	370c      	adds	r7, #12
 800ee1a:	46bd      	mov	sp, r7
 800ee1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee20:	4770      	bx	lr
 800ee22:	bf00      	nop
 800ee24:	20005f2c 	.word	0x20005f2c

0800ee28 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ee28:	b580      	push	{r7, lr}
 800ee2a:	b08a      	sub	sp, #40	@ 0x28
 800ee2c:	af00      	add	r7, sp, #0
 800ee2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ee30:	f107 0314 	add.w	r3, r7, #20
 800ee34:	2200      	movs	r2, #0
 800ee36:	601a      	str	r2, [r3, #0]
 800ee38:	605a      	str	r2, [r3, #4]
 800ee3a:	609a      	str	r2, [r3, #8]
 800ee3c:	60da      	str	r2, [r3, #12]
 800ee3e:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681b      	ldr	r3, [r3, #0]
 800ee44:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ee48:	d147      	bne.n	800eeda <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ee4a:	2300      	movs	r3, #0
 800ee4c:	613b      	str	r3, [r7, #16]
 800ee4e:	4b25      	ldr	r3, [pc, #148]	@ (800eee4 <HAL_HCD_MspInit+0xbc>)
 800ee50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee52:	4a24      	ldr	r2, [pc, #144]	@ (800eee4 <HAL_HCD_MspInit+0xbc>)
 800ee54:	f043 0301 	orr.w	r3, r3, #1
 800ee58:	6313      	str	r3, [r2, #48]	@ 0x30
 800ee5a:	4b22      	ldr	r3, [pc, #136]	@ (800eee4 <HAL_HCD_MspInit+0xbc>)
 800ee5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee5e:	f003 0301 	and.w	r3, r3, #1
 800ee62:	613b      	str	r3, [r7, #16]
 800ee64:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800ee66:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800ee6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800ee6c:	2300      	movs	r3, #0
 800ee6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee70:	2300      	movs	r3, #0
 800ee72:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800ee74:	f107 0314 	add.w	r3, r7, #20
 800ee78:	4619      	mov	r1, r3
 800ee7a:	481b      	ldr	r0, [pc, #108]	@ (800eee8 <HAL_HCD_MspInit+0xc0>)
 800ee7c:	f7f8 ffb6 	bl	8007dec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800ee80:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800ee84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ee86:	2302      	movs	r3, #2
 800ee88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ee8a:	2300      	movs	r3, #0
 800ee8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800ee8e:	2300      	movs	r3, #0
 800ee90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800ee92:	230a      	movs	r3, #10
 800ee94:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ee96:	f107 0314 	add.w	r3, r7, #20
 800ee9a:	4619      	mov	r1, r3
 800ee9c:	4812      	ldr	r0, [pc, #72]	@ (800eee8 <HAL_HCD_MspInit+0xc0>)
 800ee9e:	f7f8 ffa5 	bl	8007dec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800eea2:	4b10      	ldr	r3, [pc, #64]	@ (800eee4 <HAL_HCD_MspInit+0xbc>)
 800eea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eea6:	4a0f      	ldr	r2, [pc, #60]	@ (800eee4 <HAL_HCD_MspInit+0xbc>)
 800eea8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800eeac:	6353      	str	r3, [r2, #52]	@ 0x34
 800eeae:	2300      	movs	r3, #0
 800eeb0:	60fb      	str	r3, [r7, #12]
 800eeb2:	4b0c      	ldr	r3, [pc, #48]	@ (800eee4 <HAL_HCD_MspInit+0xbc>)
 800eeb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eeb6:	4a0b      	ldr	r2, [pc, #44]	@ (800eee4 <HAL_HCD_MspInit+0xbc>)
 800eeb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800eebc:	6453      	str	r3, [r2, #68]	@ 0x44
 800eebe:	4b09      	ldr	r3, [pc, #36]	@ (800eee4 <HAL_HCD_MspInit+0xbc>)
 800eec0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eec2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800eec6:	60fb      	str	r3, [r7, #12]
 800eec8:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800eeca:	2200      	movs	r2, #0
 800eecc:	2100      	movs	r1, #0
 800eece:	2043      	movs	r0, #67	@ 0x43
 800eed0:	f7f8 fc7d 	bl	80077ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800eed4:	2043      	movs	r0, #67	@ 0x43
 800eed6:	f7f8 fc96 	bl	8007806 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800eeda:	bf00      	nop
 800eedc:	3728      	adds	r7, #40	@ 0x28
 800eede:	46bd      	mov	sp, r7
 800eee0:	bd80      	pop	{r7, pc}
 800eee2:	bf00      	nop
 800eee4:	40023800 	.word	0x40023800
 800eee8:	40020000 	.word	0x40020000

0800eeec <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800eeec:	b580      	push	{r7, lr}
 800eeee:	b082      	sub	sp, #8
 800eef0:	af00      	add	r7, sp, #0
 800eef2:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800eefa:	4618      	mov	r0, r3
 800eefc:	f7fe ff73 	bl	800dde6 <USBH_LL_IncTimer>
}
 800ef00:	bf00      	nop
 800ef02:	3708      	adds	r7, #8
 800ef04:	46bd      	mov	sp, r7
 800ef06:	bd80      	pop	{r7, pc}

0800ef08 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ef08:	b580      	push	{r7, lr}
 800ef0a:	b082      	sub	sp, #8
 800ef0c:	af00      	add	r7, sp, #0
 800ef0e:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800ef10:	687b      	ldr	r3, [r7, #4]
 800ef12:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ef16:	4618      	mov	r0, r3
 800ef18:	f7fe ffab 	bl	800de72 <USBH_LL_Connect>
}
 800ef1c:	bf00      	nop
 800ef1e:	3708      	adds	r7, #8
 800ef20:	46bd      	mov	sp, r7
 800ef22:	bd80      	pop	{r7, pc}

0800ef24 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800ef24:	b580      	push	{r7, lr}
 800ef26:	b082      	sub	sp, #8
 800ef28:	af00      	add	r7, sp, #0
 800ef2a:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800ef2c:	687b      	ldr	r3, [r7, #4]
 800ef2e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ef32:	4618      	mov	r0, r3
 800ef34:	f7fe ffb4 	bl	800dea0 <USBH_LL_Disconnect>
}
 800ef38:	bf00      	nop
 800ef3a:	3708      	adds	r7, #8
 800ef3c:	46bd      	mov	sp, r7
 800ef3e:	bd80      	pop	{r7, pc}

0800ef40 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800ef40:	b480      	push	{r7}
 800ef42:	b083      	sub	sp, #12
 800ef44:	af00      	add	r7, sp, #0
 800ef46:	6078      	str	r0, [r7, #4]
 800ef48:	460b      	mov	r3, r1
 800ef4a:	70fb      	strb	r3, [r7, #3]
 800ef4c:	4613      	mov	r3, r2
 800ef4e:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800ef50:	bf00      	nop
 800ef52:	370c      	adds	r7, #12
 800ef54:	46bd      	mov	sp, r7
 800ef56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef5a:	4770      	bx	lr

0800ef5c <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ef5c:	b580      	push	{r7, lr}
 800ef5e:	b082      	sub	sp, #8
 800ef60:	af00      	add	r7, sp, #0
 800ef62:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800ef64:	687b      	ldr	r3, [r7, #4]
 800ef66:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f7fe ff65 	bl	800de3a <USBH_LL_PortEnabled>
}
 800ef70:	bf00      	nop
 800ef72:	3708      	adds	r7, #8
 800ef74:	46bd      	mov	sp, r7
 800ef76:	bd80      	pop	{r7, pc}

0800ef78 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800ef78:	b580      	push	{r7, lr}
 800ef7a:	b082      	sub	sp, #8
 800ef7c:	af00      	add	r7, sp, #0
 800ef7e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800ef80:	687b      	ldr	r3, [r7, #4]
 800ef82:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800ef86:	4618      	mov	r0, r3
 800ef88:	f7fe ff65 	bl	800de56 <USBH_LL_PortDisabled>
}
 800ef8c:	bf00      	nop
 800ef8e:	3708      	adds	r7, #8
 800ef90:	46bd      	mov	sp, r7
 800ef92:	bd80      	pop	{r7, pc}

0800ef94 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b082      	sub	sp, #8
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800ef9c:	687b      	ldr	r3, [r7, #4]
 800ef9e:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800efa2:	2b01      	cmp	r3, #1
 800efa4:	d12a      	bne.n	800effc <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800efa6:	4a18      	ldr	r2, [pc, #96]	@ (800f008 <USBH_LL_Init+0x74>)
 800efa8:	687b      	ldr	r3, [r7, #4]
 800efaa:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	4a15      	ldr	r2, [pc, #84]	@ (800f008 <USBH_LL_Init+0x74>)
 800efb2:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800efb6:	4b14      	ldr	r3, [pc, #80]	@ (800f008 <USBH_LL_Init+0x74>)
 800efb8:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800efbc:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800efbe:	4b12      	ldr	r3, [pc, #72]	@ (800f008 <USBH_LL_Init+0x74>)
 800efc0:	2208      	movs	r2, #8
 800efc2:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800efc4:	4b10      	ldr	r3, [pc, #64]	@ (800f008 <USBH_LL_Init+0x74>)
 800efc6:	2201      	movs	r2, #1
 800efc8:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800efca:	4b0f      	ldr	r3, [pc, #60]	@ (800f008 <USBH_LL_Init+0x74>)
 800efcc:	2200      	movs	r2, #0
 800efce:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800efd0:	4b0d      	ldr	r3, [pc, #52]	@ (800f008 <USBH_LL_Init+0x74>)
 800efd2:	2202      	movs	r2, #2
 800efd4:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800efd6:	4b0c      	ldr	r3, [pc, #48]	@ (800f008 <USBH_LL_Init+0x74>)
 800efd8:	2200      	movs	r2, #0
 800efda:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800efdc:	480a      	ldr	r0, [pc, #40]	@ (800f008 <USBH_LL_Init+0x74>)
 800efde:	f7f9 f8d4 	bl	800818a <HAL_HCD_Init>
 800efe2:	4603      	mov	r3, r0
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d001      	beq.n	800efec <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800efe8:	f7f5 fb0e 	bl	8004608 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800efec:	4806      	ldr	r0, [pc, #24]	@ (800f008 <USBH_LL_Init+0x74>)
 800efee:	f7f9 fd35 	bl	8008a5c <HAL_HCD_GetCurrentFrame>
 800eff2:	4603      	mov	r3, r0
 800eff4:	4619      	mov	r1, r3
 800eff6:	6878      	ldr	r0, [r7, #4]
 800eff8:	f7fe fee6 	bl	800ddc8 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800effc:	2300      	movs	r3, #0
}
 800effe:	4618      	mov	r0, r3
 800f000:	3708      	adds	r7, #8
 800f002:	46bd      	mov	sp, r7
 800f004:	bd80      	pop	{r7, pc}
 800f006:	bf00      	nop
 800f008:	20005f30 	.word	0x20005f30

0800f00c <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b084      	sub	sp, #16
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f014:	2300      	movs	r3, #0
 800f016:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f018:	2300      	movs	r3, #0
 800f01a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f022:	4618      	mov	r0, r3
 800f024:	f7f9 fca2 	bl	800896c <HAL_HCD_Start>
 800f028:	4603      	mov	r3, r0
 800f02a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f02c:	7bfb      	ldrb	r3, [r7, #15]
 800f02e:	4618      	mov	r0, r3
 800f030:	f000 f956 	bl	800f2e0 <USBH_Get_USB_Status>
 800f034:	4603      	mov	r3, r0
 800f036:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f038:	7bbb      	ldrb	r3, [r7, #14]
}
 800f03a:	4618      	mov	r0, r3
 800f03c:	3710      	adds	r7, #16
 800f03e:	46bd      	mov	sp, r7
 800f040:	bd80      	pop	{r7, pc}

0800f042 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800f042:	b580      	push	{r7, lr}
 800f044:	b084      	sub	sp, #16
 800f046:	af00      	add	r7, sp, #0
 800f048:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f04a:	2300      	movs	r3, #0
 800f04c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f04e:	2300      	movs	r3, #0
 800f050:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f058:	4618      	mov	r0, r3
 800f05a:	f7f9 fcaa 	bl	80089b2 <HAL_HCD_Stop>
 800f05e:	4603      	mov	r3, r0
 800f060:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f062:	7bfb      	ldrb	r3, [r7, #15]
 800f064:	4618      	mov	r0, r3
 800f066:	f000 f93b 	bl	800f2e0 <USBH_Get_USB_Status>
 800f06a:	4603      	mov	r3, r0
 800f06c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f06e:	7bbb      	ldrb	r3, [r7, #14]
}
 800f070:	4618      	mov	r0, r3
 800f072:	3710      	adds	r7, #16
 800f074:	46bd      	mov	sp, r7
 800f076:	bd80      	pop	{r7, pc}

0800f078 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH Speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800f078:	b580      	push	{r7, lr}
 800f07a:	b084      	sub	sp, #16
 800f07c:	af00      	add	r7, sp, #0
 800f07e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800f080:	2301      	movs	r3, #1
 800f082:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f08a:	4618      	mov	r0, r3
 800f08c:	f7f9 fcf4 	bl	8008a78 <HAL_HCD_GetCurrentSpeed>
 800f090:	4603      	mov	r3, r0
 800f092:	2b02      	cmp	r3, #2
 800f094:	d00c      	beq.n	800f0b0 <USBH_LL_GetSpeed+0x38>
 800f096:	2b02      	cmp	r3, #2
 800f098:	d80d      	bhi.n	800f0b6 <USBH_LL_GetSpeed+0x3e>
 800f09a:	2b00      	cmp	r3, #0
 800f09c:	d002      	beq.n	800f0a4 <USBH_LL_GetSpeed+0x2c>
 800f09e:	2b01      	cmp	r3, #1
 800f0a0:	d003      	beq.n	800f0aa <USBH_LL_GetSpeed+0x32>
 800f0a2:	e008      	b.n	800f0b6 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800f0a4:	2300      	movs	r3, #0
 800f0a6:	73fb      	strb	r3, [r7, #15]
    break;
 800f0a8:	e008      	b.n	800f0bc <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800f0aa:	2301      	movs	r3, #1
 800f0ac:	73fb      	strb	r3, [r7, #15]
    break;
 800f0ae:	e005      	b.n	800f0bc <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800f0b0:	2302      	movs	r3, #2
 800f0b2:	73fb      	strb	r3, [r7, #15]
    break;
 800f0b4:	e002      	b.n	800f0bc <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800f0b6:	2301      	movs	r3, #1
 800f0b8:	73fb      	strb	r3, [r7, #15]
    break;
 800f0ba:	bf00      	nop
  }
  return  speed;
 800f0bc:	7bfb      	ldrb	r3, [r7, #15]
}
 800f0be:	4618      	mov	r0, r3
 800f0c0:	3710      	adds	r7, #16
 800f0c2:	46bd      	mov	sp, r7
 800f0c4:	bd80      	pop	{r7, pc}

0800f0c6 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800f0c6:	b580      	push	{r7, lr}
 800f0c8:	b084      	sub	sp, #16
 800f0ca:	af00      	add	r7, sp, #0
 800f0cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f0dc:	4618      	mov	r0, r3
 800f0de:	f7f9 fc85 	bl	80089ec <HAL_HCD_ResetPort>
 800f0e2:	4603      	mov	r3, r0
 800f0e4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f0e6:	7bfb      	ldrb	r3, [r7, #15]
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f000 f8f9 	bl	800f2e0 <USBH_Get_USB_Status>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f0f2:	7bbb      	ldrb	r3, [r7, #14]
}
 800f0f4:	4618      	mov	r0, r3
 800f0f6:	3710      	adds	r7, #16
 800f0f8:	46bd      	mov	sp, r7
 800f0fa:	bd80      	pop	{r7, pc}

0800f0fc <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet Size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f0fc:	b580      	push	{r7, lr}
 800f0fe:	b082      	sub	sp, #8
 800f100:	af00      	add	r7, sp, #0
 800f102:	6078      	str	r0, [r7, #4]
 800f104:	460b      	mov	r3, r1
 800f106:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f10e:	78fa      	ldrb	r2, [r7, #3]
 800f110:	4611      	mov	r1, r2
 800f112:	4618      	mov	r0, r3
 800f114:	f7f9 fc8d 	bl	8008a32 <HAL_HCD_HC_GetXferCount>
 800f118:	4603      	mov	r3, r0
}
 800f11a:	4618      	mov	r0, r3
 800f11c:	3708      	adds	r7, #8
 800f11e:	46bd      	mov	sp, r7
 800f120:	bd80      	pop	{r7, pc}

0800f122 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800f122:	b590      	push	{r4, r7, lr}
 800f124:	b089      	sub	sp, #36	@ 0x24
 800f126:	af04      	add	r7, sp, #16
 800f128:	6078      	str	r0, [r7, #4]
 800f12a:	4608      	mov	r0, r1
 800f12c:	4611      	mov	r1, r2
 800f12e:	461a      	mov	r2, r3
 800f130:	4603      	mov	r3, r0
 800f132:	70fb      	strb	r3, [r7, #3]
 800f134:	460b      	mov	r3, r1
 800f136:	70bb      	strb	r3, [r7, #2]
 800f138:	4613      	mov	r3, r2
 800f13a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f13c:	2300      	movs	r3, #0
 800f13e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f140:	2300      	movs	r3, #0
 800f142:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800f144:	687b      	ldr	r3, [r7, #4]
 800f146:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800f14a:	787c      	ldrb	r4, [r7, #1]
 800f14c:	78ba      	ldrb	r2, [r7, #2]
 800f14e:	78f9      	ldrb	r1, [r7, #3]
 800f150:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f152:	9302      	str	r3, [sp, #8]
 800f154:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800f158:	9301      	str	r3, [sp, #4]
 800f15a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f15e:	9300      	str	r3, [sp, #0]
 800f160:	4623      	mov	r3, r4
 800f162:	f7f9 f879 	bl	8008258 <HAL_HCD_HC_Init>
 800f166:	4603      	mov	r3, r0
 800f168:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f16a:	7bfb      	ldrb	r3, [r7, #15]
 800f16c:	4618      	mov	r0, r3
 800f16e:	f000 f8b7 	bl	800f2e0 <USBH_Get_USB_Status>
 800f172:	4603      	mov	r3, r0
 800f174:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f176:	7bbb      	ldrb	r3, [r7, #14]
}
 800f178:	4618      	mov	r0, r3
 800f17a:	3714      	adds	r7, #20
 800f17c:	46bd      	mov	sp, r7
 800f17e:	bd90      	pop	{r4, r7, pc}

0800f180 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b084      	sub	sp, #16
 800f184:	af00      	add	r7, sp, #0
 800f186:	6078      	str	r0, [r7, #4]
 800f188:	460b      	mov	r3, r1
 800f18a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f18c:	2300      	movs	r3, #0
 800f18e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f190:	2300      	movs	r3, #0
 800f192:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f19a:	78fa      	ldrb	r2, [r7, #3]
 800f19c:	4611      	mov	r1, r2
 800f19e:	4618      	mov	r0, r3
 800f1a0:	f7f9 f912 	bl	80083c8 <HAL_HCD_HC_Halt>
 800f1a4:	4603      	mov	r3, r0
 800f1a6:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800f1a8:	7bfb      	ldrb	r3, [r7, #15]
 800f1aa:	4618      	mov	r0, r3
 800f1ac:	f000 f898 	bl	800f2e0 <USBH_Get_USB_Status>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f1b4:	7bbb      	ldrb	r3, [r7, #14]
}
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	3710      	adds	r7, #16
 800f1ba:	46bd      	mov	sp, r7
 800f1bc:	bd80      	pop	{r7, pc}

0800f1be <USBH_LL_SubmitURB>:
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                    uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                    uint8_t do_ping)
{
 800f1be:	b590      	push	{r4, r7, lr}
 800f1c0:	b089      	sub	sp, #36	@ 0x24
 800f1c2:	af04      	add	r7, sp, #16
 800f1c4:	6078      	str	r0, [r7, #4]
 800f1c6:	4608      	mov	r0, r1
 800f1c8:	4611      	mov	r1, r2
 800f1ca:	461a      	mov	r2, r3
 800f1cc:	4603      	mov	r3, r0
 800f1ce:	70fb      	strb	r3, [r7, #3]
 800f1d0:	460b      	mov	r3, r1
 800f1d2:	70bb      	strb	r3, [r7, #2]
 800f1d4:	4613      	mov	r3, r2
 800f1d6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800f1d8:	2300      	movs	r3, #0
 800f1da:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f1dc:	2300      	movs	r3, #0
 800f1de:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction,
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800f1e6:	787c      	ldrb	r4, [r7, #1]
 800f1e8:	78ba      	ldrb	r2, [r7, #2]
 800f1ea:	78f9      	ldrb	r1, [r7, #3]
 800f1ec:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800f1f0:	9303      	str	r3, [sp, #12]
 800f1f2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800f1f4:	9302      	str	r3, [sp, #8]
 800f1f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f1f8:	9301      	str	r3, [sp, #4]
 800f1fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800f1fe:	9300      	str	r3, [sp, #0]
 800f200:	4623      	mov	r3, r4
 800f202:	f7f9 f905 	bl	8008410 <HAL_HCD_HC_SubmitRequest>
 800f206:	4603      	mov	r3, r0
 800f208:	73fb      	strb	r3, [r7, #15]
                                       ep_type, token, pbuff, length,
                                       do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 800f20a:	7bfb      	ldrb	r3, [r7, #15]
 800f20c:	4618      	mov	r0, r3
 800f20e:	f000 f867 	bl	800f2e0 <USBH_Get_USB_Status>
 800f212:	4603      	mov	r3, r0
 800f214:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800f216:	7bbb      	ldrb	r3, [r7, #14]
}
 800f218:	4618      	mov	r0, r3
 800f21a:	3714      	adds	r7, #20
 800f21c:	46bd      	mov	sp, r7
 800f21e:	bd90      	pop	{r4, r7, pc}

0800f220 <USBH_LL_GetURBState>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval URB state
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800f220:	b580      	push	{r7, lr}
 800f222:	b082      	sub	sp, #8
 800f224:	af00      	add	r7, sp, #0
 800f226:	6078      	str	r0, [r7, #4]
 800f228:	460b      	mov	r3, r1
 800f22a:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState(phost->pData, pipe);
 800f22c:	687b      	ldr	r3, [r7, #4]
 800f22e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f232:	78fa      	ldrb	r2, [r7, #3]
 800f234:	4611      	mov	r1, r2
 800f236:	4618      	mov	r0, r3
 800f238:	f7f9 fbe6 	bl	8008a08 <HAL_HCD_HC_GetURBState>
 800f23c:	4603      	mov	r3, r0
}
 800f23e:	4618      	mov	r0, r3
 800f240:	3708      	adds	r7, #8
 800f242:	46bd      	mov	sp, r7
 800f244:	bd80      	pop	{r7, pc}

0800f246 <USBH_LL_DriverVBUS>:
  * @param  phost: Host handle
  * @param  state: VBUS state
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800f246:	b580      	push	{r7, lr}
 800f248:	b082      	sub	sp, #8
 800f24a:	af00      	add	r7, sp, #0
 800f24c:	6078      	str	r0, [r7, #4]
 800f24e:	460b      	mov	r3, r1
 800f250:	70fb      	strb	r3, [r7, #3]
      /* Drive low Charge pump */
      /* ToDo: Add IOE driver control */
      /* USER CODE END DRIVE_LOW_CHARGE_FOR_FS */
    }
  }
  HAL_Delay(200);
 800f252:	20c8      	movs	r0, #200	@ 0xc8
 800f254:	f7f7 fb02 	bl	800685c <HAL_Delay>
  return USBH_OK;
 800f258:	2300      	movs	r3, #0
  /* USER CODE END 0*/
}
 800f25a:	4618      	mov	r0, r3
 800f25c:	3708      	adds	r7, #8
 800f25e:	46bd      	mov	sp, r7
 800f260:	bd80      	pop	{r7, pc}

0800f262 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800f262:	b480      	push	{r7}
 800f264:	b085      	sub	sp, #20
 800f266:	af00      	add	r7, sp, #0
 800f268:	6078      	str	r0, [r7, #4]
 800f26a:	460b      	mov	r3, r1
 800f26c:	70fb      	strb	r3, [r7, #3]
 800f26e:	4613      	mov	r3, r2
 800f270:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800f278:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800f27a:	78fa      	ldrb	r2, [r7, #3]
 800f27c:	68f9      	ldr	r1, [r7, #12]
 800f27e:	4613      	mov	r3, r2
 800f280:	011b      	lsls	r3, r3, #4
 800f282:	1a9b      	subs	r3, r3, r2
 800f284:	009b      	lsls	r3, r3, #2
 800f286:	440b      	add	r3, r1
 800f288:	3317      	adds	r3, #23
 800f28a:	781b      	ldrb	r3, [r3, #0]
 800f28c:	2b00      	cmp	r3, #0
 800f28e:	d00a      	beq.n	800f2a6 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800f290:	78fa      	ldrb	r2, [r7, #3]
 800f292:	68f9      	ldr	r1, [r7, #12]
 800f294:	4613      	mov	r3, r2
 800f296:	011b      	lsls	r3, r3, #4
 800f298:	1a9b      	subs	r3, r3, r2
 800f29a:	009b      	lsls	r3, r3, #2
 800f29c:	440b      	add	r3, r1
 800f29e:	333c      	adds	r3, #60	@ 0x3c
 800f2a0:	78ba      	ldrb	r2, [r7, #2]
 800f2a2:	701a      	strb	r2, [r3, #0]
 800f2a4:	e009      	b.n	800f2ba <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800f2a6:	78fa      	ldrb	r2, [r7, #3]
 800f2a8:	68f9      	ldr	r1, [r7, #12]
 800f2aa:	4613      	mov	r3, r2
 800f2ac:	011b      	lsls	r3, r3, #4
 800f2ae:	1a9b      	subs	r3, r3, r2
 800f2b0:	009b      	lsls	r3, r3, #2
 800f2b2:	440b      	add	r3, r1
 800f2b4:	333d      	adds	r3, #61	@ 0x3d
 800f2b6:	78ba      	ldrb	r2, [r7, #2]
 800f2b8:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800f2ba:	2300      	movs	r3, #0
}
 800f2bc:	4618      	mov	r0, r3
 800f2be:	3714      	adds	r7, #20
 800f2c0:	46bd      	mov	sp, r7
 800f2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c6:	4770      	bx	lr

0800f2c8 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800f2c8:	b580      	push	{r7, lr}
 800f2ca:	b082      	sub	sp, #8
 800f2cc:	af00      	add	r7, sp, #0
 800f2ce:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800f2d0:	6878      	ldr	r0, [r7, #4]
 800f2d2:	f7f7 fac3 	bl	800685c <HAL_Delay>
}
 800f2d6:	bf00      	nop
 800f2d8:	3708      	adds	r7, #8
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}
	...

0800f2e0 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800f2e0:	b480      	push	{r7}
 800f2e2:	b085      	sub	sp, #20
 800f2e4:	af00      	add	r7, sp, #0
 800f2e6:	4603      	mov	r3, r0
 800f2e8:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800f2ee:	79fb      	ldrb	r3, [r7, #7]
 800f2f0:	2b03      	cmp	r3, #3
 800f2f2:	d817      	bhi.n	800f324 <USBH_Get_USB_Status+0x44>
 800f2f4:	a201      	add	r2, pc, #4	@ (adr r2, 800f2fc <USBH_Get_USB_Status+0x1c>)
 800f2f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f2fa:	bf00      	nop
 800f2fc:	0800f30d 	.word	0x0800f30d
 800f300:	0800f313 	.word	0x0800f313
 800f304:	0800f319 	.word	0x0800f319
 800f308:	0800f31f 	.word	0x0800f31f
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800f30c:	2300      	movs	r3, #0
 800f30e:	73fb      	strb	r3, [r7, #15]
    break;
 800f310:	e00b      	b.n	800f32a <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800f312:	2302      	movs	r3, #2
 800f314:	73fb      	strb	r3, [r7, #15]
    break;
 800f316:	e008      	b.n	800f32a <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800f318:	2301      	movs	r3, #1
 800f31a:	73fb      	strb	r3, [r7, #15]
    break;
 800f31c:	e005      	b.n	800f32a <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800f31e:	2302      	movs	r3, #2
 800f320:	73fb      	strb	r3, [r7, #15]
    break;
 800f322:	e002      	b.n	800f32a <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800f324:	2302      	movs	r3, #2
 800f326:	73fb      	strb	r3, [r7, #15]
    break;
 800f328:	bf00      	nop
  }
  return usb_status;
 800f32a:	7bfb      	ldrb	r3, [r7, #15]
}
 800f32c:	4618      	mov	r0, r3
 800f32e:	3714      	adds	r7, #20
 800f330:	46bd      	mov	sp, r7
 800f332:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f336:	4770      	bx	lr

0800f338 <malloc>:
 800f338:	4b02      	ldr	r3, [pc, #8]	@ (800f344 <malloc+0xc>)
 800f33a:	4601      	mov	r1, r0
 800f33c:	6818      	ldr	r0, [r3, #0]
 800f33e:	f000 b82d 	b.w	800f39c <_malloc_r>
 800f342:	bf00      	nop
 800f344:	20001950 	.word	0x20001950

0800f348 <free>:
 800f348:	4b02      	ldr	r3, [pc, #8]	@ (800f354 <free+0xc>)
 800f34a:	4601      	mov	r1, r0
 800f34c:	6818      	ldr	r0, [r3, #0]
 800f34e:	f000 bb57 	b.w	800fa00 <_free_r>
 800f352:	bf00      	nop
 800f354:	20001950 	.word	0x20001950

0800f358 <sbrk_aligned>:
 800f358:	b570      	push	{r4, r5, r6, lr}
 800f35a:	4e0f      	ldr	r6, [pc, #60]	@ (800f398 <sbrk_aligned+0x40>)
 800f35c:	460c      	mov	r4, r1
 800f35e:	6831      	ldr	r1, [r6, #0]
 800f360:	4605      	mov	r5, r0
 800f362:	b911      	cbnz	r1, 800f36a <sbrk_aligned+0x12>
 800f364:	f000 faee 	bl	800f944 <_sbrk_r>
 800f368:	6030      	str	r0, [r6, #0]
 800f36a:	4621      	mov	r1, r4
 800f36c:	4628      	mov	r0, r5
 800f36e:	f000 fae9 	bl	800f944 <_sbrk_r>
 800f372:	1c43      	adds	r3, r0, #1
 800f374:	d103      	bne.n	800f37e <sbrk_aligned+0x26>
 800f376:	f04f 34ff 	mov.w	r4, #4294967295
 800f37a:	4620      	mov	r0, r4
 800f37c:	bd70      	pop	{r4, r5, r6, pc}
 800f37e:	1cc4      	adds	r4, r0, #3
 800f380:	f024 0403 	bic.w	r4, r4, #3
 800f384:	42a0      	cmp	r0, r4
 800f386:	d0f8      	beq.n	800f37a <sbrk_aligned+0x22>
 800f388:	1a21      	subs	r1, r4, r0
 800f38a:	4628      	mov	r0, r5
 800f38c:	f000 fada 	bl	800f944 <_sbrk_r>
 800f390:	3001      	adds	r0, #1
 800f392:	d1f2      	bne.n	800f37a <sbrk_aligned+0x22>
 800f394:	e7ef      	b.n	800f376 <sbrk_aligned+0x1e>
 800f396:	bf00      	nop
 800f398:	20006310 	.word	0x20006310

0800f39c <_malloc_r>:
 800f39c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f3a0:	1ccd      	adds	r5, r1, #3
 800f3a2:	f025 0503 	bic.w	r5, r5, #3
 800f3a6:	3508      	adds	r5, #8
 800f3a8:	2d0c      	cmp	r5, #12
 800f3aa:	bf38      	it	cc
 800f3ac:	250c      	movcc	r5, #12
 800f3ae:	2d00      	cmp	r5, #0
 800f3b0:	4606      	mov	r6, r0
 800f3b2:	db01      	blt.n	800f3b8 <_malloc_r+0x1c>
 800f3b4:	42a9      	cmp	r1, r5
 800f3b6:	d904      	bls.n	800f3c2 <_malloc_r+0x26>
 800f3b8:	230c      	movs	r3, #12
 800f3ba:	6033      	str	r3, [r6, #0]
 800f3bc:	2000      	movs	r0, #0
 800f3be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f3c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800f498 <_malloc_r+0xfc>
 800f3c6:	f000 f869 	bl	800f49c <__malloc_lock>
 800f3ca:	f8d8 3000 	ldr.w	r3, [r8]
 800f3ce:	461c      	mov	r4, r3
 800f3d0:	bb44      	cbnz	r4, 800f424 <_malloc_r+0x88>
 800f3d2:	4629      	mov	r1, r5
 800f3d4:	4630      	mov	r0, r6
 800f3d6:	f7ff ffbf 	bl	800f358 <sbrk_aligned>
 800f3da:	1c43      	adds	r3, r0, #1
 800f3dc:	4604      	mov	r4, r0
 800f3de:	d158      	bne.n	800f492 <_malloc_r+0xf6>
 800f3e0:	f8d8 4000 	ldr.w	r4, [r8]
 800f3e4:	4627      	mov	r7, r4
 800f3e6:	2f00      	cmp	r7, #0
 800f3e8:	d143      	bne.n	800f472 <_malloc_r+0xd6>
 800f3ea:	2c00      	cmp	r4, #0
 800f3ec:	d04b      	beq.n	800f486 <_malloc_r+0xea>
 800f3ee:	6823      	ldr	r3, [r4, #0]
 800f3f0:	4639      	mov	r1, r7
 800f3f2:	4630      	mov	r0, r6
 800f3f4:	eb04 0903 	add.w	r9, r4, r3
 800f3f8:	f000 faa4 	bl	800f944 <_sbrk_r>
 800f3fc:	4581      	cmp	r9, r0
 800f3fe:	d142      	bne.n	800f486 <_malloc_r+0xea>
 800f400:	6821      	ldr	r1, [r4, #0]
 800f402:	1a6d      	subs	r5, r5, r1
 800f404:	4629      	mov	r1, r5
 800f406:	4630      	mov	r0, r6
 800f408:	f7ff ffa6 	bl	800f358 <sbrk_aligned>
 800f40c:	3001      	adds	r0, #1
 800f40e:	d03a      	beq.n	800f486 <_malloc_r+0xea>
 800f410:	6823      	ldr	r3, [r4, #0]
 800f412:	442b      	add	r3, r5
 800f414:	6023      	str	r3, [r4, #0]
 800f416:	f8d8 3000 	ldr.w	r3, [r8]
 800f41a:	685a      	ldr	r2, [r3, #4]
 800f41c:	bb62      	cbnz	r2, 800f478 <_malloc_r+0xdc>
 800f41e:	f8c8 7000 	str.w	r7, [r8]
 800f422:	e00f      	b.n	800f444 <_malloc_r+0xa8>
 800f424:	6822      	ldr	r2, [r4, #0]
 800f426:	1b52      	subs	r2, r2, r5
 800f428:	d420      	bmi.n	800f46c <_malloc_r+0xd0>
 800f42a:	2a0b      	cmp	r2, #11
 800f42c:	d917      	bls.n	800f45e <_malloc_r+0xc2>
 800f42e:	1961      	adds	r1, r4, r5
 800f430:	42a3      	cmp	r3, r4
 800f432:	6025      	str	r5, [r4, #0]
 800f434:	bf18      	it	ne
 800f436:	6059      	strne	r1, [r3, #4]
 800f438:	6863      	ldr	r3, [r4, #4]
 800f43a:	bf08      	it	eq
 800f43c:	f8c8 1000 	streq.w	r1, [r8]
 800f440:	5162      	str	r2, [r4, r5]
 800f442:	604b      	str	r3, [r1, #4]
 800f444:	4630      	mov	r0, r6
 800f446:	f000 f82f 	bl	800f4a8 <__malloc_unlock>
 800f44a:	f104 000b 	add.w	r0, r4, #11
 800f44e:	1d23      	adds	r3, r4, #4
 800f450:	f020 0007 	bic.w	r0, r0, #7
 800f454:	1ac2      	subs	r2, r0, r3
 800f456:	bf1c      	itt	ne
 800f458:	1a1b      	subne	r3, r3, r0
 800f45a:	50a3      	strne	r3, [r4, r2]
 800f45c:	e7af      	b.n	800f3be <_malloc_r+0x22>
 800f45e:	6862      	ldr	r2, [r4, #4]
 800f460:	42a3      	cmp	r3, r4
 800f462:	bf0c      	ite	eq
 800f464:	f8c8 2000 	streq.w	r2, [r8]
 800f468:	605a      	strne	r2, [r3, #4]
 800f46a:	e7eb      	b.n	800f444 <_malloc_r+0xa8>
 800f46c:	4623      	mov	r3, r4
 800f46e:	6864      	ldr	r4, [r4, #4]
 800f470:	e7ae      	b.n	800f3d0 <_malloc_r+0x34>
 800f472:	463c      	mov	r4, r7
 800f474:	687f      	ldr	r7, [r7, #4]
 800f476:	e7b6      	b.n	800f3e6 <_malloc_r+0x4a>
 800f478:	461a      	mov	r2, r3
 800f47a:	685b      	ldr	r3, [r3, #4]
 800f47c:	42a3      	cmp	r3, r4
 800f47e:	d1fb      	bne.n	800f478 <_malloc_r+0xdc>
 800f480:	2300      	movs	r3, #0
 800f482:	6053      	str	r3, [r2, #4]
 800f484:	e7de      	b.n	800f444 <_malloc_r+0xa8>
 800f486:	230c      	movs	r3, #12
 800f488:	6033      	str	r3, [r6, #0]
 800f48a:	4630      	mov	r0, r6
 800f48c:	f000 f80c 	bl	800f4a8 <__malloc_unlock>
 800f490:	e794      	b.n	800f3bc <_malloc_r+0x20>
 800f492:	6005      	str	r5, [r0, #0]
 800f494:	e7d6      	b.n	800f444 <_malloc_r+0xa8>
 800f496:	bf00      	nop
 800f498:	20006314 	.word	0x20006314

0800f49c <__malloc_lock>:
 800f49c:	4801      	ldr	r0, [pc, #4]	@ (800f4a4 <__malloc_lock+0x8>)
 800f49e:	f000 ba9e 	b.w	800f9de <__retarget_lock_acquire_recursive>
 800f4a2:	bf00      	nop
 800f4a4:	20006458 	.word	0x20006458

0800f4a8 <__malloc_unlock>:
 800f4a8:	4801      	ldr	r0, [pc, #4]	@ (800f4b0 <__malloc_unlock+0x8>)
 800f4aa:	f000 ba99 	b.w	800f9e0 <__retarget_lock_release_recursive>
 800f4ae:	bf00      	nop
 800f4b0:	20006458 	.word	0x20006458

0800f4b4 <std>:
 800f4b4:	2300      	movs	r3, #0
 800f4b6:	b510      	push	{r4, lr}
 800f4b8:	4604      	mov	r4, r0
 800f4ba:	e9c0 3300 	strd	r3, r3, [r0]
 800f4be:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f4c2:	6083      	str	r3, [r0, #8]
 800f4c4:	8181      	strh	r1, [r0, #12]
 800f4c6:	6643      	str	r3, [r0, #100]	@ 0x64
 800f4c8:	81c2      	strh	r2, [r0, #14]
 800f4ca:	6183      	str	r3, [r0, #24]
 800f4cc:	4619      	mov	r1, r3
 800f4ce:	2208      	movs	r2, #8
 800f4d0:	305c      	adds	r0, #92	@ 0x5c
 800f4d2:	f000 f9e7 	bl	800f8a4 <memset>
 800f4d6:	4b0d      	ldr	r3, [pc, #52]	@ (800f50c <std+0x58>)
 800f4d8:	6263      	str	r3, [r4, #36]	@ 0x24
 800f4da:	4b0d      	ldr	r3, [pc, #52]	@ (800f510 <std+0x5c>)
 800f4dc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800f4de:	4b0d      	ldr	r3, [pc, #52]	@ (800f514 <std+0x60>)
 800f4e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f4e2:	4b0d      	ldr	r3, [pc, #52]	@ (800f518 <std+0x64>)
 800f4e4:	6323      	str	r3, [r4, #48]	@ 0x30
 800f4e6:	4b0d      	ldr	r3, [pc, #52]	@ (800f51c <std+0x68>)
 800f4e8:	6224      	str	r4, [r4, #32]
 800f4ea:	429c      	cmp	r4, r3
 800f4ec:	d006      	beq.n	800f4fc <std+0x48>
 800f4ee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800f4f2:	4294      	cmp	r4, r2
 800f4f4:	d002      	beq.n	800f4fc <std+0x48>
 800f4f6:	33d0      	adds	r3, #208	@ 0xd0
 800f4f8:	429c      	cmp	r4, r3
 800f4fa:	d105      	bne.n	800f508 <std+0x54>
 800f4fc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800f500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f504:	f000 ba6a 	b.w	800f9dc <__retarget_lock_init_recursive>
 800f508:	bd10      	pop	{r4, pc}
 800f50a:	bf00      	nop
 800f50c:	0800f6f5 	.word	0x0800f6f5
 800f510:	0800f717 	.word	0x0800f717
 800f514:	0800f74f 	.word	0x0800f74f
 800f518:	0800f773 	.word	0x0800f773
 800f51c:	20006318 	.word	0x20006318

0800f520 <stdio_exit_handler>:
 800f520:	4a02      	ldr	r2, [pc, #8]	@ (800f52c <stdio_exit_handler+0xc>)
 800f522:	4903      	ldr	r1, [pc, #12]	@ (800f530 <stdio_exit_handler+0x10>)
 800f524:	4803      	ldr	r0, [pc, #12]	@ (800f534 <stdio_exit_handler+0x14>)
 800f526:	f000 b869 	b.w	800f5fc <_fwalk_sglue>
 800f52a:	bf00      	nop
 800f52c:	20001944 	.word	0x20001944
 800f530:	0800fb9d 	.word	0x0800fb9d
 800f534:	20001954 	.word	0x20001954

0800f538 <cleanup_stdio>:
 800f538:	6841      	ldr	r1, [r0, #4]
 800f53a:	4b0c      	ldr	r3, [pc, #48]	@ (800f56c <cleanup_stdio+0x34>)
 800f53c:	4299      	cmp	r1, r3
 800f53e:	b510      	push	{r4, lr}
 800f540:	4604      	mov	r4, r0
 800f542:	d001      	beq.n	800f548 <cleanup_stdio+0x10>
 800f544:	f000 fb2a 	bl	800fb9c <_fflush_r>
 800f548:	68a1      	ldr	r1, [r4, #8]
 800f54a:	4b09      	ldr	r3, [pc, #36]	@ (800f570 <cleanup_stdio+0x38>)
 800f54c:	4299      	cmp	r1, r3
 800f54e:	d002      	beq.n	800f556 <cleanup_stdio+0x1e>
 800f550:	4620      	mov	r0, r4
 800f552:	f000 fb23 	bl	800fb9c <_fflush_r>
 800f556:	68e1      	ldr	r1, [r4, #12]
 800f558:	4b06      	ldr	r3, [pc, #24]	@ (800f574 <cleanup_stdio+0x3c>)
 800f55a:	4299      	cmp	r1, r3
 800f55c:	d004      	beq.n	800f568 <cleanup_stdio+0x30>
 800f55e:	4620      	mov	r0, r4
 800f560:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f564:	f000 bb1a 	b.w	800fb9c <_fflush_r>
 800f568:	bd10      	pop	{r4, pc}
 800f56a:	bf00      	nop
 800f56c:	20006318 	.word	0x20006318
 800f570:	20006380 	.word	0x20006380
 800f574:	200063e8 	.word	0x200063e8

0800f578 <global_stdio_init.part.0>:
 800f578:	b510      	push	{r4, lr}
 800f57a:	4b0b      	ldr	r3, [pc, #44]	@ (800f5a8 <global_stdio_init.part.0+0x30>)
 800f57c:	4c0b      	ldr	r4, [pc, #44]	@ (800f5ac <global_stdio_init.part.0+0x34>)
 800f57e:	4a0c      	ldr	r2, [pc, #48]	@ (800f5b0 <global_stdio_init.part.0+0x38>)
 800f580:	601a      	str	r2, [r3, #0]
 800f582:	4620      	mov	r0, r4
 800f584:	2200      	movs	r2, #0
 800f586:	2104      	movs	r1, #4
 800f588:	f7ff ff94 	bl	800f4b4 <std>
 800f58c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800f590:	2201      	movs	r2, #1
 800f592:	2109      	movs	r1, #9
 800f594:	f7ff ff8e 	bl	800f4b4 <std>
 800f598:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800f59c:	2202      	movs	r2, #2
 800f59e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5a2:	2112      	movs	r1, #18
 800f5a4:	f7ff bf86 	b.w	800f4b4 <std>
 800f5a8:	20006450 	.word	0x20006450
 800f5ac:	20006318 	.word	0x20006318
 800f5b0:	0800f521 	.word	0x0800f521

0800f5b4 <__sfp_lock_acquire>:
 800f5b4:	4801      	ldr	r0, [pc, #4]	@ (800f5bc <__sfp_lock_acquire+0x8>)
 800f5b6:	f000 ba12 	b.w	800f9de <__retarget_lock_acquire_recursive>
 800f5ba:	bf00      	nop
 800f5bc:	20006459 	.word	0x20006459

0800f5c0 <__sfp_lock_release>:
 800f5c0:	4801      	ldr	r0, [pc, #4]	@ (800f5c8 <__sfp_lock_release+0x8>)
 800f5c2:	f000 ba0d 	b.w	800f9e0 <__retarget_lock_release_recursive>
 800f5c6:	bf00      	nop
 800f5c8:	20006459 	.word	0x20006459

0800f5cc <__sinit>:
 800f5cc:	b510      	push	{r4, lr}
 800f5ce:	4604      	mov	r4, r0
 800f5d0:	f7ff fff0 	bl	800f5b4 <__sfp_lock_acquire>
 800f5d4:	6a23      	ldr	r3, [r4, #32]
 800f5d6:	b11b      	cbz	r3, 800f5e0 <__sinit+0x14>
 800f5d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f5dc:	f7ff bff0 	b.w	800f5c0 <__sfp_lock_release>
 800f5e0:	4b04      	ldr	r3, [pc, #16]	@ (800f5f4 <__sinit+0x28>)
 800f5e2:	6223      	str	r3, [r4, #32]
 800f5e4:	4b04      	ldr	r3, [pc, #16]	@ (800f5f8 <__sinit+0x2c>)
 800f5e6:	681b      	ldr	r3, [r3, #0]
 800f5e8:	2b00      	cmp	r3, #0
 800f5ea:	d1f5      	bne.n	800f5d8 <__sinit+0xc>
 800f5ec:	f7ff ffc4 	bl	800f578 <global_stdio_init.part.0>
 800f5f0:	e7f2      	b.n	800f5d8 <__sinit+0xc>
 800f5f2:	bf00      	nop
 800f5f4:	0800f539 	.word	0x0800f539
 800f5f8:	20006450 	.word	0x20006450

0800f5fc <_fwalk_sglue>:
 800f5fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f600:	4607      	mov	r7, r0
 800f602:	4688      	mov	r8, r1
 800f604:	4614      	mov	r4, r2
 800f606:	2600      	movs	r6, #0
 800f608:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f60c:	f1b9 0901 	subs.w	r9, r9, #1
 800f610:	d505      	bpl.n	800f61e <_fwalk_sglue+0x22>
 800f612:	6824      	ldr	r4, [r4, #0]
 800f614:	2c00      	cmp	r4, #0
 800f616:	d1f7      	bne.n	800f608 <_fwalk_sglue+0xc>
 800f618:	4630      	mov	r0, r6
 800f61a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f61e:	89ab      	ldrh	r3, [r5, #12]
 800f620:	2b01      	cmp	r3, #1
 800f622:	d907      	bls.n	800f634 <_fwalk_sglue+0x38>
 800f624:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f628:	3301      	adds	r3, #1
 800f62a:	d003      	beq.n	800f634 <_fwalk_sglue+0x38>
 800f62c:	4629      	mov	r1, r5
 800f62e:	4638      	mov	r0, r7
 800f630:	47c0      	blx	r8
 800f632:	4306      	orrs	r6, r0
 800f634:	3568      	adds	r5, #104	@ 0x68
 800f636:	e7e9      	b.n	800f60c <_fwalk_sglue+0x10>

0800f638 <_puts_r>:
 800f638:	6a03      	ldr	r3, [r0, #32]
 800f63a:	b570      	push	{r4, r5, r6, lr}
 800f63c:	6884      	ldr	r4, [r0, #8]
 800f63e:	4605      	mov	r5, r0
 800f640:	460e      	mov	r6, r1
 800f642:	b90b      	cbnz	r3, 800f648 <_puts_r+0x10>
 800f644:	f7ff ffc2 	bl	800f5cc <__sinit>
 800f648:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f64a:	07db      	lsls	r3, r3, #31
 800f64c:	d405      	bmi.n	800f65a <_puts_r+0x22>
 800f64e:	89a3      	ldrh	r3, [r4, #12]
 800f650:	0598      	lsls	r0, r3, #22
 800f652:	d402      	bmi.n	800f65a <_puts_r+0x22>
 800f654:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f656:	f000 f9c2 	bl	800f9de <__retarget_lock_acquire_recursive>
 800f65a:	89a3      	ldrh	r3, [r4, #12]
 800f65c:	0719      	lsls	r1, r3, #28
 800f65e:	d502      	bpl.n	800f666 <_puts_r+0x2e>
 800f660:	6923      	ldr	r3, [r4, #16]
 800f662:	2b00      	cmp	r3, #0
 800f664:	d135      	bne.n	800f6d2 <_puts_r+0x9a>
 800f666:	4621      	mov	r1, r4
 800f668:	4628      	mov	r0, r5
 800f66a:	f000 f8c5 	bl	800f7f8 <__swsetup_r>
 800f66e:	b380      	cbz	r0, 800f6d2 <_puts_r+0x9a>
 800f670:	f04f 35ff 	mov.w	r5, #4294967295
 800f674:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f676:	07da      	lsls	r2, r3, #31
 800f678:	d405      	bmi.n	800f686 <_puts_r+0x4e>
 800f67a:	89a3      	ldrh	r3, [r4, #12]
 800f67c:	059b      	lsls	r3, r3, #22
 800f67e:	d402      	bmi.n	800f686 <_puts_r+0x4e>
 800f680:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f682:	f000 f9ad 	bl	800f9e0 <__retarget_lock_release_recursive>
 800f686:	4628      	mov	r0, r5
 800f688:	bd70      	pop	{r4, r5, r6, pc}
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	da04      	bge.n	800f698 <_puts_r+0x60>
 800f68e:	69a2      	ldr	r2, [r4, #24]
 800f690:	429a      	cmp	r2, r3
 800f692:	dc17      	bgt.n	800f6c4 <_puts_r+0x8c>
 800f694:	290a      	cmp	r1, #10
 800f696:	d015      	beq.n	800f6c4 <_puts_r+0x8c>
 800f698:	6823      	ldr	r3, [r4, #0]
 800f69a:	1c5a      	adds	r2, r3, #1
 800f69c:	6022      	str	r2, [r4, #0]
 800f69e:	7019      	strb	r1, [r3, #0]
 800f6a0:	68a3      	ldr	r3, [r4, #8]
 800f6a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800f6a6:	3b01      	subs	r3, #1
 800f6a8:	60a3      	str	r3, [r4, #8]
 800f6aa:	2900      	cmp	r1, #0
 800f6ac:	d1ed      	bne.n	800f68a <_puts_r+0x52>
 800f6ae:	2b00      	cmp	r3, #0
 800f6b0:	da11      	bge.n	800f6d6 <_puts_r+0x9e>
 800f6b2:	4622      	mov	r2, r4
 800f6b4:	210a      	movs	r1, #10
 800f6b6:	4628      	mov	r0, r5
 800f6b8:	f000 f85f 	bl	800f77a <__swbuf_r>
 800f6bc:	3001      	adds	r0, #1
 800f6be:	d0d7      	beq.n	800f670 <_puts_r+0x38>
 800f6c0:	250a      	movs	r5, #10
 800f6c2:	e7d7      	b.n	800f674 <_puts_r+0x3c>
 800f6c4:	4622      	mov	r2, r4
 800f6c6:	4628      	mov	r0, r5
 800f6c8:	f000 f857 	bl	800f77a <__swbuf_r>
 800f6cc:	3001      	adds	r0, #1
 800f6ce:	d1e7      	bne.n	800f6a0 <_puts_r+0x68>
 800f6d0:	e7ce      	b.n	800f670 <_puts_r+0x38>
 800f6d2:	3e01      	subs	r6, #1
 800f6d4:	e7e4      	b.n	800f6a0 <_puts_r+0x68>
 800f6d6:	6823      	ldr	r3, [r4, #0]
 800f6d8:	1c5a      	adds	r2, r3, #1
 800f6da:	6022      	str	r2, [r4, #0]
 800f6dc:	220a      	movs	r2, #10
 800f6de:	701a      	strb	r2, [r3, #0]
 800f6e0:	e7ee      	b.n	800f6c0 <_puts_r+0x88>
	...

0800f6e4 <puts>:
 800f6e4:	4b02      	ldr	r3, [pc, #8]	@ (800f6f0 <puts+0xc>)
 800f6e6:	4601      	mov	r1, r0
 800f6e8:	6818      	ldr	r0, [r3, #0]
 800f6ea:	f7ff bfa5 	b.w	800f638 <_puts_r>
 800f6ee:	bf00      	nop
 800f6f0:	20001950 	.word	0x20001950

0800f6f4 <__sread>:
 800f6f4:	b510      	push	{r4, lr}
 800f6f6:	460c      	mov	r4, r1
 800f6f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f6fc:	f000 f910 	bl	800f920 <_read_r>
 800f700:	2800      	cmp	r0, #0
 800f702:	bfab      	itete	ge
 800f704:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800f706:	89a3      	ldrhlt	r3, [r4, #12]
 800f708:	181b      	addge	r3, r3, r0
 800f70a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800f70e:	bfac      	ite	ge
 800f710:	6563      	strge	r3, [r4, #84]	@ 0x54
 800f712:	81a3      	strhlt	r3, [r4, #12]
 800f714:	bd10      	pop	{r4, pc}

0800f716 <__swrite>:
 800f716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f71a:	461f      	mov	r7, r3
 800f71c:	898b      	ldrh	r3, [r1, #12]
 800f71e:	05db      	lsls	r3, r3, #23
 800f720:	4605      	mov	r5, r0
 800f722:	460c      	mov	r4, r1
 800f724:	4616      	mov	r6, r2
 800f726:	d505      	bpl.n	800f734 <__swrite+0x1e>
 800f728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f72c:	2302      	movs	r3, #2
 800f72e:	2200      	movs	r2, #0
 800f730:	f000 f8e4 	bl	800f8fc <_lseek_r>
 800f734:	89a3      	ldrh	r3, [r4, #12]
 800f736:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f73a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800f73e:	81a3      	strh	r3, [r4, #12]
 800f740:	4632      	mov	r2, r6
 800f742:	463b      	mov	r3, r7
 800f744:	4628      	mov	r0, r5
 800f746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f74a:	f000 b90b 	b.w	800f964 <_write_r>

0800f74e <__sseek>:
 800f74e:	b510      	push	{r4, lr}
 800f750:	460c      	mov	r4, r1
 800f752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f756:	f000 f8d1 	bl	800f8fc <_lseek_r>
 800f75a:	1c43      	adds	r3, r0, #1
 800f75c:	89a3      	ldrh	r3, [r4, #12]
 800f75e:	bf15      	itete	ne
 800f760:	6560      	strne	r0, [r4, #84]	@ 0x54
 800f762:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800f766:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800f76a:	81a3      	strheq	r3, [r4, #12]
 800f76c:	bf18      	it	ne
 800f76e:	81a3      	strhne	r3, [r4, #12]
 800f770:	bd10      	pop	{r4, pc}

0800f772 <__sclose>:
 800f772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f776:	f000 b8b1 	b.w	800f8dc <_close_r>

0800f77a <__swbuf_r>:
 800f77a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f77c:	460e      	mov	r6, r1
 800f77e:	4614      	mov	r4, r2
 800f780:	4605      	mov	r5, r0
 800f782:	b118      	cbz	r0, 800f78c <__swbuf_r+0x12>
 800f784:	6a03      	ldr	r3, [r0, #32]
 800f786:	b90b      	cbnz	r3, 800f78c <__swbuf_r+0x12>
 800f788:	f7ff ff20 	bl	800f5cc <__sinit>
 800f78c:	69a3      	ldr	r3, [r4, #24]
 800f78e:	60a3      	str	r3, [r4, #8]
 800f790:	89a3      	ldrh	r3, [r4, #12]
 800f792:	071a      	lsls	r2, r3, #28
 800f794:	d501      	bpl.n	800f79a <__swbuf_r+0x20>
 800f796:	6923      	ldr	r3, [r4, #16]
 800f798:	b943      	cbnz	r3, 800f7ac <__swbuf_r+0x32>
 800f79a:	4621      	mov	r1, r4
 800f79c:	4628      	mov	r0, r5
 800f79e:	f000 f82b 	bl	800f7f8 <__swsetup_r>
 800f7a2:	b118      	cbz	r0, 800f7ac <__swbuf_r+0x32>
 800f7a4:	f04f 37ff 	mov.w	r7, #4294967295
 800f7a8:	4638      	mov	r0, r7
 800f7aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f7ac:	6823      	ldr	r3, [r4, #0]
 800f7ae:	6922      	ldr	r2, [r4, #16]
 800f7b0:	1a98      	subs	r0, r3, r2
 800f7b2:	6963      	ldr	r3, [r4, #20]
 800f7b4:	b2f6      	uxtb	r6, r6
 800f7b6:	4283      	cmp	r3, r0
 800f7b8:	4637      	mov	r7, r6
 800f7ba:	dc05      	bgt.n	800f7c8 <__swbuf_r+0x4e>
 800f7bc:	4621      	mov	r1, r4
 800f7be:	4628      	mov	r0, r5
 800f7c0:	f000 f9ec 	bl	800fb9c <_fflush_r>
 800f7c4:	2800      	cmp	r0, #0
 800f7c6:	d1ed      	bne.n	800f7a4 <__swbuf_r+0x2a>
 800f7c8:	68a3      	ldr	r3, [r4, #8]
 800f7ca:	3b01      	subs	r3, #1
 800f7cc:	60a3      	str	r3, [r4, #8]
 800f7ce:	6823      	ldr	r3, [r4, #0]
 800f7d0:	1c5a      	adds	r2, r3, #1
 800f7d2:	6022      	str	r2, [r4, #0]
 800f7d4:	701e      	strb	r6, [r3, #0]
 800f7d6:	6962      	ldr	r2, [r4, #20]
 800f7d8:	1c43      	adds	r3, r0, #1
 800f7da:	429a      	cmp	r2, r3
 800f7dc:	d004      	beq.n	800f7e8 <__swbuf_r+0x6e>
 800f7de:	89a3      	ldrh	r3, [r4, #12]
 800f7e0:	07db      	lsls	r3, r3, #31
 800f7e2:	d5e1      	bpl.n	800f7a8 <__swbuf_r+0x2e>
 800f7e4:	2e0a      	cmp	r6, #10
 800f7e6:	d1df      	bne.n	800f7a8 <__swbuf_r+0x2e>
 800f7e8:	4621      	mov	r1, r4
 800f7ea:	4628      	mov	r0, r5
 800f7ec:	f000 f9d6 	bl	800fb9c <_fflush_r>
 800f7f0:	2800      	cmp	r0, #0
 800f7f2:	d0d9      	beq.n	800f7a8 <__swbuf_r+0x2e>
 800f7f4:	e7d6      	b.n	800f7a4 <__swbuf_r+0x2a>
	...

0800f7f8 <__swsetup_r>:
 800f7f8:	b538      	push	{r3, r4, r5, lr}
 800f7fa:	4b29      	ldr	r3, [pc, #164]	@ (800f8a0 <__swsetup_r+0xa8>)
 800f7fc:	4605      	mov	r5, r0
 800f7fe:	6818      	ldr	r0, [r3, #0]
 800f800:	460c      	mov	r4, r1
 800f802:	b118      	cbz	r0, 800f80c <__swsetup_r+0x14>
 800f804:	6a03      	ldr	r3, [r0, #32]
 800f806:	b90b      	cbnz	r3, 800f80c <__swsetup_r+0x14>
 800f808:	f7ff fee0 	bl	800f5cc <__sinit>
 800f80c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f810:	0719      	lsls	r1, r3, #28
 800f812:	d422      	bmi.n	800f85a <__swsetup_r+0x62>
 800f814:	06da      	lsls	r2, r3, #27
 800f816:	d407      	bmi.n	800f828 <__swsetup_r+0x30>
 800f818:	2209      	movs	r2, #9
 800f81a:	602a      	str	r2, [r5, #0]
 800f81c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f820:	81a3      	strh	r3, [r4, #12]
 800f822:	f04f 30ff 	mov.w	r0, #4294967295
 800f826:	e033      	b.n	800f890 <__swsetup_r+0x98>
 800f828:	0758      	lsls	r0, r3, #29
 800f82a:	d512      	bpl.n	800f852 <__swsetup_r+0x5a>
 800f82c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f82e:	b141      	cbz	r1, 800f842 <__swsetup_r+0x4a>
 800f830:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f834:	4299      	cmp	r1, r3
 800f836:	d002      	beq.n	800f83e <__swsetup_r+0x46>
 800f838:	4628      	mov	r0, r5
 800f83a:	f000 f8e1 	bl	800fa00 <_free_r>
 800f83e:	2300      	movs	r3, #0
 800f840:	6363      	str	r3, [r4, #52]	@ 0x34
 800f842:	89a3      	ldrh	r3, [r4, #12]
 800f844:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800f848:	81a3      	strh	r3, [r4, #12]
 800f84a:	2300      	movs	r3, #0
 800f84c:	6063      	str	r3, [r4, #4]
 800f84e:	6923      	ldr	r3, [r4, #16]
 800f850:	6023      	str	r3, [r4, #0]
 800f852:	89a3      	ldrh	r3, [r4, #12]
 800f854:	f043 0308 	orr.w	r3, r3, #8
 800f858:	81a3      	strh	r3, [r4, #12]
 800f85a:	6923      	ldr	r3, [r4, #16]
 800f85c:	b94b      	cbnz	r3, 800f872 <__swsetup_r+0x7a>
 800f85e:	89a3      	ldrh	r3, [r4, #12]
 800f860:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800f864:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800f868:	d003      	beq.n	800f872 <__swsetup_r+0x7a>
 800f86a:	4621      	mov	r1, r4
 800f86c:	4628      	mov	r0, r5
 800f86e:	f000 f9e3 	bl	800fc38 <__smakebuf_r>
 800f872:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f876:	f013 0201 	ands.w	r2, r3, #1
 800f87a:	d00a      	beq.n	800f892 <__swsetup_r+0x9a>
 800f87c:	2200      	movs	r2, #0
 800f87e:	60a2      	str	r2, [r4, #8]
 800f880:	6962      	ldr	r2, [r4, #20]
 800f882:	4252      	negs	r2, r2
 800f884:	61a2      	str	r2, [r4, #24]
 800f886:	6922      	ldr	r2, [r4, #16]
 800f888:	b942      	cbnz	r2, 800f89c <__swsetup_r+0xa4>
 800f88a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800f88e:	d1c5      	bne.n	800f81c <__swsetup_r+0x24>
 800f890:	bd38      	pop	{r3, r4, r5, pc}
 800f892:	0799      	lsls	r1, r3, #30
 800f894:	bf58      	it	pl
 800f896:	6962      	ldrpl	r2, [r4, #20]
 800f898:	60a2      	str	r2, [r4, #8]
 800f89a:	e7f4      	b.n	800f886 <__swsetup_r+0x8e>
 800f89c:	2000      	movs	r0, #0
 800f89e:	e7f7      	b.n	800f890 <__swsetup_r+0x98>
 800f8a0:	20001950 	.word	0x20001950

0800f8a4 <memset>:
 800f8a4:	4402      	add	r2, r0
 800f8a6:	4603      	mov	r3, r0
 800f8a8:	4293      	cmp	r3, r2
 800f8aa:	d100      	bne.n	800f8ae <memset+0xa>
 800f8ac:	4770      	bx	lr
 800f8ae:	f803 1b01 	strb.w	r1, [r3], #1
 800f8b2:	e7f9      	b.n	800f8a8 <memset+0x4>

0800f8b4 <strncpy>:
 800f8b4:	b510      	push	{r4, lr}
 800f8b6:	3901      	subs	r1, #1
 800f8b8:	4603      	mov	r3, r0
 800f8ba:	b132      	cbz	r2, 800f8ca <strncpy+0x16>
 800f8bc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800f8c0:	f803 4b01 	strb.w	r4, [r3], #1
 800f8c4:	3a01      	subs	r2, #1
 800f8c6:	2c00      	cmp	r4, #0
 800f8c8:	d1f7      	bne.n	800f8ba <strncpy+0x6>
 800f8ca:	441a      	add	r2, r3
 800f8cc:	2100      	movs	r1, #0
 800f8ce:	4293      	cmp	r3, r2
 800f8d0:	d100      	bne.n	800f8d4 <strncpy+0x20>
 800f8d2:	bd10      	pop	{r4, pc}
 800f8d4:	f803 1b01 	strb.w	r1, [r3], #1
 800f8d8:	e7f9      	b.n	800f8ce <strncpy+0x1a>
	...

0800f8dc <_close_r>:
 800f8dc:	b538      	push	{r3, r4, r5, lr}
 800f8de:	4d06      	ldr	r5, [pc, #24]	@ (800f8f8 <_close_r+0x1c>)
 800f8e0:	2300      	movs	r3, #0
 800f8e2:	4604      	mov	r4, r0
 800f8e4:	4608      	mov	r0, r1
 800f8e6:	602b      	str	r3, [r5, #0]
 800f8e8:	f7f6 fe9f 	bl	800662a <_close>
 800f8ec:	1c43      	adds	r3, r0, #1
 800f8ee:	d102      	bne.n	800f8f6 <_close_r+0x1a>
 800f8f0:	682b      	ldr	r3, [r5, #0]
 800f8f2:	b103      	cbz	r3, 800f8f6 <_close_r+0x1a>
 800f8f4:	6023      	str	r3, [r4, #0]
 800f8f6:	bd38      	pop	{r3, r4, r5, pc}
 800f8f8:	20006454 	.word	0x20006454

0800f8fc <_lseek_r>:
 800f8fc:	b538      	push	{r3, r4, r5, lr}
 800f8fe:	4d07      	ldr	r5, [pc, #28]	@ (800f91c <_lseek_r+0x20>)
 800f900:	4604      	mov	r4, r0
 800f902:	4608      	mov	r0, r1
 800f904:	4611      	mov	r1, r2
 800f906:	2200      	movs	r2, #0
 800f908:	602a      	str	r2, [r5, #0]
 800f90a:	461a      	mov	r2, r3
 800f90c:	f7f6 feb4 	bl	8006678 <_lseek>
 800f910:	1c43      	adds	r3, r0, #1
 800f912:	d102      	bne.n	800f91a <_lseek_r+0x1e>
 800f914:	682b      	ldr	r3, [r5, #0]
 800f916:	b103      	cbz	r3, 800f91a <_lseek_r+0x1e>
 800f918:	6023      	str	r3, [r4, #0]
 800f91a:	bd38      	pop	{r3, r4, r5, pc}
 800f91c:	20006454 	.word	0x20006454

0800f920 <_read_r>:
 800f920:	b538      	push	{r3, r4, r5, lr}
 800f922:	4d07      	ldr	r5, [pc, #28]	@ (800f940 <_read_r+0x20>)
 800f924:	4604      	mov	r4, r0
 800f926:	4608      	mov	r0, r1
 800f928:	4611      	mov	r1, r2
 800f92a:	2200      	movs	r2, #0
 800f92c:	602a      	str	r2, [r5, #0]
 800f92e:	461a      	mov	r2, r3
 800f930:	f7f6 fe42 	bl	80065b8 <_read>
 800f934:	1c43      	adds	r3, r0, #1
 800f936:	d102      	bne.n	800f93e <_read_r+0x1e>
 800f938:	682b      	ldr	r3, [r5, #0]
 800f93a:	b103      	cbz	r3, 800f93e <_read_r+0x1e>
 800f93c:	6023      	str	r3, [r4, #0]
 800f93e:	bd38      	pop	{r3, r4, r5, pc}
 800f940:	20006454 	.word	0x20006454

0800f944 <_sbrk_r>:
 800f944:	b538      	push	{r3, r4, r5, lr}
 800f946:	4d06      	ldr	r5, [pc, #24]	@ (800f960 <_sbrk_r+0x1c>)
 800f948:	2300      	movs	r3, #0
 800f94a:	4604      	mov	r4, r0
 800f94c:	4608      	mov	r0, r1
 800f94e:	602b      	str	r3, [r5, #0]
 800f950:	f7f6 fea0 	bl	8006694 <_sbrk>
 800f954:	1c43      	adds	r3, r0, #1
 800f956:	d102      	bne.n	800f95e <_sbrk_r+0x1a>
 800f958:	682b      	ldr	r3, [r5, #0]
 800f95a:	b103      	cbz	r3, 800f95e <_sbrk_r+0x1a>
 800f95c:	6023      	str	r3, [r4, #0]
 800f95e:	bd38      	pop	{r3, r4, r5, pc}
 800f960:	20006454 	.word	0x20006454

0800f964 <_write_r>:
 800f964:	b538      	push	{r3, r4, r5, lr}
 800f966:	4d07      	ldr	r5, [pc, #28]	@ (800f984 <_write_r+0x20>)
 800f968:	4604      	mov	r4, r0
 800f96a:	4608      	mov	r0, r1
 800f96c:	4611      	mov	r1, r2
 800f96e:	2200      	movs	r2, #0
 800f970:	602a      	str	r2, [r5, #0]
 800f972:	461a      	mov	r2, r3
 800f974:	f7f6 fe3d 	bl	80065f2 <_write>
 800f978:	1c43      	adds	r3, r0, #1
 800f97a:	d102      	bne.n	800f982 <_write_r+0x1e>
 800f97c:	682b      	ldr	r3, [r5, #0]
 800f97e:	b103      	cbz	r3, 800f982 <_write_r+0x1e>
 800f980:	6023      	str	r3, [r4, #0]
 800f982:	bd38      	pop	{r3, r4, r5, pc}
 800f984:	20006454 	.word	0x20006454

0800f988 <__errno>:
 800f988:	4b01      	ldr	r3, [pc, #4]	@ (800f990 <__errno+0x8>)
 800f98a:	6818      	ldr	r0, [r3, #0]
 800f98c:	4770      	bx	lr
 800f98e:	bf00      	nop
 800f990:	20001950 	.word	0x20001950

0800f994 <__libc_init_array>:
 800f994:	b570      	push	{r4, r5, r6, lr}
 800f996:	4d0d      	ldr	r5, [pc, #52]	@ (800f9cc <__libc_init_array+0x38>)
 800f998:	4c0d      	ldr	r4, [pc, #52]	@ (800f9d0 <__libc_init_array+0x3c>)
 800f99a:	1b64      	subs	r4, r4, r5
 800f99c:	10a4      	asrs	r4, r4, #2
 800f99e:	2600      	movs	r6, #0
 800f9a0:	42a6      	cmp	r6, r4
 800f9a2:	d109      	bne.n	800f9b8 <__libc_init_array+0x24>
 800f9a4:	4d0b      	ldr	r5, [pc, #44]	@ (800f9d4 <__libc_init_array+0x40>)
 800f9a6:	4c0c      	ldr	r4, [pc, #48]	@ (800f9d8 <__libc_init_array+0x44>)
 800f9a8:	f000 f9a4 	bl	800fcf4 <_init>
 800f9ac:	1b64      	subs	r4, r4, r5
 800f9ae:	10a4      	asrs	r4, r4, #2
 800f9b0:	2600      	movs	r6, #0
 800f9b2:	42a6      	cmp	r6, r4
 800f9b4:	d105      	bne.n	800f9c2 <__libc_init_array+0x2e>
 800f9b6:	bd70      	pop	{r4, r5, r6, pc}
 800f9b8:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9bc:	4798      	blx	r3
 800f9be:	3601      	adds	r6, #1
 800f9c0:	e7ee      	b.n	800f9a0 <__libc_init_array+0xc>
 800f9c2:	f855 3b04 	ldr.w	r3, [r5], #4
 800f9c6:	4798      	blx	r3
 800f9c8:	3601      	adds	r6, #1
 800f9ca:	e7f2      	b.n	800f9b2 <__libc_init_array+0x1e>
 800f9cc:	0801135c 	.word	0x0801135c
 800f9d0:	0801135c 	.word	0x0801135c
 800f9d4:	0801135c 	.word	0x0801135c
 800f9d8:	08011360 	.word	0x08011360

0800f9dc <__retarget_lock_init_recursive>:
 800f9dc:	4770      	bx	lr

0800f9de <__retarget_lock_acquire_recursive>:
 800f9de:	4770      	bx	lr

0800f9e0 <__retarget_lock_release_recursive>:
 800f9e0:	4770      	bx	lr

0800f9e2 <memcpy>:
 800f9e2:	440a      	add	r2, r1
 800f9e4:	4291      	cmp	r1, r2
 800f9e6:	f100 33ff 	add.w	r3, r0, #4294967295
 800f9ea:	d100      	bne.n	800f9ee <memcpy+0xc>
 800f9ec:	4770      	bx	lr
 800f9ee:	b510      	push	{r4, lr}
 800f9f0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f9f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f9f8:	4291      	cmp	r1, r2
 800f9fa:	d1f9      	bne.n	800f9f0 <memcpy+0xe>
 800f9fc:	bd10      	pop	{r4, pc}
	...

0800fa00 <_free_r>:
 800fa00:	b538      	push	{r3, r4, r5, lr}
 800fa02:	4605      	mov	r5, r0
 800fa04:	2900      	cmp	r1, #0
 800fa06:	d041      	beq.n	800fa8c <_free_r+0x8c>
 800fa08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fa0c:	1f0c      	subs	r4, r1, #4
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	bfb8      	it	lt
 800fa12:	18e4      	addlt	r4, r4, r3
 800fa14:	f7ff fd42 	bl	800f49c <__malloc_lock>
 800fa18:	4a1d      	ldr	r2, [pc, #116]	@ (800fa90 <_free_r+0x90>)
 800fa1a:	6813      	ldr	r3, [r2, #0]
 800fa1c:	b933      	cbnz	r3, 800fa2c <_free_r+0x2c>
 800fa1e:	6063      	str	r3, [r4, #4]
 800fa20:	6014      	str	r4, [r2, #0]
 800fa22:	4628      	mov	r0, r5
 800fa24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa28:	f7ff bd3e 	b.w	800f4a8 <__malloc_unlock>
 800fa2c:	42a3      	cmp	r3, r4
 800fa2e:	d908      	bls.n	800fa42 <_free_r+0x42>
 800fa30:	6820      	ldr	r0, [r4, #0]
 800fa32:	1821      	adds	r1, r4, r0
 800fa34:	428b      	cmp	r3, r1
 800fa36:	bf01      	itttt	eq
 800fa38:	6819      	ldreq	r1, [r3, #0]
 800fa3a:	685b      	ldreq	r3, [r3, #4]
 800fa3c:	1809      	addeq	r1, r1, r0
 800fa3e:	6021      	streq	r1, [r4, #0]
 800fa40:	e7ed      	b.n	800fa1e <_free_r+0x1e>
 800fa42:	461a      	mov	r2, r3
 800fa44:	685b      	ldr	r3, [r3, #4]
 800fa46:	b10b      	cbz	r3, 800fa4c <_free_r+0x4c>
 800fa48:	42a3      	cmp	r3, r4
 800fa4a:	d9fa      	bls.n	800fa42 <_free_r+0x42>
 800fa4c:	6811      	ldr	r1, [r2, #0]
 800fa4e:	1850      	adds	r0, r2, r1
 800fa50:	42a0      	cmp	r0, r4
 800fa52:	d10b      	bne.n	800fa6c <_free_r+0x6c>
 800fa54:	6820      	ldr	r0, [r4, #0]
 800fa56:	4401      	add	r1, r0
 800fa58:	1850      	adds	r0, r2, r1
 800fa5a:	4283      	cmp	r3, r0
 800fa5c:	6011      	str	r1, [r2, #0]
 800fa5e:	d1e0      	bne.n	800fa22 <_free_r+0x22>
 800fa60:	6818      	ldr	r0, [r3, #0]
 800fa62:	685b      	ldr	r3, [r3, #4]
 800fa64:	6053      	str	r3, [r2, #4]
 800fa66:	4408      	add	r0, r1
 800fa68:	6010      	str	r0, [r2, #0]
 800fa6a:	e7da      	b.n	800fa22 <_free_r+0x22>
 800fa6c:	d902      	bls.n	800fa74 <_free_r+0x74>
 800fa6e:	230c      	movs	r3, #12
 800fa70:	602b      	str	r3, [r5, #0]
 800fa72:	e7d6      	b.n	800fa22 <_free_r+0x22>
 800fa74:	6820      	ldr	r0, [r4, #0]
 800fa76:	1821      	adds	r1, r4, r0
 800fa78:	428b      	cmp	r3, r1
 800fa7a:	bf04      	itt	eq
 800fa7c:	6819      	ldreq	r1, [r3, #0]
 800fa7e:	685b      	ldreq	r3, [r3, #4]
 800fa80:	6063      	str	r3, [r4, #4]
 800fa82:	bf04      	itt	eq
 800fa84:	1809      	addeq	r1, r1, r0
 800fa86:	6021      	streq	r1, [r4, #0]
 800fa88:	6054      	str	r4, [r2, #4]
 800fa8a:	e7ca      	b.n	800fa22 <_free_r+0x22>
 800fa8c:	bd38      	pop	{r3, r4, r5, pc}
 800fa8e:	bf00      	nop
 800fa90:	20006314 	.word	0x20006314

0800fa94 <__sflush_r>:
 800fa94:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800fa98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa9c:	0716      	lsls	r6, r2, #28
 800fa9e:	4605      	mov	r5, r0
 800faa0:	460c      	mov	r4, r1
 800faa2:	d454      	bmi.n	800fb4e <__sflush_r+0xba>
 800faa4:	684b      	ldr	r3, [r1, #4]
 800faa6:	2b00      	cmp	r3, #0
 800faa8:	dc02      	bgt.n	800fab0 <__sflush_r+0x1c>
 800faaa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800faac:	2b00      	cmp	r3, #0
 800faae:	dd48      	ble.n	800fb42 <__sflush_r+0xae>
 800fab0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fab2:	2e00      	cmp	r6, #0
 800fab4:	d045      	beq.n	800fb42 <__sflush_r+0xae>
 800fab6:	2300      	movs	r3, #0
 800fab8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800fabc:	682f      	ldr	r7, [r5, #0]
 800fabe:	6a21      	ldr	r1, [r4, #32]
 800fac0:	602b      	str	r3, [r5, #0]
 800fac2:	d030      	beq.n	800fb26 <__sflush_r+0x92>
 800fac4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800fac6:	89a3      	ldrh	r3, [r4, #12]
 800fac8:	0759      	lsls	r1, r3, #29
 800faca:	d505      	bpl.n	800fad8 <__sflush_r+0x44>
 800facc:	6863      	ldr	r3, [r4, #4]
 800face:	1ad2      	subs	r2, r2, r3
 800fad0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800fad2:	b10b      	cbz	r3, 800fad8 <__sflush_r+0x44>
 800fad4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800fad6:	1ad2      	subs	r2, r2, r3
 800fad8:	2300      	movs	r3, #0
 800fada:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800fadc:	6a21      	ldr	r1, [r4, #32]
 800fade:	4628      	mov	r0, r5
 800fae0:	47b0      	blx	r6
 800fae2:	1c43      	adds	r3, r0, #1
 800fae4:	89a3      	ldrh	r3, [r4, #12]
 800fae6:	d106      	bne.n	800faf6 <__sflush_r+0x62>
 800fae8:	6829      	ldr	r1, [r5, #0]
 800faea:	291d      	cmp	r1, #29
 800faec:	d82b      	bhi.n	800fb46 <__sflush_r+0xb2>
 800faee:	4a2a      	ldr	r2, [pc, #168]	@ (800fb98 <__sflush_r+0x104>)
 800faf0:	40ca      	lsrs	r2, r1
 800faf2:	07d6      	lsls	r6, r2, #31
 800faf4:	d527      	bpl.n	800fb46 <__sflush_r+0xb2>
 800faf6:	2200      	movs	r2, #0
 800faf8:	6062      	str	r2, [r4, #4]
 800fafa:	04d9      	lsls	r1, r3, #19
 800fafc:	6922      	ldr	r2, [r4, #16]
 800fafe:	6022      	str	r2, [r4, #0]
 800fb00:	d504      	bpl.n	800fb0c <__sflush_r+0x78>
 800fb02:	1c42      	adds	r2, r0, #1
 800fb04:	d101      	bne.n	800fb0a <__sflush_r+0x76>
 800fb06:	682b      	ldr	r3, [r5, #0]
 800fb08:	b903      	cbnz	r3, 800fb0c <__sflush_r+0x78>
 800fb0a:	6560      	str	r0, [r4, #84]	@ 0x54
 800fb0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800fb0e:	602f      	str	r7, [r5, #0]
 800fb10:	b1b9      	cbz	r1, 800fb42 <__sflush_r+0xae>
 800fb12:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800fb16:	4299      	cmp	r1, r3
 800fb18:	d002      	beq.n	800fb20 <__sflush_r+0x8c>
 800fb1a:	4628      	mov	r0, r5
 800fb1c:	f7ff ff70 	bl	800fa00 <_free_r>
 800fb20:	2300      	movs	r3, #0
 800fb22:	6363      	str	r3, [r4, #52]	@ 0x34
 800fb24:	e00d      	b.n	800fb42 <__sflush_r+0xae>
 800fb26:	2301      	movs	r3, #1
 800fb28:	4628      	mov	r0, r5
 800fb2a:	47b0      	blx	r6
 800fb2c:	4602      	mov	r2, r0
 800fb2e:	1c50      	adds	r0, r2, #1
 800fb30:	d1c9      	bne.n	800fac6 <__sflush_r+0x32>
 800fb32:	682b      	ldr	r3, [r5, #0]
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d0c6      	beq.n	800fac6 <__sflush_r+0x32>
 800fb38:	2b1d      	cmp	r3, #29
 800fb3a:	d001      	beq.n	800fb40 <__sflush_r+0xac>
 800fb3c:	2b16      	cmp	r3, #22
 800fb3e:	d11e      	bne.n	800fb7e <__sflush_r+0xea>
 800fb40:	602f      	str	r7, [r5, #0]
 800fb42:	2000      	movs	r0, #0
 800fb44:	e022      	b.n	800fb8c <__sflush_r+0xf8>
 800fb46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb4a:	b21b      	sxth	r3, r3
 800fb4c:	e01b      	b.n	800fb86 <__sflush_r+0xf2>
 800fb4e:	690f      	ldr	r7, [r1, #16]
 800fb50:	2f00      	cmp	r7, #0
 800fb52:	d0f6      	beq.n	800fb42 <__sflush_r+0xae>
 800fb54:	0793      	lsls	r3, r2, #30
 800fb56:	680e      	ldr	r6, [r1, #0]
 800fb58:	bf08      	it	eq
 800fb5a:	694b      	ldreq	r3, [r1, #20]
 800fb5c:	600f      	str	r7, [r1, #0]
 800fb5e:	bf18      	it	ne
 800fb60:	2300      	movne	r3, #0
 800fb62:	eba6 0807 	sub.w	r8, r6, r7
 800fb66:	608b      	str	r3, [r1, #8]
 800fb68:	f1b8 0f00 	cmp.w	r8, #0
 800fb6c:	dde9      	ble.n	800fb42 <__sflush_r+0xae>
 800fb6e:	6a21      	ldr	r1, [r4, #32]
 800fb70:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800fb72:	4643      	mov	r3, r8
 800fb74:	463a      	mov	r2, r7
 800fb76:	4628      	mov	r0, r5
 800fb78:	47b0      	blx	r6
 800fb7a:	2800      	cmp	r0, #0
 800fb7c:	dc08      	bgt.n	800fb90 <__sflush_r+0xfc>
 800fb7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800fb86:	81a3      	strh	r3, [r4, #12]
 800fb88:	f04f 30ff 	mov.w	r0, #4294967295
 800fb8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb90:	4407      	add	r7, r0
 800fb92:	eba8 0800 	sub.w	r8, r8, r0
 800fb96:	e7e7      	b.n	800fb68 <__sflush_r+0xd4>
 800fb98:	20400001 	.word	0x20400001

0800fb9c <_fflush_r>:
 800fb9c:	b538      	push	{r3, r4, r5, lr}
 800fb9e:	690b      	ldr	r3, [r1, #16]
 800fba0:	4605      	mov	r5, r0
 800fba2:	460c      	mov	r4, r1
 800fba4:	b913      	cbnz	r3, 800fbac <_fflush_r+0x10>
 800fba6:	2500      	movs	r5, #0
 800fba8:	4628      	mov	r0, r5
 800fbaa:	bd38      	pop	{r3, r4, r5, pc}
 800fbac:	b118      	cbz	r0, 800fbb6 <_fflush_r+0x1a>
 800fbae:	6a03      	ldr	r3, [r0, #32]
 800fbb0:	b90b      	cbnz	r3, 800fbb6 <_fflush_r+0x1a>
 800fbb2:	f7ff fd0b 	bl	800f5cc <__sinit>
 800fbb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fbba:	2b00      	cmp	r3, #0
 800fbbc:	d0f3      	beq.n	800fba6 <_fflush_r+0xa>
 800fbbe:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800fbc0:	07d0      	lsls	r0, r2, #31
 800fbc2:	d404      	bmi.n	800fbce <_fflush_r+0x32>
 800fbc4:	0599      	lsls	r1, r3, #22
 800fbc6:	d402      	bmi.n	800fbce <_fflush_r+0x32>
 800fbc8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fbca:	f7ff ff08 	bl	800f9de <__retarget_lock_acquire_recursive>
 800fbce:	4628      	mov	r0, r5
 800fbd0:	4621      	mov	r1, r4
 800fbd2:	f7ff ff5f 	bl	800fa94 <__sflush_r>
 800fbd6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800fbd8:	07da      	lsls	r2, r3, #31
 800fbda:	4605      	mov	r5, r0
 800fbdc:	d4e4      	bmi.n	800fba8 <_fflush_r+0xc>
 800fbde:	89a3      	ldrh	r3, [r4, #12]
 800fbe0:	059b      	lsls	r3, r3, #22
 800fbe2:	d4e1      	bmi.n	800fba8 <_fflush_r+0xc>
 800fbe4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800fbe6:	f7ff fefb 	bl	800f9e0 <__retarget_lock_release_recursive>
 800fbea:	e7dd      	b.n	800fba8 <_fflush_r+0xc>

0800fbec <__swhatbuf_r>:
 800fbec:	b570      	push	{r4, r5, r6, lr}
 800fbee:	460c      	mov	r4, r1
 800fbf0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800fbf4:	2900      	cmp	r1, #0
 800fbf6:	b096      	sub	sp, #88	@ 0x58
 800fbf8:	4615      	mov	r5, r2
 800fbfa:	461e      	mov	r6, r3
 800fbfc:	da0d      	bge.n	800fc1a <__swhatbuf_r+0x2e>
 800fbfe:	89a3      	ldrh	r3, [r4, #12]
 800fc00:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800fc04:	f04f 0100 	mov.w	r1, #0
 800fc08:	bf14      	ite	ne
 800fc0a:	2340      	movne	r3, #64	@ 0x40
 800fc0c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800fc10:	2000      	movs	r0, #0
 800fc12:	6031      	str	r1, [r6, #0]
 800fc14:	602b      	str	r3, [r5, #0]
 800fc16:	b016      	add	sp, #88	@ 0x58
 800fc18:	bd70      	pop	{r4, r5, r6, pc}
 800fc1a:	466a      	mov	r2, sp
 800fc1c:	f000 f848 	bl	800fcb0 <_fstat_r>
 800fc20:	2800      	cmp	r0, #0
 800fc22:	dbec      	blt.n	800fbfe <__swhatbuf_r+0x12>
 800fc24:	9901      	ldr	r1, [sp, #4]
 800fc26:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800fc2a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800fc2e:	4259      	negs	r1, r3
 800fc30:	4159      	adcs	r1, r3
 800fc32:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fc36:	e7eb      	b.n	800fc10 <__swhatbuf_r+0x24>

0800fc38 <__smakebuf_r>:
 800fc38:	898b      	ldrh	r3, [r1, #12]
 800fc3a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fc3c:	079d      	lsls	r5, r3, #30
 800fc3e:	4606      	mov	r6, r0
 800fc40:	460c      	mov	r4, r1
 800fc42:	d507      	bpl.n	800fc54 <__smakebuf_r+0x1c>
 800fc44:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800fc48:	6023      	str	r3, [r4, #0]
 800fc4a:	6123      	str	r3, [r4, #16]
 800fc4c:	2301      	movs	r3, #1
 800fc4e:	6163      	str	r3, [r4, #20]
 800fc50:	b003      	add	sp, #12
 800fc52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc54:	ab01      	add	r3, sp, #4
 800fc56:	466a      	mov	r2, sp
 800fc58:	f7ff ffc8 	bl	800fbec <__swhatbuf_r>
 800fc5c:	9f00      	ldr	r7, [sp, #0]
 800fc5e:	4605      	mov	r5, r0
 800fc60:	4639      	mov	r1, r7
 800fc62:	4630      	mov	r0, r6
 800fc64:	f7ff fb9a 	bl	800f39c <_malloc_r>
 800fc68:	b948      	cbnz	r0, 800fc7e <__smakebuf_r+0x46>
 800fc6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fc6e:	059a      	lsls	r2, r3, #22
 800fc70:	d4ee      	bmi.n	800fc50 <__smakebuf_r+0x18>
 800fc72:	f023 0303 	bic.w	r3, r3, #3
 800fc76:	f043 0302 	orr.w	r3, r3, #2
 800fc7a:	81a3      	strh	r3, [r4, #12]
 800fc7c:	e7e2      	b.n	800fc44 <__smakebuf_r+0xc>
 800fc7e:	89a3      	ldrh	r3, [r4, #12]
 800fc80:	6020      	str	r0, [r4, #0]
 800fc82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800fc86:	81a3      	strh	r3, [r4, #12]
 800fc88:	9b01      	ldr	r3, [sp, #4]
 800fc8a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800fc8e:	b15b      	cbz	r3, 800fca8 <__smakebuf_r+0x70>
 800fc90:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800fc94:	4630      	mov	r0, r6
 800fc96:	f000 f81d 	bl	800fcd4 <_isatty_r>
 800fc9a:	b128      	cbz	r0, 800fca8 <__smakebuf_r+0x70>
 800fc9c:	89a3      	ldrh	r3, [r4, #12]
 800fc9e:	f023 0303 	bic.w	r3, r3, #3
 800fca2:	f043 0301 	orr.w	r3, r3, #1
 800fca6:	81a3      	strh	r3, [r4, #12]
 800fca8:	89a3      	ldrh	r3, [r4, #12]
 800fcaa:	431d      	orrs	r5, r3
 800fcac:	81a5      	strh	r5, [r4, #12]
 800fcae:	e7cf      	b.n	800fc50 <__smakebuf_r+0x18>

0800fcb0 <_fstat_r>:
 800fcb0:	b538      	push	{r3, r4, r5, lr}
 800fcb2:	4d07      	ldr	r5, [pc, #28]	@ (800fcd0 <_fstat_r+0x20>)
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	4604      	mov	r4, r0
 800fcb8:	4608      	mov	r0, r1
 800fcba:	4611      	mov	r1, r2
 800fcbc:	602b      	str	r3, [r5, #0]
 800fcbe:	f7f6 fcc0 	bl	8006642 <_fstat>
 800fcc2:	1c43      	adds	r3, r0, #1
 800fcc4:	d102      	bne.n	800fccc <_fstat_r+0x1c>
 800fcc6:	682b      	ldr	r3, [r5, #0]
 800fcc8:	b103      	cbz	r3, 800fccc <_fstat_r+0x1c>
 800fcca:	6023      	str	r3, [r4, #0]
 800fccc:	bd38      	pop	{r3, r4, r5, pc}
 800fcce:	bf00      	nop
 800fcd0:	20006454 	.word	0x20006454

0800fcd4 <_isatty_r>:
 800fcd4:	b538      	push	{r3, r4, r5, lr}
 800fcd6:	4d06      	ldr	r5, [pc, #24]	@ (800fcf0 <_isatty_r+0x1c>)
 800fcd8:	2300      	movs	r3, #0
 800fcda:	4604      	mov	r4, r0
 800fcdc:	4608      	mov	r0, r1
 800fcde:	602b      	str	r3, [r5, #0]
 800fce0:	f7f6 fcbf 	bl	8006662 <_isatty>
 800fce4:	1c43      	adds	r3, r0, #1
 800fce6:	d102      	bne.n	800fcee <_isatty_r+0x1a>
 800fce8:	682b      	ldr	r3, [r5, #0]
 800fcea:	b103      	cbz	r3, 800fcee <_isatty_r+0x1a>
 800fcec:	6023      	str	r3, [r4, #0]
 800fcee:	bd38      	pop	{r3, r4, r5, pc}
 800fcf0:	20006454 	.word	0x20006454

0800fcf4 <_init>:
 800fcf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fcf6:	bf00      	nop
 800fcf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fcfa:	bc08      	pop	{r3}
 800fcfc:	469e      	mov	lr, r3
 800fcfe:	4770      	bx	lr

0800fd00 <_fini>:
 800fd00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fd02:	bf00      	nop
 800fd04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fd06:	bc08      	pop	{r3}
 800fd08:	469e      	mov	lr, r3
 800fd0a:	4770      	bx	lr
