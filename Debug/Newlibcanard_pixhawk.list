
Newlibcanard_pixhawk.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d110  08000188  08000188  00001188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800d298  0800d298  0000e298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2d8  0800d2d8  0000f07c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800d2d8  0800d2d8  0000e2d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d2e0  0800d2e0  0000f07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d2e0  0800d2e0  0000e2e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d2e4  0800d2e4  0000e2e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800d2e8  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f07c  2**0
                  CONTENTS
 10 .bss          00000e2c  2000007c  2000007c  0000f07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ea8  20000ea8  0000f07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017b98  00000000  00000000  0000f0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f2e  00000000  00000000  00026c44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012b8  00000000  00000000  0002ab78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e24  00000000  00000000  0002be30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002453e  00000000  00000000  0002cc54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000189d6  00000000  00000000  00051192  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ce0ca  00000000  00000000  00069b68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00137c32  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005204  00000000  00000000  00137c78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000065  00000000  00000000  0013ce7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800d280 	.word	0x0800d280

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800d280 	.word	0x0800d280

080001c8 <strcmp>:
 80001c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001d0:	2a01      	cmp	r2, #1
 80001d2:	bf28      	it	cs
 80001d4:	429a      	cmpcs	r2, r3
 80001d6:	d0f7      	beq.n	80001c8 <strcmp>
 80001d8:	1ad0      	subs	r0, r2, r3
 80001da:	4770      	bx	lr

080001dc <strlen>:
 80001dc:	4603      	mov	r3, r0
 80001de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e2:	2a00      	cmp	r2, #0
 80001e4:	d1fb      	bne.n	80001de <strlen+0x2>
 80001e6:	1a18      	subs	r0, r3, r0
 80001e8:	3801      	subs	r0, #1
 80001ea:	4770      	bx	lr

080001ec <__gedf2>:
 80001ec:	f04f 3cff 	mov.w	ip, #4294967295
 80001f0:	e006      	b.n	8000200 <__cmpdf2+0x4>
 80001f2:	bf00      	nop

080001f4 <__ledf2>:
 80001f4:	f04f 0c01 	mov.w	ip, #1
 80001f8:	e002      	b.n	8000200 <__cmpdf2+0x4>
 80001fa:	bf00      	nop

080001fc <__cmpdf2>:
 80001fc:	f04f 0c01 	mov.w	ip, #1
 8000200:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000204:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000208:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800020c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000210:	bf18      	it	ne
 8000212:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000216:	d01b      	beq.n	8000250 <__cmpdf2+0x54>
 8000218:	b001      	add	sp, #4
 800021a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800021e:	bf0c      	ite	eq
 8000220:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000224:	ea91 0f03 	teqne	r1, r3
 8000228:	bf02      	ittt	eq
 800022a:	ea90 0f02 	teqeq	r0, r2
 800022e:	2000      	moveq	r0, #0
 8000230:	4770      	bxeq	lr
 8000232:	f110 0f00 	cmn.w	r0, #0
 8000236:	ea91 0f03 	teq	r1, r3
 800023a:	bf58      	it	pl
 800023c:	4299      	cmppl	r1, r3
 800023e:	bf08      	it	eq
 8000240:	4290      	cmpeq	r0, r2
 8000242:	bf2c      	ite	cs
 8000244:	17d8      	asrcs	r0, r3, #31
 8000246:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800024a:	f040 0001 	orr.w	r0, r0, #1
 800024e:	4770      	bx	lr
 8000250:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000254:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000258:	d102      	bne.n	8000260 <__cmpdf2+0x64>
 800025a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800025e:	d107      	bne.n	8000270 <__cmpdf2+0x74>
 8000260:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000264:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000268:	d1d6      	bne.n	8000218 <__cmpdf2+0x1c>
 800026a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800026e:	d0d3      	beq.n	8000218 <__cmpdf2+0x1c>
 8000270:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop

08000278 <__aeabi_cdrcmple>:
 8000278:	4684      	mov	ip, r0
 800027a:	4610      	mov	r0, r2
 800027c:	4662      	mov	r2, ip
 800027e:	468c      	mov	ip, r1
 8000280:	4619      	mov	r1, r3
 8000282:	4663      	mov	r3, ip
 8000284:	e000      	b.n	8000288 <__aeabi_cdcmpeq>
 8000286:	bf00      	nop

08000288 <__aeabi_cdcmpeq>:
 8000288:	b501      	push	{r0, lr}
 800028a:	f7ff ffb7 	bl	80001fc <__cmpdf2>
 800028e:	2800      	cmp	r0, #0
 8000290:	bf48      	it	mi
 8000292:	f110 0f00 	cmnmi.w	r0, #0
 8000296:	bd01      	pop	{r0, pc}

08000298 <__aeabi_dcmpeq>:
 8000298:	f84d ed08 	str.w	lr, [sp, #-8]!
 800029c:	f7ff fff4 	bl	8000288 <__aeabi_cdcmpeq>
 80002a0:	bf0c      	ite	eq
 80002a2:	2001      	moveq	r0, #1
 80002a4:	2000      	movne	r0, #0
 80002a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80002aa:	bf00      	nop

080002ac <__aeabi_dcmplt>:
 80002ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80002b0:	f7ff ffea 	bl	8000288 <__aeabi_cdcmpeq>
 80002b4:	bf34      	ite	cc
 80002b6:	2001      	movcc	r0, #1
 80002b8:	2000      	movcs	r0, #0
 80002ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80002be:	bf00      	nop

080002c0 <__aeabi_dcmple>:
 80002c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80002c4:	f7ff ffe0 	bl	8000288 <__aeabi_cdcmpeq>
 80002c8:	bf94      	ite	ls
 80002ca:	2001      	movls	r0, #1
 80002cc:	2000      	movhi	r0, #0
 80002ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80002d2:	bf00      	nop

080002d4 <__aeabi_dcmpge>:
 80002d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80002d8:	f7ff ffce 	bl	8000278 <__aeabi_cdrcmple>
 80002dc:	bf94      	ite	ls
 80002de:	2001      	movls	r0, #1
 80002e0:	2000      	movhi	r0, #0
 80002e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80002e6:	bf00      	nop

080002e8 <__aeabi_dcmpgt>:
 80002e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80002ec:	f7ff ffc4 	bl	8000278 <__aeabi_cdrcmple>
 80002f0:	bf34      	ite	cc
 80002f2:	2001      	movcc	r0, #1
 80002f4:	2000      	movcs	r0, #0
 80002f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80002fa:	bf00      	nop

080002fc <__aeabi_uldivmod>:
 80002fc:	b953      	cbnz	r3, 8000314 <__aeabi_uldivmod+0x18>
 80002fe:	b94a      	cbnz	r2, 8000314 <__aeabi_uldivmod+0x18>
 8000300:	2900      	cmp	r1, #0
 8000302:	bf08      	it	eq
 8000304:	2800      	cmpeq	r0, #0
 8000306:	bf1c      	itt	ne
 8000308:	f04f 31ff 	movne.w	r1, #4294967295
 800030c:	f04f 30ff 	movne.w	r0, #4294967295
 8000310:	f000 b988 	b.w	8000624 <__aeabi_idiv0>
 8000314:	f1ad 0c08 	sub.w	ip, sp, #8
 8000318:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800031c:	f000 f806 	bl	800032c <__udivmoddi4>
 8000320:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000324:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000328:	b004      	add	sp, #16
 800032a:	4770      	bx	lr

0800032c <__udivmoddi4>:
 800032c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000330:	9d08      	ldr	r5, [sp, #32]
 8000332:	468e      	mov	lr, r1
 8000334:	4604      	mov	r4, r0
 8000336:	4688      	mov	r8, r1
 8000338:	2b00      	cmp	r3, #0
 800033a:	d14a      	bne.n	80003d2 <__udivmoddi4+0xa6>
 800033c:	428a      	cmp	r2, r1
 800033e:	4617      	mov	r7, r2
 8000340:	d962      	bls.n	8000408 <__udivmoddi4+0xdc>
 8000342:	fab2 f682 	clz	r6, r2
 8000346:	b14e      	cbz	r6, 800035c <__udivmoddi4+0x30>
 8000348:	f1c6 0320 	rsb	r3, r6, #32
 800034c:	fa01 f806 	lsl.w	r8, r1, r6
 8000350:	fa20 f303 	lsr.w	r3, r0, r3
 8000354:	40b7      	lsls	r7, r6
 8000356:	ea43 0808 	orr.w	r8, r3, r8
 800035a:	40b4      	lsls	r4, r6
 800035c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000360:	fa1f fc87 	uxth.w	ip, r7
 8000364:	fbb8 f1fe 	udiv	r1, r8, lr
 8000368:	0c23      	lsrs	r3, r4, #16
 800036a:	fb0e 8811 	mls	r8, lr, r1, r8
 800036e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000372:	fb01 f20c 	mul.w	r2, r1, ip
 8000376:	429a      	cmp	r2, r3
 8000378:	d909      	bls.n	800038e <__udivmoddi4+0x62>
 800037a:	18fb      	adds	r3, r7, r3
 800037c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000380:	f080 80ea 	bcs.w	8000558 <__udivmoddi4+0x22c>
 8000384:	429a      	cmp	r2, r3
 8000386:	f240 80e7 	bls.w	8000558 <__udivmoddi4+0x22c>
 800038a:	3902      	subs	r1, #2
 800038c:	443b      	add	r3, r7
 800038e:	1a9a      	subs	r2, r3, r2
 8000390:	b2a3      	uxth	r3, r4
 8000392:	fbb2 f0fe 	udiv	r0, r2, lr
 8000396:	fb0e 2210 	mls	r2, lr, r0, r2
 800039a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800039e:	fb00 fc0c 	mul.w	ip, r0, ip
 80003a2:	459c      	cmp	ip, r3
 80003a4:	d909      	bls.n	80003ba <__udivmoddi4+0x8e>
 80003a6:	18fb      	adds	r3, r7, r3
 80003a8:	f100 32ff 	add.w	r2, r0, #4294967295
 80003ac:	f080 80d6 	bcs.w	800055c <__udivmoddi4+0x230>
 80003b0:	459c      	cmp	ip, r3
 80003b2:	f240 80d3 	bls.w	800055c <__udivmoddi4+0x230>
 80003b6:	443b      	add	r3, r7
 80003b8:	3802      	subs	r0, #2
 80003ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003be:	eba3 030c 	sub.w	r3, r3, ip
 80003c2:	2100      	movs	r1, #0
 80003c4:	b11d      	cbz	r5, 80003ce <__udivmoddi4+0xa2>
 80003c6:	40f3      	lsrs	r3, r6
 80003c8:	2200      	movs	r2, #0
 80003ca:	e9c5 3200 	strd	r3, r2, [r5]
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d905      	bls.n	80003e2 <__udivmoddi4+0xb6>
 80003d6:	b10d      	cbz	r5, 80003dc <__udivmoddi4+0xb0>
 80003d8:	e9c5 0100 	strd	r0, r1, [r5]
 80003dc:	2100      	movs	r1, #0
 80003de:	4608      	mov	r0, r1
 80003e0:	e7f5      	b.n	80003ce <__udivmoddi4+0xa2>
 80003e2:	fab3 f183 	clz	r1, r3
 80003e6:	2900      	cmp	r1, #0
 80003e8:	d146      	bne.n	8000478 <__udivmoddi4+0x14c>
 80003ea:	4573      	cmp	r3, lr
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xc8>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 8105 	bhi.w	80005fe <__udivmoddi4+0x2d2>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb6e 0203 	sbc.w	r2, lr, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	4690      	mov	r8, r2
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e5      	beq.n	80003ce <__udivmoddi4+0xa2>
 8000402:	e9c5 4800 	strd	r4, r8, [r5]
 8000406:	e7e2      	b.n	80003ce <__udivmoddi4+0xa2>
 8000408:	2a00      	cmp	r2, #0
 800040a:	f000 8090 	beq.w	800052e <__udivmoddi4+0x202>
 800040e:	fab2 f682 	clz	r6, r2
 8000412:	2e00      	cmp	r6, #0
 8000414:	f040 80a4 	bne.w	8000560 <__udivmoddi4+0x234>
 8000418:	1a8a      	subs	r2, r1, r2
 800041a:	0c03      	lsrs	r3, r0, #16
 800041c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000420:	b280      	uxth	r0, r0
 8000422:	b2bc      	uxth	r4, r7
 8000424:	2101      	movs	r1, #1
 8000426:	fbb2 fcfe 	udiv	ip, r2, lr
 800042a:	fb0e 221c 	mls	r2, lr, ip, r2
 800042e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000432:	fb04 f20c 	mul.w	r2, r4, ip
 8000436:	429a      	cmp	r2, r3
 8000438:	d907      	bls.n	800044a <__udivmoddi4+0x11e>
 800043a:	18fb      	adds	r3, r7, r3
 800043c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000440:	d202      	bcs.n	8000448 <__udivmoddi4+0x11c>
 8000442:	429a      	cmp	r2, r3
 8000444:	f200 80e0 	bhi.w	8000608 <__udivmoddi4+0x2dc>
 8000448:	46c4      	mov	ip, r8
 800044a:	1a9b      	subs	r3, r3, r2
 800044c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000450:	fb0e 3312 	mls	r3, lr, r2, r3
 8000454:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000458:	fb02 f404 	mul.w	r4, r2, r4
 800045c:	429c      	cmp	r4, r3
 800045e:	d907      	bls.n	8000470 <__udivmoddi4+0x144>
 8000460:	18fb      	adds	r3, r7, r3
 8000462:	f102 30ff 	add.w	r0, r2, #4294967295
 8000466:	d202      	bcs.n	800046e <__udivmoddi4+0x142>
 8000468:	429c      	cmp	r4, r3
 800046a:	f200 80ca 	bhi.w	8000602 <__udivmoddi4+0x2d6>
 800046e:	4602      	mov	r2, r0
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000476:	e7a5      	b.n	80003c4 <__udivmoddi4+0x98>
 8000478:	f1c1 0620 	rsb	r6, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 f706 	lsr.w	r7, r2, r6
 8000482:	431f      	orrs	r7, r3
 8000484:	fa0e f401 	lsl.w	r4, lr, r1
 8000488:	fa20 f306 	lsr.w	r3, r0, r6
 800048c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000490:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fa00 f801 	lsl.w	r8, r0, r1
 800049a:	fa1f fc87 	uxth.w	ip, r7
 800049e:	fbbe f0f9 	udiv	r0, lr, r9
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	fb09 ee10 	mls	lr, r9, r0, lr
 80004a8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80004ac:	fb00 fe0c 	mul.w	lr, r0, ip
 80004b0:	45a6      	cmp	lr, r4
 80004b2:	fa02 f201 	lsl.w	r2, r2, r1
 80004b6:	d909      	bls.n	80004cc <__udivmoddi4+0x1a0>
 80004b8:	193c      	adds	r4, r7, r4
 80004ba:	f100 3aff 	add.w	sl, r0, #4294967295
 80004be:	f080 809c 	bcs.w	80005fa <__udivmoddi4+0x2ce>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	f240 8099 	bls.w	80005fa <__udivmoddi4+0x2ce>
 80004c8:	3802      	subs	r0, #2
 80004ca:	443c      	add	r4, r7
 80004cc:	eba4 040e 	sub.w	r4, r4, lr
 80004d0:	fa1f fe83 	uxth.w	lr, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80004e0:	fb03 fc0c 	mul.w	ip, r3, ip
 80004e4:	45a4      	cmp	ip, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1ce>
 80004e8:	193c      	adds	r4, r7, r4
 80004ea:	f103 3eff 	add.w	lr, r3, #4294967295
 80004ee:	f080 8082 	bcs.w	80005f6 <__udivmoddi4+0x2ca>
 80004f2:	45a4      	cmp	ip, r4
 80004f4:	d97f      	bls.n	80005f6 <__udivmoddi4+0x2ca>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	443c      	add	r4, r7
 80004fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004fe:	eba4 040c 	sub.w	r4, r4, ip
 8000502:	fba0 ec02 	umull	lr, ip, r0, r2
 8000506:	4564      	cmp	r4, ip
 8000508:	4673      	mov	r3, lr
 800050a:	46e1      	mov	r9, ip
 800050c:	d362      	bcc.n	80005d4 <__udivmoddi4+0x2a8>
 800050e:	d05f      	beq.n	80005d0 <__udivmoddi4+0x2a4>
 8000510:	b15d      	cbz	r5, 800052a <__udivmoddi4+0x1fe>
 8000512:	ebb8 0203 	subs.w	r2, r8, r3
 8000516:	eb64 0409 	sbc.w	r4, r4, r9
 800051a:	fa04 f606 	lsl.w	r6, r4, r6
 800051e:	fa22 f301 	lsr.w	r3, r2, r1
 8000522:	431e      	orrs	r6, r3
 8000524:	40cc      	lsrs	r4, r1
 8000526:	e9c5 6400 	strd	r6, r4, [r5]
 800052a:	2100      	movs	r1, #0
 800052c:	e74f      	b.n	80003ce <__udivmoddi4+0xa2>
 800052e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000532:	0c01      	lsrs	r1, r0, #16
 8000534:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000538:	b280      	uxth	r0, r0
 800053a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800053e:	463b      	mov	r3, r7
 8000540:	4638      	mov	r0, r7
 8000542:	463c      	mov	r4, r7
 8000544:	46b8      	mov	r8, r7
 8000546:	46be      	mov	lr, r7
 8000548:	2620      	movs	r6, #32
 800054a:	fbb1 f1f7 	udiv	r1, r1, r7
 800054e:	eba2 0208 	sub.w	r2, r2, r8
 8000552:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000556:	e766      	b.n	8000426 <__udivmoddi4+0xfa>
 8000558:	4601      	mov	r1, r0
 800055a:	e718      	b.n	800038e <__udivmoddi4+0x62>
 800055c:	4610      	mov	r0, r2
 800055e:	e72c      	b.n	80003ba <__udivmoddi4+0x8e>
 8000560:	f1c6 0220 	rsb	r2, r6, #32
 8000564:	fa2e f302 	lsr.w	r3, lr, r2
 8000568:	40b7      	lsls	r7, r6
 800056a:	40b1      	lsls	r1, r6
 800056c:	fa20 f202 	lsr.w	r2, r0, r2
 8000570:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000574:	430a      	orrs	r2, r1
 8000576:	fbb3 f8fe 	udiv	r8, r3, lr
 800057a:	b2bc      	uxth	r4, r7
 800057c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000580:	0c11      	lsrs	r1, r2, #16
 8000582:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000586:	fb08 f904 	mul.w	r9, r8, r4
 800058a:	40b0      	lsls	r0, r6
 800058c:	4589      	cmp	r9, r1
 800058e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000592:	b280      	uxth	r0, r0
 8000594:	d93e      	bls.n	8000614 <__udivmoddi4+0x2e8>
 8000596:	1879      	adds	r1, r7, r1
 8000598:	f108 3cff 	add.w	ip, r8, #4294967295
 800059c:	d201      	bcs.n	80005a2 <__udivmoddi4+0x276>
 800059e:	4589      	cmp	r9, r1
 80005a0:	d81f      	bhi.n	80005e2 <__udivmoddi4+0x2b6>
 80005a2:	eba1 0109 	sub.w	r1, r1, r9
 80005a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80005aa:	fb09 f804 	mul.w	r8, r9, r4
 80005ae:	fb0e 1119 	mls	r1, lr, r9, r1
 80005b2:	b292      	uxth	r2, r2
 80005b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80005b8:	4542      	cmp	r2, r8
 80005ba:	d229      	bcs.n	8000610 <__udivmoddi4+0x2e4>
 80005bc:	18ba      	adds	r2, r7, r2
 80005be:	f109 31ff 	add.w	r1, r9, #4294967295
 80005c2:	d2c4      	bcs.n	800054e <__udivmoddi4+0x222>
 80005c4:	4542      	cmp	r2, r8
 80005c6:	d2c2      	bcs.n	800054e <__udivmoddi4+0x222>
 80005c8:	f1a9 0102 	sub.w	r1, r9, #2
 80005cc:	443a      	add	r2, r7
 80005ce:	e7be      	b.n	800054e <__udivmoddi4+0x222>
 80005d0:	45f0      	cmp	r8, lr
 80005d2:	d29d      	bcs.n	8000510 <__udivmoddi4+0x1e4>
 80005d4:	ebbe 0302 	subs.w	r3, lr, r2
 80005d8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80005dc:	3801      	subs	r0, #1
 80005de:	46e1      	mov	r9, ip
 80005e0:	e796      	b.n	8000510 <__udivmoddi4+0x1e4>
 80005e2:	eba7 0909 	sub.w	r9, r7, r9
 80005e6:	4449      	add	r1, r9
 80005e8:	f1a8 0c02 	sub.w	ip, r8, #2
 80005ec:	fbb1 f9fe 	udiv	r9, r1, lr
 80005f0:	fb09 f804 	mul.w	r8, r9, r4
 80005f4:	e7db      	b.n	80005ae <__udivmoddi4+0x282>
 80005f6:	4673      	mov	r3, lr
 80005f8:	e77f      	b.n	80004fa <__udivmoddi4+0x1ce>
 80005fa:	4650      	mov	r0, sl
 80005fc:	e766      	b.n	80004cc <__udivmoddi4+0x1a0>
 80005fe:	4608      	mov	r0, r1
 8000600:	e6fd      	b.n	80003fe <__udivmoddi4+0xd2>
 8000602:	443b      	add	r3, r7
 8000604:	3a02      	subs	r2, #2
 8000606:	e733      	b.n	8000470 <__udivmoddi4+0x144>
 8000608:	f1ac 0c02 	sub.w	ip, ip, #2
 800060c:	443b      	add	r3, r7
 800060e:	e71c      	b.n	800044a <__udivmoddi4+0x11e>
 8000610:	4649      	mov	r1, r9
 8000612:	e79c      	b.n	800054e <__udivmoddi4+0x222>
 8000614:	eba1 0109 	sub.w	r1, r1, r9
 8000618:	46c4      	mov	ip, r8
 800061a:	fbb1 f9fe 	udiv	r9, r1, lr
 800061e:	fb09 f804 	mul.w	r8, r9, r4
 8000622:	e7c4      	b.n	80005ae <__udivmoddi4+0x282>

08000624 <__aeabi_idiv0>:
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop

08000628 <EPOS4_GetActualPosition>:
 * @param hcan CAN handle
 * @param nodeId EPOS4 node ID
 * @return Current position in encoder counts, or -1 if error
 */
int32_t EPOS4_GetActualPosition(CAN_HandleTypeDef *hcan, uint8_t nodeId)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b084      	sub	sp, #16
 800062c:	af02      	add	r7, sp, #8
 800062e:	6078      	str	r0, [r7, #4]
 8000630:	460b      	mov	r3, r1
 8000632:	70fb      	strb	r3, [r7, #3]
    /* Reset response flags */
    sdo_response_received = false;
 8000634:	4b14      	ldr	r3, [pc, #80]	@ (8000688 <EPOS4_GetActualPosition+0x60>)
 8000636:	2200      	movs	r2, #0
 8000638:	701a      	strb	r2, [r3, #0]
    
    /* Request position */
    if (!EPOS4_SendSDO(hcan, nodeId, EPOS4_READ_OBJECT, OBJ_POSITION_ACTUAL_VALUE, 0, 0))
 800063a:	78f9      	ldrb	r1, [r7, #3]
 800063c:	2300      	movs	r3, #0
 800063e:	9301      	str	r3, [sp, #4]
 8000640:	2300      	movs	r3, #0
 8000642:	9300      	str	r3, [sp, #0]
 8000644:	f246 0364 	movw	r3, #24676	@ 0x6064
 8000648:	2240      	movs	r2, #64	@ 0x40
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f000 f820 	bl	8000690 <EPOS4_SendSDO>
 8000650:	4603      	mov	r3, r0
 8000652:	f083 0301 	eor.w	r3, r3, #1
 8000656:	b2db      	uxtb	r3, r3
 8000658:	2b00      	cmp	r3, #0
 800065a:	d002      	beq.n	8000662 <EPOS4_GetActualPosition+0x3a>
    {
        return -1;
 800065c:	f04f 33ff 	mov.w	r3, #4294967295
 8000660:	e00e      	b.n	8000680 <EPOS4_GetActualPosition+0x58>
    }
    
    /* Wait for response with timeout */
    if (!EPOS4_ReceiveSDO(&sdo_response_data, 100))
 8000662:	2164      	movs	r1, #100	@ 0x64
 8000664:	4809      	ldr	r0, [pc, #36]	@ (800068c <EPOS4_GetActualPosition+0x64>)
 8000666:	f000 f87b 	bl	8000760 <EPOS4_ReceiveSDO>
 800066a:	4603      	mov	r3, r0
 800066c:	f083 0301 	eor.w	r3, r3, #1
 8000670:	b2db      	uxtb	r3, r3
 8000672:	2b00      	cmp	r3, #0
 8000674:	d002      	beq.n	800067c <EPOS4_GetActualPosition+0x54>
    {
        return -1;
 8000676:	f04f 33ff 	mov.w	r3, #4294967295
 800067a:	e001      	b.n	8000680 <EPOS4_GetActualPosition+0x58>
    }
    
    return (int32_t)sdo_response_data;
 800067c:	4b03      	ldr	r3, [pc, #12]	@ (800068c <EPOS4_GetActualPosition+0x64>)
 800067e:	681b      	ldr	r3, [r3, #0]
}
 8000680:	4618      	mov	r0, r3
 8000682:	3708      	adds	r7, #8
 8000684:	46bd      	mov	sp, r7
 8000686:	bd80      	pop	{r7, pc}
 8000688:	20000098 	.word	0x20000098
 800068c:	2000009c 	.word	0x2000009c

08000690 <EPOS4_SendSDO>:
 * @param data Data to send (for write commands)
 * @return true if message sent successfully, false otherwise
 */
bool EPOS4_SendSDO(CAN_HandleTypeDef *hcan, uint8_t nodeId, uint8_t command, 
                  uint16_t index, uint8_t subIndex, uint32_t data)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	b08c      	sub	sp, #48	@ 0x30
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	4608      	mov	r0, r1
 800069a:	4611      	mov	r1, r2
 800069c:	461a      	mov	r2, r3
 800069e:	4603      	mov	r3, r0
 80006a0:	70fb      	strb	r3, [r7, #3]
 80006a2:	460b      	mov	r3, r1
 80006a4:	70bb      	strb	r3, [r7, #2]
 80006a6:	4613      	mov	r3, r2
 80006a8:	803b      	strh	r3, [r7, #0]
    CAN_TxHeaderTypeDef txHeader;
    uint8_t txData[8] = {0};
 80006aa:	f107 030c 	add.w	r3, r7, #12
 80006ae:	2200      	movs	r2, #0
 80006b0:	601a      	str	r2, [r3, #0]
 80006b2:	605a      	str	r2, [r3, #4]
    uint32_t txMailbox;
    
    /* SDO message ID: 0x600 + nodeId */
    txHeader.StdId = 0x600 + nodeId;
 80006b4:	78fb      	ldrb	r3, [r7, #3]
 80006b6:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80006ba:	617b      	str	r3, [r7, #20]
    txHeader.ExtId = 0;
 80006bc:	2300      	movs	r3, #0
 80006be:	61bb      	str	r3, [r7, #24]
    txHeader.IDE = CAN_ID_STD;
 80006c0:	2300      	movs	r3, #0
 80006c2:	61fb      	str	r3, [r7, #28]
    txHeader.RTR = CAN_RTR_DATA;
 80006c4:	2300      	movs	r3, #0
 80006c6:	623b      	str	r3, [r7, #32]
    txHeader.DLC = 8;
 80006c8:	2308      	movs	r3, #8
 80006ca:	627b      	str	r3, [r7, #36]	@ 0x24
    txHeader.TransmitGlobalTime = DISABLE;
 80006cc:	2300      	movs	r3, #0
 80006ce:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    
    /* Format SDO message */
    txData[0] = command;
 80006d2:	78bb      	ldrb	r3, [r7, #2]
 80006d4:	733b      	strb	r3, [r7, #12]
    txData[1] = (uint8_t)(index & 0xFF);        /* LSB of index */
 80006d6:	883b      	ldrh	r3, [r7, #0]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	737b      	strb	r3, [r7, #13]
    txData[2] = (uint8_t)((index >> 8) & 0xFF); /* MSB of index */
 80006dc:	883b      	ldrh	r3, [r7, #0]
 80006de:	0a1b      	lsrs	r3, r3, #8
 80006e0:	b29b      	uxth	r3, r3
 80006e2:	b2db      	uxtb	r3, r3
 80006e4:	73bb      	strb	r3, [r7, #14]
    txData[3] = subIndex;
 80006e6:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 80006ea:	73fb      	strb	r3, [r7, #15]
    
    /* For write commands, include data */
    if (command == EPOS4_WRITE_OBJECT)
 80006ec:	78bb      	ldrb	r3, [r7, #2]
 80006ee:	2b22      	cmp	r3, #34	@ 0x22
 80006f0:	d10e      	bne.n	8000710 <EPOS4_SendSDO+0x80>
    {
        txData[4] = (uint8_t)(data & 0xFF);
 80006f2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	743b      	strb	r3, [r7, #16]
        txData[5] = (uint8_t)((data >> 8) & 0xFF);
 80006f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80006fa:	0a1b      	lsrs	r3, r3, #8
 80006fc:	b2db      	uxtb	r3, r3
 80006fe:	747b      	strb	r3, [r7, #17]
        txData[6] = (uint8_t)((data >> 16) & 0xFF);
 8000700:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000702:	0c1b      	lsrs	r3, r3, #16
 8000704:	b2db      	uxtb	r3, r3
 8000706:	74bb      	strb	r3, [r7, #18]
        txData[7] = (uint8_t)((data >> 24) & 0xFF);
 8000708:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800070a:	0e1b      	lsrs	r3, r3, #24
 800070c:	b2db      	uxtb	r3, r3
 800070e:	74fb      	strb	r3, [r7, #19]
    }
    
    /* Send message */
    if (HAL_CAN_AddTxMessage(hcan, &txHeader, txData, &txMailbox) != HAL_OK)
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	f107 020c 	add.w	r2, r7, #12
 8000718:	f107 0114 	add.w	r1, r7, #20
 800071c:	6878      	ldr	r0, [r7, #4]
 800071e:	f004 fbfb 	bl	8004f18 <HAL_CAN_AddTxMessage>
 8000722:	4603      	mov	r3, r0
 8000724:	2b00      	cmp	r3, #0
 8000726:	d001      	beq.n	800072c <EPOS4_SendSDO+0x9c>
    {
        return false;
 8000728:	2300      	movs	r3, #0
 800072a:	e014      	b.n	8000756 <EPOS4_SendSDO+0xc6>
    }
    
    /* Wait for message to be sent */
    uint32_t timeout = HAL_GetTick() + 100; /* 100ms timeout */
 800072c:	f004 f980 	bl	8004a30 <HAL_GetTick>
 8000730:	4603      	mov	r3, r0
 8000732:	3364      	adds	r3, #100	@ 0x64
 8000734:	62fb      	str	r3, [r7, #44]	@ 0x2c
    while (HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3)
 8000736:	e007      	b.n	8000748 <EPOS4_SendSDO+0xb8>
    {
        if (HAL_GetTick() > timeout)
 8000738:	f004 f97a 	bl	8004a30 <HAL_GetTick>
 800073c:	4602      	mov	r2, r0
 800073e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000740:	4293      	cmp	r3, r2
 8000742:	d201      	bcs.n	8000748 <EPOS4_SendSDO+0xb8>
        {
            return false;
 8000744:	2300      	movs	r3, #0
 8000746:	e006      	b.n	8000756 <EPOS4_SendSDO+0xc6>
    while (HAL_CAN_GetTxMailboxesFreeLevel(hcan) != 3)
 8000748:	6878      	ldr	r0, [r7, #4]
 800074a:	f004 fcb5 	bl	80050b8 <HAL_CAN_GetTxMailboxesFreeLevel>
 800074e:	4603      	mov	r3, r0
 8000750:	2b03      	cmp	r3, #3
 8000752:	d1f1      	bne.n	8000738 <EPOS4_SendSDO+0xa8>
        }
    }
    
    return true;
 8000754:	2301      	movs	r3, #1
}
 8000756:	4618      	mov	r0, r3
 8000758:	3730      	adds	r7, #48	@ 0x30
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
	...

08000760 <EPOS4_ReceiveSDO>:
 * @param data Pointer to store received data
 * @param timeout Timeout in milliseconds
 * @return true if response received, false if timeout
 */
bool EPOS4_ReceiveSDO(uint32_t *data, uint32_t timeout)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b084      	sub	sp, #16
 8000764:	af00      	add	r7, sp, #0
 8000766:	6078      	str	r0, [r7, #4]
 8000768:	6039      	str	r1, [r7, #0]
    uint32_t startTime = HAL_GetTick();
 800076a:	f004 f961 	bl	8004a30 <HAL_GetTick>
 800076e:	60f8      	str	r0, [r7, #12]
    
    /* Wait for response with timeout */
    while (!sdo_response_received)
 8000770:	e00c      	b.n	800078c <EPOS4_ReceiveSDO+0x2c>
    {
        if ((HAL_GetTick() - startTime) > timeout)
 8000772:	f004 f95d 	bl	8004a30 <HAL_GetTick>
 8000776:	4602      	mov	r2, r0
 8000778:	68fb      	ldr	r3, [r7, #12]
 800077a:	1ad3      	subs	r3, r2, r3
 800077c:	683a      	ldr	r2, [r7, #0]
 800077e:	429a      	cmp	r2, r3
 8000780:	d201      	bcs.n	8000786 <EPOS4_ReceiveSDO+0x26>
        {
            return false;
 8000782:	2300      	movs	r3, #0
 8000784:	e011      	b.n	80007aa <EPOS4_ReceiveSDO+0x4a>
        }
        
        /* Small delay to prevent CPU hogging */
        HAL_Delay(1);
 8000786:	2001      	movs	r0, #1
 8000788:	f004 f95e 	bl	8004a48 <HAL_Delay>
    while (!sdo_response_received)
 800078c:	4b09      	ldr	r3, [pc, #36]	@ (80007b4 <EPOS4_ReceiveSDO+0x54>)
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	f083 0301 	eor.w	r3, r3, #1
 8000794:	b2db      	uxtb	r3, r3
 8000796:	2b00      	cmp	r3, #0
 8000798:	d1eb      	bne.n	8000772 <EPOS4_ReceiveSDO+0x12>
    }
    
    /* Copy response data */
    *data = sdo_response_data;
 800079a:	4b07      	ldr	r3, [pc, #28]	@ (80007b8 <EPOS4_ReceiveSDO+0x58>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	601a      	str	r2, [r3, #0]
    sdo_response_received = false;
 80007a2:	4b04      	ldr	r3, [pc, #16]	@ (80007b4 <EPOS4_ReceiveSDO+0x54>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
    
    return true;
 80007a8:	2301      	movs	r3, #1
}
 80007aa:	4618      	mov	r0, r3
 80007ac:	3710      	adds	r7, #16
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	20000098 	.word	0x20000098
 80007b8:	2000009c 	.word	0x2000009c

080007bc <EPOS4_ProcessRxMessage>:
 * @param hcan CAN handle
 * @param rxHeader CAN Rx header
 * @param rxData Received data buffer
 */
void EPOS4_ProcessRxMessage(CAN_HandleTypeDef *hcan, CAN_RxHeaderTypeDef *rxHeader, uint8_t *rxData)
{
 80007bc:	b480      	push	{r7}
 80007be:	b087      	sub	sp, #28
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	60f8      	str	r0, [r7, #12]
 80007c4:	60b9      	str	r1, [r7, #8]
 80007c6:	607a      	str	r2, [r7, #4]
    /* Check if this is an SDO response (0x580 + nodeId) */
    if ((rxHeader->StdId >= 0x580) && (rxHeader->StdId < 0x600))
 80007c8:	68bb      	ldr	r3, [r7, #8]
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 80007d0:	d336      	bcc.n	8000840 <EPOS4_ProcessRxMessage+0x84>
 80007d2:	68bb      	ldr	r3, [r7, #8]
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80007da:	d231      	bcs.n	8000840 <EPOS4_ProcessRxMessage+0x84>
    {
        /* Process SDO response */
        uint8_t command = rxData[0];
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	781b      	ldrb	r3, [r3, #0]
 80007e0:	75fb      	strb	r3, [r7, #23]
        
        /* Check if this is a read response */
        if ((command & 0x40) != 0)
 80007e2:	7dfb      	ldrb	r3, [r7, #23]
 80007e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d029      	beq.n	8000840 <EPOS4_ProcessRxMessage+0x84>
        {
            /* Extract data from response */
            sdo_response_data = 0;
 80007ec:	4b17      	ldr	r3, [pc, #92]	@ (800084c <EPOS4_ProcessRxMessage+0x90>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
            sdo_response_data |= (uint32_t)rxData[4];
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	3304      	adds	r3, #4
 80007f6:	781b      	ldrb	r3, [r3, #0]
 80007f8:	461a      	mov	r2, r3
 80007fa:	4b14      	ldr	r3, [pc, #80]	@ (800084c <EPOS4_ProcessRxMessage+0x90>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4313      	orrs	r3, r2
 8000800:	4a12      	ldr	r2, [pc, #72]	@ (800084c <EPOS4_ProcessRxMessage+0x90>)
 8000802:	6013      	str	r3, [r2, #0]
            sdo_response_data |= (uint32_t)rxData[5] << 8;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	3305      	adds	r3, #5
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	021a      	lsls	r2, r3, #8
 800080c:	4b0f      	ldr	r3, [pc, #60]	@ (800084c <EPOS4_ProcessRxMessage+0x90>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	4313      	orrs	r3, r2
 8000812:	4a0e      	ldr	r2, [pc, #56]	@ (800084c <EPOS4_ProcessRxMessage+0x90>)
 8000814:	6013      	str	r3, [r2, #0]
            sdo_response_data |= (uint32_t)rxData[6] << 16;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	3306      	adds	r3, #6
 800081a:	781b      	ldrb	r3, [r3, #0]
 800081c:	041a      	lsls	r2, r3, #16
 800081e:	4b0b      	ldr	r3, [pc, #44]	@ (800084c <EPOS4_ProcessRxMessage+0x90>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4313      	orrs	r3, r2
 8000824:	4a09      	ldr	r2, [pc, #36]	@ (800084c <EPOS4_ProcessRxMessage+0x90>)
 8000826:	6013      	str	r3, [r2, #0]
            sdo_response_data |= (uint32_t)rxData[7] << 24;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	3307      	adds	r3, #7
 800082c:	781b      	ldrb	r3, [r3, #0]
 800082e:	061a      	lsls	r2, r3, #24
 8000830:	4b06      	ldr	r3, [pc, #24]	@ (800084c <EPOS4_ProcessRxMessage+0x90>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4313      	orrs	r3, r2
 8000836:	4a05      	ldr	r2, [pc, #20]	@ (800084c <EPOS4_ProcessRxMessage+0x90>)
 8000838:	6013      	str	r3, [r2, #0]
            
            /* Mark response as received */
            sdo_response_received = true;
 800083a:	4b05      	ldr	r3, [pc, #20]	@ (8000850 <EPOS4_ProcessRxMessage+0x94>)
 800083c:	2201      	movs	r2, #1
 800083e:	701a      	strb	r2, [r3, #0]
        }
    }
 8000840:	bf00      	nop
 8000842:	371c      	adds	r7, #28
 8000844:	46bd      	mov	sp, r7
 8000846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084a:	4770      	bx	lr
 800084c:	2000009c 	.word	0x2000009c
 8000850:	20000098 	.word	0x20000098

08000854 <canardInit>:
                void* mem_arena,
                size_t mem_arena_size,
                CanardOnTransferReception on_reception,
                CanardShouldAcceptTransfer should_accept,
                void* user_reference)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b086      	sub	sp, #24
 8000858:	af00      	add	r7, sp, #0
 800085a:	60f8      	str	r0, [r7, #12]
 800085c:	60b9      	str	r1, [r7, #8]
 800085e:	607a      	str	r2, [r7, #4]
 8000860:	603b      	str	r3, [r7, #0]
     * If your application fails here, make sure it's not built in 64-bit mode.
     * Refer to the design documentation for more info.
     */
    CANARD_ASSERT(CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE >= 5);

    memset(out_ins, 0, sizeof(*out_ins));
 8000862:	222c      	movs	r2, #44	@ 0x2c
 8000864:	2100      	movs	r1, #0
 8000866:	68f8      	ldr	r0, [r7, #12]
 8000868:	f00c fc6e 	bl	800d148 <memset>

    out_ins->node_id = CANARD_BROADCAST_NODE_ID;
 800086c:	68fb      	ldr	r3, [r7, #12]
 800086e:	2200      	movs	r2, #0
 8000870:	701a      	strb	r2, [r3, #0]
    out_ins->on_reception = on_reception;
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	683a      	ldr	r2, [r7, #0]
 8000876:	609a      	str	r2, [r3, #8]
    out_ins->should_accept = should_accept;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	6a3a      	ldr	r2, [r7, #32]
 800087c:	605a      	str	r2, [r3, #4]
    out_ins->rx_states = NULL;
 800087e:	68fb      	ldr	r3, [r7, #12]
 8000880:	2200      	movs	r2, #0
 8000882:	621a      	str	r2, [r3, #32]
    out_ins->tx_queue = NULL;
 8000884:	68fb      	ldr	r3, [r7, #12]
 8000886:	2200      	movs	r2, #0
 8000888:	625a      	str	r2, [r3, #36]	@ 0x24
    out_ins->user_reference = user_reference;
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800088e:	629a      	str	r2, [r3, #40]	@ 0x28
#if CANARD_ENABLE_TAO_OPTION
    out_ins->tao_disabled = false;
#endif
    size_t pool_capacity = mem_arena_size / CANARD_MEM_BLOCK_SIZE;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	095b      	lsrs	r3, r3, #5
 8000894:	617b      	str	r3, [r7, #20]
    if (pool_capacity > 0xFFFFU)
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800089c:	d302      	bcc.n	80008a4 <canardInit+0x50>
    {
        pool_capacity = 0xFFFFU;
 800089e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008a2:	617b      	str	r3, [r7, #20]
    }

    initPoolAllocator(&out_ins->allocator, mem_arena, (uint16_t)pool_capacity);
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	330c      	adds	r3, #12
 80008a8:	697a      	ldr	r2, [r7, #20]
 80008aa:	b292      	uxth	r2, r2
 80008ac:	68b9      	ldr	r1, [r7, #8]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f001 fe19 	bl	80024e6 <initPoolAllocator>
}
 80008b4:	bf00      	nop
 80008b6:	3718      	adds	r7, #24
 80008b8:	46bd      	mov	sp, r7
 80008ba:	bd80      	pop	{r7, pc}

080008bc <canardSetLocalNodeID>:
    CANARD_ASSERT(ins != NULL);
    return ins->user_reference;
}

void canardSetLocalNodeID(CanardInstance* ins, uint8_t self_node_id)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	6078      	str	r0, [r7, #4]
 80008c4:	460b      	mov	r3, r1
 80008c6:	70fb      	strb	r3, [r7, #3]
    CANARD_ASSERT(ins != NULL);

    if ((ins->node_id == CANARD_BROADCAST_NODE_ID) &&
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d109      	bne.n	80008e4 <canardSetLocalNodeID+0x28>
 80008d0:	78fb      	ldrb	r3, [r7, #3]
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d006      	beq.n	80008e4 <canardSetLocalNodeID+0x28>
        (self_node_id >= CANARD_MIN_NODE_ID) &&
        (self_node_id <= CANARD_MAX_NODE_ID))
 80008d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
        (self_node_id >= CANARD_MIN_NODE_ID) &&
 80008da:	2b00      	cmp	r3, #0
 80008dc:	db02      	blt.n	80008e4 <canardSetLocalNodeID+0x28>
    {
        ins->node_id = self_node_id;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	78fa      	ldrb	r2, [r7, #3]
 80008e2:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        CANARD_ASSERT(false);
    }
}
 80008e4:	bf00      	nop
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr

080008f0 <canardGetLocalNodeID>:

uint8_t canardGetLocalNodeID(const CanardInstance* ins)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
    return ins->node_id;
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	781b      	ldrb	r3, [r3, #0]
}
 80008fc:	4618      	mov	r0, r3
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <canardBroadcast>:
#endif
#if CANARD_ENABLE_CANFD
                        ,bool canfd
#endif
)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b08e      	sub	sp, #56	@ 0x38
 800090c:	af00      	add	r7, sp, #0
 800090e:	60f8      	str	r0, [r7, #12]
 8000910:	e9c7 2300 	strd	r2, r3, [r7]
    // create transfer object
    CanardTxTransfer transfer_object = {
 8000914:	f107 0310 	add.w	r3, r7, #16
 8000918:	2228      	movs	r2, #40	@ 0x28
 800091a:	2100      	movs	r1, #0
 800091c:	4618      	mov	r0, r3
 800091e:	f00c fc13 	bl	800d148 <memset>
 8000922:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000926:	e9c7 2306 	strd	r2, r3, [r7, #24]
 800092a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	@ 0x40
 800092e:	843b      	strh	r3, [r7, #32]
 8000930:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000932:	627b      	str	r3, [r7, #36]	@ 0x24
 8000934:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000938:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 800093c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800093e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000940:	f8b7 3050 	ldrh.w	r3, [r7, #80]	@ 0x50
 8000944:	863b      	strh	r3, [r7, #48]	@ 0x30
#if CANARD_ENABLE_CANFD
        .canfd = canfd,
#endif
    };

    return canardBroadcastObj(ins, &transfer_object);
 8000946:	f107 0310 	add.w	r3, r7, #16
 800094a:	4619      	mov	r1, r3
 800094c:	68f8      	ldr	r0, [r7, #12]
 800094e:	f000 f805 	bl	800095c <canardBroadcastObj>
 8000952:	4603      	mov	r3, r0
}
 8000954:	4618      	mov	r0, r3
 8000956:	3738      	adds	r7, #56	@ 0x38
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}

0800095c <canardBroadcastObj>:

int16_t canardBroadcastObj(CanardInstance* ins, CanardTxTransfer* transfer_object)
{
 800095c:	b590      	push	{r4, r7, lr}
 800095e:	b087      	sub	sp, #28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
    if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	69db      	ldr	r3, [r3, #28]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d106      	bne.n	800097c <canardBroadcastObj+0x20>
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	8c1b      	ldrh	r3, [r3, #32]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d002      	beq.n	800097c <canardBroadcastObj+0x20>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000976:	f06f 0301 	mvn.w	r3, #1
 800097a:	e070      	b.n	8000a5e <canardBroadcastObj+0x102>
    }
    if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 800097c:	683b      	ldr	r3, [r7, #0]
 800097e:	7e1b      	ldrb	r3, [r3, #24]
 8000980:	2b1f      	cmp	r3, #31
 8000982:	d902      	bls.n	800098a <canardBroadcastObj+0x2e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000984:	f06f 0301 	mvn.w	r3, #1
 8000988:	e069      	b.n	8000a5e <canardBroadcastObj+0x102>
    }

    uint32_t can_id = 0;
 800098a:	2300      	movs	r3, #0
 800098c:	617b      	str	r3, [r7, #20]
    uint16_t crc = 0xFFFFU;
 800098e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000992:	827b      	strh	r3, [r7, #18]

    if (canardGetLocalNodeID(ins) == 0)
 8000994:	6878      	ldr	r0, [r7, #4]
 8000996:	f7ff ffab 	bl	80008f0 <canardGetLocalNodeID>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d138      	bne.n	8000a12 <canardBroadcastObj+0xb6>
    {
        if (transfer_object->payload_len > 7)
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	8c1b      	ldrh	r3, [r3, #32]
 80009a4:	2b07      	cmp	r3, #7
 80009a6:	d902      	bls.n	80009ae <canardBroadcastObj+0x52>
        {
            return -CANARD_ERROR_NODE_ID_NOT_SET;
 80009a8:	f06f 0303 	mvn.w	r3, #3
 80009ac:	e057      	b.n	8000a5e <canardBroadcastObj+0x102>
        }

        static const uint16_t DTIDMask = (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;

        if ((transfer_object->data_type_id & DTIDMask) != transfer_object->data_type_id)
 80009ae:	683b      	ldr	r3, [r7, #0]
 80009b0:	8a1a      	ldrh	r2, [r3, #16]
 80009b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000a68 <canardBroadcastObj+0x10c>)
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	4013      	ands	r3, r2
 80009b8:	b29a      	uxth	r2, r3
 80009ba:	683b      	ldr	r3, [r7, #0]
 80009bc:	8a1b      	ldrh	r3, [r3, #16]
 80009be:	429a      	cmp	r2, r3
 80009c0:	d002      	beq.n	80009c8 <canardBroadcastObj+0x6c>
        {
            return -CANARD_ERROR_INVALID_ARGUMENT;
 80009c2:	f06f 0301 	mvn.w	r3, #1
 80009c6:	e04a      	b.n	8000a5e <canardBroadcastObj+0x102>
        }

        // anonymous transfer, random discriminator
        const uint16_t discriminator = (uint16_t)((crcAdd(0xFFFFU, transfer_object->payload, transfer_object->payload_len)) & 0x7FFEU);
 80009c8:	683b      	ldr	r3, [r7, #0]
 80009ca:	69d9      	ldr	r1, [r3, #28]
 80009cc:	683b      	ldr	r3, [r7, #0]
 80009ce:	8c1b      	ldrh	r3, [r3, #32]
 80009d0:	461a      	mov	r2, r3
 80009d2:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 80009d6:	f001 fd69 	bl	80024ac <crcAdd>
 80009da:	4603      	mov	r3, r0
 80009dc:	461a      	mov	r2, r3
 80009de:	f647 73fe 	movw	r3, #32766	@ 0x7ffe
 80009e2:	4013      	ands	r3, r2
 80009e4:	823b      	strh	r3, [r7, #16]
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 80009e6:	683b      	ldr	r3, [r7, #0]
 80009e8:	7e1b      	ldrb	r3, [r3, #24]
 80009ea:	061a      	lsls	r2, r3, #24
 80009ec:	8a3b      	ldrh	r3, [r7, #16]
 80009ee:	025b      	lsls	r3, r3, #9
 80009f0:	431a      	orrs	r2, r3
                 ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 80009f2:	683b      	ldr	r3, [r7, #0]
 80009f4:	8a19      	ldrh	r1, [r3, #16]
 80009f6:	4b1c      	ldr	r3, [pc, #112]	@ (8000a68 <canardBroadcastObj+0x10c>)
 80009f8:	881b      	ldrh	r3, [r3, #0]
 80009fa:	400b      	ands	r3, r1
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	021b      	lsls	r3, r3, #8
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8000a00:	ea42 0403 	orr.w	r4, r2, r3
                 ((uint32_t) (transfer_object->data_type_id & DTIDMask) << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8000a04:	6878      	ldr	r0, [r7, #4]
 8000a06:	f7ff ff73 	bl	80008f0 <canardGetLocalNodeID>
 8000a0a:	4603      	mov	r3, r0
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) discriminator << 9U) |
 8000a0c:	4323      	orrs	r3, r4
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	e012      	b.n	8000a38 <canardBroadcastObj+0xdc>
    }
    else
    {
        can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 8U) | (uint32_t) canardGetLocalNodeID(ins);
 8000a12:	683b      	ldr	r3, [r7, #0]
 8000a14:	7e1b      	ldrb	r3, [r3, #24]
 8000a16:	061a      	lsls	r2, r3, #24
 8000a18:	683b      	ldr	r3, [r7, #0]
 8000a1a:	8a1b      	ldrh	r3, [r3, #16]
 8000a1c:	021b      	lsls	r3, r3, #8
 8000a1e:	ea42 0403 	orr.w	r4, r2, r3
 8000a22:	6878      	ldr	r0, [r7, #4]
 8000a24:	f7ff ff64 	bl	80008f0 <canardGetLocalNodeID>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	4323      	orrs	r3, r4
 8000a2c:	617b      	str	r3, [r7, #20]
        crc = calculateCRC(transfer_object);
 8000a2e:	6838      	ldr	r0, [r7, #0]
 8000a30:	f000 f84c 	bl	8000acc <calculateCRC>
 8000a34:	4603      	mov	r3, r0
 8000a36:	827b      	strh	r3, [r7, #18]
    }

    const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 8000a38:	8a7a      	ldrh	r2, [r7, #18]
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	6979      	ldr	r1, [r7, #20]
 8000a3e:	6878      	ldr	r0, [r7, #4]
 8000a40:	f000 fefd 	bl	800183e <enqueueTxFrames>
 8000a44:	4603      	mov	r3, r0
 8000a46:	81fb      	strh	r3, [r7, #14]

    if (result > 0) {
 8000a48:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	dd04      	ble.n	8000a5a <canardBroadcastObj+0xfe>
        incrementTransferID(transfer_object->inout_transfer_id);
 8000a50:	683b      	ldr	r3, [r7, #0]
 8000a52:	695b      	ldr	r3, [r3, #20]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f000 fe7d 	bl	8001754 <incrementTransferID>
    }

    return result;
 8000a5a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	371c      	adds	r7, #28
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd90      	pop	{r4, r7, pc}
 8000a66:	bf00      	nop
 8000a68:	0800d2c4 	.word	0x0800d2c4

08000a6c <canardBufferFromIdx>:
  CanardBufferBlock and CanartRxState structures to have the same size
  on 32 bit and 64 bit platforms, which allows for easier testing in
  simulator environments
 */
CANARD_INTERNAL CanardBufferBlock *canardBufferFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
{
 8000a6c:	b480      	push	{r7}
 8000a6e:	b083      	sub	sp, #12
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
        return NULL;
    }
    return (CanardBufferBlock *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
#else
    (void)allocator;
    return (CanardBufferBlock *)idx;
 8000a76:	683b      	ldr	r3, [r7, #0]
#endif
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	370c      	adds	r7, #12
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr

08000a84 <canardBufferToIdx>:

CANARD_INTERNAL canard_buffer_idx_t canardBufferToIdx(CanardPoolAllocator* allocator, const CanardBufferBlock *buf)
{
 8000a84:	b480      	push	{r7}
 8000a86:	b083      	sub	sp, #12
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
        return CANARD_BUFFER_IDX_NONE;
    }
    return 1U+((canard_buffer_idx_t)((uint8_t *)buf - (uint8_t *)allocator->arena));
#else
    (void)allocator;
    return (canard_buffer_idx_t)buf;
 8000a8e:	683b      	ldr	r3, [r7, #0]
#endif
}
 8000a90:	4618      	mov	r0, r3
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr

08000a9c <canardRxFromIdx>:

CANARD_INTERNAL CanardRxState *canardRxFromIdx(CanardPoolAllocator* allocator, canard_buffer_idx_t idx)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
 8000aa4:	6039      	str	r1, [r7, #0]
        return NULL;
    }
    return (CanardRxState *)(uintptr_t)&((uint8_t *)allocator->arena)[idx-1];
#else
    (void)allocator;
    return (CanardRxState *)idx;
 8000aa6:	683b      	ldr	r3, [r7, #0]
#endif
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <canardRxToIdx>:

CANARD_INTERNAL canard_buffer_idx_t canardRxToIdx(CanardPoolAllocator* allocator, const CanardRxState *rx)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
        return CANARD_BUFFER_IDX_NONE;
    }
    return 1U+((canard_buffer_idx_t)((uint8_t *)rx - (uint8_t *)allocator->arena));
#else
    (void)allocator;
    return (canard_buffer_idx_t)rx;
 8000abe:	683b      	ldr	r3, [r7, #0]
#endif
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <calculateCRC>:

CANARD_INTERNAL uint16_t calculateCRC(const CanardTxTransfer* transfer_object)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b084      	sub	sp, #16
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
    uint16_t crc = 0xFFFFU;
 8000ad4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000ad8:	81fb      	strh	r3, [r7, #14]
#if CANARD_ENABLE_CANFD
    if ((transfer_object->payload_len > 7 && !transfer_object->canfd) ||
        (transfer_object->payload_len > 63 && transfer_object->canfd))
#else
    if (transfer_object->payload_len > 7)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	8c1b      	ldrh	r3, [r3, #32]
 8000ade:	2b07      	cmp	r3, #7
 8000ae0:	d913      	bls.n	8000b0a <calculateCRC+0x3e>
#endif
    {
        crc = crcAddSignature(crc, transfer_object->data_type_signature);
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000ae8:	89f9      	ldrh	r1, [r7, #14]
 8000aea:	4608      	mov	r0, r1
 8000aec:	f001 fcaf 	bl	800244e <crcAddSignature>
 8000af0:	4603      	mov	r3, r0
 8000af2:	81fb      	strh	r3, [r7, #14]
        crc = crcAdd(crc, transfer_object->payload, transfer_object->payload_len);
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	69d9      	ldr	r1, [r3, #28]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	8c1b      	ldrh	r3, [r3, #32]
 8000afc:	461a      	mov	r2, r3
 8000afe:	89fb      	ldrh	r3, [r7, #14]
 8000b00:	4618      	mov	r0, r3
 8000b02:	f001 fcd3 	bl	80024ac <crcAdd>
 8000b06:	4603      	mov	r3, r0
 8000b08:	81fb      	strh	r3, [r7, #14]
                crc = crcAddByte(crc, empty);
            }
        }
#endif
    }
    return crc;
 8000b0a:	89fb      	ldrh	r3, [r7, #14]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <canardRequestOrRespond>:
#endif
#if CANARD_ENABLE_CANFD
                               ,bool canfd
#endif
)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b08e      	sub	sp, #56	@ 0x38
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	e9c7 2300 	strd	r2, r3, [r7]
 8000b20:	460b      	mov	r3, r1
 8000b22:	72fb      	strb	r3, [r7, #11]
    CanardTxTransfer transfer_object = {
        .data_type_signature = data_type_signature,
        .data_type_id = data_type_id,
        .inout_transfer_id = inout_transfer_id,
        .priority = priority,
        .transfer_type = kind == CanardRequest ? CanardTransferTypeRequest : CanardTransferTypeResponse,
 8000b24:	f897 304c 	ldrb.w	r3, [r7, #76]	@ 0x4c
 8000b28:	2b01      	cmp	r3, #1
 8000b2a:	bf0c      	ite	eq
 8000b2c:	2301      	moveq	r3, #1
 8000b2e:	2300      	movne	r3, #0
 8000b30:	b2db      	uxtb	r3, r3
    CanardTxTransfer transfer_object = {
 8000b32:	743b      	strb	r3, [r7, #16]
 8000b34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b38:	e9c7 2306 	strd	r2, r3, [r7, #24]
 8000b3c:	f897 3040 	ldrb.w	r3, [r7, #64]	@ 0x40
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	843b      	strh	r3, [r7, #32]
 8000b44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8000b46:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b48:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000b4c:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
 8000b50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000b52:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000b54:	f8b7 3054 	ldrh.w	r3, [r7, #84]	@ 0x54
 8000b58:	863b      	strh	r3, [r7, #48]	@ 0x30
#endif
#if CANARD_ENABLE_CANFD
        .canfd = canfd,
#endif
    };
    return canardRequestOrRespondObj(ins, destination_node_id, &transfer_object);
 8000b5a:	f107 0210 	add.w	r2, r7, #16
 8000b5e:	7afb      	ldrb	r3, [r7, #11]
 8000b60:	4619      	mov	r1, r3
 8000b62:	68f8      	ldr	r0, [r7, #12]
 8000b64:	f000 f805 	bl	8000b72 <canardRequestOrRespondObj>
 8000b68:	4603      	mov	r3, r0
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3738      	adds	r7, #56	@ 0x38
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <canardRequestOrRespondObj>:

int16_t canardRequestOrRespondObj(CanardInstance* ins, uint8_t destination_node_id, CanardTxTransfer* transfer_object)
{
 8000b72:	b590      	push	{r4, r7, lr}
 8000b74:	b087      	sub	sp, #28
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	60f8      	str	r0, [r7, #12]
 8000b7a:	460b      	mov	r3, r1
 8000b7c:	607a      	str	r2, [r7, #4]
 8000b7e:	72fb      	strb	r3, [r7, #11]
    if (transfer_object->payload == NULL && transfer_object->payload_len > 0)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	69db      	ldr	r3, [r3, #28]
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	d106      	bne.n	8000b96 <canardRequestOrRespondObj+0x24>
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	8c1b      	ldrh	r3, [r3, #32]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d002      	beq.n	8000b96 <canardRequestOrRespondObj+0x24>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000b90:	f06f 0301 	mvn.w	r3, #1
 8000b94:	e042      	b.n	8000c1c <canardRequestOrRespondObj+0xaa>
    }
    if (transfer_object->priority > CANARD_TRANSFER_PRIORITY_LOWEST)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	7e1b      	ldrb	r3, [r3, #24]
 8000b9a:	2b1f      	cmp	r3, #31
 8000b9c:	d902      	bls.n	8000ba4 <canardRequestOrRespondObj+0x32>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8000b9e:	f06f 0301 	mvn.w	r3, #1
 8000ba2:	e03b      	b.n	8000c1c <canardRequestOrRespondObj+0xaa>
    }
    if (canardGetLocalNodeID(ins) == 0)
 8000ba4:	68f8      	ldr	r0, [r7, #12]
 8000ba6:	f7ff fea3 	bl	80008f0 <canardGetLocalNodeID>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d102      	bne.n	8000bb6 <canardRequestOrRespondObj+0x44>
    {
        return -CANARD_ERROR_NODE_ID_NOT_SET;
 8000bb0:	f06f 0303 	mvn.w	r3, #3
 8000bb4:	e032      	b.n	8000c1c <canardRequestOrRespondObj+0xaa>
    }

    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	7e1b      	ldrb	r3, [r3, #24]
 8000bba:	061a      	lsls	r2, r3, #24
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	8a1b      	ldrh	r3, [r3, #16]
 8000bc0:	041b      	lsls	r3, r3, #16
 8000bc2:	431a      	orrs	r2, r3
                            ((uint32_t) transfer_object->transfer_type << 15U) | ((uint32_t) destination_node_id << 8U) |
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	781b      	ldrb	r3, [r3, #0]
 8000bc8:	03db      	lsls	r3, r3, #15
    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 8000bca:	431a      	orrs	r2, r3
                            ((uint32_t) transfer_object->transfer_type << 15U) | ((uint32_t) destination_node_id << 8U) |
 8000bcc:	7afb      	ldrb	r3, [r7, #11]
 8000bce:	021b      	lsls	r3, r3, #8
 8000bd0:	ea42 0403 	orr.w	r4, r2, r3
                            (1U << 7U) | (uint32_t) canardGetLocalNodeID(ins);
 8000bd4:	68f8      	ldr	r0, [r7, #12]
 8000bd6:	f7ff fe8b 	bl	80008f0 <canardGetLocalNodeID>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	4323      	orrs	r3, r4
    const uint32_t can_id = ((uint32_t) transfer_object->priority << 24U) | ((uint32_t) transfer_object->data_type_id << 16U) |
 8000bde:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000be2:	617b      	str	r3, [r7, #20]

    uint16_t crc = calculateCRC(transfer_object);
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff ff71 	bl	8000acc <calculateCRC>
 8000bea:	4603      	mov	r3, r0
 8000bec:	827b      	strh	r3, [r7, #18]


    const int16_t result = enqueueTxFrames(ins, can_id, crc, transfer_object);
 8000bee:	8a7a      	ldrh	r2, [r7, #18]
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6979      	ldr	r1, [r7, #20]
 8000bf4:	68f8      	ldr	r0, [r7, #12]
 8000bf6:	f000 fe22 	bl	800183e <enqueueTxFrames>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	823b      	strh	r3, [r7, #16]

    if (result > 0 && transfer_object->transfer_type == CanardTransferTypeRequest)                      // Response Transfer ID must not be altered
 8000bfe:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	dd08      	ble.n	8000c18 <canardRequestOrRespondObj+0xa6>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	2b01      	cmp	r3, #1
 8000c0c:	d104      	bne.n	8000c18 <canardRequestOrRespondObj+0xa6>
    {
        incrementTransferID(transfer_object->inout_transfer_id);
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f000 fd9e 	bl	8001754 <incrementTransferID>
    }

    return result;
 8000c18:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	371c      	adds	r7, #28
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd90      	pop	{r4, r7, pc}

08000c24 <canardPeekTxQueue>:

CanardCANFrame* canardPeekTxQueue(const CanardInstance* ins)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	6078      	str	r0, [r7, #4]
    if (ins->tx_queue == NULL)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d101      	bne.n	8000c38 <canardPeekTxQueue+0x14>
    {
        return NULL;
 8000c34:	2300      	movs	r3, #0
 8000c36:	e002      	b.n	8000c3e <canardPeekTxQueue+0x1a>
    }
    return &ins->tx_queue->frame;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c3c:	3304      	adds	r3, #4
}
 8000c3e:	4618      	mov	r0, r3
 8000c40:	370c      	adds	r7, #12
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <canardPopTxQueue>:

void canardPopTxQueue(CanardInstance* ins)
{
 8000c4a:	b580      	push	{r7, lr}
 8000c4c:	b084      	sub	sp, #16
 8000c4e:	af00      	add	r7, sp, #0
 8000c50:	6078      	str	r0, [r7, #4]
    CanardTxQueueItem* item = ins->tx_queue;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000c56:	60fb      	str	r3, [r7, #12]
    ins->tx_queue = item->next;
 8000c58:	68fb      	ldr	r3, [r7, #12]
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	625a      	str	r2, [r3, #36]	@ 0x24
    freeBlock(&ins->allocator, item);
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	330c      	adds	r3, #12
 8000c64:	68f9      	ldr	r1, [r7, #12]
 8000c66:	4618      	mov	r0, r3
 8000c68:	f001 fc9d 	bl	80025a6 <freeBlock>
}
 8000c6c:	bf00      	nop
 8000c6e:	3710      	adds	r7, #16
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}

08000c74 <canardHandleRxFrame>:

int16_t canardHandleRxFrame(CanardInstance* ins, const CanardCANFrame* frame, uint64_t timestamp_usec)
{
 8000c74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000c78:	b09f      	sub	sp, #124	@ 0x7c
 8000c7a:	af02      	add	r7, sp, #8
 8000c7c:	60f8      	str	r0, [r7, #12]
 8000c7e:	60b9      	str	r1, [r7, #8]
 8000c80:	e9c7 2300 	strd	r2, r3, [r7]
    const CanardTransferType transfer_type = extractTransferType(frame->id);
 8000c84:	68bb      	ldr	r3, [r7, #8]
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	4618      	mov	r0, r3
 8000c8a:	f001 f802 	bl	8001c92 <extractTransferType>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	f887 3057 	strb.w	r3, [r7, #87]	@ 0x57
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 8000c94:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000c98:	2b02      	cmp	r3, #2
 8000c9a:	d007      	beq.n	8000cac <canardHandleRxFrame+0x38>
                                        (uint8_t)CANARD_BROADCAST_NODE_ID :
                                        DEST_ID_FROM_ID(frame->id);
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	0a1b      	lsrs	r3, r3, #8
 8000ca2:	b2db      	uxtb	r3, r3
    const uint8_t destination_node_id = (transfer_type == CanardTransferTypeBroadcast) ?
 8000ca4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000ca8:	b2db      	uxtb	r3, r3
 8000caa:	e000      	b.n	8000cae <canardHandleRxFrame+0x3a>
 8000cac:	2300      	movs	r3, #0
 8000cae:	f887 3056 	strb.w	r3, [r7, #86]	@ 0x56

    // TODO: This function should maintain statistics of transfer errors and such.

    if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 8000cb2:	68bb      	ldr	r3, [r7, #8]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	da0f      	bge.n	8000cda <canardHandleRxFrame+0x66>
        (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
    if ((frame->id & CANARD_CAN_FRAME_EFF) == 0 ||
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d109      	bne.n	8000cda <canardHandleRxFrame+0x66>
        (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 8000cc6:	68bb      	ldr	r3, [r7, #8]
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
        (frame->id & CANARD_CAN_FRAME_RTR) != 0 ||
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d103      	bne.n	8000cda <canardHandleRxFrame+0x66>
        (frame->data_len < 1))
 8000cd2:	68bb      	ldr	r3, [r7, #8]
 8000cd4:	7b1b      	ldrb	r3, [r3, #12]
        (frame->id & CANARD_CAN_FRAME_ERR) != 0 ||
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d102      	bne.n	8000ce0 <canardHandleRxFrame+0x6c>
    {
        return -CANARD_ERROR_RX_INCOMPATIBLE_PACKET;
 8000cda:	f06f 0309 	mvn.w	r3, #9
 8000cde:	e361      	b.n	80013a4 <canardHandleRxFrame+0x730>
    }

    if (transfer_type != CanardTransferTypeBroadcast &&
 8000ce0:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000ce4:	2b02      	cmp	r3, #2
 8000ce6:	d00b      	beq.n	8000d00 <canardHandleRxFrame+0x8c>
        destination_node_id != canardGetLocalNodeID(ins))
 8000ce8:	68f8      	ldr	r0, [r7, #12]
 8000cea:	f7ff fe01 	bl	80008f0 <canardGetLocalNodeID>
 8000cee:	4603      	mov	r3, r0
 8000cf0:	461a      	mov	r2, r3
    if (transfer_type != CanardTransferTypeBroadcast &&
 8000cf2:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d002      	beq.n	8000d00 <canardHandleRxFrame+0x8c>
    {
        return -CANARD_ERROR_RX_WRONG_ADDRESS;
 8000cfa:	f06f 030a 	mvn.w	r3, #10
 8000cfe:	e351      	b.n	80013a4 <canardHandleRxFrame+0x730>
    }

    const uint8_t priority = PRIORITY_FROM_ID(frame->id);
 8000d00:	68bb      	ldr	r3, [r7, #8]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	0e1b      	lsrs	r3, r3, #24
 8000d06:	b2db      	uxtb	r3, r3
 8000d08:	f003 031f 	and.w	r3, r3, #31
 8000d0c:	f887 3055 	strb.w	r3, [r7, #85]	@ 0x55
    const uint8_t source_node_id = SOURCE_ID_FROM_ID(frame->id);
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	b2db      	uxtb	r3, r3
 8000d16:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8000d1a:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
    const uint16_t data_type_id = extractDataType(frame->id);
 8000d1e:	68bb      	ldr	r3, [r7, #8]
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f000 ff95 	bl	8001c52 <extractDataType>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52
    const uint32_t transfer_descriptor =
            MAKE_TRANSFER_DESCRIPTOR(data_type_id, transfer_type, source_node_id, destination_node_id);
 8000d2e:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8000d32:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000d36:	041b      	lsls	r3, r3, #16
 8000d38:	431a      	orrs	r2, r3
 8000d3a:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8000d3e:	049b      	lsls	r3, r3, #18
 8000d40:	431a      	orrs	r2, r3
 8000d42:	f897 3056 	ldrb.w	r3, [r7, #86]	@ 0x56
 8000d46:	065b      	lsls	r3, r3, #25
    const uint32_t transfer_descriptor =
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	64fb      	str	r3, [r7, #76]	@ 0x4c

    const uint8_t tail_byte = frame->data[frame->data_len - 1];
 8000d4c:	68bb      	ldr	r3, [r7, #8]
 8000d4e:	7b1b      	ldrb	r3, [r3, #12]
 8000d50:	3b01      	subs	r3, #1
 8000d52:	68ba      	ldr	r2, [r7, #8]
 8000d54:	4413      	add	r3, r2
 8000d56:	791b      	ldrb	r3, [r3, #4]
 8000d58:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b

    uint64_t data_type_signature = 0;
 8000d5c:	f04f 0200 	mov.w	r2, #0
 8000d60:	f04f 0300 	mov.w	r3, #0
 8000d64:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30
    CanardRxState* rx_state = NULL;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	66fb      	str	r3, [r7, #108]	@ 0x6c

    if (IS_START_OF_TRANSFER(tail_byte))
 8000d6c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000d70:	09db      	lsrs	r3, r3, #7
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	f003 0301 	and.w	r3, r3, #1
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d01e      	beq.n	8000dba <canardHandleRxFrame+0x146>
    {

        if (ins->should_accept(ins, &data_type_signature, data_type_id, transfer_type, source_node_id))
 8000d7c:	68fb      	ldr	r3, [r7, #12]
 8000d7e:	685e      	ldr	r6, [r3, #4]
 8000d80:	f897 0057 	ldrb.w	r0, [r7, #87]	@ 0x57
 8000d84:	f8b7 2052 	ldrh.w	r2, [r7, #82]	@ 0x52
 8000d88:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000d8c:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8000d90:	9300      	str	r3, [sp, #0]
 8000d92:	4603      	mov	r3, r0
 8000d94:	68f8      	ldr	r0, [r7, #12]
 8000d96:	47b0      	blx	r6
 8000d98:	4603      	mov	r3, r0
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d00a      	beq.n	8000db4 <canardHandleRxFrame+0x140>
        {
            rx_state = traverseRxStates(ins, transfer_descriptor);
 8000d9e:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000da0:	68f8      	ldr	r0, [r7, #12]
 8000da2:	f000 ff9a 	bl	8001cda <traverseRxStates>
 8000da6:	66f8      	str	r0, [r7, #108]	@ 0x6c

            if(rx_state == NULL)
 8000da8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d110      	bne.n	8000dd0 <canardHandleRxFrame+0x15c>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 8000dae:	f06f 0302 	mvn.w	r3, #2
 8000db2:	e2f7      	b.n	80013a4 <canardHandleRxFrame+0x730>
            }
        }
        else
        {
            return -CANARD_ERROR_RX_NOT_WANTED;
 8000db4:	f06f 030b 	mvn.w	r3, #11
 8000db8:	e2f4      	b.n	80013a4 <canardHandleRxFrame+0x730>
        }
    }
    else
    {
        rx_state = findRxState(ins, transfer_descriptor);
 8000dba:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8000dbc:	68f8      	ldr	r0, [r7, #12]
 8000dbe:	f000 ffbb 	bl	8001d38 <findRxState>
 8000dc2:	66f8      	str	r0, [r7, #108]	@ 0x6c

        if (rx_state == NULL)
 8000dc4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	d102      	bne.n	8000dd0 <canardHandleRxFrame+0x15c>
        {
            return -CANARD_ERROR_RX_MISSED_START;
 8000dca:	f06f 030c 	mvn.w	r3, #12
 8000dce:	e2e9      	b.n	80013a4 <canardHandleRxFrame+0x730>
    }

    CANARD_ASSERT(rx_state != NULL);    // All paths that lead to NULL should be terminated with return above

    // Resolving the state flags:
    const bool not_initialized = rx_state->timestamp_usec == 0;
 8000dd0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000dd2:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000dd6:	4313      	orrs	r3, r2
 8000dd8:	bf0c      	ite	eq
 8000dda:	2301      	moveq	r3, #1
 8000ddc:	2300      	movne	r3, #0
 8000dde:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
    const bool tid_timed_out = (timestamp_usec - rx_state->timestamp_usec) > TRANSFER_TIMEOUT_USEC;
 8000de2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000de4:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000de8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000dec:	ebb0 0802 	subs.w	r8, r0, r2
 8000df0:	eb61 0903 	sbc.w	r9, r1, r3
 8000df4:	4ba9      	ldr	r3, [pc, #676]	@ (800109c <canardHandleRxFrame+0x428>)
 8000df6:	4598      	cmp	r8, r3
 8000df8:	f179 0300 	sbcs.w	r3, r9, #0
 8000dfc:	bf2c      	ite	cs
 8000dfe:	2301      	movcs	r3, #1
 8000e00:	2300      	movcc	r3, #0
 8000e02:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
    const bool same_iface = frame->iface_id == rx_state->iface_id;
 8000e06:	68bb      	ldr	r3, [r7, #8]
 8000e08:	7b5a      	ldrb	r2, [r3, #13]
 8000e0a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e0c:	7e9b      	ldrb	r3, [r3, #26]
 8000e0e:	429a      	cmp	r2, r3
 8000e10:	bf0c      	ite	eq
 8000e12:	2301      	moveq	r3, #1
 8000e14:	2300      	movne	r3, #0
 8000e16:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
    const bool first_frame = IS_START_OF_TRANSFER(tail_byte);
 8000e1a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000e1e:	09db      	lsrs	r3, r3, #7
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	2b00      	cmp	r3, #0
 8000e28:	bf14      	ite	ne
 8000e2a:	2301      	movne	r3, #1
 8000e2c:	2300      	moveq	r3, #0
 8000e2e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    const bool not_previous_tid =
        computeTransferIDForwardDistance((uint8_t) rx_state->transfer_id, TRANSFER_ID_FROM_TAIL_BYTE(tail_byte)) > 1;
 8000e32:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e34:	7ddb      	ldrb	r3, [r3, #23]
 8000e36:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000e42:	f003 031f 	and.w	r3, r3, #31
 8000e46:	b2db      	uxtb	r3, r3
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4610      	mov	r0, r2
 8000e4c:	f000 fc63 	bl	8001716 <computeTransferIDForwardDistance>
 8000e50:	4603      	mov	r3, r0
    const bool not_previous_tid =
 8000e52:	2b01      	cmp	r3, #1
 8000e54:	bfcc      	ite	gt
 8000e56:	2301      	movgt	r3, #1
 8000e58:	2300      	movle	r3, #0
 8000e5a:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
    const bool iface_switch_allowed = (timestamp_usec - rx_state->timestamp_usec) > IFACE_SWITCH_DELAY_USEC;
 8000e5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e60:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000e64:	e9d7 0100 	ldrd	r0, r1, [r7]
 8000e68:	1a84      	subs	r4, r0, r2
 8000e6a:	eb61 0503 	sbc.w	r5, r1, r3
 8000e6e:	4b8c      	ldr	r3, [pc, #560]	@ (80010a0 <canardHandleRxFrame+0x42c>)
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f175 0300 	sbcs.w	r3, r5, #0
 8000e76:	bf2c      	ite	cs
 8000e78:	2301      	movcs	r3, #1
 8000e7a:	2300      	movcc	r3, #0
 8000e7c:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
    const bool non_wrapped_tid = computeTransferIDForwardDistance(TRANSFER_ID_FROM_TAIL_BYTE(tail_byte), (uint8_t) rx_state->transfer_id) < (1 << (TRANSFER_ID_BIT_LEN-1));
 8000e80:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000e84:	f003 031f 	and.w	r3, r3, #31
 8000e88:	b2da      	uxtb	r2, r3
 8000e8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000e8c:	7ddb      	ldrb	r3, [r3, #23]
 8000e8e:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8000e92:	b2db      	uxtb	r3, r3
 8000e94:	4619      	mov	r1, r3
 8000e96:	4610      	mov	r0, r2
 8000e98:	f000 fc3d 	bl	8001716 <computeTransferIDForwardDistance>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b0f      	cmp	r3, #15
 8000ea0:	bfd4      	ite	le
 8000ea2:	2301      	movle	r3, #1
 8000ea4:	2300      	movgt	r3, #0
 8000ea6:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
    const bool incomplete_frame = rx_state->buffer_blocks != CANARD_BUFFER_IDX_NONE;
 8000eaa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000eac:	685b      	ldr	r3, [r3, #4]
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	bf14      	ite	ne
 8000eb2:	2301      	movne	r3, #1
 8000eb4:	2300      	moveq	r3, #0
 8000eb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

    const bool need_restart =
            (not_initialized) ||
            (tid_timed_out) ||
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 8000eba:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d11f      	bne.n	8000f02 <canardHandleRxFrame+0x28e>
            (not_initialized) ||
 8000ec2:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d11b      	bne.n	8000f02 <canardHandleRxFrame+0x28e>
            (tid_timed_out) ||
 8000eca:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d00b      	beq.n	8000eea <canardHandleRxFrame+0x276>
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 8000ed2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000ed6:	2b00      	cmp	r3, #0
 8000ed8:	d007      	beq.n	8000eea <canardHandleRxFrame+0x276>
 8000eda:	f897 3046 	ldrb.w	r3, [r7, #70]	@ 0x46
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d10f      	bne.n	8000f02 <canardHandleRxFrame+0x28e>
 8000ee2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d10b      	bne.n	8000f02 <canardHandleRxFrame+0x28e>
 8000eea:	f897 3045 	ldrb.w	r3, [r7, #69]	@ 0x45
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d009      	beq.n	8000f06 <canardHandleRxFrame+0x292>
            (iface_switch_allowed && first_frame && non_wrapped_tid);
 8000ef2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d005      	beq.n	8000f06 <canardHandleRxFrame+0x292>
 8000efa:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <canardHandleRxFrame+0x292>
            (same_iface && first_frame && (not_previous_tid || incomplete_frame)) ||
 8000f02:	2301      	movs	r3, #1
 8000f04:	e000      	b.n	8000f08 <canardHandleRxFrame+0x294>
 8000f06:	2300      	movs	r3, #0
    const bool need_restart =
 8000f08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8000f0c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8000f10:	f003 0301 	and.w	r3, r3, #1
 8000f14:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42

    if (need_restart)
 8000f18:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d02f      	beq.n	8000f80 <canardHandleRxFrame+0x30c>
    {
        rx_state->transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte);
 8000f20:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000f24:	f003 031f 	and.w	r3, r3, #31
 8000f28:	b2d9      	uxtb	r1, r3
 8000f2a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000f2c:	7dd3      	ldrb	r3, [r2, #23]
 8000f2e:	f361 0386 	bfi	r3, r1, #2, #5
 8000f32:	75d3      	strb	r3, [r2, #23]
        rx_state->next_toggle = 0;
 8000f34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000f36:	7dd3      	ldrb	r3, [r2, #23]
 8000f38:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000f3c:	75d3      	strb	r3, [r2, #23]
        releaseStatePayload(ins, rx_state);
 8000f3e:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000f40:	68f8      	ldr	r0, [r7, #12]
 8000f42:	f000 ff63 	bl	8001e0c <releaseStatePayload>
        rx_state->iface_id = frame->iface_id;
 8000f46:	68bb      	ldr	r3, [r7, #8]
 8000f48:	7b5a      	ldrb	r2, [r3, #13]
 8000f4a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f4c:	769a      	strb	r2, [r3, #26]
        if (!IS_START_OF_TRANSFER(tail_byte))
 8000f4e:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000f52:	09db      	lsrs	r3, r3, #7
 8000f54:	b2db      	uxtb	r3, r3
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d110      	bne.n	8000f80 <canardHandleRxFrame+0x30c>
        {
            rx_state->transfer_id++;
 8000f5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f60:	7ddb      	ldrb	r3, [r3, #23]
 8000f62:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8000f66:	b2db      	uxtb	r3, r3
 8000f68:	3301      	adds	r3, #1
 8000f6a:	f003 031f 	and.w	r3, r3, #31
 8000f6e:	b2d9      	uxtb	r1, r3
 8000f70:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8000f72:	7dd3      	ldrb	r3, [r2, #23]
 8000f74:	f361 0386 	bfi	r3, r1, #2, #5
 8000f78:	75d3      	strb	r3, [r2, #23]
            return -CANARD_ERROR_RX_MISSED_START;
 8000f7a:	f06f 030c 	mvn.w	r3, #12
 8000f7e:	e211      	b.n	80013a4 <canardHandleRxFrame+0x730>
        }
    }

    if (frame->iface_id != rx_state->iface_id)
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	7b5a      	ldrb	r2, [r3, #13]
 8000f84:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8000f86:	7e9b      	ldrb	r3, [r3, #26]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d001      	beq.n	8000f90 <canardHandleRxFrame+0x31c>
    {
        // drop frame if coming from unexpected interface
        return CANARD_OK;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	e209      	b.n	80013a4 <canardHandleRxFrame+0x730>
    }

    if (IS_START_OF_TRANSFER(tail_byte) && IS_END_OF_TRANSFER(tail_byte)) // single frame transfer
 8000f90:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000f94:	09db      	lsrs	r3, r3, #7
 8000f96:	b2db      	uxtb	r3, r3
 8000f98:	f003 0301 	and.w	r3, r3, #1
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d041      	beq.n	8001024 <canardHandleRxFrame+0x3b0>
 8000fa0:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000fa4:	099b      	lsrs	r3, r3, #6
 8000fa6:	b2db      	uxtb	r3, r3
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d039      	beq.n	8001024 <canardHandleRxFrame+0x3b0>
    {
        rx_state->timestamp_usec = timestamp_usec;
 8000fb0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8000fb2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fb6:	e9c1 2302 	strd	r2, r3, [r1, #8]
        CanardRxTransfer rx_transfer = {
 8000fba:	f107 0310 	add.w	r3, r7, #16
 8000fbe:	2220      	movs	r2, #32
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	4618      	mov	r0, r3
 8000fc4:	f00c f8c0 	bl	800d148 <memset>
 8000fc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000fcc:	e9c7 2304 	strd	r2, r3, [r7, #16]
            .timestamp_usec = timestamp_usec,
            .payload_head = frame->data,
 8000fd0:	68bb      	ldr	r3, [r7, #8]
 8000fd2:	3304      	adds	r3, #4
        CanardRxTransfer rx_transfer = {
 8000fd4:	61bb      	str	r3, [r7, #24]
            .payload_len = (uint8_t)(frame->data_len - 1U),
 8000fd6:	68bb      	ldr	r3, [r7, #8]
 8000fd8:	7b1b      	ldrb	r3, [r3, #12]
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 8000fde:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8000fe0:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 8000fe4:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8000fe6:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8000fea:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            .data_type_id = data_type_id,
            .transfer_type = (uint8_t)transfer_type,
            .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 8000fee:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8000ff2:	f003 031f 	and.w	r3, r3, #31
 8000ff6:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 8000ff8:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8000ffc:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 8001000:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8001004:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8001008:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#elif CANARD_ENABLE_TAO_OPTION
            .tao = !ins->tao_disabled
#endif
        };

        ins->on_reception(ins, &rx_transfer);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f107 0210 	add.w	r2, r7, #16
 8001014:	4611      	mov	r1, r2
 8001016:	68f8      	ldr	r0, [r7, #12]
 8001018:	4798      	blx	r3

        prepareForNextTransfer(rx_state);
 800101a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800101c:	f000 fdf7 	bl	8001c0e <prepareForNextTransfer>
        return CANARD_OK;
 8001020:	2300      	movs	r3, #0
 8001022:	e1bf      	b.n	80013a4 <canardHandleRxFrame+0x730>
    }

    if (TOGGLE_BIT(tail_byte) != rx_state->next_toggle)
 8001024:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001028:	095b      	lsrs	r3, r3, #5
 800102a:	b2db      	uxtb	r3, r3
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	2b00      	cmp	r3, #0
 8001032:	bf14      	ite	ne
 8001034:	2301      	movne	r3, #1
 8001036:	2300      	moveq	r3, #0
 8001038:	b2db      	uxtb	r3, r3
 800103a:	461a      	mov	r2, r3
 800103c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800103e:	7ddb      	ldrb	r3, [r3, #23]
 8001040:	f3c3 13c0 	ubfx	r3, r3, #7, #1
 8001044:	b2db      	uxtb	r3, r3
 8001046:	429a      	cmp	r2, r3
 8001048:	d002      	beq.n	8001050 <canardHandleRxFrame+0x3dc>
    {
        return -CANARD_ERROR_RX_WRONG_TOGGLE;
 800104a:	f06f 030d 	mvn.w	r3, #13
 800104e:	e1a9      	b.n	80013a4 <canardHandleRxFrame+0x730>
    }

    if (TRANSFER_ID_FROM_TAIL_BYTE(tail_byte) != rx_state->transfer_id)
 8001050:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001054:	f003 031f 	and.w	r3, r3, #31
 8001058:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800105a:	7dd2      	ldrb	r2, [r2, #23]
 800105c:	f3c2 0284 	ubfx	r2, r2, #2, #5
 8001060:	b2d2      	uxtb	r2, r2
 8001062:	4293      	cmp	r3, r2
 8001064:	d002      	beq.n	800106c <canardHandleRxFrame+0x3f8>
    {
        return -CANARD_ERROR_RX_UNEXPECTED_TID;
 8001066:	f06f 030e 	mvn.w	r3, #14
 800106a:	e19b      	b.n	80013a4 <canardHandleRxFrame+0x730>
    }

    if (IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))      // Beginning of multi frame transfer
 800106c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001070:	09db      	lsrs	r3, r3, #7
 8001072:	b2db      	uxtb	r3, r3
 8001074:	f003 0301 	and.w	r3, r3, #1
 8001078:	2b00      	cmp	r3, #0
 800107a:	d061      	beq.n	8001140 <canardHandleRxFrame+0x4cc>
 800107c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001080:	099b      	lsrs	r3, r3, #6
 8001082:	b2db      	uxtb	r3, r3
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	2b00      	cmp	r3, #0
 800108a:	d159      	bne.n	8001140 <canardHandleRxFrame+0x4cc>
    {
        if (frame->data_len <= 3)
 800108c:	68bb      	ldr	r3, [r7, #8]
 800108e:	7b1b      	ldrb	r3, [r3, #12]
 8001090:	2b03      	cmp	r3, #3
 8001092:	d807      	bhi.n	80010a4 <canardHandleRxFrame+0x430>
        {
            return -CANARD_ERROR_RX_SHORT_FRAME;
 8001094:	f06f 030f 	mvn.w	r3, #15
 8001098:	e184      	b.n	80013a4 <canardHandleRxFrame+0x730>
 800109a:	bf00      	nop
 800109c:	001e8481 	.word	0x001e8481
 80010a0:	000f4241 	.word	0x000f4241
        }

        // take off the crc and store the payload
        rx_state->timestamp_usec = timestamp_usec;
 80010a4:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80010a6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80010aa:	e9c1 2302 	strd	r2, r3, [r1, #8]
        rx_state->payload_len = 0;
 80010ae:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80010b0:	8ad3      	ldrh	r3, [r2, #22]
 80010b2:	f36f 0309 	bfc	r3, #0, #10
 80010b6:	82d3      	strh	r3, [r2, #22]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f103 000c 	add.w	r0, r3, #12
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	3304      	adds	r3, #4
 80010c2:	1c9a      	adds	r2, r3, #2
                                                 (uint8_t) (frame->data_len - 3));
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	7b1b      	ldrb	r3, [r3, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data + 2,
 80010c8:	3b03      	subs	r3, #3
 80010ca:	b2db      	uxtb	r3, r3
 80010cc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80010ce:	f000 fed1 	bl	8001e74 <bufferBlockPushBytes>
 80010d2:	4603      	mov	r3, r0
 80010d4:	f8a7 3040 	strh.w	r3, [r7, #64]	@ 0x40
        if (ret < 0)
 80010d8:	f9b7 3040 	ldrsh.w	r3, [r7, #64]	@ 0x40
 80010dc:	2b00      	cmp	r3, #0
 80010de:	da09      	bge.n	80010f4 <canardHandleRxFrame+0x480>
        {
            releaseStatePayload(ins, rx_state);
 80010e0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80010e2:	68f8      	ldr	r0, [r7, #12]
 80010e4:	f000 fe92 	bl	8001e0c <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 80010e8:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80010ea:	f000 fd90 	bl	8001c0e <prepareForNextTransfer>
            return -CANARD_ERROR_OUT_OF_MEMORY;
 80010ee:	f06f 0302 	mvn.w	r3, #2
 80010f2:	e157      	b.n	80013a4 <canardHandleRxFrame+0x730>
        }
        rx_state->payload_crc = (uint16_t)(((uint16_t) frame->data[0]) | (uint16_t)((uint16_t) frame->data[1] << 8U));
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	791b      	ldrb	r3, [r3, #4]
 80010f8:	461a      	mov	r2, r3
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	795b      	ldrb	r3, [r3, #5]
 80010fe:	021b      	lsls	r3, r3, #8
 8001100:	b29b      	uxth	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b29a      	uxth	r2, r3
 8001106:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001108:	831a      	strh	r2, [r3, #24]
        rx_state->calculated_crc = crcAddSignature(0xFFFFU, data_type_signature);
 800110a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 800110e:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001112:	f001 f99c 	bl	800244e <crcAddSignature>
 8001116:	4603      	mov	r3, r0
 8001118:	461a      	mov	r2, r3
 800111a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800111c:	829a      	strh	r2, [r3, #20]
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 800111e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001120:	8a98      	ldrh	r0, [r3, #20]
                                          frame->data + 2, (uint8_t)(frame->data_len - 3));
 8001122:	68bb      	ldr	r3, [r7, #8]
 8001124:	3304      	adds	r3, #4
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8001126:	1c99      	adds	r1, r3, #2
                                          frame->data + 2, (uint8_t)(frame->data_len - 3));
 8001128:	68bb      	ldr	r3, [r7, #8]
 800112a:	7b1b      	ldrb	r3, [r3, #12]
 800112c:	3b03      	subs	r3, #3
 800112e:	b2db      	uxtb	r3, r3
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8001130:	461a      	mov	r2, r3
 8001132:	f001 f9bb 	bl	80024ac <crcAdd>
 8001136:	4603      	mov	r3, r0
 8001138:	461a      	mov	r2, r3
 800113a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800113c:	829a      	strh	r2, [r3, #20]
    {
 800113e:	e124      	b.n	800138a <canardHandleRxFrame+0x716>
    }
    else if (!IS_START_OF_TRANSFER(tail_byte) && !IS_END_OF_TRANSFER(tail_byte))    // Middle of a multi-frame transfer
 8001140:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001144:	09db      	lsrs	r3, r3, #7
 8001146:	b2db      	uxtb	r3, r3
 8001148:	f003 0301 	and.w	r3, r3, #1
 800114c:	2b00      	cmp	r3, #0
 800114e:	d133      	bne.n	80011b8 <canardHandleRxFrame+0x544>
 8001150:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001154:	099b      	lsrs	r3, r3, #6
 8001156:	b2db      	uxtb	r3, r3
 8001158:	f003 0301 	and.w	r3, r3, #1
 800115c:	2b00      	cmp	r3, #0
 800115e:	d12b      	bne.n	80011b8 <canardHandleRxFrame+0x544>
    {
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	f103 000c 	add.w	r0, r3, #12
 8001166:	68bb      	ldr	r3, [r7, #8]
 8001168:	1d1a      	adds	r2, r3, #4
                                                 (uint8_t) (frame->data_len - 1));
 800116a:	68bb      	ldr	r3, [r7, #8]
 800116c:	7b1b      	ldrb	r3, [r3, #12]
        const int16_t ret = bufferBlockPushBytes(&ins->allocator, rx_state, frame->data,
 800116e:	3b01      	subs	r3, #1
 8001170:	b2db      	uxtb	r3, r3
 8001172:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001174:	f000 fe7e 	bl	8001e74 <bufferBlockPushBytes>
 8001178:	4603      	mov	r3, r0
 800117a:	87fb      	strh	r3, [r7, #62]	@ 0x3e
        if (ret < 0)
 800117c:	f9b7 303e 	ldrsh.w	r3, [r7, #62]	@ 0x3e
 8001180:	2b00      	cmp	r3, #0
 8001182:	da09      	bge.n	8001198 <canardHandleRxFrame+0x524>
        {
            releaseStatePayload(ins, rx_state);
 8001184:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8001186:	68f8      	ldr	r0, [r7, #12]
 8001188:	f000 fe40 	bl	8001e0c <releaseStatePayload>
            prepareForNextTransfer(rx_state);
 800118c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800118e:	f000 fd3e 	bl	8001c0e <prepareForNextTransfer>
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8001192:	f06f 0302 	mvn.w	r3, #2
 8001196:	e105      	b.n	80013a4 <canardHandleRxFrame+0x730>
        }
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 8001198:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800119a:	8a98      	ldrh	r0, [r3, #20]
                                          frame->data, (uint8_t)(frame->data_len - 1));
 800119c:	68bb      	ldr	r3, [r7, #8]
 800119e:	1d19      	adds	r1, r3, #4
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	7b1b      	ldrb	r3, [r3, #12]
 80011a4:	3b01      	subs	r3, #1
 80011a6:	b2db      	uxtb	r3, r3
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc,
 80011a8:	461a      	mov	r2, r3
 80011aa:	f001 f97f 	bl	80024ac <crcAdd>
 80011ae:	4603      	mov	r3, r0
 80011b0:	461a      	mov	r2, r3
 80011b2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011b4:	829a      	strh	r2, [r3, #20]
    {
 80011b6:	e0e8      	b.n	800138a <canardHandleRxFrame+0x716>
    }
    else                                                                            // End of a multi-frame transfer
    {
        const uint8_t frame_payload_size = (uint8_t)(frame->data_len - 1);
 80011b8:	68bb      	ldr	r3, [r7, #8]
 80011ba:	7b1b      	ldrb	r3, [r3, #12]
 80011bc:	3b01      	subs	r3, #1
 80011be:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d

        uint8_t tail_offset = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b

        if (rx_state->payload_len < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE)
 80011c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011ca:	8adb      	ldrh	r3, [r3, #22]
 80011cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	2b04      	cmp	r3, #4
 80011d4:	d823      	bhi.n	800121e <canardHandleRxFrame+0x5aa>
        {
            // Copy the beginning of the frame into the head, point the tail pointer to the remainder
            for (size_t i = rx_state->payload_len;
 80011d6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80011d8:	8adb      	ldrh	r3, [r3, #22]
 80011da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011de:	b29b      	uxth	r3, r3
 80011e0:	667b      	str	r3, [r7, #100]	@ 0x64
 80011e2:	e012      	b.n	800120a <canardHandleRxFrame+0x596>
                 (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
                 i++, tail_offset++)
            {
                rx_state->buffer_head[i] = frame->data[tail_offset];
 80011e4:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80011e8:	68ba      	ldr	r2, [r7, #8]
 80011ea:	4413      	add	r3, r2
 80011ec:	7919      	ldrb	r1, [r3, #4]
 80011ee:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80011f0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80011f2:	4413      	add	r3, r2
 80011f4:	331b      	adds	r3, #27
 80011f6:	460a      	mov	r2, r1
 80011f8:	701a      	strb	r2, [r3, #0]
                 i++, tail_offset++)
 80011fa:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80011fc:	3301      	adds	r3, #1
 80011fe:	667b      	str	r3, [r7, #100]	@ 0x64
 8001200:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 8001204:	3301      	adds	r3, #1
 8001206:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                 (i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) && (tail_offset < frame_payload_size);
 800120a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800120c:	2b04      	cmp	r3, #4
 800120e:	d848      	bhi.n	80012a2 <canardHandleRxFrame+0x62e>
 8001210:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 8001214:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 8001218:	429a      	cmp	r2, r3
 800121a:	d3e3      	bcc.n	80011e4 <canardHandleRxFrame+0x570>
 800121c:	e041      	b.n	80012a2 <canardHandleRxFrame+0x62e>
            }
        }
        else
        {
            // Like above, except that the beginning goes into the last block of the storage
            CanardBufferBlock* block = canardBufferFromIdx(&ins->allocator, rx_state->buffer_blocks);
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	f103 020c 	add.w	r2, r3, #12
 8001224:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	4619      	mov	r1, r3
 800122a:	4610      	mov	r0, r2
 800122c:	f7ff fc1e 	bl	8000a6c <canardBufferFromIdx>
 8001230:	6638      	str	r0, [r7, #96]	@ 0x60
            if (block != NULL)
 8001232:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001234:	2b00      	cmp	r3, #0
 8001236:	d034      	beq.n	80012a2 <canardHandleRxFrame+0x62e>
            {
                size_t offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE;    // Payload offset of the first block
 8001238:	2305      	movs	r3, #5
 800123a:	65fb      	str	r3, [r7, #92]	@ 0x5c
                while (block->next != NULL)
 800123c:	e005      	b.n	800124a <canardHandleRxFrame+0x5d6>
                {
                    block = block->next;
 800123e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	663b      	str	r3, [r7, #96]	@ 0x60
                    offset += CANARD_BUFFER_BLOCK_DATA_SIZE;
 8001244:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001246:	331c      	adds	r3, #28
 8001248:	65fb      	str	r3, [r7, #92]	@ 0x5c
                while (block->next != NULL)
 800124a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1f5      	bne.n	800123e <canardHandleRxFrame+0x5ca>
                }
                CANARD_ASSERT(block != NULL);

                const size_t offset_within_block = rx_state->payload_len - offset;
 8001252:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001254:	8adb      	ldrh	r3, [r3, #22]
 8001256:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800125a:	b29b      	uxth	r3, r3
 800125c:	461a      	mov	r2, r3
 800125e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	63bb      	str	r3, [r7, #56]	@ 0x38
                CANARD_ASSERT(offset_within_block <= CANARD_BUFFER_BLOCK_DATA_SIZE);

                for (size_t i = offset_within_block;
 8001264:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001266:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001268:	e012      	b.n	8001290 <canardHandleRxFrame+0x61c>
                     (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
                     i++, tail_offset++)
                {
                    block->data[i] = frame->data[tail_offset];
 800126a:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800126e:	68ba      	ldr	r2, [r7, #8]
 8001270:	4413      	add	r3, r2
 8001272:	7919      	ldrb	r1, [r3, #4]
 8001274:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001276:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001278:	4413      	add	r3, r2
 800127a:	3304      	adds	r3, #4
 800127c:	460a      	mov	r2, r1
 800127e:	701a      	strb	r2, [r3, #0]
                     i++, tail_offset++)
 8001280:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001282:	3301      	adds	r3, #1
 8001284:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001286:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 800128a:	3301      	adds	r3, #1
 800128c:	f887 306b 	strb.w	r3, [r7, #107]	@ 0x6b
                     (i < CANARD_BUFFER_BLOCK_DATA_SIZE) && (tail_offset < frame_payload_size);
 8001290:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001292:	2b1b      	cmp	r3, #27
 8001294:	d805      	bhi.n	80012a2 <canardHandleRxFrame+0x62e>
 8001296:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 800129a:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 800129e:	429a      	cmp	r2, r3
 80012a0:	d3e3      	bcc.n	800126a <canardHandleRxFrame+0x5f6>
                }
            }
        }

        CanardRxTransfer rx_transfer = {
 80012a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80012a6:	e9c7 2304 	strd	r2, r3, [r7, #16]
            .timestamp_usec = timestamp_usec,
            .payload_head = rx_state->buffer_head,
 80012aa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80012ac:	331b      	adds	r3, #27
        CanardRxTransfer rx_transfer = {
 80012ae:	61bb      	str	r3, [r7, #24]
            .payload_middle = canardBufferFromIdx(&ins->allocator, rx_state->buffer_blocks),
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f103 020c 	add.w	r2, r3, #12
 80012b6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80012b8:	685b      	ldr	r3, [r3, #4]
 80012ba:	4619      	mov	r1, r3
 80012bc:	4610      	mov	r0, r2
 80012be:	f7ff fbd5 	bl	8000a6c <canardBufferFromIdx>
 80012c2:	4603      	mov	r3, r0
        CanardRxTransfer rx_transfer = {
 80012c4:	61fb      	str	r3, [r7, #28]
            .payload_tail = (tail_offset >= frame_payload_size) ? NULL : (&frame->data[tail_offset]),
 80012c6:	f897 206b 	ldrb.w	r2, [r7, #107]	@ 0x6b
 80012ca:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80012ce:	429a      	cmp	r2, r3
 80012d0:	d205      	bcs.n	80012de <canardHandleRxFrame+0x66a>
 80012d2:	f897 306b 	ldrb.w	r3, [r7, #107]	@ 0x6b
 80012d6:	68ba      	ldr	r2, [r7, #8]
 80012d8:	4413      	add	r3, r2
 80012da:	3304      	adds	r3, #4
 80012dc:	e000      	b.n	80012e0 <canardHandleRxFrame+0x66c>
 80012de:	2300      	movs	r3, #0
        CanardRxTransfer rx_transfer = {
 80012e0:	623b      	str	r3, [r7, #32]
            .payload_len = (uint16_t)(rx_state->payload_len + frame_payload_size),
 80012e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80012e4:	8adb      	ldrh	r3, [r3, #22]
 80012e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80012ea:	b29b      	uxth	r3, r3
 80012ec:	461a      	mov	r2, r3
 80012ee:	f897 303d 	ldrb.w	r3, [r7, #61]	@ 0x3d
 80012f2:	b29b      	uxth	r3, r3
 80012f4:	4413      	add	r3, r2
 80012f6:	b29b      	uxth	r3, r3
        CanardRxTransfer rx_transfer = {
 80012f8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80012fa:	f8b7 3052 	ldrh.w	r3, [r7, #82]	@ 0x52
 80012fe:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8001300:	f897 3057 	ldrb.w	r3, [r7, #87]	@ 0x57
 8001304:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
            .data_type_id = data_type_id,
            .transfer_type = (uint8_t)transfer_type,
            .transfer_id = TRANSFER_ID_FROM_TAIL_BYTE(tail_byte),
 8001308:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800130c:	f003 031f 	and.w	r3, r3, #31
 8001310:	b2db      	uxtb	r3, r3
        CanardRxTransfer rx_transfer = {
 8001312:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
 8001316:	f897 3055 	ldrb.w	r3, [r7, #85]	@ 0x55
 800131a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800131e:	f897 3054 	ldrb.w	r3, [r7, #84]	@ 0x54
 8001322:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
#elif CANARD_ENABLE_TAO_OPTION
            .tao = !ins->tao_disabled
#endif
        };

        rx_state->buffer_blocks = CANARD_BUFFER_IDX_NONE;     // Block list ownership has been transferred to rx_transfer!
 8001326:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001328:	2200      	movs	r2, #0
 800132a:	605a      	str	r2, [r3, #4]

        // CRC validation
        rx_state->calculated_crc = crcAdd((uint16_t)rx_state->calculated_crc, frame->data, frame->data_len - 1U);
 800132c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800132e:	8a98      	ldrh	r0, [r3, #20]
 8001330:	68bb      	ldr	r3, [r7, #8]
 8001332:	1d19      	adds	r1, r3, #4
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	7b1b      	ldrb	r3, [r3, #12]
 8001338:	3b01      	subs	r3, #1
 800133a:	461a      	mov	r2, r3
 800133c:	f001 f8b6 	bl	80024ac <crcAdd>
 8001340:	4603      	mov	r3, r0
 8001342:	461a      	mov	r2, r3
 8001344:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001346:	829a      	strh	r2, [r3, #20]
        if (rx_state->calculated_crc == rx_state->payload_crc)
 8001348:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800134a:	8a9a      	ldrh	r2, [r3, #20]
 800134c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800134e:	8b1b      	ldrh	r3, [r3, #24]
 8001350:	429a      	cmp	r2, r3
 8001352:	d106      	bne.n	8001362 <canardHandleRxFrame+0x6ee>
        {
            ins->on_reception(ins, &rx_transfer);
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f107 0210 	add.w	r2, r7, #16
 800135c:	4611      	mov	r1, r2
 800135e:	68f8      	ldr	r0, [r7, #12]
 8001360:	4798      	blx	r3
        }

        // Making sure the payload is released even if the application didn't bother with it
        canardReleaseRxTransferPayload(ins, &rx_transfer);
 8001362:	f107 0310 	add.w	r3, r7, #16
 8001366:	4619      	mov	r1, r3
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f000 f9aa 	bl	80016c2 <canardReleaseRxTransferPayload>
        prepareForNextTransfer(rx_state);
 800136e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8001370:	f000 fc4d 	bl	8001c0e <prepareForNextTransfer>

        if (rx_state->calculated_crc == rx_state->payload_crc)
 8001374:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8001376:	8a9a      	ldrh	r2, [r3, #20]
 8001378:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800137a:	8b1b      	ldrh	r3, [r3, #24]
 800137c:	429a      	cmp	r2, r3
 800137e:	d101      	bne.n	8001384 <canardHandleRxFrame+0x710>
        {
            return CANARD_OK;
 8001380:	2300      	movs	r3, #0
 8001382:	e00f      	b.n	80013a4 <canardHandleRxFrame+0x730>
        }
        else
        {
            return -CANARD_ERROR_RX_BAD_CRC;
 8001384:	f06f 0310 	mvn.w	r3, #16
 8001388:	e00c      	b.n	80013a4 <canardHandleRxFrame+0x730>
        }
    }

    rx_state->next_toggle = rx_state->next_toggle ? 0 : 1;
 800138a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800138c:	7ddb      	ldrb	r3, [r3, #23]
 800138e:	b25b      	sxtb	r3, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	b2db      	uxtb	r3, r3
 8001394:	09db      	lsrs	r3, r3, #7
 8001396:	b2d9      	uxtb	r1, r3
 8001398:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800139a:	7dd3      	ldrb	r3, [r2, #23]
 800139c:	f361 13c7 	bfi	r3, r1, #7, #1
 80013a0:	75d3      	strb	r3, [r2, #23]
    return CANARD_OK;
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3774      	adds	r7, #116	@ 0x74
 80013a8:	46bd      	mov	sp, r7
 80013aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80013ae:	bf00      	nop

080013b0 <canardDecodeScalar>:
int16_t canardDecodeScalar(const CanardRxTransfer* transfer,
                           uint32_t bit_offset,
                           uint8_t bit_length,
                           bool value_is_signed,
                           void* out_value)
{
 80013b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80013b4:	b08d      	sub	sp, #52	@ 0x34
 80013b6:	af00      	add	r7, sp, #0
 80013b8:	61f8      	str	r0, [r7, #28]
 80013ba:	61b9      	str	r1, [r7, #24]
 80013bc:	4611      	mov	r1, r2
 80013be:	461a      	mov	r2, r3
 80013c0:	460b      	mov	r3, r1
 80013c2:	75fb      	strb	r3, [r7, #23]
 80013c4:	4613      	mov	r3, r2
 80013c6:	75bb      	strb	r3, [r7, #22]
    if (transfer == NULL || out_value == NULL)
 80013c8:	69fb      	ldr	r3, [r7, #28]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d002      	beq.n	80013d4 <canardDecodeScalar+0x24>
 80013ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d102      	bne.n	80013da <canardDecodeScalar+0x2a>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 80013d4:	f06f 0301 	mvn.w	r3, #1
 80013d8:	e16e      	b.n	80016b8 <canardDecodeScalar+0x308>
    }

    if (bit_length < 1 || bit_length > 64)
 80013da:	7dfb      	ldrb	r3, [r7, #23]
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d002      	beq.n	80013e6 <canardDecodeScalar+0x36>
 80013e0:	7dfb      	ldrb	r3, [r7, #23]
 80013e2:	2b40      	cmp	r3, #64	@ 0x40
 80013e4:	d902      	bls.n	80013ec <canardDecodeScalar+0x3c>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 80013e6:	f06f 0301 	mvn.w	r3, #1
 80013ea:	e165      	b.n	80016b8 <canardDecodeScalar+0x308>
    }

    if (bit_length == 1 && value_is_signed)
 80013ec:	7dfb      	ldrb	r3, [r7, #23]
 80013ee:	2b01      	cmp	r3, #1
 80013f0:	d105      	bne.n	80013fe <canardDecodeScalar+0x4e>
 80013f2:	7dbb      	ldrb	r3, [r7, #22]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d002      	beq.n	80013fe <canardDecodeScalar+0x4e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 80013f8:	f06f 0301 	mvn.w	r3, #1
 80013fc:	e15c      	b.n	80016b8 <canardDecodeScalar+0x308>
        uint64_t u64;
        int64_t  s64;           ///< Also double, possibly float, possibly long double (depends on implementation)
        uint8_t bytes[8];
    } storage;

    memset(&storage, 0, sizeof(storage));   // This is important
 80013fe:	f107 0320 	add.w	r3, r7, #32
 8001402:	2208      	movs	r2, #8
 8001404:	2100      	movs	r1, #0
 8001406:	4618      	mov	r0, r3
 8001408:	f00b fe9e 	bl	800d148 <memset>

    const int16_t result = descatterTransferPayload(transfer, bit_offset, bit_length, &storage.bytes[0]);
 800140c:	f107 0320 	add.w	r3, r7, #32
 8001410:	7dfa      	ldrb	r2, [r7, #23]
 8001412:	69b9      	ldr	r1, [r7, #24]
 8001414:	69f8      	ldr	r0, [r7, #28]
 8001416:	f000 feb5 	bl	8002184 <descatterTransferPayload>
 800141a:	4603      	mov	r3, r0
 800141c:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    if (result <= 0)
 800141e:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8001422:	2b00      	cmp	r3, #0
 8001424:	dc02      	bgt.n	800142c <canardDecodeScalar+0x7c>
    {
        return result;
 8001426:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 800142a:	e145      	b.n	80016b8 <canardDecodeScalar+0x308>
     * The bit copy algorithm assumes that more significant bits have lower index, so we need to shift some.
     * Extra most significant bits will be filled with zeroes, which is fine.
     * Coverity Scan mistakenly believes that the array may be overrun if bit_length == 64; however, this branch will
     * not be taken if bit_length == 64, because 64 % 8 == 0.
     */
    if ((bit_length % 8) != 0)
 800142c:	7dfb      	ldrb	r3, [r7, #23]
 800142e:	f003 0307 	and.w	r3, r3, #7
 8001432:	b2db      	uxtb	r3, r3
 8001434:	2b00      	cmp	r3, #0
 8001436:	d018      	beq.n	800146a <canardDecodeScalar+0xba>
    {
        // coverity[overrun-local]
        storage.bytes[bit_length / 8U] = (uint8_t)(storage.bytes[bit_length / 8U] >> ((8U - (bit_length % 8U)) & 7U));
 8001438:	7dfb      	ldrb	r3, [r7, #23]
 800143a:	08db      	lsrs	r3, r3, #3
 800143c:	b2db      	uxtb	r3, r3
 800143e:	3320      	adds	r3, #32
 8001440:	f107 0210 	add.w	r2, r7, #16
 8001444:	4413      	add	r3, r2
 8001446:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800144a:	461a      	mov	r2, r3
 800144c:	7dfb      	ldrb	r3, [r7, #23]
 800144e:	425b      	negs	r3, r3
 8001450:	f003 0307 	and.w	r3, r3, #7
 8001454:	411a      	asrs	r2, r3
 8001456:	7dfb      	ldrb	r3, [r7, #23]
 8001458:	08db      	lsrs	r3, r3, #3
 800145a:	b2db      	uxtb	r3, r3
 800145c:	b2d2      	uxtb	r2, r2
 800145e:	3320      	adds	r3, #32
 8001460:	f107 0110 	add.w	r1, r7, #16
 8001464:	440b      	add	r3, r1
 8001466:	f803 2c10 	strb.w	r2, [r3, #-16]
    }

    /*
     * Determining the closest standard byte length - this will be needed for byte reordering and sign bit extension.
     */
    uint8_t std_byte_length = 0;
 800146a:	2300      	movs	r3, #0
 800146c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if      (bit_length == 1)   { std_byte_length = sizeof(bool); }
 8001470:	7dfb      	ldrb	r3, [r7, #23]
 8001472:	2b01      	cmp	r3, #1
 8001474:	d103      	bne.n	800147e <canardDecodeScalar+0xce>
 8001476:	2301      	movs	r3, #1
 8001478:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800147c:	e01e      	b.n	80014bc <canardDecodeScalar+0x10c>
    else if (bit_length <= 8)   { std_byte_length = 1; }
 800147e:	7dfb      	ldrb	r3, [r7, #23]
 8001480:	2b08      	cmp	r3, #8
 8001482:	d803      	bhi.n	800148c <canardDecodeScalar+0xdc>
 8001484:	2301      	movs	r3, #1
 8001486:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 800148a:	e017      	b.n	80014bc <canardDecodeScalar+0x10c>
    else if (bit_length <= 16)  { std_byte_length = 2; }
 800148c:	7dfb      	ldrb	r3, [r7, #23]
 800148e:	2b10      	cmp	r3, #16
 8001490:	d803      	bhi.n	800149a <canardDecodeScalar+0xea>
 8001492:	2302      	movs	r3, #2
 8001494:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001498:	e010      	b.n	80014bc <canardDecodeScalar+0x10c>
    else if (bit_length <= 32)  { std_byte_length = 4; }
 800149a:	7dfb      	ldrb	r3, [r7, #23]
 800149c:	2b20      	cmp	r3, #32
 800149e:	d803      	bhi.n	80014a8 <canardDecodeScalar+0xf8>
 80014a0:	2304      	movs	r3, #4
 80014a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80014a6:	e009      	b.n	80014bc <canardDecodeScalar+0x10c>
    else if (bit_length <= 64)  { std_byte_length = 8; }
 80014a8:	7dfb      	ldrb	r3, [r7, #23]
 80014aa:	2b40      	cmp	r3, #64	@ 0x40
 80014ac:	d803      	bhi.n	80014b6 <canardDecodeScalar+0x106>
 80014ae:	2308      	movs	r3, #8
 80014b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 80014b4:	e002      	b.n	80014bc <canardDecodeScalar+0x10c>
    else
    {
        CANARD_ASSERT(false);
        return -CANARD_ERROR_INTERNAL;
 80014b6:	f06f 0308 	mvn.w	r3, #8
 80014ba:	e0fd      	b.n	80016b8 <canardDecodeScalar+0x308>
    CANARD_ASSERT((std_byte_length > 0) && (std_byte_length <= 8));

    /*
     * Flipping the byte order if needed.
     */
    if (isBigEndian())
 80014bc:	f000 ff57 	bl	800236e <isBigEndian>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d007      	beq.n	80014d6 <canardDecodeScalar+0x126>
    {
        swapByteOrder(&storage.bytes[0], std_byte_length);
 80014c6:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 80014ca:	f107 0320 	add.w	r3, r7, #32
 80014ce:	4611      	mov	r1, r2
 80014d0:	4618      	mov	r0, r3
 80014d2:	f000 ff5d 	bl	8002390 <swapByteOrder>

    /*
     * Extending the sign bit if needed. I miss templates.
     * Note that we operate on unsigned values in order to avoid undefined behaviors.
     */
    if (value_is_signed && (std_byte_length * 8 != bit_length))
 80014d6:	7dbb      	ldrb	r3, [r7, #22]
 80014d8:	2b00      	cmp	r3, #0
 80014da:	f000 809b 	beq.w	8001614 <canardDecodeScalar+0x264>
 80014de:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014e2:	00da      	lsls	r2, r3, #3
 80014e4:	7dfb      	ldrb	r3, [r7, #23]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	f000 8094 	beq.w	8001614 <canardDecodeScalar+0x264>
    {
        if (bit_length <= 8)
 80014ec:	7dfb      	ldrb	r3, [r7, #23]
 80014ee:	2b08      	cmp	r3, #8
 80014f0:	d819      	bhi.n	8001526 <canardDecodeScalar+0x176>
        {
            if ((storage.u8 & (1U << (bit_length - 1U))) != 0)                           // If the sign bit is set...
 80014f2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80014f6:	461a      	mov	r2, r3
 80014f8:	7dfb      	ldrb	r3, [r7, #23]
 80014fa:	3b01      	subs	r3, #1
 80014fc:	fa22 f303 	lsr.w	r3, r2, r3
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	2b00      	cmp	r3, #0
 8001506:	f000 8085 	beq.w	8001614 <canardDecodeScalar+0x264>
            {
                storage.u8 |= (uint8_t) 0xFFU & (uint8_t) ~((1U << bit_length) - 1U);   // ...set all bits above it.
 800150a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800150e:	7dfb      	ldrb	r3, [r7, #23]
 8001510:	2101      	movs	r1, #1
 8001512:	fa01 f303 	lsl.w	r3, r1, r3
 8001516:	b2db      	uxtb	r3, r3
 8001518:	425b      	negs	r3, r3
 800151a:	b2db      	uxtb	r3, r3
 800151c:	4313      	orrs	r3, r2
 800151e:	b2db      	uxtb	r3, r3
 8001520:	f887 3020 	strb.w	r3, [r7, #32]
 8001524:	e076      	b.n	8001614 <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length <= 16)
 8001526:	7dfb      	ldrb	r3, [r7, #23]
 8001528:	2b10      	cmp	r3, #16
 800152a:	d815      	bhi.n	8001558 <canardDecodeScalar+0x1a8>
        {
            if ((storage.u16 & (1U << (bit_length - 1U))) != 0)
 800152c:	8c3b      	ldrh	r3, [r7, #32]
 800152e:	461a      	mov	r2, r3
 8001530:	7dfb      	ldrb	r3, [r7, #23]
 8001532:	3b01      	subs	r3, #1
 8001534:	fa22 f303 	lsr.w	r3, r2, r3
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b00      	cmp	r3, #0
 800153e:	d069      	beq.n	8001614 <canardDecodeScalar+0x264>
            {
                storage.u16 |= (uint16_t) 0xFFFFU & (uint16_t) ~((1U << bit_length) - 1U);
 8001540:	8c3a      	ldrh	r2, [r7, #32]
 8001542:	7dfb      	ldrb	r3, [r7, #23]
 8001544:	2101      	movs	r1, #1
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	b29b      	uxth	r3, r3
 800154c:	425b      	negs	r3, r3
 800154e:	b29b      	uxth	r3, r3
 8001550:	4313      	orrs	r3, r2
 8001552:	b29b      	uxth	r3, r3
 8001554:	843b      	strh	r3, [r7, #32]
 8001556:	e05d      	b.n	8001614 <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length <= 32)
 8001558:	7dfb      	ldrb	r3, [r7, #23]
 800155a:	2b20      	cmp	r3, #32
 800155c:	d811      	bhi.n	8001582 <canardDecodeScalar+0x1d2>
        {
            if ((storage.u32 & (((uint32_t) 1) << (bit_length - 1U))) != 0)
 800155e:	6a3a      	ldr	r2, [r7, #32]
 8001560:	7dfb      	ldrb	r3, [r7, #23]
 8001562:	3b01      	subs	r3, #1
 8001564:	fa22 f303 	lsr.w	r3, r2, r3
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	2b00      	cmp	r3, #0
 800156e:	d051      	beq.n	8001614 <canardDecodeScalar+0x264>
            {
                storage.u32 |= (uint32_t) 0xFFFFFFFFUL & (uint32_t) ~((((uint32_t) 1) << bit_length) - 1U);
 8001570:	6a3a      	ldr	r2, [r7, #32]
 8001572:	7dfb      	ldrb	r3, [r7, #23]
 8001574:	2101      	movs	r1, #1
 8001576:	fa01 f303 	lsl.w	r3, r1, r3
 800157a:	425b      	negs	r3, r3
 800157c:	4313      	orrs	r3, r2
 800157e:	623b      	str	r3, [r7, #32]
 8001580:	e048      	b.n	8001614 <canardDecodeScalar+0x264>
            }
        }
        else if (bit_length < 64)   // Strictly less, this is not a typo
 8001582:	7dfb      	ldrb	r3, [r7, #23]
 8001584:	2b3f      	cmp	r3, #63	@ 0x3f
 8001586:	d842      	bhi.n	800160e <canardDecodeScalar+0x25e>
        {
            if ((storage.u64 & (((uint64_t) 1) << (bit_length - 1U))) != 0)
 8001588:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800158c:	7df9      	ldrb	r1, [r7, #23]
 800158e:	1e48      	subs	r0, r1, #1
 8001590:	f1c0 0620 	rsb	r6, r0, #32
 8001594:	f1a0 0120 	sub.w	r1, r0, #32
 8001598:	fa22 f400 	lsr.w	r4, r2, r0
 800159c:	fa03 f606 	lsl.w	r6, r3, r6
 80015a0:	4334      	orrs	r4, r6
 80015a2:	fa23 f101 	lsr.w	r1, r3, r1
 80015a6:	430c      	orrs	r4, r1
 80015a8:	fa23 f500 	lsr.w	r5, r3, r0
 80015ac:	f004 0301 	and.w	r3, r4, #1
 80015b0:	60bb      	str	r3, [r7, #8]
 80015b2:	2300      	movs	r3, #0
 80015b4:	60fb      	str	r3, [r7, #12]
 80015b6:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80015ba:	460b      	mov	r3, r1
 80015bc:	4313      	orrs	r3, r2
 80015be:	d029      	beq.n	8001614 <canardDecodeScalar+0x264>
            {
                storage.u64 |= (uint64_t) 0xFFFFFFFFFFFFFFFFULL & (uint64_t) ~((((uint64_t) 1) << bit_length) - 1U);
 80015c0:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80015c4:	7df9      	ldrb	r1, [r7, #23]
 80015c6:	f04f 0201 	mov.w	r2, #1
 80015ca:	f04f 0300 	mov.w	r3, #0
 80015ce:	f1a1 0620 	sub.w	r6, r1, #32
 80015d2:	f1c1 0020 	rsb	r0, r1, #32
 80015d6:	fa03 f901 	lsl.w	r9, r3, r1
 80015da:	fa02 f606 	lsl.w	r6, r2, r6
 80015de:	ea49 0906 	orr.w	r9, r9, r6
 80015e2:	fa22 f000 	lsr.w	r0, r2, r0
 80015e6:	ea49 0900 	orr.w	r9, r9, r0
 80015ea:	fa02 f801 	lsl.w	r8, r2, r1
 80015ee:	2300      	movs	r3, #0
 80015f0:	f1d8 0a00 	rsbs	sl, r8, #0
 80015f4:	eb63 0b09 	sbc.w	fp, r3, r9
 80015f8:	ea44 030a 	orr.w	r3, r4, sl
 80015fc:	603b      	str	r3, [r7, #0]
 80015fe:	ea45 030b 	orr.w	r3, r5, fp
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001608:	e9c7 3408 	strd	r3, r4, [r7, #32]
 800160c:	e002      	b.n	8001614 <canardDecodeScalar+0x264>
            }
        }
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 800160e:	f06f 0308 	mvn.w	r3, #8
 8001612:	e051      	b.n	80016b8 <canardDecodeScalar+0x308>
    }

    /*
     * Copying the result out.
     */
    if (value_is_signed)
 8001614:	7dbb      	ldrb	r3, [r7, #22]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d022      	beq.n	8001660 <canardDecodeScalar+0x2b0>
    {
        if      (bit_length <= 8)   { *( (int8_t*) out_value) = storage.s8;  }
 800161a:	7dfb      	ldrb	r3, [r7, #23]
 800161c:	2b08      	cmp	r3, #8
 800161e:	d804      	bhi.n	800162a <canardDecodeScalar+0x27a>
 8001620:	f997 2020 	ldrsb.w	r2, [r7, #32]
 8001624:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001626:	701a      	strb	r2, [r3, #0]
 8001628:	e044      	b.n	80016b4 <canardDecodeScalar+0x304>
        else if (bit_length <= 16)  { *((int16_t*) out_value) = storage.s16; }
 800162a:	7dfb      	ldrb	r3, [r7, #23]
 800162c:	2b10      	cmp	r3, #16
 800162e:	d804      	bhi.n	800163a <canardDecodeScalar+0x28a>
 8001630:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8001634:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001636:	801a      	strh	r2, [r3, #0]
 8001638:	e03c      	b.n	80016b4 <canardDecodeScalar+0x304>
        else if (bit_length <= 32)  { *((int32_t*) out_value) = storage.s32; }
 800163a:	7dfb      	ldrb	r3, [r7, #23]
 800163c:	2b20      	cmp	r3, #32
 800163e:	d803      	bhi.n	8001648 <canardDecodeScalar+0x298>
 8001640:	6a3a      	ldr	r2, [r7, #32]
 8001642:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	e035      	b.n	80016b4 <canardDecodeScalar+0x304>
        else if (bit_length <= 64)  { *((int64_t*) out_value) = storage.s64; }
 8001648:	7dfb      	ldrb	r3, [r7, #23]
 800164a:	2b40      	cmp	r3, #64	@ 0x40
 800164c:	d805      	bhi.n	800165a <canardDecodeScalar+0x2aa>
 800164e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001652:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8001654:	e9c1 2300 	strd	r2, r3, [r1]
 8001658:	e02c      	b.n	80016b4 <canardDecodeScalar+0x304>
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 800165a:	f06f 0308 	mvn.w	r3, #8
 800165e:	e02b      	b.n	80016b8 <canardDecodeScalar+0x308>
        }
    }
    else
    {
        if      (bit_length == 1)   { *(    (bool*) out_value) = storage.boolean; }
 8001660:	7dfb      	ldrb	r3, [r7, #23]
 8001662:	2b01      	cmp	r3, #1
 8001664:	d104      	bne.n	8001670 <canardDecodeScalar+0x2c0>
 8001666:	f897 2020 	ldrb.w	r2, [r7, #32]
 800166a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800166c:	701a      	strb	r2, [r3, #0]
 800166e:	e021      	b.n	80016b4 <canardDecodeScalar+0x304>
        else if (bit_length <= 8)   { *( (uint8_t*) out_value) = storage.u8;  }
 8001670:	7dfb      	ldrb	r3, [r7, #23]
 8001672:	2b08      	cmp	r3, #8
 8001674:	d804      	bhi.n	8001680 <canardDecodeScalar+0x2d0>
 8001676:	f897 2020 	ldrb.w	r2, [r7, #32]
 800167a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800167c:	701a      	strb	r2, [r3, #0]
 800167e:	e019      	b.n	80016b4 <canardDecodeScalar+0x304>
        else if (bit_length <= 16)  { *((uint16_t*) out_value) = storage.u16; }
 8001680:	7dfb      	ldrb	r3, [r7, #23]
 8001682:	2b10      	cmp	r3, #16
 8001684:	d803      	bhi.n	800168e <canardDecodeScalar+0x2de>
 8001686:	8c3a      	ldrh	r2, [r7, #32]
 8001688:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800168a:	801a      	strh	r2, [r3, #0]
 800168c:	e012      	b.n	80016b4 <canardDecodeScalar+0x304>
        else if (bit_length <= 32)  { *((uint32_t*) out_value) = storage.u32; }
 800168e:	7dfb      	ldrb	r3, [r7, #23]
 8001690:	2b20      	cmp	r3, #32
 8001692:	d803      	bhi.n	800169c <canardDecodeScalar+0x2ec>
 8001694:	6a3a      	ldr	r2, [r7, #32]
 8001696:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	e00b      	b.n	80016b4 <canardDecodeScalar+0x304>
        else if (bit_length <= 64)  { *((uint64_t*) out_value) = storage.u64; }
 800169c:	7dfb      	ldrb	r3, [r7, #23]
 800169e:	2b40      	cmp	r3, #64	@ 0x40
 80016a0:	d805      	bhi.n	80016ae <canardDecodeScalar+0x2fe>
 80016a2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80016a6:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80016a8:	e9c1 2300 	strd	r2, r3, [r1]
 80016ac:	e002      	b.n	80016b4 <canardDecodeScalar+0x304>
        else
        {
            CANARD_ASSERT(false);
            return -CANARD_ERROR_INTERNAL;
 80016ae:	f06f 0308 	mvn.w	r3, #8
 80016b2:	e001      	b.n	80016b8 <canardDecodeScalar+0x308>
        }
    }

    CANARD_ASSERT(result <= bit_length);
    CANARD_ASSERT(result > 0);
    return result;
 80016b4:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
}
 80016b8:	4618      	mov	r0, r3
 80016ba:	3734      	adds	r7, #52	@ 0x34
 80016bc:	46bd      	mov	sp, r7
 80016be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080016c2 <canardReleaseRxTransferPayload>:
     */
    copyBitArray(&storage.bytes[0], 0, bit_length, (uint8_t*) destination, bit_offset);
}

void canardReleaseRxTransferPayload(CanardInstance* ins, CanardRxTransfer* transfer)
{
 80016c2:	b580      	push	{r7, lr}
 80016c4:	b084      	sub	sp, #16
 80016c6:	af00      	add	r7, sp, #0
 80016c8:	6078      	str	r0, [r7, #4]
 80016ca:	6039      	str	r1, [r7, #0]
    while (transfer->payload_middle != NULL)
 80016cc:	e00f      	b.n	80016ee <canardReleaseRxTransferPayload+0x2c>
    {
        CanardBufferBlock* const temp = transfer->payload_middle->next;
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	60fb      	str	r3, [r7, #12]
        freeBlock(&ins->allocator, transfer->payload_middle);
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	f103 020c 	add.w	r2, r3, #12
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	68db      	ldr	r3, [r3, #12]
 80016e0:	4619      	mov	r1, r3
 80016e2:	4610      	mov	r0, r2
 80016e4:	f000 ff5f 	bl	80025a6 <freeBlock>
        transfer->payload_middle = temp;
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	60da      	str	r2, [r3, #12]
    while (transfer->payload_middle != NULL)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	68db      	ldr	r3, [r3, #12]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1eb      	bne.n	80016ce <canardReleaseRxTransferPayload+0xc>
    }

    transfer->payload_middle = NULL;
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	2200      	movs	r2, #0
 80016fa:	60da      	str	r2, [r3, #12]
    transfer->payload_head = NULL;
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
    transfer->payload_tail = NULL;
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	2200      	movs	r2, #0
 8001706:	611a      	str	r2, [r3, #16]
    transfer->payload_len = 0;
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	2200      	movs	r2, #0
 800170c:	829a      	strh	r2, [r3, #20]
}
 800170e:	bf00      	nop
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}

08001716 <computeTransferIDForwardDistance>:

/*
 * Internal (static functions)
 */
CANARD_INTERNAL int16_t computeTransferIDForwardDistance(uint8_t a, uint8_t b)
{
 8001716:	b480      	push	{r7}
 8001718:	b085      	sub	sp, #20
 800171a:	af00      	add	r7, sp, #0
 800171c:	4603      	mov	r3, r0
 800171e:	460a      	mov	r2, r1
 8001720:	71fb      	strb	r3, [r7, #7]
 8001722:	4613      	mov	r3, r2
 8001724:	71bb      	strb	r3, [r7, #6]
    int16_t d = (int16_t)(a - b);
 8001726:	79fb      	ldrb	r3, [r7, #7]
 8001728:	b29a      	uxth	r2, r3
 800172a:	79bb      	ldrb	r3, [r7, #6]
 800172c:	b29b      	uxth	r3, r3
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	b29b      	uxth	r3, r3
 8001732:	81fb      	strh	r3, [r7, #14]
    if (d < 0)
 8001734:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001738:	2b00      	cmp	r3, #0
 800173a:	da03      	bge.n	8001744 <computeTransferIDForwardDistance+0x2e>
    {
        d = (int16_t)(d + (int16_t)(1U << TRANSFER_ID_BIT_LEN));
 800173c:	89fb      	ldrh	r3, [r7, #14]
 800173e:	3320      	adds	r3, #32
 8001740:	b29b      	uxth	r3, r3
 8001742:	81fb      	strh	r3, [r7, #14]
    }
    return d;
 8001744:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3714      	adds	r7, #20
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <incrementTransferID>:

CANARD_INTERNAL void incrementTransferID(uint8_t* transfer_id)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(transfer_id != NULL);

    (*transfer_id)++;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	781b      	ldrb	r3, [r3, #0]
 8001760:	3301      	adds	r3, #1
 8001762:	b2da      	uxtb	r2, r3
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	701a      	strb	r2, [r3, #0]
    if (*transfer_id >= 32)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	2b1f      	cmp	r3, #31
 800176e:	d902      	bls.n	8001776 <incrementTransferID+0x22>
    {
        *transfer_id = 0;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
    }
}
 8001776:	bf00      	nop
 8001778:	370c      	adds	r7, #12
 800177a:	46bd      	mov	sp, r7
 800177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001780:	4770      	bx	lr

08001782 <dlcToDataLength>:

CANARD_INTERNAL uint16_t dlcToDataLength(uint16_t dlc) {
 8001782:	b480      	push	{r7}
 8001784:	b083      	sub	sp, #12
 8001786:	af00      	add	r7, sp, #0
 8001788:	4603      	mov	r3, r0
 800178a:	80fb      	strh	r3, [r7, #6]
    /*
    Data Length Code      9  10  11  12  13  14  15
    Number of data bytes 12  16  20  24  32  48  64
    */
    if (dlc <= 8) {
 800178c:	88fb      	ldrh	r3, [r7, #6]
 800178e:	2b08      	cmp	r3, #8
 8001790:	d801      	bhi.n	8001796 <dlcToDataLength+0x14>
        return dlc;
 8001792:	88fb      	ldrh	r3, [r7, #6]
 8001794:	e01e      	b.n	80017d4 <dlcToDataLength+0x52>
    } else if (dlc == 9) {
 8001796:	88fb      	ldrh	r3, [r7, #6]
 8001798:	2b09      	cmp	r3, #9
 800179a:	d101      	bne.n	80017a0 <dlcToDataLength+0x1e>
        return 12;
 800179c:	230c      	movs	r3, #12
 800179e:	e019      	b.n	80017d4 <dlcToDataLength+0x52>
    } else if (dlc == 10) {
 80017a0:	88fb      	ldrh	r3, [r7, #6]
 80017a2:	2b0a      	cmp	r3, #10
 80017a4:	d101      	bne.n	80017aa <dlcToDataLength+0x28>
        return 16;
 80017a6:	2310      	movs	r3, #16
 80017a8:	e014      	b.n	80017d4 <dlcToDataLength+0x52>
    } else if (dlc == 11) {
 80017aa:	88fb      	ldrh	r3, [r7, #6]
 80017ac:	2b0b      	cmp	r3, #11
 80017ae:	d101      	bne.n	80017b4 <dlcToDataLength+0x32>
        return 20;
 80017b0:	2314      	movs	r3, #20
 80017b2:	e00f      	b.n	80017d4 <dlcToDataLength+0x52>
    } else if (dlc == 12) {
 80017b4:	88fb      	ldrh	r3, [r7, #6]
 80017b6:	2b0c      	cmp	r3, #12
 80017b8:	d101      	bne.n	80017be <dlcToDataLength+0x3c>
        return 24;
 80017ba:	2318      	movs	r3, #24
 80017bc:	e00a      	b.n	80017d4 <dlcToDataLength+0x52>
    } else if (dlc == 13) {
 80017be:	88fb      	ldrh	r3, [r7, #6]
 80017c0:	2b0d      	cmp	r3, #13
 80017c2:	d101      	bne.n	80017c8 <dlcToDataLength+0x46>
        return 32;
 80017c4:	2320      	movs	r3, #32
 80017c6:	e005      	b.n	80017d4 <dlcToDataLength+0x52>
    } else if (dlc == 14) {
 80017c8:	88fb      	ldrh	r3, [r7, #6]
 80017ca:	2b0e      	cmp	r3, #14
 80017cc:	d101      	bne.n	80017d2 <dlcToDataLength+0x50>
        return 48;
 80017ce:	2330      	movs	r3, #48	@ 0x30
 80017d0:	e000      	b.n	80017d4 <dlcToDataLength+0x52>
    }
    return 64;
 80017d2:	2340      	movs	r3, #64	@ 0x40
}
 80017d4:	4618      	mov	r0, r3
 80017d6:	370c      	adds	r7, #12
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <dataLengthToDlc>:

CANARD_INTERNAL uint16_t dataLengthToDlc(uint16_t data_length) {
 80017e0:	b480      	push	{r7}
 80017e2:	b083      	sub	sp, #12
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	80fb      	strh	r3, [r7, #6]
    if (data_length <= 8) {
 80017ea:	88fb      	ldrh	r3, [r7, #6]
 80017ec:	2b08      	cmp	r3, #8
 80017ee:	d801      	bhi.n	80017f4 <dataLengthToDlc+0x14>
        return data_length;
 80017f0:	88fb      	ldrh	r3, [r7, #6]
 80017f2:	e01e      	b.n	8001832 <dataLengthToDlc+0x52>
    } else if (data_length <= 12) {
 80017f4:	88fb      	ldrh	r3, [r7, #6]
 80017f6:	2b0c      	cmp	r3, #12
 80017f8:	d801      	bhi.n	80017fe <dataLengthToDlc+0x1e>
        return 9;
 80017fa:	2309      	movs	r3, #9
 80017fc:	e019      	b.n	8001832 <dataLengthToDlc+0x52>
    } else if (data_length <= 16) {
 80017fe:	88fb      	ldrh	r3, [r7, #6]
 8001800:	2b10      	cmp	r3, #16
 8001802:	d801      	bhi.n	8001808 <dataLengthToDlc+0x28>
        return 10;
 8001804:	230a      	movs	r3, #10
 8001806:	e014      	b.n	8001832 <dataLengthToDlc+0x52>
    } else if (data_length <= 20) {
 8001808:	88fb      	ldrh	r3, [r7, #6]
 800180a:	2b14      	cmp	r3, #20
 800180c:	d801      	bhi.n	8001812 <dataLengthToDlc+0x32>
        return 11;
 800180e:	230b      	movs	r3, #11
 8001810:	e00f      	b.n	8001832 <dataLengthToDlc+0x52>
    } else if (data_length <= 24) {
 8001812:	88fb      	ldrh	r3, [r7, #6]
 8001814:	2b18      	cmp	r3, #24
 8001816:	d801      	bhi.n	800181c <dataLengthToDlc+0x3c>
        return 12;
 8001818:	230c      	movs	r3, #12
 800181a:	e00a      	b.n	8001832 <dataLengthToDlc+0x52>
    } else if (data_length <= 32) {
 800181c:	88fb      	ldrh	r3, [r7, #6]
 800181e:	2b20      	cmp	r3, #32
 8001820:	d801      	bhi.n	8001826 <dataLengthToDlc+0x46>
        return 13;
 8001822:	230d      	movs	r3, #13
 8001824:	e005      	b.n	8001832 <dataLengthToDlc+0x52>
    } else if (data_length <= 48) {
 8001826:	88fb      	ldrh	r3, [r7, #6]
 8001828:	2b30      	cmp	r3, #48	@ 0x30
 800182a:	d801      	bhi.n	8001830 <dataLengthToDlc+0x50>
        return 14;
 800182c:	230e      	movs	r3, #14
 800182e:	e000      	b.n	8001832 <dataLengthToDlc+0x52>
    }
    return 15;
 8001830:	230f      	movs	r3, #15
}
 8001832:	4618      	mov	r0, r3
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <enqueueTxFrames>:
CANARD_INTERNAL int16_t enqueueTxFrames(CanardInstance* ins,
                                        uint32_t can_id,
                                        uint16_t crc,
                                        CanardTxTransfer* transfer
)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b08c      	sub	sp, #48	@ 0x30
 8001842:	af00      	add	r7, sp, #0
 8001844:	60f8      	str	r0, [r7, #12]
 8001846:	60b9      	str	r1, [r7, #8]
 8001848:	603b      	str	r3, [r7, #0]
 800184a:	4613      	mov	r3, r2
 800184c:	80fb      	strh	r3, [r7, #6]
    CANARD_ASSERT(ins != NULL);
    CANARD_ASSERT((can_id & CANARD_CAN_EXT_ID_MASK) == can_id);            // Flags must be cleared

    if (transfer->inout_transfer_id == NULL)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	695b      	ldr	r3, [r3, #20]
 8001852:	2b00      	cmp	r3, #0
 8001854:	d102      	bne.n	800185c <enqueueTxFrames+0x1e>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 8001856:	f06f 0301 	mvn.w	r3, #1
 800185a:	e11c      	b.n	8001a96 <enqueueTxFrames+0x258>
    }

    if ((transfer->payload_len > 0) && (transfer->payload == NULL))
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	8c1b      	ldrh	r3, [r3, #32]
 8001860:	2b00      	cmp	r3, #0
 8001862:	d006      	beq.n	8001872 <enqueueTxFrames+0x34>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d102      	bne.n	8001872 <enqueueTxFrames+0x34>
    {
        return -CANARD_ERROR_INVALID_ARGUMENT;
 800186c:	f06f 0301 	mvn.w	r3, #1
 8001870:	e111      	b.n	8001a96 <enqueueTxFrames+0x258>
    }

    int16_t result = 0;
 8001872:	2300      	movs	r3, #0
 8001874:	85fb      	strh	r3, [r7, #46]	@ 0x2e
#if CANARD_ENABLE_CANFD
    uint8_t frame_max_data_len = transfer->canfd ? CANARD_CANFD_FRAME_MAX_DATA_LEN:CANARD_CAN_FRAME_MAX_DATA_LEN;
#else
    uint8_t frame_max_data_len = CANARD_CAN_FRAME_MAX_DATA_LEN;
 8001876:	2308      	movs	r3, #8
 8001878:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
#endif
    if (transfer->payload_len < frame_max_data_len)                        // Single frame transfer
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	8c1a      	ldrh	r2, [r3, #32]
 8001880:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001884:	b29b      	uxth	r3, r3
 8001886:	429a      	cmp	r2, r3
 8001888:	d24b      	bcs.n	8001922 <enqueueTxFrames+0xe4>
    {
        CanardTxQueueItem* queue_item = createTxItem(&ins->allocator);
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	330c      	adds	r3, #12
 800188e:	4618      	mov	r0, r3
 8001890:	f000 f94a 	bl	8001b28 <createTxItem>
 8001894:	6178      	str	r0, [r7, #20]
        if (queue_item == NULL)
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d102      	bne.n	80018a2 <enqueueTxFrames+0x64>
        {
            return -CANARD_ERROR_OUT_OF_MEMORY;
 800189c:	f06f 0302 	mvn.w	r3, #2
 80018a0:	e0f9      	b.n	8001a96 <enqueueTxFrames+0x258>
        }

        memcpy(queue_item->frame.data, transfer->payload, transfer->payload_len);
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	f103 0008 	add.w	r0, r3, #8
 80018a8:	683b      	ldr	r3, [r7, #0]
 80018aa:	69d9      	ldr	r1, [r3, #28]
 80018ac:	683b      	ldr	r3, [r7, #0]
 80018ae:	8c1b      	ldrh	r3, [r3, #32]
 80018b0:	461a      	mov	r2, r3
 80018b2:	f00b fc8d 	bl	800d1d0 <memcpy>

        transfer->payload_len = dlcToDataLength(dataLengthToDlc(transfer->payload_len+1))-1;
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	8c1b      	ldrh	r3, [r3, #32]
 80018ba:	3301      	adds	r3, #1
 80018bc:	b29b      	uxth	r3, r3
 80018be:	4618      	mov	r0, r3
 80018c0:	f7ff ff8e 	bl	80017e0 <dataLengthToDlc>
 80018c4:	4603      	mov	r3, r0
 80018c6:	4618      	mov	r0, r3
 80018c8:	f7ff ff5b 	bl	8001782 <dlcToDataLength>
 80018cc:	4603      	mov	r3, r0
 80018ce:	3b01      	subs	r3, #1
 80018d0:	b29a      	uxth	r2, r3
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	841a      	strh	r2, [r3, #32]
        queue_item->frame.data_len = (uint8_t)(transfer->payload_len + 1);
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	8c1b      	ldrh	r3, [r3, #32]
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	3301      	adds	r3, #1
 80018de:	b2da      	uxtb	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	741a      	strb	r2, [r3, #16]
        queue_item->frame.data[transfer->payload_len] = (uint8_t)(0xC0U | (*transfer->inout_transfer_id & 31U));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	695b      	ldr	r3, [r3, #20]
 80018e8:	781b      	ldrb	r3, [r3, #0]
 80018ea:	f003 031f 	and.w	r3, r3, #31
 80018ee:	b2db      	uxtb	r3, r3
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	8c12      	ldrh	r2, [r2, #32]
 80018f4:	4611      	mov	r1, r2
 80018f6:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	440b      	add	r3, r1
 8001900:	721a      	strb	r2, [r3, #8]
        queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 8001902:	68bb      	ldr	r3, [r7, #8]
 8001904:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001908:	697b      	ldr	r3, [r7, #20]
 800190a:	605a      	str	r2, [r3, #4]
        queue_item->frame.iface_mask = transfer->iface_mask;
#endif
#if CANARD_ENABLE_CANFD
        queue_item->frame.canfd = transfer->canfd;
#endif
        pushTxQueue(ins, queue_item);
 800190c:	6979      	ldr	r1, [r7, #20]
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f000 f8c5 	bl	8001a9e <pushTxQueue>
        result++;
 8001914:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001918:	b29b      	uxth	r3, r3
 800191a:	3301      	adds	r3, #1
 800191c:	b29b      	uxth	r3, r3
 800191e:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8001920:	e0b7      	b.n	8001a92 <enqueueTxFrames+0x254>
    }
    else                                                                    // Multi frame transfer
    {
        uint16_t data_index = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	85bb      	strh	r3, [r7, #44]	@ 0x2c
        uint8_t toggle = 0;
 8001926:	2300      	movs	r3, #0
 8001928:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        uint8_t sot_eot = 0x80;
 800192c:	2380      	movs	r3, #128	@ 0x80
 800192e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
          see if we are going to be able to allocate enough blocks for
          this transfer. If not then stop now, otherwise we will end
          up doing a partial (corrupt) transfer which will just make
          the situation worse as it will waste bus bandwidth
         */
        const uint16_t total_bytes = transfer->payload_len + 2; // including CRC
 8001932:	683b      	ldr	r3, [r7, #0]
 8001934:	8c1b      	ldrh	r3, [r3, #32]
 8001936:	3302      	adds	r3, #2
 8001938:	84bb      	strh	r3, [r7, #36]	@ 0x24
        const uint8_t bytes_per_frame = frame_max_data_len-1; // sot/eot byte consumes one byte
 800193a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800193e:	3b01      	subs	r3, #1
 8001940:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        const uint16_t frames_needed = (total_bytes + (bytes_per_frame-1)) / bytes_per_frame;
 8001944:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001946:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800194a:	3b01      	subs	r3, #1
 800194c:	441a      	add	r2, r3
 800194e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001952:	fb92 f3f3 	sdiv	r3, r2, r3
 8001956:	843b      	strh	r3, [r7, #32]
        const uint16_t blocks_available = ins->allocator.statistics.capacity_blocks - ins->allocator.statistics.current_usage_blocks;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	8a9a      	ldrh	r2, [r3, #20]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	8adb      	ldrh	r3, [r3, #22]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	83fb      	strh	r3, [r7, #30]
        if (blocks_available < frames_needed) {
 8001964:	8bfa      	ldrh	r2, [r7, #30]
 8001966:	8c3b      	ldrh	r3, [r7, #32]
 8001968:	429a      	cmp	r2, r3
 800196a:	d202      	bcs.n	8001972 <enqueueTxFrames+0x134>
            return -CANARD_ERROR_OUT_OF_MEMORY;
 800196c:	f06f 0302 	mvn.w	r3, #2
 8001970:	e091      	b.n	8001a96 <enqueueTxFrames+0x258>
        }

        CanardTxQueueItem* queue_item = NULL;
 8001972:	2300      	movs	r3, #0
 8001974:	61bb      	str	r3, [r7, #24]

        while (transfer->payload_len - data_index != 0)
 8001976:	e086      	b.n	8001a86 <enqueueTxFrames+0x248>
        {
            queue_item = createTxItem(&ins->allocator);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	330c      	adds	r3, #12
 800197c:	4618      	mov	r0, r3
 800197e:	f000 f8d3 	bl	8001b28 <createTxItem>
 8001982:	61b8      	str	r0, [r7, #24]
            if (queue_item == NULL)
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	2b00      	cmp	r3, #0
 8001988:	d102      	bne.n	8001990 <enqueueTxFrames+0x152>
            {
                CANARD_ASSERT(false);
                return -CANARD_ERROR_OUT_OF_MEMORY;
 800198a:	f06f 0302 	mvn.w	r3, #2
 800198e:	e082      	b.n	8001a96 <enqueueTxFrames+0x258>
            }

            uint16_t i = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	853b      	strh	r3, [r7, #40]	@ 0x28
            if (data_index == 0)
 8001994:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8001996:	2b00      	cmp	r3, #0
 8001998:	d10c      	bne.n	80019b4 <enqueueTxFrames+0x176>
            {
                // add crc
                queue_item->frame.data[0] = (uint8_t) (crc);
 800199a:	88fb      	ldrh	r3, [r7, #6]
 800199c:	b2da      	uxtb	r2, r3
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	721a      	strb	r2, [r3, #8]
                queue_item->frame.data[1] = (uint8_t) (crc >> 8U);
 80019a2:	88fb      	ldrh	r3, [r7, #6]
 80019a4:	0a1b      	lsrs	r3, r3, #8
 80019a6:	b29b      	uxth	r3, r3
 80019a8:	b2da      	uxtb	r2, r3
 80019aa:	69bb      	ldr	r3, [r7, #24]
 80019ac:	725a      	strb	r2, [r3, #9]
                i = 2;
 80019ae:	2302      	movs	r3, #2
 80019b0:	853b      	strh	r3, [r7, #40]	@ 0x28
 80019b2:	e012      	b.n	80019da <enqueueTxFrames+0x19c>
            }
            else
            {
                i = 0;
 80019b4:	2300      	movs	r3, #0
 80019b6:	853b      	strh	r3, [r7, #40]	@ 0x28
            }

            for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 80019b8:	e00f      	b.n	80019da <enqueueTxFrames+0x19c>
            {
                queue_item->frame.data[i] = transfer->payload[data_index];
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	69da      	ldr	r2, [r3, #28]
 80019be:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80019c0:	441a      	add	r2, r3
 80019c2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80019c4:	7811      	ldrb	r1, [r2, #0]
 80019c6:	69ba      	ldr	r2, [r7, #24]
 80019c8:	4413      	add	r3, r2
 80019ca:	460a      	mov	r2, r1
 80019cc:	721a      	strb	r2, [r3, #8]
            for (; i < (frame_max_data_len - 1) && data_index < transfer->payload_len; i++, data_index++)
 80019ce:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80019d0:	3301      	adds	r3, #1
 80019d2:	853b      	strh	r3, [r7, #40]	@ 0x28
 80019d4:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 80019d6:	3301      	adds	r3, #1
 80019d8:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80019da:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 80019dc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80019e0:	3b01      	subs	r3, #1
 80019e2:	429a      	cmp	r2, r3
 80019e4:	da04      	bge.n	80019f0 <enqueueTxFrames+0x1b2>
 80019e6:	683b      	ldr	r3, [r7, #0]
 80019e8:	8c1b      	ldrh	r3, [r3, #32]
 80019ea:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d3e4      	bcc.n	80019ba <enqueueTxFrames+0x17c>
            }
            // tail byte
            sot_eot = (data_index == transfer->payload_len) ? (uint8_t)0x40 : sot_eot;
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	8c1b      	ldrh	r3, [r3, #32]
 80019f4:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d002      	beq.n	8001a00 <enqueueTxFrames+0x1c2>
 80019fa:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80019fe:	e000      	b.n	8001a02 <enqueueTxFrames+0x1c4>
 8001a00:	2340      	movs	r3, #64	@ 0x40
 8001a02:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
            
            i = dlcToDataLength(dataLengthToDlc(i+1))-1;
 8001a06:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001a08:	3301      	adds	r3, #1
 8001a0a:	b29b      	uxth	r3, r3
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	f7ff fee7 	bl	80017e0 <dataLengthToDlc>
 8001a12:	4603      	mov	r3, r0
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff feb4 	bl	8001782 <dlcToDataLength>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	853b      	strh	r3, [r7, #40]	@ 0x28
            queue_item->frame.data[i] = (uint8_t)(sot_eot | ((uint32_t)toggle << 5U) | ((uint32_t)*transfer->inout_transfer_id & 31U));
 8001a20:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001a24:	015b      	lsls	r3, r3, #5
 8001a26:	b2da      	uxtb	r2, r3
 8001a28:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	b2d9      	uxtb	r1, r3
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	695b      	ldr	r3, [r3, #20]
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	f003 031f 	and.w	r3, r3, #31
 8001a3a:	b2da      	uxtb	r2, r3
 8001a3c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	b2d1      	uxtb	r1, r2
 8001a42:	69ba      	ldr	r2, [r7, #24]
 8001a44:	4413      	add	r3, r2
 8001a46:	460a      	mov	r2, r1
 8001a48:	721a      	strb	r2, [r3, #8]
            queue_item->frame.id = can_id | CANARD_CAN_FRAME_EFF;
 8001a4a:	68bb      	ldr	r3, [r7, #8]
 8001a4c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	605a      	str	r2, [r3, #4]
            queue_item->frame.data_len = (uint8_t)(i + 1);
 8001a54:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	3301      	adds	r3, #1
 8001a5a:	b2da      	uxtb	r2, r3
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	741a      	strb	r2, [r3, #16]
            queue_item->frame.iface_mask = transfer->iface_mask;
#endif
#if CANARD_ENABLE_CANFD
            queue_item->frame.canfd = transfer->canfd;
#endif
            pushTxQueue(ins, queue_item);
 8001a60:	69b9      	ldr	r1, [r7, #24]
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f000 f81b 	bl	8001a9e <pushTxQueue>

            result++;
 8001a68:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	3301      	adds	r3, #1
 8001a70:	b29b      	uxth	r3, r3
 8001a72:	85fb      	strh	r3, [r7, #46]	@ 0x2e
            toggle ^= 1;
 8001a74:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001a78:	f083 0301 	eor.w	r3, r3, #1
 8001a7c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            sot_eot = 0;
 8001a80:	2300      	movs	r3, #0
 8001a82:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        while (transfer->payload_len - data_index != 0)
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	8c1b      	ldrh	r3, [r3, #32]
 8001a8a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	f47f af73 	bne.w	8001978 <enqueueTxFrames+0x13a>
        }
    }

    return result;
 8001a92:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
}
 8001a96:	4618      	mov	r0, r3
 8001a98:	3730      	adds	r7, #48	@ 0x30
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bd80      	pop	{r7, pc}

08001a9e <pushTxQueue>:

/**
 * Puts frame on on the TX queue. Higher priority placed first
 */
CANARD_INTERNAL void pushTxQueue(CanardInstance* ins, CanardTxQueueItem* item)
{
 8001a9e:	b580      	push	{r7, lr}
 8001aa0:	b084      	sub	sp, #16
 8001aa2:	af00      	add	r7, sp, #0
 8001aa4:	6078      	str	r0, [r7, #4]
 8001aa6:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(ins != NULL);
    CANARD_ASSERT(item->frame.data_len > 0);       // UAVCAN doesn't allow zero-payload frames

    if (ins->tx_queue == NULL)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d103      	bne.n	8001ab8 <pushTxQueue+0x1a>
    {
        ins->tx_queue = item;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	625a      	str	r2, [r3, #36]	@ 0x24
        return;
 8001ab6:	e034      	b.n	8001b22 <pushTxQueue+0x84>
    }

    CanardTxQueueItem* queue = ins->tx_queue;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001abc:	60fb      	str	r3, [r7, #12]
    CanardTxQueueItem* previous = ins->tx_queue;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ac2:	60bb      	str	r3, [r7, #8]

    while (queue != NULL)
 8001ac4:	e02a      	b.n	8001b1c <pushTxQueue+0x7e>
    {
        if (isPriorityHigher(queue->frame.id, item->frame.id)) // lower number wins
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	4619      	mov	r1, r3
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	f000 f840 	bl	8001b56 <isPriorityHigher>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d012      	beq.n	8001b02 <pushTxQueue+0x64>
        {
            if (queue == ins->tx_queue)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ae0:	68fa      	ldr	r2, [r7, #12]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d106      	bne.n	8001af4 <pushTxQueue+0x56>
            {
                item->next = queue;
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	601a      	str	r2, [r3, #0]
                ins->tx_queue = item;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	625a      	str	r2, [r3, #36]	@ 0x24
            else
            {
                previous->next = item;
                item->next = queue;
            }
            return;
 8001af2:	e016      	b.n	8001b22 <pushTxQueue+0x84>
                previous->next = item;
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	601a      	str	r2, [r3, #0]
                item->next = queue;
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	68fa      	ldr	r2, [r7, #12]
 8001afe:	601a      	str	r2, [r3, #0]
            return;
 8001b00:	e00f      	b.n	8001b22 <pushTxQueue+0x84>
        }
        else
        {
            if (queue->next == NULL)
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d103      	bne.n	8001b12 <pushTxQueue+0x74>
            {
                queue->next = item;
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	683a      	ldr	r2, [r7, #0]
 8001b0e:	601a      	str	r2, [r3, #0]
                return;
 8001b10:	e007      	b.n	8001b22 <pushTxQueue+0x84>
            }
            else
            {
                previous = queue;
 8001b12:	68fb      	ldr	r3, [r7, #12]
 8001b14:	60bb      	str	r3, [r7, #8]
                queue = queue->next;
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	60fb      	str	r3, [r7, #12]
    while (queue != NULL)
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d1d1      	bne.n	8001ac6 <pushTxQueue+0x28>
            }
        }
    }
}
 8001b22:	3710      	adds	r7, #16
 8001b24:	46bd      	mov	sp, r7
 8001b26:	bd80      	pop	{r7, pc}

08001b28 <createTxItem>:

/**
 * Creates new tx queue item from allocator
 */
CANARD_INTERNAL CanardTxQueueItem* createTxItem(CanardPoolAllocator* allocator)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b084      	sub	sp, #16
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	6078      	str	r0, [r7, #4]
    CanardTxQueueItem* item = (CanardTxQueueItem*) allocateBlock(allocator);
 8001b30:	6878      	ldr	r0, [r7, #4]
 8001b32:	f000 fd0f 	bl	8002554 <allocateBlock>
 8001b36:	60f8      	str	r0, [r7, #12]
    if (item == NULL)
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d101      	bne.n	8001b42 <createTxItem+0x1a>
    {
        return NULL;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	e005      	b.n	8001b4e <createTxItem+0x26>
    }
    memset(item, 0, sizeof(*item));
 8001b42:	2214      	movs	r2, #20
 8001b44:	2100      	movs	r1, #0
 8001b46:	68f8      	ldr	r0, [r7, #12]
 8001b48:	f00b fafe 	bl	800d148 <memset>
    return item;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
}
 8001b4e:	4618      	mov	r0, r3
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}

08001b56 <isPriorityHigher>:

/**
 * Returns true if priority of rhs is higher than id
 */
CANARD_INTERNAL bool isPriorityHigher(uint32_t rhs, uint32_t id)
{
 8001b56:	b480      	push	{r7}
 8001b58:	b089      	sub	sp, #36	@ 0x24
 8001b5a:	af00      	add	r7, sp, #0
 8001b5c:	6078      	str	r0, [r7, #4]
 8001b5e:	6039      	str	r1, [r7, #0]
    const uint32_t clean_id = id & CANARD_CAN_EXT_ID_MASK;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8001b66:	61fb      	str	r3, [r7, #28]
    const uint32_t rhs_clean_id = rhs & CANARD_CAN_EXT_ID_MASK;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8001b6e:	61bb      	str	r3, [r7, #24]

    /*
     * STD vs EXT - if 11 most significant bits are the same, EXT loses.
     */
    const bool ext = (id & CANARD_CAN_FRAME_EFF) != 0;
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	0fdb      	lsrs	r3, r3, #31
 8001b74:	75fb      	strb	r3, [r7, #23]
    const bool rhs_ext = (rhs & CANARD_CAN_FRAME_EFF) != 0;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	0fdb      	lsrs	r3, r3, #31
 8001b7a:	75bb      	strb	r3, [r7, #22]
    if (ext != rhs_ext)
 8001b7c:	7dfa      	ldrb	r2, [r7, #23]
 8001b7e:	7dbb      	ldrb	r3, [r7, #22]
 8001b80:	429a      	cmp	r2, r3
 8001b82:	d01d      	beq.n	8001bc0 <isPriorityHigher+0x6a>
    {
        uint32_t arb11 = ext ? (clean_id >> 18U) : clean_id;
 8001b84:	7dfb      	ldrb	r3, [r7, #23]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d002      	beq.n	8001b90 <isPriorityHigher+0x3a>
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	0c9b      	lsrs	r3, r3, #18
 8001b8e:	e000      	b.n	8001b92 <isPriorityHigher+0x3c>
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	613b      	str	r3, [r7, #16]
        uint32_t rhs_arb11 = rhs_ext ? (rhs_clean_id >> 18U) : rhs_clean_id;
 8001b94:	7dbb      	ldrb	r3, [r7, #22]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d002      	beq.n	8001ba0 <isPriorityHigher+0x4a>
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	0c9b      	lsrs	r3, r3, #18
 8001b9e:	e000      	b.n	8001ba2 <isPriorityHigher+0x4c>
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	60fb      	str	r3, [r7, #12]
        if (arb11 != rhs_arb11)
 8001ba4:	693a      	ldr	r2, [r7, #16]
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d007      	beq.n	8001bbc <isPriorityHigher+0x66>
        {
            return arb11 < rhs_arb11;
 8001bac:	693a      	ldr	r2, [r7, #16]
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	bf34      	ite	cc
 8001bb4:	2301      	movcc	r3, #1
 8001bb6:	2300      	movcs	r3, #0
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	e022      	b.n	8001c02 <isPriorityHigher+0xac>
        }
        else
        {
            return rhs_ext;
 8001bbc:	7dbb      	ldrb	r3, [r7, #22]
 8001bbe:	e020      	b.n	8001c02 <isPriorityHigher+0xac>
    }

    /*
     * RTR vs Data frame - if frame identifiers and frame types are the same, RTR loses.
     */
    const bool rtr = (id & CANARD_CAN_FRAME_RTR) != 0;
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	bf14      	ite	ne
 8001bca:	2301      	movne	r3, #1
 8001bcc:	2300      	moveq	r3, #0
 8001bce:	757b      	strb	r3, [r7, #21]
    const bool rhs_rtr = (rhs & CANARD_CAN_FRAME_RTR) != 0;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	bf14      	ite	ne
 8001bda:	2301      	movne	r3, #1
 8001bdc:	2300      	moveq	r3, #0
 8001bde:	753b      	strb	r3, [r7, #20]
    if (clean_id == rhs_clean_id && rtr != rhs_rtr)
 8001be0:	69fa      	ldr	r2, [r7, #28]
 8001be2:	69bb      	ldr	r3, [r7, #24]
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d105      	bne.n	8001bf4 <isPriorityHigher+0x9e>
 8001be8:	7d7a      	ldrb	r2, [r7, #21]
 8001bea:	7d3b      	ldrb	r3, [r7, #20]
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d001      	beq.n	8001bf4 <isPriorityHigher+0x9e>
    {
        return rhs_rtr;
 8001bf0:	7d3b      	ldrb	r3, [r7, #20]
 8001bf2:	e006      	b.n	8001c02 <isPriorityHigher+0xac>
    }

    /*
     * Plain ID arbitration - greater value loses.
     */
    return clean_id < rhs_clean_id;
 8001bf4:	69fa      	ldr	r2, [r7, #28]
 8001bf6:	69bb      	ldr	r3, [r7, #24]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	bf34      	ite	cc
 8001bfc:	2301      	movcc	r3, #1
 8001bfe:	2300      	movcs	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3724      	adds	r7, #36	@ 0x24
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr

08001c0e <prepareForNextTransfer>:

/**
 * preps the rx state for the next transfer. does not delete the state
 */
CANARD_INTERNAL void prepareForNextTransfer(CanardRxState* state)
{
 8001c0e:	b480      	push	{r7}
 8001c10:	b083      	sub	sp, #12
 8001c12:	af00      	add	r7, sp, #0
 8001c14:	6078      	str	r0, [r7, #4]
    CANARD_ASSERT(state->buffer_blocks == CANARD_BUFFER_IDX_NONE);
    state->transfer_id++;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	7ddb      	ldrb	r3, [r3, #23]
 8001c1a:	f3c3 0384 	ubfx	r3, r3, #2, #5
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	3301      	adds	r3, #1
 8001c22:	f003 031f 	and.w	r3, r3, #31
 8001c26:	b2d9      	uxtb	r1, r3
 8001c28:	687a      	ldr	r2, [r7, #4]
 8001c2a:	7dd3      	ldrb	r3, [r2, #23]
 8001c2c:	f361 0386 	bfi	r3, r1, #2, #5
 8001c30:	75d3      	strb	r3, [r2, #23]
    state->payload_len = 0;
 8001c32:	687a      	ldr	r2, [r7, #4]
 8001c34:	8ad3      	ldrh	r3, [r2, #22]
 8001c36:	f36f 0309 	bfc	r3, #0, #10
 8001c3a:	82d3      	strh	r3, [r2, #22]
    state->next_toggle = 0;
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	7dd3      	ldrb	r3, [r2, #23]
 8001c40:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001c44:	75d3      	strb	r3, [r2, #23]
}
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c50:	4770      	bx	lr

08001c52 <extractDataType>:

/**
 * returns data type from id
 */
uint16_t extractDataType(uint32_t id)
{
 8001c52:	b580      	push	{r7, lr}
 8001c54:	b084      	sub	sp, #16
 8001c56:	af00      	add	r7, sp, #0
 8001c58:	6078      	str	r0, [r7, #4]
    if (extractTransferType(id) == CanardTransferTypeBroadcast)
 8001c5a:	6878      	ldr	r0, [r7, #4]
 8001c5c:	f000 f819 	bl	8001c92 <extractTransferType>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b02      	cmp	r3, #2
 8001c64:	d10e      	bne.n	8001c84 <extractDataType+0x32>
    {
        uint16_t dtid = MSG_TYPE_FROM_ID(id);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	0a1b      	lsrs	r3, r3, #8
 8001c6a:	81fb      	strh	r3, [r7, #14]
        if (SOURCE_ID_FROM_ID(id) == CANARD_BROADCAST_NODE_ID)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	b2db      	uxtb	r3, r3
 8001c70:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d103      	bne.n	8001c80 <extractDataType+0x2e>
        {
            dtid &= (1U << ANON_MSG_DATA_TYPE_ID_BIT_LEN) - 1U;
 8001c78:	89fb      	ldrh	r3, [r7, #14]
 8001c7a:	f003 0303 	and.w	r3, r3, #3
 8001c7e:	81fb      	strh	r3, [r7, #14]
        }
        return dtid;
 8001c80:	89fb      	ldrh	r3, [r7, #14]
 8001c82:	e002      	b.n	8001c8a <extractDataType+0x38>
    }
    else
    {
        return (uint16_t) SRV_TYPE_FROM_ID(id);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	0c1b      	lsrs	r3, r3, #16
 8001c88:	b2db      	uxtb	r3, r3
    }
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}

08001c92 <extractTransferType>:

/**
 * returns transfer type from id
 */
CanardTransferType extractTransferType(uint32_t id)
{
 8001c92:	b480      	push	{r7}
 8001c94:	b085      	sub	sp, #20
 8001c96:	af00      	add	r7, sp, #0
 8001c98:	6078      	str	r0, [r7, #4]
    const bool is_service = SERVICE_NOT_MSG_FROM_ID(id);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	09db      	lsrs	r3, r3, #7
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	bf14      	ite	ne
 8001ca6:	2301      	movne	r3, #1
 8001ca8:	2300      	moveq	r3, #0
 8001caa:	73fb      	strb	r3, [r7, #15]
    if (!is_service)
 8001cac:	7bfb      	ldrb	r3, [r7, #15]
 8001cae:	f083 0301 	eor.w	r3, r3, #1
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <extractTransferType+0x2a>
    {
        return CanardTransferTypeBroadcast;
 8001cb8:	2302      	movs	r3, #2
 8001cba:	e008      	b.n	8001cce <extractTransferType+0x3c>
    }
    else if (REQUEST_NOT_RESPONSE_FROM_ID(id) == 1)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	0bdb      	lsrs	r3, r3, #15
 8001cc0:	f003 0301 	and.w	r3, r3, #1
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d001      	beq.n	8001ccc <extractTransferType+0x3a>
    {
        return CanardTransferTypeRequest;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e000      	b.n	8001cce <extractTransferType+0x3c>
    }
    else
    {
        return CanardTransferTypeResponse;
 8001ccc:	2300      	movs	r3, #0
    }
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3714      	adds	r7, #20
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <traverseRxStates>:
/**
 * Traverses the list of CanardRxState's and returns a pointer to the CanardRxState
 * with either the Id or a new one at the end
 */
CANARD_INTERNAL CanardRxState* traverseRxStates(CanardInstance* ins, uint32_t transfer_descriptor)
{
 8001cda:	b580      	push	{r7, lr}
 8001cdc:	b084      	sub	sp, #16
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	6039      	str	r1, [r7, #0]
    CanardRxState* states = ins->rx_states;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a1b      	ldr	r3, [r3, #32]
 8001ce8:	60fb      	str	r3, [r7, #12]

    if (states == NULL) // initialize CanardRxStates
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d110      	bne.n	8001d12 <traverseRxStates+0x38>
    {
        states = createRxState(&ins->allocator, transfer_descriptor);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	330c      	adds	r3, #12
 8001cf4:	6839      	ldr	r1, [r7, #0]
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 f865 	bl	8001dc6 <createRxState>
 8001cfc:	60f8      	str	r0, [r7, #12]

        if(states == NULL)
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d101      	bne.n	8001d08 <traverseRxStates+0x2e>
        {
            return NULL;
 8001d04:	2300      	movs	r3, #0
 8001d06:	e013      	b.n	8001d30 <traverseRxStates+0x56>
        }

        ins->rx_states = states;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	68fa      	ldr	r2, [r7, #12]
 8001d0c:	621a      	str	r2, [r3, #32]
        return states;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
 8001d10:	e00e      	b.n	8001d30 <traverseRxStates+0x56>
    }

    states = findRxState(ins, transfer_descriptor);
 8001d12:	6839      	ldr	r1, [r7, #0]
 8001d14:	6878      	ldr	r0, [r7, #4]
 8001d16:	f000 f80f 	bl	8001d38 <findRxState>
 8001d1a:	60f8      	str	r0, [r7, #12]
    if (states != NULL)
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <traverseRxStates+0x4c>
    {
        return states;
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	e004      	b.n	8001d30 <traverseRxStates+0x56>
    }
    else
    {
        return prependRxState(ins, transfer_descriptor);
 8001d26:	6839      	ldr	r1, [r7, #0]
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f000 f827 	bl	8001d7c <prependRxState>
 8001d2e:	4603      	mov	r3, r0
    }
}
 8001d30:	4618      	mov	r0, r3
 8001d32:	3710      	adds	r7, #16
 8001d34:	46bd      	mov	sp, r7
 8001d36:	bd80      	pop	{r7, pc}

08001d38 <findRxState>:

/**
 * returns pointer to the rx state of transfer descriptor or null if not found
 */
CANARD_INTERNAL CanardRxState* findRxState(CanardInstance *ins, uint32_t transfer_descriptor)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	b084      	sub	sp, #16
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
 8001d40:	6039      	str	r1, [r7, #0]
    CanardRxState *state = ins->rx_states;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	60fb      	str	r3, [r7, #12]
    while (state != NULL)
 8001d48:	e010      	b.n	8001d6c <findRxState+0x34>
    {
        if (state->dtid_tt_snid_dnid == transfer_descriptor)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	691b      	ldr	r3, [r3, #16]
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	429a      	cmp	r2, r3
 8001d52:	d101      	bne.n	8001d58 <findRxState+0x20>
        {
            return state;
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	e00d      	b.n	8001d74 <findRxState+0x3c>
        }
        state = canardRxFromIdx(&ins->allocator, state->next);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	f103 020c 	add.w	r2, r3, #12
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4619      	mov	r1, r3
 8001d64:	4610      	mov	r0, r2
 8001d66:	f7fe fe99 	bl	8000a9c <canardRxFromIdx>
 8001d6a:	60f8      	str	r0, [r7, #12]
    while (state != NULL)
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d1eb      	bne.n	8001d4a <findRxState+0x12>
    }
    return NULL;
 8001d72:	2300      	movs	r3, #0
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <prependRxState>:

/**
 * prepends rx state to the canard instance rx_states
 */
CANARD_INTERNAL CanardRxState* prependRxState(CanardInstance* ins, uint32_t transfer_descriptor)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
    CanardRxState* state = createRxState(&ins->allocator, transfer_descriptor);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	330c      	adds	r3, #12
 8001d8a:	6839      	ldr	r1, [r7, #0]
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	f000 f81a 	bl	8001dc6 <createRxState>
 8001d92:	60f8      	str	r0, [r7, #12]

    if(state == NULL)
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d101      	bne.n	8001d9e <prependRxState+0x22>
    {
        return NULL;
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	e00f      	b.n	8001dbe <prependRxState+0x42>
    }

    state->next = canardRxToIdx(&ins->allocator, ins->rx_states);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	f103 020c 	add.w	r2, r3, #12
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a1b      	ldr	r3, [r3, #32]
 8001da8:	4619      	mov	r1, r3
 8001daa:	4610      	mov	r0, r2
 8001dac:	f7fe fe82 	bl	8000ab4 <canardRxToIdx>
 8001db0:	4602      	mov	r2, r0
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	601a      	str	r2, [r3, #0]
    ins->rx_states = state;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	68fa      	ldr	r2, [r7, #12]
 8001dba:	621a      	str	r2, [r3, #32]
    return state;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3710      	adds	r7, #16
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <createRxState>:

CANARD_INTERNAL CanardRxState* createRxState(CanardPoolAllocator* allocator, uint32_t transfer_descriptor)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b08c      	sub	sp, #48	@ 0x30
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
 8001dce:	6039      	str	r1, [r7, #0]
    CanardRxState init = {
 8001dd0:	f107 0308 	add.w	r3, r7, #8
 8001dd4:	2220      	movs	r2, #32
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f00b f9b5 	bl	800d148 <memset>
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	61bb      	str	r3, [r7, #24]
        .next = CANARD_BUFFER_IDX_NONE,
        .buffer_blocks = CANARD_BUFFER_IDX_NONE,
        .dtid_tt_snid_dnid = transfer_descriptor
    };

    CanardRxState* state = (CanardRxState*) allocateBlock(allocator);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 fbb6 	bl	8002554 <allocateBlock>
 8001de8:	62f8      	str	r0, [r7, #44]	@ 0x2c
    if (state == NULL)
 8001dea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <createRxState+0x2e>
    {
        return NULL;
 8001df0:	2300      	movs	r3, #0
 8001df2:	e007      	b.n	8001e04 <createRxState+0x3e>
    }
    memcpy(state, &init, sizeof(*state));
 8001df4:	f107 0308 	add.w	r3, r7, #8
 8001df8:	2220      	movs	r2, #32
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8001dfe:	f00b f9e7 	bl	800d1d0 <memcpy>

    return state;
 8001e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3730      	adds	r7, #48	@ 0x30
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <releaseStatePayload>:

CANARD_INTERNAL uint64_t releaseStatePayload(CanardInstance* ins, CanardRxState* rxstate)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b084      	sub	sp, #16
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	6039      	str	r1, [r7, #0]
    while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 8001e16:	e01b      	b.n	8001e50 <releaseStatePayload+0x44>
    {
        CanardBufferBlock* block = canardBufferFromIdx(&ins->allocator, rxstate->buffer_blocks);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f103 020c 	add.w	r2, r3, #12
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	4619      	mov	r1, r3
 8001e24:	4610      	mov	r0, r2
 8001e26:	f7fe fe21 	bl	8000a6c <canardBufferFromIdx>
 8001e2a:	60f8      	str	r0, [r7, #12]
        CanardBufferBlock* const temp = block->next;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	60bb      	str	r3, [r7, #8]
        freeBlock(&ins->allocator, block);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	330c      	adds	r3, #12
 8001e36:	68f9      	ldr	r1, [r7, #12]
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f000 fbb4 	bl	80025a6 <freeBlock>
        rxstate->buffer_blocks = canardBufferToIdx(&ins->allocator, temp);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	330c      	adds	r3, #12
 8001e42:	68b9      	ldr	r1, [r7, #8]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe fe1d 	bl	8000a84 <canardBufferToIdx>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
    while (rxstate->buffer_blocks != CANARD_BUFFER_IDX_NONE)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d1df      	bne.n	8001e18 <releaseStatePayload+0xc>
    }
    rxstate->payload_len = 0;
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	8ad3      	ldrh	r3, [r2, #22]
 8001e5c:	f36f 0309 	bfc	r3, #0, #10
 8001e60:	82d3      	strh	r3, [r2, #22]
    return CANARD_OK;
 8001e62:	f04f 0200 	mov.w	r2, #0
 8001e66:	f04f 0300 	mov.w	r3, #0
}
 8001e6a:	4610      	mov	r0, r2
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	3710      	adds	r7, #16
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd80      	pop	{r7, pc}

08001e74 <bufferBlockPushBytes>:
 */
CANARD_INTERNAL int16_t bufferBlockPushBytes(CanardPoolAllocator* allocator,
                                             CanardRxState* state,
                                             const uint8_t* data,
                                             uint8_t data_len)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b08a      	sub	sp, #40	@ 0x28
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	70fb      	strb	r3, [r7, #3]
    uint16_t data_index = 0;
 8001e82:	2300      	movs	r3, #0
 8001e84:	84fb      	strh	r3, [r7, #38]	@ 0x26

    // if head is not full, add data to head
    if ((CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE - state->payload_len) > 0)
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	8adb      	ldrh	r3, [r3, #22]
 8001e8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e8e:	b29b      	uxth	r3, r3
 8001e90:	2b05      	cmp	r3, #5
 8001e92:	d036      	beq.n	8001f02 <bufferBlockPushBytes+0x8e>
    {
        for (uint16_t i = (uint16_t)state->payload_len;
 8001e94:	68bb      	ldr	r3, [r7, #8]
 8001e96:	8adb      	ldrh	r3, [r3, #22]
 8001e98:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001e9c:	b29b      	uxth	r3, r3
 8001e9e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001ea0:	e00e      	b.n	8001ec0 <bufferBlockPushBytes+0x4c>
             i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
             i++, data_index++)
        {
            state->buffer_head[i] = data[data_index];
 8001ea2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	441a      	add	r2, r3
 8001ea8:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001eaa:	7811      	ldrb	r1, [r2, #0]
 8001eac:	68ba      	ldr	r2, [r7, #8]
 8001eae:	4413      	add	r3, r2
 8001eb0:	460a      	mov	r2, r1
 8001eb2:	76da      	strb	r2, [r3, #27]
             i++, data_index++)
 8001eb4:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8001eba:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001ebc:	3301      	adds	r3, #1
 8001ebe:	84fb      	strh	r3, [r7, #38]	@ 0x26
             i < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE && data_index < data_len;
 8001ec0:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d804      	bhi.n	8001ed0 <bufferBlockPushBytes+0x5c>
 8001ec6:	78fb      	ldrb	r3, [r7, #3]
 8001ec8:	b29b      	uxth	r3, r3
 8001eca:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001ecc:	429a      	cmp	r2, r3
 8001ece:	d3e8      	bcc.n	8001ea2 <bufferBlockPushBytes+0x2e>
        }
        if (data_index >= data_len)
 8001ed0:	78fb      	ldrb	r3, [r7, #3]
 8001ed2:	b29b      	uxth	r3, r3
 8001ed4:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d313      	bcc.n	8001f02 <bufferBlockPushBytes+0x8e>
        {
            state->payload_len =
                (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	8adb      	ldrh	r3, [r3, #22]
 8001ede:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ee2:	b29b      	uxth	r3, r3
 8001ee4:	461a      	mov	r2, r3
 8001ee6:	78fb      	ldrb	r3, [r7, #3]
 8001ee8:	b29b      	uxth	r3, r3
 8001eea:	4413      	add	r3, r2
 8001eec:	b29b      	uxth	r3, r3
 8001eee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001ef2:	b299      	uxth	r1, r3
            state->payload_len =
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	8ad3      	ldrh	r3, [r2, #22]
 8001ef8:	f361 0309 	bfi	r3, r1, #0, #10
 8001efc:	82d3      	strh	r3, [r2, #22]
            return 1;
 8001efe:	2301      	movs	r3, #1
 8001f00:	e0ae      	b.n	8002060 <bufferBlockPushBytes+0x1ec>
        }
    } // head is full.

    uint16_t index_at_nth_block =
        (uint16_t)(((state->payload_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) % CANARD_BUFFER_BLOCK_DATA_SIZE);
 8001f02:	68bb      	ldr	r3, [r7, #8]
 8001f04:	8adb      	ldrh	r3, [r3, #22]
 8001f06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f0a:	b29b      	uxth	r3, r3
 8001f0c:	1f5a      	subs	r2, r3, #5
 8001f0e:	0893      	lsrs	r3, r2, #2
 8001f10:	4955      	ldr	r1, [pc, #340]	@ (8002068 <bufferBlockPushBytes+0x1f4>)
 8001f12:	fba1 3103 	umull	r3, r1, r1, r3
 8001f16:	460b      	mov	r3, r1
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	1a5b      	subs	r3, r3, r1
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	1ad3      	subs	r3, r2, r3
    uint16_t index_at_nth_block =
 8001f20:	847b      	strh	r3, [r7, #34]	@ 0x22

    // get to current block
    CanardBufferBlock* block = NULL;
 8001f22:	2300      	movs	r3, #0
 8001f24:	61fb      	str	r3, [r7, #28]

    // buffer blocks uninitialized
    if (state->buffer_blocks == CANARD_BUFFER_IDX_NONE)
 8001f26:	68bb      	ldr	r3, [r7, #8]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d113      	bne.n	8001f56 <bufferBlockPushBytes+0xe2>
    {
        block = createBufferBlock(allocator);
 8001f2e:	68f8      	ldr	r0, [r7, #12]
 8001f30:	f000 f89c 	bl	800206c <createBufferBlock>
 8001f34:	61f8      	str	r0, [r7, #28]
        state->buffer_blocks = canardBufferToIdx(allocator, block);
 8001f36:	69f9      	ldr	r1, [r7, #28]
 8001f38:	68f8      	ldr	r0, [r7, #12]
 8001f3a:	f7fe fda3 	bl	8000a84 <canardBufferToIdx>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	68bb      	ldr	r3, [r7, #8]
 8001f42:	605a      	str	r2, [r3, #4]
        if (block == NULL)
 8001f44:	69fb      	ldr	r3, [r7, #28]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d102      	bne.n	8001f50 <bufferBlockPushBytes+0xdc>
        {
            return -CANARD_ERROR_OUT_OF_MEMORY;
 8001f4a:	f06f 0302 	mvn.w	r3, #2
 8001f4e:	e087      	b.n	8002060 <bufferBlockPushBytes+0x1ec>
        }

        index_at_nth_block = 0;
 8001f50:	2300      	movs	r3, #0
 8001f52:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001f54:	e06c      	b.n	8002030 <bufferBlockPushBytes+0x1bc>
    }
    else
    {
        uint16_t nth_block = 1;
 8001f56:	2301      	movs	r3, #1
 8001f58:	837b      	strh	r3, [r7, #26]

        // get to block
        block = canardBufferFromIdx(allocator, state->buffer_blocks);
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	685b      	ldr	r3, [r3, #4]
 8001f5e:	4619      	mov	r1, r3
 8001f60:	68f8      	ldr	r0, [r7, #12]
 8001f62:	f7fe fd83 	bl	8000a6c <canardBufferFromIdx>
 8001f66:	61f8      	str	r0, [r7, #28]
        while (block->next != NULL)
 8001f68:	e005      	b.n	8001f76 <bufferBlockPushBytes+0x102>
        {
            nth_block++;
 8001f6a:	8b7b      	ldrh	r3, [r7, #26]
 8001f6c:	3301      	adds	r3, #1
 8001f6e:	837b      	strh	r3, [r7, #26]
            block = block->next;
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	61fb      	str	r3, [r7, #28]
        while (block->next != NULL)
 8001f76:	69fb      	ldr	r3, [r7, #28]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d1f5      	bne.n	8001f6a <bufferBlockPushBytes+0xf6>
        }

        const uint16_t num_buffer_blocks =
            (uint16_t) (((((uint32_t)state->payload_len + data_len) - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE) /
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	8adb      	ldrh	r3, [r3, #22]
 8001f82:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	461a      	mov	r2, r3
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	3b05      	subs	r3, #5
 8001f90:	089b      	lsrs	r3, r3, #2
 8001f92:	4a35      	ldr	r2, [pc, #212]	@ (8002068 <bufferBlockPushBytes+0x1f4>)
 8001f94:	fba2 2303 	umull	r2, r3, r2, r3
 8001f98:	b29b      	uxth	r3, r3
        const uint16_t num_buffer_blocks =
 8001f9a:	3301      	adds	r3, #1
 8001f9c:	82fb      	strh	r3, [r7, #22]
                         CANARD_BUFFER_BLOCK_DATA_SIZE) + 1U);

        if (num_buffer_blocks > nth_block && index_at_nth_block == 0)
 8001f9e:	8afa      	ldrh	r2, [r7, #22]
 8001fa0:	8b7b      	ldrh	r3, [r7, #26]
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d944      	bls.n	8002030 <bufferBlockPushBytes+0x1bc>
 8001fa6:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d141      	bne.n	8002030 <bufferBlockPushBytes+0x1bc>
        {
            block->next = createBufferBlock(allocator);
 8001fac:	68f8      	ldr	r0, [r7, #12]
 8001fae:	f000 f85d 	bl	800206c <createBufferBlock>
 8001fb2:	4602      	mov	r2, r0
 8001fb4:	69fb      	ldr	r3, [r7, #28]
 8001fb6:	601a      	str	r2, [r3, #0]
            if (block->next == NULL)
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d102      	bne.n	8001fc6 <bufferBlockPushBytes+0x152>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 8001fc0:	f06f 0302 	mvn.w	r3, #2
 8001fc4:	e04c      	b.n	8002060 <bufferBlockPushBytes+0x1ec>
            }
            block = block->next;
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	61fb      	str	r3, [r7, #28]
        }
    }

    // add data to current block until it becomes full, add new block if necessary
    while (data_index < data_len)
 8001fcc:	e030      	b.n	8002030 <bufferBlockPushBytes+0x1bc>
    {
        for (uint16_t i = index_at_nth_block;
 8001fce:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001fd0:	833b      	strh	r3, [r7, #24]
 8001fd2:	e00e      	b.n	8001ff2 <bufferBlockPushBytes+0x17e>
             i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
             i++, data_index++)
        {
            block->data[i] = data[data_index];
 8001fd4:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	441a      	add	r2, r3
 8001fda:	8b3b      	ldrh	r3, [r7, #24]
 8001fdc:	7811      	ldrb	r1, [r2, #0]
 8001fde:	69fa      	ldr	r2, [r7, #28]
 8001fe0:	4413      	add	r3, r2
 8001fe2:	460a      	mov	r2, r1
 8001fe4:	711a      	strb	r2, [r3, #4]
             i++, data_index++)
 8001fe6:	8b3b      	ldrh	r3, [r7, #24]
 8001fe8:	3301      	adds	r3, #1
 8001fea:	833b      	strh	r3, [r7, #24]
 8001fec:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8001fee:	3301      	adds	r3, #1
 8001ff0:	84fb      	strh	r3, [r7, #38]	@ 0x26
             i < CANARD_BUFFER_BLOCK_DATA_SIZE && data_index < data_len;
 8001ff2:	8b3b      	ldrh	r3, [r7, #24]
 8001ff4:	2b1b      	cmp	r3, #27
 8001ff6:	d804      	bhi.n	8002002 <bufferBlockPushBytes+0x18e>
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d3e8      	bcc.n	8001fd4 <bufferBlockPushBytes+0x160>
        }

        if (data_index < data_len)
 8002002:	78fb      	ldrb	r3, [r7, #3]
 8002004:	b29b      	uxth	r3, r3
 8002006:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002008:	429a      	cmp	r2, r3
 800200a:	d211      	bcs.n	8002030 <bufferBlockPushBytes+0x1bc>
        {
            block->next = createBufferBlock(allocator);
 800200c:	68f8      	ldr	r0, [r7, #12]
 800200e:	f000 f82d 	bl	800206c <createBufferBlock>
 8002012:	4602      	mov	r2, r0
 8002014:	69fb      	ldr	r3, [r7, #28]
 8002016:	601a      	str	r2, [r3, #0]
            if (block->next == NULL)
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d102      	bne.n	8002026 <bufferBlockPushBytes+0x1b2>
            {
                return -CANARD_ERROR_OUT_OF_MEMORY;
 8002020:	f06f 0302 	mvn.w	r3, #2
 8002024:	e01c      	b.n	8002060 <bufferBlockPushBytes+0x1ec>
            }
            block = block->next;
 8002026:	69fb      	ldr	r3, [r7, #28]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	61fb      	str	r3, [r7, #28]
            index_at_nth_block = 0;
 800202c:	2300      	movs	r3, #0
 800202e:	847b      	strh	r3, [r7, #34]	@ 0x22
    while (data_index < data_len)
 8002030:	78fb      	ldrb	r3, [r7, #3]
 8002032:	b29b      	uxth	r3, r3
 8002034:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8002036:	429a      	cmp	r2, r3
 8002038:	d3c9      	bcc.n	8001fce <bufferBlockPushBytes+0x15a>
        }
    }

    state->payload_len = (uint16_t)(state->payload_len + data_len) & ((1U << CANARD_TRANSFER_PAYLOAD_LEN_BITS) - 1U);
 800203a:	68bb      	ldr	r3, [r7, #8]
 800203c:	8adb      	ldrh	r3, [r3, #22]
 800203e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002042:	b29b      	uxth	r3, r3
 8002044:	461a      	mov	r2, r3
 8002046:	78fb      	ldrb	r3, [r7, #3]
 8002048:	b29b      	uxth	r3, r3
 800204a:	4413      	add	r3, r2
 800204c:	b29b      	uxth	r3, r3
 800204e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002052:	b299      	uxth	r1, r3
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	8ad3      	ldrh	r3, [r2, #22]
 8002058:	f361 0309 	bfi	r3, r1, #0, #10
 800205c:	82d3      	strh	r3, [r2, #22]

    return 1;
 800205e:	2301      	movs	r3, #1
}
 8002060:	4618      	mov	r0, r3
 8002062:	3728      	adds	r7, #40	@ 0x28
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	24924925 	.word	0x24924925

0800206c <createBufferBlock>:

CANARD_INTERNAL CanardBufferBlock* createBufferBlock(CanardPoolAllocator* allocator)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
    CanardBufferBlock* block = (CanardBufferBlock*) allocateBlock(allocator);
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f000 fa6d 	bl	8002554 <allocateBlock>
 800207a:	60f8      	str	r0, [r7, #12]
    if (block == NULL)
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <createBufferBlock+0x1a>
    {
        return NULL;
 8002082:	2300      	movs	r3, #0
 8002084:	e003      	b.n	800208e <createBufferBlock+0x22>
    }
    block->next = NULL;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
    return block;
 800208c:	68fb      	ldr	r3, [r7, #12]
}
 800208e:	4618      	mov	r0, r3
 8002090:	3710      	adds	r7, #16
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}

08002096 <copyBitArray>:
/**
 * Bit array copy routine, originally developed by Ben Dyer for Libuavcan. Thanks Ben.
 */
void copyBitArray(const uint8_t* src, uint32_t src_offset, uint32_t src_len,
                        uint8_t* dst, uint32_t dst_offset)
{
 8002096:	b480      	push	{r7}
 8002098:	b089      	sub	sp, #36	@ 0x24
 800209a:	af00      	add	r7, sp, #0
 800209c:	60f8      	str	r0, [r7, #12]
 800209e:	60b9      	str	r1, [r7, #8]
 80020a0:	607a      	str	r2, [r7, #4]
 80020a2:	603b      	str	r3, [r7, #0]
    CANARD_ASSERT(src_len > 0U);

    // Normalizing inputs
    src += src_offset / 8U;
 80020a4:	68bb      	ldr	r3, [r7, #8]
 80020a6:	08db      	lsrs	r3, r3, #3
 80020a8:	68fa      	ldr	r2, [r7, #12]
 80020aa:	4413      	add	r3, r2
 80020ac:	60fb      	str	r3, [r7, #12]
    dst += dst_offset / 8U;
 80020ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020b0:	08db      	lsrs	r3, r3, #3
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	4413      	add	r3, r2
 80020b6:	603b      	str	r3, [r7, #0]

    src_offset %= 8U;
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	f003 0307 	and.w	r3, r3, #7
 80020be:	60bb      	str	r3, [r7, #8]
    dst_offset %= 8U;
 80020c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	62bb      	str	r3, [r7, #40]	@ 0x28

    const size_t last_bit = src_offset + src_len;
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	4413      	add	r3, r2
 80020ce:	61fb      	str	r3, [r7, #28]
    while (last_bit - src_offset)
 80020d0:	e04d      	b.n	800216e <copyBitArray+0xd8>
    {
        const uint8_t src_bit_offset = (uint8_t)(src_offset % 8U);
 80020d2:	68bb      	ldr	r3, [r7, #8]
 80020d4:	b2db      	uxtb	r3, r3
 80020d6:	f003 0307 	and.w	r3, r3, #7
 80020da:	76fb      	strb	r3, [r7, #27]
        const uint8_t dst_bit_offset = (uint8_t)(dst_offset % 8U);
 80020dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80020de:	b2db      	uxtb	r3, r3
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	76bb      	strb	r3, [r7, #26]

        const uint8_t max_offset = MAX(src_bit_offset, dst_bit_offset);
 80020e6:	7eba      	ldrb	r2, [r7, #26]
 80020e8:	7efb      	ldrb	r3, [r7, #27]
 80020ea:	4293      	cmp	r3, r2
 80020ec:	bf38      	it	cc
 80020ee:	4613      	movcc	r3, r2
 80020f0:	767b      	strb	r3, [r7, #25]
        const uint32_t copy_bits = (uint32_t)MIN(last_bit - src_offset, 8U - max_offset);
 80020f2:	7e7b      	ldrb	r3, [r7, #25]
 80020f4:	f1c3 0208 	rsb	r2, r3, #8
 80020f8:	69f9      	ldr	r1, [r7, #28]
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	1acb      	subs	r3, r1, r3
 80020fe:	4293      	cmp	r3, r2
 8002100:	bf28      	it	cs
 8002102:	4613      	movcs	r3, r2
 8002104:	617b      	str	r3, [r7, #20]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset)&0xFF;

        dst[dst_offset / 8U] =
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask))&0xFF;
#else
        const uint8_t write_mask = (uint8_t)((uint8_t)(0xFF00U >> copy_bits) >> dst_bit_offset);
 8002106:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	fa22 f303 	lsr.w	r3, r2, r3
 8002110:	b2db      	uxtb	r3, r3
 8002112:	461a      	mov	r2, r3
 8002114:	7ebb      	ldrb	r3, [r7, #26]
 8002116:	fa42 f303 	asr.w	r3, r2, r3
 800211a:	74fb      	strb	r3, [r7, #19]
        const uint8_t src_data = (uint8_t)(((uint32_t)src[src_offset / 8U] << src_bit_offset) >> dst_bit_offset);
 800211c:	68bb      	ldr	r3, [r7, #8]
 800211e:	08db      	lsrs	r3, r3, #3
 8002120:	68fa      	ldr	r2, [r7, #12]
 8002122:	4413      	add	r3, r2
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	461a      	mov	r2, r3
 8002128:	7efb      	ldrb	r3, [r7, #27]
 800212a:	409a      	lsls	r2, r3
 800212c:	7ebb      	ldrb	r3, [r7, #26]
 800212e:	fa22 f303 	lsr.w	r3, r2, r3
 8002132:	74bb      	strb	r3, [r7, #18]

        dst[dst_offset / 8U] =
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 8002134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002136:	08db      	lsrs	r3, r3, #3
 8002138:	683a      	ldr	r2, [r7, #0]
 800213a:	4413      	add	r3, r2
 800213c:	781a      	ldrb	r2, [r3, #0]
 800213e:	7cfb      	ldrb	r3, [r7, #19]
 8002140:	43db      	mvns	r3, r3
 8002142:	b2db      	uxtb	r3, r3
 8002144:	4013      	ands	r3, r2
 8002146:	b2d9      	uxtb	r1, r3
 8002148:	7cba      	ldrb	r2, [r7, #18]
 800214a:	7cfb      	ldrb	r3, [r7, #19]
 800214c:	4013      	ands	r3, r2
 800214e:	b2da      	uxtb	r2, r3
        dst[dst_offset / 8U] =
 8002150:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002152:	08db      	lsrs	r3, r3, #3
 8002154:	6838      	ldr	r0, [r7, #0]
 8002156:	4403      	add	r3, r0
            (uint8_t)(((uint32_t)dst[dst_offset / 8U] & (uint32_t)~write_mask) | (uint32_t)(src_data & write_mask));
 8002158:	430a      	orrs	r2, r1
 800215a:	b2d2      	uxtb	r2, r2
        dst[dst_offset / 8U] =
 800215c:	701a      	strb	r2, [r3, #0]
#endif

        src_offset += copy_bits;
 800215e:	68ba      	ldr	r2, [r7, #8]
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	4413      	add	r3, r2
 8002164:	60bb      	str	r3, [r7, #8]
        dst_offset += copy_bits;
 8002166:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	4413      	add	r3, r2
 800216c:	62bb      	str	r3, [r7, #40]	@ 0x28
    while (last_bit - src_offset)
 800216e:	69fa      	ldr	r2, [r7, #28]
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	429a      	cmp	r2, r3
 8002174:	d1ad      	bne.n	80020d2 <copyBitArray+0x3c>
    }
}
 8002176:	bf00      	nop
 8002178:	bf00      	nop
 800217a:	3724      	adds	r7, #36	@ 0x24
 800217c:	46bd      	mov	sp, r7
 800217e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002182:	4770      	bx	lr

08002184 <descatterTransferPayload>:

CANARD_INTERNAL int16_t descatterTransferPayload(const CanardRxTransfer* transfer,
                                                 uint32_t bit_offset,
                                                 uint8_t bit_length,
                                                 void* output)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b090      	sub	sp, #64	@ 0x40
 8002188:	af02      	add	r7, sp, #8
 800218a:	60f8      	str	r0, [r7, #12]
 800218c:	60b9      	str	r1, [r7, #8]
 800218e:	603b      	str	r3, [r7, #0]
 8002190:	4613      	mov	r3, r2
 8002192:	71fb      	strb	r3, [r7, #7]
    CANARD_ASSERT(transfer != 0);

    if (bit_offset >= transfer->payload_len * 8)
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	8a9b      	ldrh	r3, [r3, #20]
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	461a      	mov	r2, r3
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	4293      	cmp	r3, r2
 80021a0:	d301      	bcc.n	80021a6 <descatterTransferPayload+0x22>
    {
        return 0;       // Out of range, reading zero bits
 80021a2:	2300      	movs	r3, #0
 80021a4:	e0df      	b.n	8002366 <descatterTransferPayload+0x1e2>
    }

    if (bit_offset + bit_length > transfer->payload_len * 8)
 80021a6:	79fa      	ldrb	r2, [r7, #7]
 80021a8:	68bb      	ldr	r3, [r7, #8]
 80021aa:	4413      	add	r3, r2
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	8a92      	ldrh	r2, [r2, #20]
 80021b0:	00d2      	lsls	r2, r2, #3
 80021b2:	4293      	cmp	r3, r2
 80021b4:	d908      	bls.n	80021c8 <descatterTransferPayload+0x44>
    {
        bit_length = (uint8_t)(transfer->payload_len * 8U - bit_offset);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	8a9b      	ldrh	r3, [r3, #20]
 80021ba:	b2db      	uxtb	r3, r3
 80021bc:	00db      	lsls	r3, r3, #3
 80021be:	b2da      	uxtb	r2, r3
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	71fb      	strb	r3, [r7, #7]
    }

    CANARD_ASSERT(bit_length > 0);

    if ((transfer->payload_middle != NULL) || (transfer->payload_tail != NULL)) // Multi frame
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d104      	bne.n	80021da <descatterTransferPayload+0x56>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	691b      	ldr	r3, [r3, #16]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f000 80b9 	beq.w	800234c <descatterTransferPayload+0x1c8>
        /*
         * This part is hideously complicated and probably should be redesigned.
         * The objective here is to copy the requested number of bits from scattered storage into the temporary
         * local storage. We go through great pains to ensure that all corner cases are handled correctly.
         */
        uint32_t input_bit_offset = bit_offset;
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	637b      	str	r3, [r7, #52]	@ 0x34
        uint8_t output_bit_offset = 0;
 80021de:	2300      	movs	r3, #0
 80021e0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
        uint8_t remaining_bit_length = bit_length;
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32

        // Reading head
        if (input_bit_offset < CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8)
 80021ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021ec:	2b27      	cmp	r3, #39	@ 0x27
 80021ee:	d82d      	bhi.n	800224c <descatterTransferPayload+0xc8>
        {
            const uint8_t amount = (uint8_t)MIN(remaining_bit_length,
 80021f0:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80021f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021f6:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d305      	bcc.n	800220a <descatterTransferPayload+0x86>
 80021fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002200:	b2db      	uxtb	r3, r3
 8002202:	f1c3 0328 	rsb	r3, r3, #40	@ 0x28
 8002206:	b2db      	uxtb	r3, r3
 8002208:	e001      	b.n	800220e <descatterTransferPayload+0x8a>
 800220a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800220e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                                                CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U - input_bit_offset);

            copyBitArray(&transfer->payload_head[0], input_bit_offset, amount, (uint8_t*) output, 0);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	6898      	ldr	r0, [r3, #8]
 8002216:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800221a:	2300      	movs	r3, #0
 800221c:	9300      	str	r3, [sp, #0]
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8002222:	f7ff ff38 	bl	8002096 <copyBitArray>

            input_bit_offset += amount;
 8002226:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800222a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800222c:	4413      	add	r3, r2
 800222e:	637b      	str	r3, [r7, #52]	@ 0x34
            output_bit_offset = (uint8_t)(output_bit_offset + amount);
 8002230:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 8002234:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002238:	4413      	add	r3, r2
 800223a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 800223e:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002242:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
        }

        // Reading middle
        uint32_t remaining_bits = (uint32_t)(transfer->payload_len * 8U - CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U);
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	8a9b      	ldrh	r3, [r3, #20]
 8002250:	f103 5300 	add.w	r3, r3, #536870912	@ 0x20000000
 8002254:	3b05      	subs	r3, #5
 8002256:	00db      	lsls	r3, r3, #3
 8002258:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t block_bit_offset = CANARD_MULTIFRAME_RX_PAYLOAD_HEAD_SIZE * 8U;
 800225a:	2328      	movs	r3, #40	@ 0x28
 800225c:	62bb      	str	r3, [r7, #40]	@ 0x28
        const CanardBufferBlock* block = transfer->payload_middle;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	627b      	str	r3, [r7, #36]	@ 0x24

        while ((block != NULL) && (remaining_bit_length > 0))
 8002264:	e044      	b.n	80022f0 <descatterTransferPayload+0x16c>
        {
            CANARD_ASSERT(remaining_bits > 0);
            const uint32_t block_end_bit_offset = block_bit_offset + MIN(CANARD_BUFFER_BLOCK_DATA_SIZE * 8,
 8002266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002268:	2be0      	cmp	r3, #224	@ 0xe0
 800226a:	bf28      	it	cs
 800226c:	23e0      	movcs	r3, #224	@ 0xe0
 800226e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8002270:	4413      	add	r3, r2
 8002272:	61fb      	str	r3, [r7, #28]
                                                                         remaining_bits);

            // Perform copy if we've reached the requested offset, otherwise jump over this block and try next
            if (block_end_bit_offset > input_bit_offset)
 8002274:	69fa      	ldr	r2, [r7, #28]
 8002276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002278:	429a      	cmp	r2, r3
 800227a:	d92e      	bls.n	80022da <descatterTransferPayload+0x156>
            {
                const uint8_t amount = (uint8_t) MIN(remaining_bit_length, block_end_bit_offset - input_bit_offset);
 800227c:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 8002280:	69f9      	ldr	r1, [r7, #28]
 8002282:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002284:	1acb      	subs	r3, r1, r3
 8002286:	429a      	cmp	r2, r3
 8002288:	d306      	bcc.n	8002298 <descatterTransferPayload+0x114>
 800228a:	69fb      	ldr	r3, [r7, #28]
 800228c:	b2da      	uxtb	r2, r3
 800228e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002290:	b2db      	uxtb	r3, r3
 8002292:	1ad3      	subs	r3, r2, r3
 8002294:	b2db      	uxtb	r3, r3
 8002296:	e001      	b.n	800229c <descatterTransferPayload+0x118>
 8002298:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800229c:	76fb      	strb	r3, [r7, #27]

                CANARD_ASSERT(input_bit_offset >= block_bit_offset);
                const uint32_t bit_offset_within_block = input_bit_offset - block_bit_offset;
 800229e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80022a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	617b      	str	r3, [r7, #20]

                copyBitArray(&block->data[0], bit_offset_within_block, amount, (uint8_t*) output, output_bit_offset);
 80022a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022a8:	1d18      	adds	r0, r3, #4
 80022aa:	7efa      	ldrb	r2, [r7, #27]
 80022ac:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80022b0:	9300      	str	r3, [sp, #0]
 80022b2:	683b      	ldr	r3, [r7, #0]
 80022b4:	6979      	ldr	r1, [r7, #20]
 80022b6:	f7ff feee 	bl	8002096 <copyBitArray>

                input_bit_offset += amount;
 80022ba:	7efb      	ldrb	r3, [r7, #27]
 80022bc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80022be:	4413      	add	r3, r2
 80022c0:	637b      	str	r3, [r7, #52]	@ 0x34
                output_bit_offset = (uint8_t)(output_bit_offset + amount);
 80022c2:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 80022c6:	7efb      	ldrb	r3, [r7, #27]
 80022c8:	4413      	add	r3, r2
 80022ca:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                remaining_bit_length = (uint8_t)(remaining_bit_length - amount);
 80022ce:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 80022d2:	7efb      	ldrb	r3, [r7, #27]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
            }

            CANARD_ASSERT(block_end_bit_offset > block_bit_offset);
            remaining_bits -= block_end_bit_offset - block_bit_offset;
 80022da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	1ad3      	subs	r3, r2, r3
 80022e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80022e2:	4413      	add	r3, r2
 80022e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
            block_bit_offset = block_end_bit_offset;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	62bb      	str	r3, [r7, #40]	@ 0x28
            block = block->next;
 80022ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	627b      	str	r3, [r7, #36]	@ 0x24
        while ((block != NULL) && (remaining_bit_length > 0))
 80022f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d003      	beq.n	80022fe <descatterTransferPayload+0x17a>
 80022f6:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d1b3      	bne.n	8002266 <descatterTransferPayload+0xe2>
        }

        CANARD_ASSERT(remaining_bit_length <= remaining_bits);

        // Reading tail
        if ((transfer->payload_tail != NULL) && (remaining_bit_length > 0))
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	691b      	ldr	r3, [r3, #16]
 8002302:	2b00      	cmp	r3, #0
 8002304:	d02c      	beq.n	8002360 <descatterTransferPayload+0x1dc>
 8002306:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800230a:	2b00      	cmp	r3, #0
 800230c:	d028      	beq.n	8002360 <descatterTransferPayload+0x1dc>
        {
            CANARD_ASSERT(input_bit_offset >= block_bit_offset);
            const uint32_t offset = input_bit_offset - block_bit_offset;
 800230e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	613b      	str	r3, [r7, #16]

            copyBitArray(&transfer->payload_tail[0], offset, remaining_bit_length, (uint8_t*) output,
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6918      	ldr	r0, [r3, #16]
 800231a:	f897 2032 	ldrb.w	r2, [r7, #50]	@ 0x32
 800231e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	6939      	ldr	r1, [r7, #16]
 8002328:	f7ff feb5 	bl	8002096 <copyBitArray>
                         output_bit_offset);

            input_bit_offset += remaining_bit_length;
 800232c:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 8002330:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002332:	4413      	add	r3, r2
 8002334:	637b      	str	r3, [r7, #52]	@ 0x34
            output_bit_offset = (uint8_t)(output_bit_offset + remaining_bit_length);
 8002336:	f897 2033 	ldrb.w	r2, [r7, #51]	@ 0x33
 800233a:	f897 3032 	ldrb.w	r3, [r7, #50]	@ 0x32
 800233e:	4413      	add	r3, r2
 8002340:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
            remaining_bit_length = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    {
 800234a:	e009      	b.n	8002360 <descatterTransferPayload+0x1dc>
        CANARD_ASSERT(output_bit_offset <= 64);
        CANARD_ASSERT(remaining_bit_length == 0);
    }
    else                                                                    // Single frame
    {
        copyBitArray(&transfer->payload_head[0], bit_offset, bit_length, (uint8_t*) output, 0);
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	6898      	ldr	r0, [r3, #8]
 8002350:	79fa      	ldrb	r2, [r7, #7]
 8002352:	2300      	movs	r3, #0
 8002354:	9300      	str	r3, [sp, #0]
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	68b9      	ldr	r1, [r7, #8]
 800235a:	f7ff fe9c 	bl	8002096 <copyBitArray>
 800235e:	e000      	b.n	8002362 <descatterTransferPayload+0x1de>
    {
 8002360:	bf00      	nop
    }

    return bit_length;
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	b21b      	sxth	r3, r3
}
 8002366:	4618      	mov	r0, r3
 8002368:	3738      	adds	r7, #56	@ 0x38
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}

0800236e <isBigEndian>:

CANARD_INTERNAL bool isBigEndian(void)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
#else
        uint16_t a;
        uint8_t b[2];
#endif
    } u;
    u.a = 1;
 8002374:	2301      	movs	r3, #1
 8002376:	80bb      	strh	r3, [r7, #4]
    return u.b[1] == 1;                             // Some don't...
 8002378:	797b      	ldrb	r3, [r7, #5]
 800237a:	2b01      	cmp	r3, #1
 800237c:	bf0c      	ite	eq
 800237e:	2301      	moveq	r3, #1
 8002380:	2300      	movne	r3, #0
 8002382:	b2db      	uxtb	r3, r3
#endif
}
 8002384:	4618      	mov	r0, r3
 8002386:	370c      	adds	r7, #12
 8002388:	46bd      	mov	sp, r7
 800238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238e:	4770      	bx	lr

08002390 <swapByteOrder>:

CANARD_INTERNAL void swapByteOrder(void* data, unsigned size)
{
 8002390:	b480      	push	{r7}
 8002392:	b087      	sub	sp, #28
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
    CANARD_ASSERT(data != NULL);

    uint8_t* const bytes = (uint8_t*) data;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	60fb      	str	r3, [r7, #12]

    size_t fwd = 0;
 800239e:	2300      	movs	r3, #0
 80023a0:	617b      	str	r3, [r7, #20]
    size_t rev = size - 1;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	3b01      	subs	r3, #1
 80023a6:	613b      	str	r3, [r7, #16]

    while (fwd < rev)
 80023a8:	e017      	b.n	80023da <swapByteOrder+0x4a>
    {
        const uint8_t x = bytes[fwd];
 80023aa:	68fa      	ldr	r2, [r7, #12]
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	4413      	add	r3, r2
 80023b0:	781b      	ldrb	r3, [r3, #0]
 80023b2:	72fb      	strb	r3, [r7, #11]
        bytes[fwd] = bytes[rev];
 80023b4:	68fa      	ldr	r2, [r7, #12]
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	441a      	add	r2, r3
 80023ba:	68f9      	ldr	r1, [r7, #12]
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	440b      	add	r3, r1
 80023c0:	7812      	ldrb	r2, [r2, #0]
 80023c2:	701a      	strb	r2, [r3, #0]
        bytes[rev] = x;
 80023c4:	68fa      	ldr	r2, [r7, #12]
 80023c6:	693b      	ldr	r3, [r7, #16]
 80023c8:	4413      	add	r3, r2
 80023ca:	7afa      	ldrb	r2, [r7, #11]
 80023cc:	701a      	strb	r2, [r3, #0]
        fwd++;
 80023ce:	697b      	ldr	r3, [r7, #20]
 80023d0:	3301      	adds	r3, #1
 80023d2:	617b      	str	r3, [r7, #20]
        rev--;
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	3b01      	subs	r3, #1
 80023d8:	613b      	str	r3, [r7, #16]
    while (fwd < rev)
 80023da:	697a      	ldr	r2, [r7, #20]
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d3e3      	bcc.n	80023aa <swapByteOrder+0x1a>
    }
}
 80023e2:	bf00      	nop
 80023e4:	bf00      	nop
 80023e6:	371c      	adds	r7, #28
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <crcAddByte>:

/*
 * CRC functions
 */
CANARD_INTERNAL uint16_t crcAddByte(uint16_t crc_val, uint8_t byte)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	460a      	mov	r2, r1
 80023fa:	80fb      	strh	r3, [r7, #6]
 80023fc:	4613      	mov	r3, r2
 80023fe:	717b      	strb	r3, [r7, #5]
    crc_val ^= (uint16_t) ((uint16_t) (byte) << 8U);
 8002400:	797b      	ldrb	r3, [r7, #5]
 8002402:	b29b      	uxth	r3, r3
 8002404:	021b      	lsls	r3, r3, #8
 8002406:	b29a      	uxth	r2, r3
 8002408:	88fb      	ldrh	r3, [r7, #6]
 800240a:	4053      	eors	r3, r2
 800240c:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 800240e:	2300      	movs	r3, #0
 8002410:	73fb      	strb	r3, [r7, #15]
 8002412:	e012      	b.n	800243a <crcAddByte+0x4a>
    {
        if (crc_val & 0x8000U)
 8002414:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002418:	2b00      	cmp	r3, #0
 800241a:	da08      	bge.n	800242e <crcAddByte+0x3e>
        {
            crc_val = (uint16_t) ((uint16_t) (crc_val << 1U) ^ 0x1021U);
 800241c:	88fb      	ldrh	r3, [r7, #6]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	b29b      	uxth	r3, r3
 8002422:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 8002426:	f083 0301 	eor.w	r3, r3, #1
 800242a:	80fb      	strh	r3, [r7, #6]
 800242c:	e002      	b.n	8002434 <crcAddByte+0x44>
        }
        else
        {
            crc_val = (uint16_t) (crc_val << 1U);
 800242e:	88fb      	ldrh	r3, [r7, #6]
 8002430:	005b      	lsls	r3, r3, #1
 8002432:	80fb      	strh	r3, [r7, #6]
    for (uint8_t j = 0; j < 8; j++)
 8002434:	7bfb      	ldrb	r3, [r7, #15]
 8002436:	3301      	adds	r3, #1
 8002438:	73fb      	strb	r3, [r7, #15]
 800243a:	7bfb      	ldrb	r3, [r7, #15]
 800243c:	2b07      	cmp	r3, #7
 800243e:	d9e9      	bls.n	8002414 <crcAddByte+0x24>
        }
    }
    return crc_val;
 8002440:	88fb      	ldrh	r3, [r7, #6]
}
 8002442:	4618      	mov	r0, r3
 8002444:	3714      	adds	r7, #20
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <crcAddSignature>:

CANARD_INTERNAL uint16_t crcAddSignature(uint16_t crc_val, uint64_t data_type_signature)
{
 800244e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002450:	b087      	sub	sp, #28
 8002452:	af00      	add	r7, sp, #0
 8002454:	4601      	mov	r1, r0
 8002456:	e9c7 2300 	strd	r2, r3, [r7]
 800245a:	460b      	mov	r3, r1
 800245c:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 800245e:	2300      	movs	r3, #0
 8002460:	82fb      	strh	r3, [r7, #22]
 8002462:	e01b      	b.n	800249c <crcAddSignature+0x4e>
    {
        crc_val = crcAddByte(crc_val, (uint8_t) (data_type_signature >> shift_val));
 8002464:	8af9      	ldrh	r1, [r7, #22]
 8002466:	e9d7 2300 	ldrd	r2, r3, [r7]
 800246a:	f1c1 0620 	rsb	r6, r1, #32
 800246e:	f1a1 0020 	sub.w	r0, r1, #32
 8002472:	fa22 f401 	lsr.w	r4, r2, r1
 8002476:	fa03 f606 	lsl.w	r6, r3, r6
 800247a:	4334      	orrs	r4, r6
 800247c:	fa23 f000 	lsr.w	r0, r3, r0
 8002480:	4304      	orrs	r4, r0
 8002482:	fa23 f501 	lsr.w	r5, r3, r1
 8002486:	b2e2      	uxtb	r2, r4
 8002488:	89fb      	ldrh	r3, [r7, #14]
 800248a:	4611      	mov	r1, r2
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ffaf 	bl	80023f0 <crcAddByte>
 8002492:	4603      	mov	r3, r0
 8002494:	81fb      	strh	r3, [r7, #14]
    for (uint16_t shift_val = 0; shift_val < 64; shift_val = (uint16_t)(shift_val + 8U))
 8002496:	8afb      	ldrh	r3, [r7, #22]
 8002498:	3308      	adds	r3, #8
 800249a:	82fb      	strh	r3, [r7, #22]
 800249c:	8afb      	ldrh	r3, [r7, #22]
 800249e:	2b3f      	cmp	r3, #63	@ 0x3f
 80024a0:	d9e0      	bls.n	8002464 <crcAddSignature+0x16>
    }
    return crc_val;
 80024a2:	89fb      	ldrh	r3, [r7, #14]
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	371c      	adds	r7, #28
 80024a8:	46bd      	mov	sp, r7
 80024aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080024ac <crcAdd>:

CANARD_INTERNAL uint16_t crcAdd(uint16_t crc_val, const uint8_t* bytes, size_t len)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b084      	sub	sp, #16
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	4603      	mov	r3, r0
 80024b4:	60b9      	str	r1, [r7, #8]
 80024b6:	607a      	str	r2, [r7, #4]
 80024b8:	81fb      	strh	r3, [r7, #14]
    while (len--)
 80024ba:	e00a      	b.n	80024d2 <crcAdd+0x26>
    {
        crc_val = crcAddByte(crc_val, *bytes++);
 80024bc:	68bb      	ldr	r3, [r7, #8]
 80024be:	1c5a      	adds	r2, r3, #1
 80024c0:	60ba      	str	r2, [r7, #8]
 80024c2:	781a      	ldrb	r2, [r3, #0]
 80024c4:	89fb      	ldrh	r3, [r7, #14]
 80024c6:	4611      	mov	r1, r2
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff ff91 	bl	80023f0 <crcAddByte>
 80024ce:	4603      	mov	r3, r0
 80024d0:	81fb      	strh	r3, [r7, #14]
    while (len--)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	1e5a      	subs	r2, r3, #1
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d1ef      	bne.n	80024bc <crcAdd+0x10>
    }
    return crc_val;
 80024dc:	89fb      	ldrh	r3, [r7, #14]
}
 80024de:	4618      	mov	r0, r3
 80024e0:	3710      	adds	r7, #16
 80024e2:	46bd      	mov	sp, r7
 80024e4:	bd80      	pop	{r7, pc}

080024e6 <initPoolAllocator>:
 *  Pool Allocator functions
 */
CANARD_INTERNAL void initPoolAllocator(CanardPoolAllocator* allocator,
                                       void* buf,
                                       uint16_t buf_len)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b089      	sub	sp, #36	@ 0x24
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	60f8      	str	r0, [r7, #12]
 80024ee:	60b9      	str	r1, [r7, #8]
 80024f0:	4613      	mov	r3, r2
 80024f2:	80fb      	strh	r3, [r7, #6]
    size_t current_index = 0;
 80024f4:	2300      	movs	r3, #0
 80024f6:	61fb      	str	r3, [r7, #28]
    CanardPoolAllocatorBlock *abuf = buf;
 80024f8:	68bb      	ldr	r3, [r7, #8]
 80024fa:	617b      	str	r3, [r7, #20]
    allocator->arena = buf;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	68ba      	ldr	r2, [r7, #8]
 8002500:	611a      	str	r2, [r3, #16]
    CanardPoolAllocatorBlock** current_block = &(allocator->free_list);
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	3304      	adds	r3, #4
 8002506:	61bb      	str	r3, [r7, #24]
    while (current_index < buf_len)
 8002508:	e00b      	b.n	8002522 <initPoolAllocator+0x3c>
    {
        *current_block = &abuf[current_index];
 800250a:	69fb      	ldr	r3, [r7, #28]
 800250c:	015b      	lsls	r3, r3, #5
 800250e:	697a      	ldr	r2, [r7, #20]
 8002510:	441a      	add	r2, r3
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	601a      	str	r2, [r3, #0]
        current_block = &((*current_block)->next);
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	61bb      	str	r3, [r7, #24]
        current_index++;
 800251c:	69fb      	ldr	r3, [r7, #28]
 800251e:	3301      	adds	r3, #1
 8002520:	61fb      	str	r3, [r7, #28]
    while (current_index < buf_len)
 8002522:	88fb      	ldrh	r3, [r7, #6]
 8002524:	69fa      	ldr	r2, [r7, #28]
 8002526:	429a      	cmp	r2, r3
 8002528:	d3ef      	bcc.n	800250a <initPoolAllocator+0x24>
    }
    *current_block = NULL;
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	2200      	movs	r2, #0
 800252e:	601a      	str	r2, [r3, #0]

    allocator->statistics.capacity_blocks = buf_len;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	88fa      	ldrh	r2, [r7, #6]
 8002534:	811a      	strh	r2, [r3, #8]
    allocator->statistics.current_usage_blocks = 0;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	2200      	movs	r2, #0
 800253a:	815a      	strh	r2, [r3, #10]
    allocator->statistics.peak_usage_blocks = 0;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	2200      	movs	r2, #0
 8002540:	819a      	strh	r2, [r3, #12]
    // user should initialize semaphore after the canardInit
    // or at first call of canard_allocate_sem_take
    allocator->semaphore = NULL;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	2200      	movs	r2, #0
 8002546:	601a      	str	r2, [r3, #0]
}
 8002548:	bf00      	nop
 800254a:	3724      	adds	r7, #36	@ 0x24
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <allocateBlock>:

CANARD_INTERNAL void* allocateBlock(CanardPoolAllocator* allocator)
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_take(allocator);
#endif
    // Check if there are any blocks available in the free list.
    if (allocator->free_list == NULL)
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	2b00      	cmp	r3, #0
 8002562:	d101      	bne.n	8002568 <allocateBlock+0x14>
    {
#if CANARD_ALLOCATE_SEM
        canard_allocate_sem_give(allocator);
#endif
        return NULL;
 8002564:	2300      	movs	r3, #0
 8002566:	e018      	b.n	800259a <allocateBlock+0x46>
    }

    // Take first available block and prepares next block for use.
    void* result = allocator->free_list;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	60fb      	str	r3, [r7, #12]
    allocator->free_list = allocator->free_list->next;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	605a      	str	r2, [r3, #4]

    // Update statistics
    allocator->statistics.current_usage_blocks++;
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	895b      	ldrh	r3, [r3, #10]
 800257c:	3301      	adds	r3, #1
 800257e:	b29a      	uxth	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	815a      	strh	r2, [r3, #10]
    if (allocator->statistics.peak_usage_blocks < allocator->statistics.current_usage_blocks)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	899a      	ldrh	r2, [r3, #12]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	895b      	ldrh	r3, [r3, #10]
 800258c:	429a      	cmp	r2, r3
 800258e:	d203      	bcs.n	8002598 <allocateBlock+0x44>
    {
        allocator->statistics.peak_usage_blocks = allocator->statistics.current_usage_blocks;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	895a      	ldrh	r2, [r3, #10]
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	819a      	strh	r2, [r3, #12]
    }
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_give(allocator);
#endif
    return result;
 8002598:	68fb      	ldr	r3, [r7, #12]
}
 800259a:	4618      	mov	r0, r3
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr

080025a6 <freeBlock>:

CANARD_INTERNAL void freeBlock(CanardPoolAllocator* allocator, void* p)
{
 80025a6:	b480      	push	{r7}
 80025a8:	b085      	sub	sp, #20
 80025aa:	af00      	add	r7, sp, #0
 80025ac:	6078      	str	r0, [r7, #4]
 80025ae:	6039      	str	r1, [r7, #0]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_take(allocator);
#endif
    CanardPoolAllocatorBlock* block = (CanardPoolAllocatorBlock*) p;
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	60fb      	str	r3, [r7, #12]

    block->next = allocator->free_list;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	601a      	str	r2, [r3, #0]
    allocator->free_list = block;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	605a      	str	r2, [r3, #4]

    CANARD_ASSERT(allocator->statistics.current_usage_blocks > 0);
    allocator->statistics.current_usage_blocks--;
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	895b      	ldrh	r3, [r3, #10]
 80025c6:	3b01      	subs	r3, #1
 80025c8:	b29a      	uxth	r2, r3
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	815a      	strh	r2, [r3, #10]
#if CANARD_ALLOCATE_SEM
    canard_allocate_sem_give(allocator);
#endif
}
 80025ce:	bf00      	nop
 80025d0:	3714      	adds	r7, #20
 80025d2:	46bd      	mov	sp, r7
 80025d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d8:	4770      	bx	lr
	...

080025dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b094      	sub	sp, #80	@ 0x50
 80025e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80025e2:	f002 f9bf 	bl	8004964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80025e6:	f000 f91f 	bl	8002828 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80025ea:	f000 fa39 	bl	8002a60 <MX_GPIO_Init>
  MX_CAN1_Init();
 80025ee:	f000 f985 	bl	80028fc <MX_CAN1_Init>
  MX_I2S3_Init();
 80025f2:	f000 f9cf 	bl	8002994 <MX_I2S3_Init>
  MX_SPI1_Init();
 80025f6:	f000 f9fd 	bl	80029f4 <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80025fa:	f00a f9dd 	bl	800c9b8 <MX_USB_HOST_Init>
  
  /* USER CODE BEGIN 2 */
  // Initialize LEDs
  HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_RESET); // Green LED off
 80025fe:	2200      	movs	r2, #0
 8002600:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002604:	4882      	ldr	r0, [pc, #520]	@ (8002810 <main+0x234>)
 8002606:	f003 fbb3 	bl	8005d70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_RESET); // Red LED off
 800260a:	2200      	movs	r2, #0
 800260c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002610:	487f      	ldr	r0, [pc, #508]	@ (8002810 <main+0x234>)
 8002612:	f003 fbad 	bl	8005d70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_RESET); // Orange LED off
 8002616:	2200      	movs	r2, #0
 8002618:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800261c:	487c      	ldr	r0, [pc, #496]	@ (8002810 <main+0x234>)
 800261e:	f003 fba7 	bl	8005d70 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_RESET); // Blue LED off
 8002622:	2200      	movs	r2, #0
 8002624:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002628:	4879      	ldr	r0, [pc, #484]	@ (8002810 <main+0x234>)
 800262a:	f003 fba1 	bl	8005d70 <HAL_GPIO_WritePin>
  
  // Initialize libcanard
  canardInit(&canard, 
 800262e:	2300      	movs	r3, #0
 8002630:	9301      	str	r3, [sp, #4]
 8002632:	4b78      	ldr	r3, [pc, #480]	@ (8002814 <main+0x238>)
 8002634:	9300      	str	r3, [sp, #0]
 8002636:	4b78      	ldr	r3, [pc, #480]	@ (8002818 <main+0x23c>)
 8002638:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800263c:	4977      	ldr	r1, [pc, #476]	@ (800281c <main+0x240>)
 800263e:	4878      	ldr	r0, [pc, #480]	@ (8002820 <main+0x244>)
 8002640:	f7fe f908 	bl	8000854 <canardInit>
             onTransferReceived, 
             shouldAcceptTransfer,
             NULL);
  
  // Set node ID
  canardSetLocalNodeID(&canard, NODE_ID);
 8002644:	2160      	movs	r1, #96	@ 0x60
 8002646:	4876      	ldr	r0, [pc, #472]	@ (8002820 <main+0x244>)
 8002648:	f7fe f938 	bl	80008bc <canardSetLocalNodeID>
  
  // Configure CAN filter to accept all messages
  CAN_FilterTypeDef canFilter;
  canFilter.FilterBank = 0;
 800264c:	2300      	movs	r3, #0
 800264e:	61bb      	str	r3, [r7, #24]
  canFilter.FilterMode = CAN_FILTERMODE_IDMASK;
 8002650:	2300      	movs	r3, #0
 8002652:	61fb      	str	r3, [r7, #28]
  canFilter.FilterScale = CAN_FILTERSCALE_32BIT;
 8002654:	2301      	movs	r3, #1
 8002656:	623b      	str	r3, [r7, #32]
  canFilter.FilterIdHigh = 0x0000;
 8002658:	2300      	movs	r3, #0
 800265a:	607b      	str	r3, [r7, #4]
  canFilter.FilterIdLow = 0x0000;
 800265c:	2300      	movs	r3, #0
 800265e:	60bb      	str	r3, [r7, #8]
  canFilter.FilterMaskIdHigh = 0x0000;
 8002660:	2300      	movs	r3, #0
 8002662:	60fb      	str	r3, [r7, #12]
  canFilter.FilterMaskIdLow = 0x0000;
 8002664:	2300      	movs	r3, #0
 8002666:	613b      	str	r3, [r7, #16]
  canFilter.FilterFIFOAssignment = CAN_FILTER_FIFO0;
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
  canFilter.FilterActivation = CAN_FILTER_ENABLE;
 800266c:	2301      	movs	r3, #1
 800266e:	627b      	str	r3, [r7, #36]	@ 0x24
  
  if (HAL_CAN_ConfigFilter(&hcan1, &canFilter) != HAL_OK) {
 8002670:	1d3b      	adds	r3, r7, #4
 8002672:	4619      	mov	r1, r3
 8002674:	486b      	ldr	r0, [pc, #428]	@ (8002824 <main+0x248>)
 8002676:	f002 fb2b 	bl	8004cd0 <HAL_CAN_ConfigFilter>
 800267a:	4603      	mov	r3, r0
 800267c:	2b00      	cmp	r3, #0
 800267e:	d001      	beq.n	8002684 <main+0xa8>
    Error_Handler();
 8002680:	f001 fe46 	bl	8004310 <Error_Handler>
  }
  
  // Start CAN in normal mode
  if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 8002684:	4867      	ldr	r0, [pc, #412]	@ (8002824 <main+0x248>)
 8002686:	f002 fc03 	bl	8004e90 <HAL_CAN_Start>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d001      	beq.n	8002694 <main+0xb8>
    Error_Handler();
 8002690:	f001 fe3e 	bl	8004310 <Error_Handler>
  }
  
  // Enable CAN interrupts for receive
  if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 8002694:	2102      	movs	r1, #2
 8002696:	4863      	ldr	r0, [pc, #396]	@ (8002824 <main+0x248>)
 8002698:	f002 fe65 	bl	8005366 <HAL_CAN_ActivateNotification>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d001      	beq.n	80026a6 <main+0xca>
    Error_Handler();
 80026a2:	f001 fe35 	bl	8004310 <Error_Handler>
  }
  
  // Main timing variables
  uint32_t last_heartbeat_ms = 0;
 80026a6:	2300      	movs	r3, #0
 80026a8:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t last_name_send_ms = 0;
 80026aa:	2300      	movs	r3, #0
 80026ac:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t last_epos4_statuscheck_ms = 0;
 80026ae:	2300      	movs	r3, #0
 80026b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t last_epos4_control_ms = 0;
 80026b2:	2300      	movs	r3, #0
 80026b4:	63bb      	str	r3, [r7, #56]	@ 0x38
  
  // Wait for EPOS4 controller to boot up
  HAL_Delay(1000);
 80026b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80026ba:	f002 f9c5 	bl	8004a48 <HAL_Delay>
  
  // Flash all LEDs to show we're starting EPOS4 initialization
  HAL_GPIO_WritePin(GPIOD, LD3_Pin | LD4_Pin | LD5_Pin | LD6_Pin, GPIO_PIN_SET);
 80026be:	2201      	movs	r2, #1
 80026c0:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80026c4:	4852      	ldr	r0, [pc, #328]	@ (8002810 <main+0x234>)
 80026c6:	f003 fb53 	bl	8005d70 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 80026ca:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80026ce:	f002 f9bb 	bl	8004a48 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, LD3_Pin | LD4_Pin | LD5_Pin | LD6_Pin, GPIO_PIN_RESET);
 80026d2:	2200      	movs	r2, #0
 80026d4:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 80026d8:	484d      	ldr	r0, [pc, #308]	@ (8002810 <main+0x234>)
 80026da:	f003 fb49 	bl	8005d70 <HAL_GPIO_WritePin>
  HAL_Delay(300);
 80026de:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 80026e2:	f002 f9b1 	bl	8004a48 <HAL_Delay>
  
  // Initialize EPOS4 controller for position control mode
  
  // Step 1: Reset communications
  CANopen_NMT_Command(&hcan1, 0x82, EPOS4_NODE_ID); // 0x82 = Reset communications
 80026e6:	2201      	movs	r2, #1
 80026e8:	2182      	movs	r1, #130	@ 0x82
 80026ea:	484e      	ldr	r0, [pc, #312]	@ (8002824 <main+0x248>)
 80026ec:	f001 fe1e 	bl	800432c <CANopen_NMT_Command>
  HAL_Delay(500); // Wait for reset to complete
 80026f0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80026f4:	f002 f9a8 	bl	8004a48 <HAL_Delay>
  
  // Step 2: Start remote node
  CANopen_NMT_Command(&hcan1, 0x01, EPOS4_NODE_ID); // 0x01 = Start remote node
 80026f8:	2201      	movs	r2, #1
 80026fa:	2101      	movs	r1, #1
 80026fc:	4849      	ldr	r0, [pc, #292]	@ (8002824 <main+0x248>)
 80026fe:	f001 fe15 	bl	800432c <CANopen_NMT_Command>
  HAL_Delay(200);
 8002702:	20c8      	movs	r0, #200	@ 0xc8
 8002704:	f002 f9a0 	bl	8004a48 <HAL_Delay>
  
  // Step 3: Set operation mode to position mode
  EPOS4_SetOperationMode(&hcan1, EPOS4_NODE_ID, MODE_PROFILE_POSITION);
 8002708:	2201      	movs	r2, #1
 800270a:	2101      	movs	r1, #1
 800270c:	4845      	ldr	r0, [pc, #276]	@ (8002824 <main+0x248>)
 800270e:	f001 fe36 	bl	800437e <EPOS4_SetOperationMode>
  HAL_Delay(100);
 8002712:	2064      	movs	r0, #100	@ 0x64
 8002714:	f002 f998 	bl	8004a48 <HAL_Delay>
  
  // Step 4: Set control word to shutdown state (prepare for enable)
  EPOS4_SetControlWord(&hcan1, EPOS4_NODE_ID, 0x0006);
 8002718:	2206      	movs	r2, #6
 800271a:	2101      	movs	r1, #1
 800271c:	4841      	ldr	r0, [pc, #260]	@ (8002824 <main+0x248>)
 800271e:	f001 fd47 	bl	80041b0 <EPOS4_SetControlWord>
  HAL_Delay(100);
 8002722:	2064      	movs	r0, #100	@ 0x64
 8002724:	f002 f990 	bl	8004a48 <HAL_Delay>
  
  // Step 5: Set control word to switch on state
  EPOS4_SetControlWord(&hcan1, EPOS4_NODE_ID, 0x0007);
 8002728:	2207      	movs	r2, #7
 800272a:	2101      	movs	r1, #1
 800272c:	483d      	ldr	r0, [pc, #244]	@ (8002824 <main+0x248>)
 800272e:	f001 fd3f 	bl	80041b0 <EPOS4_SetControlWord>
  HAL_Delay(100);
 8002732:	2064      	movs	r0, #100	@ 0x64
 8002734:	f002 f988 	bl	8004a48 <HAL_Delay>
  
  // Step 6: Configure motion profile parameters for smooth tilt movement
  // Profile velocity (speed during positioning)
  EPOS4_SetProfileVelocity(&hcan1, EPOS4_NODE_ID, 5000);
 8002738:	f241 3288 	movw	r2, #5000	@ 0x1388
 800273c:	2101      	movs	r1, #1
 800273e:	4839      	ldr	r0, [pc, #228]	@ (8002824 <main+0x248>)
 8002740:	f001 fe53 	bl	80043ea <EPOS4_SetProfileVelocity>
  HAL_Delay(50);
 8002744:	2032      	movs	r0, #50	@ 0x32
 8002746:	f002 f97f 	bl	8004a48 <HAL_Delay>
  
  // Profile acceleration (ramp-up rate)
  EPOS4_SetProfileAcceleration(&hcan1, EPOS4_NODE_ID, 10000);
 800274a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800274e:	2101      	movs	r1, #1
 8002750:	4834      	ldr	r0, [pc, #208]	@ (8002824 <main+0x248>)
 8002752:	f001 fe8c 	bl	800446e <EPOS4_SetProfileAcceleration>
  HAL_Delay(50);
 8002756:	2032      	movs	r0, #50	@ 0x32
 8002758:	f002 f976 	bl	8004a48 <HAL_Delay>
  
  // Profile deceleration (ramp-down rate)
  EPOS4_SetProfileDeceleration(&hcan1, EPOS4_NODE_ID, 10000);
 800275c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8002760:	2101      	movs	r1, #1
 8002762:	4830      	ldr	r0, [pc, #192]	@ (8002824 <main+0x248>)
 8002764:	f001 fec5 	bl	80044f2 <EPOS4_SetProfileDeceleration>
  HAL_Delay(50);
 8002768:	2032      	movs	r0, #50	@ 0x32
 800276a:	f002 f96d 	bl	8004a48 <HAL_Delay>
  
  // Step 7: Enable operation
  EPOS4_SetControlWord(&hcan1, EPOS4_NODE_ID, 0x000F);
 800276e:	220f      	movs	r2, #15
 8002770:	2101      	movs	r1, #1
 8002772:	482c      	ldr	r0, [pc, #176]	@ (8002824 <main+0x248>)
 8002774:	f001 fd1c 	bl	80041b0 <EPOS4_SetControlWord>
  HAL_Delay(100);
 8002778:	2064      	movs	r0, #100	@ 0x64
 800277a:	f002 f965 	bl	8004a48 <HAL_Delay>
  
  // Turn on green LED to show initialization complete
  HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_SET);
 800277e:	2201      	movs	r2, #1
 8002780:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002784:	4822      	ldr	r0, [pc, #136]	@ (8002810 <main+0x234>)
 8002786:	f003 faf3 	bl	8005d70 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 800278a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800278e:	f002 f95b 	bl	8004a48 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_RESET);
 8002792:	2200      	movs	r2, #0
 8002794:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002798:	481d      	ldr	r0, [pc, #116]	@ (8002810 <main+0x234>)
 800279a:	f003 fae9 	bl	8005d70 <HAL_GPIO_WritePin>
  
  // Turn on orange LED (LD3) to show main loop is running
  HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_SET);
 800279e:	2201      	movs	r2, #1
 80027a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80027a4:	481a      	ldr	r0, [pc, #104]	@ (8002810 <main+0x234>)
 80027a6:	f003 fae3 	bl	8005d70 <HAL_GPIO_WritePin>
  
  // Use TILT_ macros instead of local variables
  // const int32_t min_position = -144000;  // Minimum position (fully retracted)
  // const int32_t max_position = 144000;   // Maximum position (fully extended)
  // const int32_t center_position = 0;     // Center/neutral position
  int32_t target_position = TILT_CENTER_POSITION; // Start at center position
 80027aa:	2300      	movs	r3, #0
 80027ac:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  
  // Send node name immediately at startup for faster discovery
  send_node_name();
 80027ae:	f001 fb23 	bl	8003df8 <send_node_name>
  
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80027b2:	f00a f927 	bl	800ca04 <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    
    // Send heartbeat message every 1 second
    uint32_t current_ms = HAL_GetTick();
 80027b6:	f002 f93b 	bl	8004a30 <HAL_GetTick>
 80027ba:	6338      	str	r0, [r7, #48]	@ 0x30
    if (current_ms - last_heartbeat_ms >= 1000) {
 80027bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80027c6:	d303      	bcc.n	80027d0 <main+0x1f4>
        last_heartbeat_ms = current_ms;
 80027c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027ca:	647b      	str	r3, [r7, #68]	@ 0x44
        
        // Send ArduPilot compatible heartbeat message
        send_heartbeat();
 80027cc:	f000 fb50 	bl	8002e70 <send_heartbeat>
    }
    
    // Send node name as param string every 3 seconds
    if (current_ms - last_name_send_ms >= 3000) {
 80027d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027d4:	1ad3      	subs	r3, r2, r3
 80027d6:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80027da:	4293      	cmp	r3, r2
 80027dc:	d903      	bls.n	80027e6 <main+0x20a>
        last_name_send_ms = current_ms;
 80027de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027e0:	643b      	str	r3, [r7, #64]	@ 0x40
        
        // Send node name in UAVCAN param string format
        send_node_name();
 80027e2:	f001 fb09 	bl	8003df8 <send_node_name>
    }
    
    // Check EPOS4 status every 500ms
    if (current_ms - last_epos4_statuscheck_ms >= 500) {
 80027e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027ea:	1ad3      	subs	r3, r2, r3
 80027ec:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 80027f0:	d30b      	bcc.n	800280a <main+0x22e>
        last_epos4_statuscheck_ms = current_ms;
 80027f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        
        // Read the actual position
        int32_t current_position = EPOS4_GetActualPosition(&hcan1, EPOS4_NODE_ID);
 80027f6:	2101      	movs	r1, #1
 80027f8:	480a      	ldr	r0, [pc, #40]	@ (8002824 <main+0x248>)
 80027fa:	f7fd ff15 	bl	8000628 <EPOS4_GetActualPosition>
 80027fe:	62f8      	str	r0, [r7, #44]	@ 0x2c
        
        // Blink blue LED (LD6) to indicate EPOS4 status check
        HAL_GPIO_TogglePin(GPIOD, LD6_Pin);
 8002800:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002804:	4802      	ldr	r0, [pc, #8]	@ (8002810 <main+0x234>)
 8002806:	f003 facc 	bl	8005da2 <HAL_GPIO_TogglePin>
    }
    
    // Process any pending CAN transmissions
    process_canard_TX_queue();
 800280a:	f000 fa37 	bl	8002c7c <process_canard_TX_queue>
  {
 800280e:	e7d0      	b.n	80027b2 <main+0x1d6>
 8002810:	40020c00 	.word	0x40020c00
 8002814:	08002f59 	.word	0x08002f59
 8002818:	08003391 	.word	0x08003391
 800281c:	20000168 	.word	0x20000168
 8002820:	20000568 	.word	0x20000568
 8002824:	200000a0 	.word	0x200000a0

08002828 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002828:	b580      	push	{r7, lr}
 800282a:	b094      	sub	sp, #80	@ 0x50
 800282c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800282e:	f107 0320 	add.w	r3, r7, #32
 8002832:	2230      	movs	r2, #48	@ 0x30
 8002834:	2100      	movs	r1, #0
 8002836:	4618      	mov	r0, r3
 8002838:	f00a fc86 	bl	800d148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800283c:	f107 030c 	add.w	r3, r7, #12
 8002840:	2200      	movs	r2, #0
 8002842:	601a      	str	r2, [r3, #0]
 8002844:	605a      	str	r2, [r3, #4]
 8002846:	609a      	str	r2, [r3, #8]
 8002848:	60da      	str	r2, [r3, #12]
 800284a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800284c:	2300      	movs	r3, #0
 800284e:	60bb      	str	r3, [r7, #8]
 8002850:	4b28      	ldr	r3, [pc, #160]	@ (80028f4 <SystemClock_Config+0xcc>)
 8002852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002854:	4a27      	ldr	r2, [pc, #156]	@ (80028f4 <SystemClock_Config+0xcc>)
 8002856:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800285a:	6413      	str	r3, [r2, #64]	@ 0x40
 800285c:	4b25      	ldr	r3, [pc, #148]	@ (80028f4 <SystemClock_Config+0xcc>)
 800285e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002860:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002864:	60bb      	str	r3, [r7, #8]
 8002866:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002868:	2300      	movs	r3, #0
 800286a:	607b      	str	r3, [r7, #4]
 800286c:	4b22      	ldr	r3, [pc, #136]	@ (80028f8 <SystemClock_Config+0xd0>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a21      	ldr	r2, [pc, #132]	@ (80028f8 <SystemClock_Config+0xd0>)
 8002872:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002876:	6013      	str	r3, [r2, #0]
 8002878:	4b1f      	ldr	r3, [pc, #124]	@ (80028f8 <SystemClock_Config+0xd0>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002880:	607b      	str	r3, [r7, #4]
 8002882:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002884:	2301      	movs	r3, #1
 8002886:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002888:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800288c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800288e:	2302      	movs	r3, #2
 8002890:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002892:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8002896:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8002898:	2308      	movs	r3, #8
 800289a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800289c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80028a0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80028a2:	2302      	movs	r3, #2
 80028a4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80028a6:	2307      	movs	r3, #7
 80028a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80028aa:	f107 0320 	add.w	r3, r7, #32
 80028ae:	4618      	mov	r0, r3
 80028b0:	f006 f866 	bl	8008980 <HAL_RCC_OscConfig>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80028ba:	f001 fd29 	bl	8004310 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80028be:	230f      	movs	r3, #15
 80028c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80028c2:	2302      	movs	r3, #2
 80028c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80028c6:	2300      	movs	r3, #0
 80028c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80028ca:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80028ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80028d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80028d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80028d6:	f107 030c 	add.w	r3, r7, #12
 80028da:	2105      	movs	r1, #5
 80028dc:	4618      	mov	r0, r3
 80028de:	f006 fac7 	bl	8008e70 <HAL_RCC_ClockConfig>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80028e8:	f001 fd12 	bl	8004310 <Error_Handler>
  }
}
 80028ec:	bf00      	nop
 80028ee:	3750      	adds	r7, #80	@ 0x50
 80028f0:	46bd      	mov	sp, r7
 80028f2:	bd80      	pop	{r7, pc}
 80028f4:	40023800 	.word	0x40023800
 80028f8:	40007000 	.word	0x40007000

080028fc <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002900:	4b21      	ldr	r3, [pc, #132]	@ (8002988 <MX_CAN1_Init+0x8c>)
 8002902:	4a22      	ldr	r2, [pc, #136]	@ (800298c <MX_CAN1_Init+0x90>)
 8002904:	601a      	str	r2, [r3, #0]
  
  // Configure for 1Mbps with 168MHz clock (APB1 = 42MHz)
  hcan1.Init.Prescaler = 3;
 8002906:	4b20      	ldr	r3, [pc, #128]	@ (8002988 <MX_CAN1_Init+0x8c>)
 8002908:	2203      	movs	r2, #3
 800290a:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 800290c:	4b1e      	ldr	r3, [pc, #120]	@ (8002988 <MX_CAN1_Init+0x8c>)
 800290e:	2200      	movs	r2, #0
 8002910:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002912:	4b1d      	ldr	r3, [pc, #116]	@ (8002988 <MX_CAN1_Init+0x8c>)
 8002914:	2200      	movs	r2, #0
 8002916:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_11TQ;  // Changed from 12TQ to 11TQ
 8002918:	4b1b      	ldr	r3, [pc, #108]	@ (8002988 <MX_CAN1_Init+0x8c>)
 800291a:	f44f 2220 	mov.w	r2, #655360	@ 0xa0000
 800291e:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;   // Changed from 1TQ to 2TQ
 8002920:	4b19      	ldr	r3, [pc, #100]	@ (8002988 <MX_CAN1_Init+0x8c>)
 8002922:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002926:	615a      	str	r2, [r3, #20]
  
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002928:	4b17      	ldr	r3, [pc, #92]	@ (8002988 <MX_CAN1_Init+0x8c>)
 800292a:	2200      	movs	r2, #0
 800292c:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;      // Enable auto recovery from bus-off state
 800292e:	4b16      	ldr	r3, [pc, #88]	@ (8002988 <MX_CAN1_Init+0x8c>)
 8002930:	2201      	movs	r2, #1
 8002932:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8002934:	4b14      	ldr	r3, [pc, #80]	@ (8002988 <MX_CAN1_Init+0x8c>)
 8002936:	2200      	movs	r2, #0
 8002938:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 800293a:	4b13      	ldr	r3, [pc, #76]	@ (8002988 <MX_CAN1_Init+0x8c>)
 800293c:	2201      	movs	r2, #1
 800293e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002940:	4b11      	ldr	r3, [pc, #68]	@ (8002988 <MX_CAN1_Init+0x8c>)
 8002942:	2200      	movs	r2, #0
 8002944:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8002946:	4b10      	ldr	r3, [pc, #64]	@ (8002988 <MX_CAN1_Init+0x8c>)
 8002948:	2200      	movs	r2, #0
 800294a:	775a      	strb	r2, [r3, #29]
  
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800294c:	480e      	ldr	r0, [pc, #56]	@ (8002988 <MX_CAN1_Init+0x8c>)
 800294e:	f002 f8c3 	bl	8004ad8 <HAL_CAN_Init>
 8002952:	4603      	mov	r3, r0
 8002954:	2b00      	cmp	r3, #0
 8002956:	d001      	beq.n	800295c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8002958:	f001 fcda 	bl	8004310 <Error_Handler>
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

  // Initialize EPOS4 motor controller after CAN initialization
  if (EPOS4_Init_Legacy(&hcan1, EPOS4_NODE_ID)) {
 800295c:	2101      	movs	r1, #1
 800295e:	480a      	ldr	r0, [pc, #40]	@ (8002988 <MX_CAN1_Init+0x8c>)
 8002960:	f001 fc6d 	bl	800423e <EPOS4_Init_Legacy>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d006      	beq.n	8002978 <MX_CAN1_Init+0x7c>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET); // Green LED on success
 800296a:	2201      	movs	r2, #1
 800296c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002970:	4807      	ldr	r0, [pc, #28]	@ (8002990 <MX_CAN1_Init+0x94>)
 8002972:	f003 f9fd 	bl	8005d70 <HAL_GPIO_WritePin>
  } else {
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); // Red LED on failure
  }
}
 8002976:	e005      	b.n	8002984 <MX_CAN1_Init+0x88>
    HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14, GPIO_PIN_SET); // Red LED on failure
 8002978:	2201      	movs	r2, #1
 800297a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800297e:	4804      	ldr	r0, [pc, #16]	@ (8002990 <MX_CAN1_Init+0x94>)
 8002980:	f003 f9f6 	bl	8005d70 <HAL_GPIO_WritePin>
}
 8002984:	bf00      	nop
 8002986:	bd80      	pop	{r7, pc}
 8002988:	200000a0 	.word	0x200000a0
 800298c:	40006400 	.word	0x40006400
 8002990:	40020c00 	.word	0x40020c00

08002994 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8002998:	4b13      	ldr	r3, [pc, #76]	@ (80029e8 <MX_I2S3_Init+0x54>)
 800299a:	4a14      	ldr	r2, [pc, #80]	@ (80029ec <MX_I2S3_Init+0x58>)
 800299c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800299e:	4b12      	ldr	r3, [pc, #72]	@ (80029e8 <MX_I2S3_Init+0x54>)
 80029a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029a4:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80029a6:	4b10      	ldr	r3, [pc, #64]	@ (80029e8 <MX_I2S3_Init+0x54>)
 80029a8:	2200      	movs	r2, #0
 80029aa:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80029ac:	4b0e      	ldr	r3, [pc, #56]	@ (80029e8 <MX_I2S3_Init+0x54>)
 80029ae:	2200      	movs	r2, #0
 80029b0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80029b2:	4b0d      	ldr	r3, [pc, #52]	@ (80029e8 <MX_I2S3_Init+0x54>)
 80029b4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80029b8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80029ba:	4b0b      	ldr	r3, [pc, #44]	@ (80029e8 <MX_I2S3_Init+0x54>)
 80029bc:	4a0c      	ldr	r2, [pc, #48]	@ (80029f0 <MX_I2S3_Init+0x5c>)
 80029be:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80029c0:	4b09      	ldr	r3, [pc, #36]	@ (80029e8 <MX_I2S3_Init+0x54>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80029c6:	4b08      	ldr	r3, [pc, #32]	@ (80029e8 <MX_I2S3_Init+0x54>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80029cc:	4b06      	ldr	r3, [pc, #24]	@ (80029e8 <MX_I2S3_Init+0x54>)
 80029ce:	2200      	movs	r2, #0
 80029d0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80029d2:	4805      	ldr	r0, [pc, #20]	@ (80029e8 <MX_I2S3_Init+0x54>)
 80029d4:	f005 fb34 	bl	8008040 <HAL_I2S_Init>
 80029d8:	4603      	mov	r3, r0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d001      	beq.n	80029e2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80029de:	f001 fc97 	bl	8004310 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80029e2:	bf00      	nop
 80029e4:	bd80      	pop	{r7, pc}
 80029e6:	bf00      	nop
 80029e8:	200000c8 	.word	0x200000c8
 80029ec:	40003c00 	.word	0x40003c00
 80029f0:	00017700 	.word	0x00017700

080029f4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80029f8:	4b17      	ldr	r3, [pc, #92]	@ (8002a58 <MX_SPI1_Init+0x64>)
 80029fa:	4a18      	ldr	r2, [pc, #96]	@ (8002a5c <MX_SPI1_Init+0x68>)
 80029fc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80029fe:	4b16      	ldr	r3, [pc, #88]	@ (8002a58 <MX_SPI1_Init+0x64>)
 8002a00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8002a04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002a06:	4b14      	ldr	r3, [pc, #80]	@ (8002a58 <MX_SPI1_Init+0x64>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002a0c:	4b12      	ldr	r3, [pc, #72]	@ (8002a58 <MX_SPI1_Init+0x64>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002a12:	4b11      	ldr	r3, [pc, #68]	@ (8002a58 <MX_SPI1_Init+0x64>)
 8002a14:	2200      	movs	r2, #0
 8002a16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002a18:	4b0f      	ldr	r3, [pc, #60]	@ (8002a58 <MX_SPI1_Init+0x64>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8002a1e:	4b0e      	ldr	r3, [pc, #56]	@ (8002a58 <MX_SPI1_Init+0x64>)
 8002a20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002a26:	4b0c      	ldr	r3, [pc, #48]	@ (8002a58 <MX_SPI1_Init+0x64>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002a2c:	4b0a      	ldr	r3, [pc, #40]	@ (8002a58 <MX_SPI1_Init+0x64>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8002a32:	4b09      	ldr	r3, [pc, #36]	@ (8002a58 <MX_SPI1_Init+0x64>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002a38:	4b07      	ldr	r3, [pc, #28]	@ (8002a58 <MX_SPI1_Init+0x64>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8002a3e:	4b06      	ldr	r3, [pc, #24]	@ (8002a58 <MX_SPI1_Init+0x64>)
 8002a40:	220a      	movs	r2, #10
 8002a42:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8002a44:	4804      	ldr	r0, [pc, #16]	@ (8002a58 <MX_SPI1_Init+0x64>)
 8002a46:	f006 fd41 	bl	80094cc <HAL_SPI_Init>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d001      	beq.n	8002a54 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8002a50:	f001 fc5e 	bl	8004310 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8002a54:	bf00      	nop
 8002a56:	bd80      	pop	{r7, pc}
 8002a58:	20000110 	.word	0x20000110
 8002a5c:	40013000 	.word	0x40013000

08002a60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b08c      	sub	sp, #48	@ 0x30
 8002a64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a66:	f107 031c 	add.w	r3, r7, #28
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	605a      	str	r2, [r3, #4]
 8002a70:	609a      	str	r2, [r3, #8]
 8002a72:	60da      	str	r2, [r3, #12]
 8002a74:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002a76:	2300      	movs	r3, #0
 8002a78:	61bb      	str	r3, [r7, #24]
 8002a7a:	4b7a      	ldr	r3, [pc, #488]	@ (8002c64 <MX_GPIO_Init+0x204>)
 8002a7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a7e:	4a79      	ldr	r2, [pc, #484]	@ (8002c64 <MX_GPIO_Init+0x204>)
 8002a80:	f043 0310 	orr.w	r3, r3, #16
 8002a84:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a86:	4b77      	ldr	r3, [pc, #476]	@ (8002c64 <MX_GPIO_Init+0x204>)
 8002a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a8a:	f003 0310 	and.w	r3, r3, #16
 8002a8e:	61bb      	str	r3, [r7, #24]
 8002a90:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a92:	2300      	movs	r3, #0
 8002a94:	617b      	str	r3, [r7, #20]
 8002a96:	4b73      	ldr	r3, [pc, #460]	@ (8002c64 <MX_GPIO_Init+0x204>)
 8002a98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9a:	4a72      	ldr	r2, [pc, #456]	@ (8002c64 <MX_GPIO_Init+0x204>)
 8002a9c:	f043 0304 	orr.w	r3, r3, #4
 8002aa0:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aa2:	4b70      	ldr	r3, [pc, #448]	@ (8002c64 <MX_GPIO_Init+0x204>)
 8002aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa6:	f003 0304 	and.w	r3, r3, #4
 8002aaa:	617b      	str	r3, [r7, #20]
 8002aac:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002aae:	2300      	movs	r3, #0
 8002ab0:	613b      	str	r3, [r7, #16]
 8002ab2:	4b6c      	ldr	r3, [pc, #432]	@ (8002c64 <MX_GPIO_Init+0x204>)
 8002ab4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ab6:	4a6b      	ldr	r2, [pc, #428]	@ (8002c64 <MX_GPIO_Init+0x204>)
 8002ab8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002abc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002abe:	4b69      	ldr	r3, [pc, #420]	@ (8002c64 <MX_GPIO_Init+0x204>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ac6:	613b      	str	r3, [r7, #16]
 8002ac8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	4b65      	ldr	r3, [pc, #404]	@ (8002c64 <MX_GPIO_Init+0x204>)
 8002ad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ad2:	4a64      	ldr	r2, [pc, #400]	@ (8002c64 <MX_GPIO_Init+0x204>)
 8002ad4:	f043 0301 	orr.w	r3, r3, #1
 8002ad8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ada:	4b62      	ldr	r3, [pc, #392]	@ (8002c64 <MX_GPIO_Init+0x204>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ade:	f003 0301 	and.w	r3, r3, #1
 8002ae2:	60fb      	str	r3, [r7, #12]
 8002ae4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60bb      	str	r3, [r7, #8]
 8002aea:	4b5e      	ldr	r3, [pc, #376]	@ (8002c64 <MX_GPIO_Init+0x204>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aee:	4a5d      	ldr	r2, [pc, #372]	@ (8002c64 <MX_GPIO_Init+0x204>)
 8002af0:	f043 0302 	orr.w	r3, r3, #2
 8002af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8002af6:	4b5b      	ldr	r3, [pc, #364]	@ (8002c64 <MX_GPIO_Init+0x204>)
 8002af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afa:	f003 0302 	and.w	r3, r3, #2
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002b02:	2300      	movs	r3, #0
 8002b04:	607b      	str	r3, [r7, #4]
 8002b06:	4b57      	ldr	r3, [pc, #348]	@ (8002c64 <MX_GPIO_Init+0x204>)
 8002b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b0a:	4a56      	ldr	r2, [pc, #344]	@ (8002c64 <MX_GPIO_Init+0x204>)
 8002b0c:	f043 0308 	orr.w	r3, r3, #8
 8002b10:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b12:	4b54      	ldr	r3, [pc, #336]	@ (8002c64 <MX_GPIO_Init+0x204>)
 8002b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b16:	f003 0308 	and.w	r3, r3, #8
 8002b1a:	607b      	str	r3, [r7, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8002b1e:	2200      	movs	r2, #0
 8002b20:	2108      	movs	r1, #8
 8002b22:	4851      	ldr	r0, [pc, #324]	@ (8002c68 <MX_GPIO_Init+0x208>)
 8002b24:	f003 f924 	bl	8005d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002b28:	2201      	movs	r2, #1
 8002b2a:	2101      	movs	r1, #1
 8002b2c:	484f      	ldr	r0, [pc, #316]	@ (8002c6c <MX_GPIO_Init+0x20c>)
 8002b2e:	f003 f91f 	bl	8005d70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002b32:	2200      	movs	r2, #0
 8002b34:	f24f 0110 	movw	r1, #61456	@ 0xf010
 8002b38:	484d      	ldr	r0, [pc, #308]	@ (8002c70 <MX_GPIO_Init+0x210>)
 8002b3a:	f003 f919 	bl	8005d70 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8002b3e:	2308      	movs	r3, #8
 8002b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b42:	2301      	movs	r3, #1
 8002b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b46:	2300      	movs	r3, #0
 8002b48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8002b4e:	f107 031c 	add.w	r3, r7, #28
 8002b52:	4619      	mov	r1, r3
 8002b54:	4844      	ldr	r0, [pc, #272]	@ (8002c68 <MX_GPIO_Init+0x208>)
 8002b56:	f002 ff6f 	bl	8005a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b5e:	2301      	movs	r3, #1
 8002b60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b62:	2300      	movs	r3, #0
 8002b64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b66:	2300      	movs	r3, #0
 8002b68:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8002b6a:	f107 031c 	add.w	r3, r7, #28
 8002b6e:	4619      	mov	r1, r3
 8002b70:	483e      	ldr	r0, [pc, #248]	@ (8002c6c <MX_GPIO_Init+0x20c>)
 8002b72:	f002 ff61 	bl	8005a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8002b76:	2308      	movs	r3, #8
 8002b78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b7e:	2300      	movs	r3, #0
 8002b80:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b82:	2300      	movs	r3, #0
 8002b84:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002b86:	2305      	movs	r3, #5
 8002b88:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8002b8a:	f107 031c 	add.w	r3, r7, #28
 8002b8e:	4619      	mov	r1, r3
 8002b90:	4836      	ldr	r0, [pc, #216]	@ (8002c6c <MX_GPIO_Init+0x20c>)
 8002b92:	f002 ff51 	bl	8005a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8002b96:	2301      	movs	r3, #1
 8002b98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002b9a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba0:	2300      	movs	r3, #0
 8002ba2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8002ba4:	f107 031c 	add.w	r3, r7, #28
 8002ba8:	4619      	mov	r1, r3
 8002baa:	4832      	ldr	r0, [pc, #200]	@ (8002c74 <MX_GPIO_Init+0x214>)
 8002bac:	f002 ff44 	bl	8005a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8002bb0:	2304      	movs	r3, #4
 8002bb2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002bbc:	f107 031c 	add.w	r3, r7, #28
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	482d      	ldr	r0, [pc, #180]	@ (8002c78 <MX_GPIO_Init+0x218>)
 8002bc4:	f002 ff38 	bl	8005a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8002bc8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002bcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002bda:	2305      	movs	r3, #5
 8002bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8002bde:	f107 031c 	add.w	r3, r7, #28
 8002be2:	4619      	mov	r1, r3
 8002be4:	4824      	ldr	r0, [pc, #144]	@ (8002c78 <MX_GPIO_Init+0x218>)
 8002be6:	f002 ff27 	bl	8005a38 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8002bea:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8002bee:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002bf0:	2301      	movs	r3, #1
 8002bf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bf8:	2300      	movs	r3, #0
 8002bfa:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002bfc:	f107 031c 	add.w	r3, r7, #28
 8002c00:	4619      	mov	r1, r3
 8002c02:	481b      	ldr	r0, [pc, #108]	@ (8002c70 <MX_GPIO_Init+0x210>)
 8002c04:	f002 ff18 	bl	8005a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8002c08:	2320      	movs	r3, #32
 8002c0a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c0c:	2300      	movs	r3, #0
 8002c0e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c10:	2300      	movs	r3, #0
 8002c12:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8002c14:	f107 031c 	add.w	r3, r7, #28
 8002c18:	4619      	mov	r1, r3
 8002c1a:	4815      	ldr	r0, [pc, #84]	@ (8002c70 <MX_GPIO_Init+0x210>)
 8002c1c:	f002 ff0c 	bl	8005a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SCL_Pin */
  GPIO_InitStruct.Pin = Audio_SCL_Pin;
 8002c20:	2340      	movs	r3, #64	@ 0x40
 8002c22:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002c24:	2312      	movs	r3, #18
 8002c26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002c30:	2304      	movs	r3, #4
 8002c32:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Audio_SCL_GPIO_Port, &GPIO_InitStruct);
 8002c34:	f107 031c 	add.w	r3, r7, #28
 8002c38:	4619      	mov	r1, r3
 8002c3a:	480f      	ldr	r0, [pc, #60]	@ (8002c78 <MX_GPIO_Init+0x218>)
 8002c3c:	f002 fefc 	bl	8005a38 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8002c40:	2302      	movs	r3, #2
 8002c42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002c44:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8002c48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8002c4e:	f107 031c 	add.w	r3, r7, #28
 8002c52:	4619      	mov	r1, r3
 8002c54:	4804      	ldr	r0, [pc, #16]	@ (8002c68 <MX_GPIO_Init+0x208>)
 8002c56:	f002 feef 	bl	8005a38 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8002c5a:	bf00      	nop
 8002c5c:	3730      	adds	r7, #48	@ 0x30
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	bf00      	nop
 8002c64:	40023800 	.word	0x40023800
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	40020800 	.word	0x40020800
 8002c70:	40020c00 	.word	0x40020c00
 8002c74:	40020000 	.word	0x40020000
 8002c78:	40020400 	.word	0x40020400

08002c7c <process_canard_TX_queue>:
    (void)ins;
    free(pointer);
}

void process_canard_TX_queue(void)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b08a      	sub	sp, #40	@ 0x28
 8002c80:	af00      	add	r7, sp, #0
    const CanardCANFrame* txf = canardPeekTxQueue(&canard);
 8002c82:	4840      	ldr	r0, [pc, #256]	@ (8002d84 <process_canard_TX_queue+0x108>)
 8002c84:	f7fd ffce 	bl	8000c24 <canardPeekTxQueue>
 8002c88:	6278      	str	r0, [r7, #36]	@ 0x24
    while (txf != NULL)
 8002c8a:	e074      	b.n	8002d76 <process_canard_TX_queue+0xfa>
    {
        CAN_TxHeaderTypeDef tx_header;
        uint32_t tx_mailbox;

        tx_header.StdId = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	607b      	str	r3, [r7, #4]
        tx_header.ExtId = txf->id & CANARD_CAN_EXT_ID_MASK;
 8002c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 8002c98:	60bb      	str	r3, [r7, #8]
        tx_header.IDE = CAN_ID_EXT;
 8002c9a:	2304      	movs	r3, #4
 8002c9c:	60fb      	str	r3, [r7, #12]
        tx_header.RTR = CAN_RTR_DATA;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	613b      	str	r3, [r7, #16]
        tx_header.DLC = txf->data_len;
 8002ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca4:	7b1b      	ldrb	r3, [r3, #12]
 8002ca6:	617b      	str	r3, [r7, #20]

        // Turn on green LED (LD4) while trying to send
        HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8002ca8:	2201      	movs	r2, #1
 8002caa:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002cae:	4836      	ldr	r0, [pc, #216]	@ (8002d88 <process_canard_TX_queue+0x10c>)
 8002cb0:	f003 f85e 	bl	8005d70 <HAL_GPIO_WritePin>

        HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan1, &tx_header, (uint8_t*)txf->data, &tx_mailbox);
 8002cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb6:	1d1a      	adds	r2, r3, #4
 8002cb8:	463b      	mov	r3, r7
 8002cba:	1d39      	adds	r1, r7, #4
 8002cbc:	4833      	ldr	r0, [pc, #204]	@ (8002d8c <process_canard_TX_queue+0x110>)
 8002cbe:	f002 f92b 	bl	8004f18 <HAL_CAN_AddTxMessage>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        
        if (status != HAL_OK)
 8002cc8:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d036      	beq.n	8002d3e <process_canard_TX_queue+0xc2>
        {
            // If send failed, turn on red LED (LD5) to indicate error
            HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002cd6:	482c      	ldr	r0, [pc, #176]	@ (8002d88 <process_canard_TX_queue+0x10c>)
 8002cd8:	f003 f84a 	bl	8005d70 <HAL_GPIO_WritePin>
            
            // Check specific error conditions
            uint32_t error_code = HAL_CAN_GetError(&hcan1);
 8002cdc:	482b      	ldr	r0, [pc, #172]	@ (8002d8c <process_canard_TX_queue+0x110>)
 8002cde:	f002 fd8d 	bl	80057fc <HAL_CAN_GetError>
 8002ce2:	61f8      	str	r0, [r7, #28]
            if (error_code & HAL_CAN_ERROR_TX_ALST0) {
 8002ce4:	69fb      	ldr	r3, [r7, #28]
 8002ce6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d005      	beq.n	8002cfa <process_canard_TX_queue+0x7e>
                // Transmit arbitration lost - keep orange LED (LD3) on
                HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8002cee:	2201      	movs	r2, #1
 8002cf0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002cf4:	4824      	ldr	r0, [pc, #144]	@ (8002d88 <process_canard_TX_queue+0x10c>)
 8002cf6:	f003 f83b 	bl	8005d70 <HAL_GPIO_WritePin>
            }
            if (error_code & HAL_CAN_ERROR_TX_TERR0) {
 8002cfa:	69fb      	ldr	r3, [r7, #28]
 8002cfc:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d004      	beq.n	8002d0e <process_canard_TX_queue+0x92>
                // Transmit error - blink orange LED (LD3)
                HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8002d04:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002d08:	481f      	ldr	r0, [pc, #124]	@ (8002d88 <process_canard_TX_queue+0x10c>)
 8002d0a:	f003 f84a 	bl	8005da2 <HAL_GPIO_TogglePin>
            }
            if (error_code & HAL_CAN_ERROR_BOF) {
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	f003 0304 	and.w	r3, r3, #4
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d02c      	beq.n	8002d72 <process_canard_TX_queue+0xf6>
                // Bus off error - turn off all LEDs except red LED (LD5)
                HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002d18:	2200      	movs	r2, #0
 8002d1a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002d1e:	481a      	ldr	r0, [pc, #104]	@ (8002d88 <process_canard_TX_queue+0x10c>)
 8002d20:	f003 f826 	bl	8005d70 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8002d24:	2200      	movs	r2, #0
 8002d26:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002d2a:	4817      	ldr	r0, [pc, #92]	@ (8002d88 <process_canard_TX_queue+0x10c>)
 8002d2c:	f003 f820 	bl	8005d70 <HAL_GPIO_WritePin>
                HAL_GPIO_WritePin(LD6_GPIO_Port, LD6_Pin, GPIO_PIN_RESET);
 8002d30:	2200      	movs	r2, #0
 8002d32:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002d36:	4814      	ldr	r0, [pc, #80]	@ (8002d88 <process_canard_TX_queue+0x10c>)
 8002d38:	f003 f81a 	bl	8005d70 <HAL_GPIO_WritePin>
            }
            break;
 8002d3c:	e019      	b.n	8002d72 <process_canard_TX_queue+0xf6>
        }
        else
        {
            // If send succeeded, turn off error LEDs
            HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002d44:	4810      	ldr	r0, [pc, #64]	@ (8002d88 <process_canard_TX_queue+0x10c>)
 8002d46:	f003 f813 	bl	8005d70 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002d50:	480d      	ldr	r0, [pc, #52]	@ (8002d88 <process_canard_TX_queue+0x10c>)
 8002d52:	f003 f80d 	bl	8005d70 <HAL_GPIO_WritePin>
        }

        // Turn off green LED (LD4) after send attempt
        HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8002d56:	2200      	movs	r2, #0
 8002d58:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002d5c:	480a      	ldr	r0, [pc, #40]	@ (8002d88 <process_canard_TX_queue+0x10c>)
 8002d5e:	f003 f807 	bl	8005d70 <HAL_GPIO_WritePin>

        canardPopTxQueue(&canard);
 8002d62:	4808      	ldr	r0, [pc, #32]	@ (8002d84 <process_canard_TX_queue+0x108>)
 8002d64:	f7fd ff71 	bl	8000c4a <canardPopTxQueue>
        txf = canardPeekTxQueue(&canard);
 8002d68:	4806      	ldr	r0, [pc, #24]	@ (8002d84 <process_canard_TX_queue+0x108>)
 8002d6a:	f7fd ff5b 	bl	8000c24 <canardPeekTxQueue>
 8002d6e:	6278      	str	r0, [r7, #36]	@ 0x24
 8002d70:	e001      	b.n	8002d76 <process_canard_TX_queue+0xfa>
            break;
 8002d72:	bf00      	nop
    }
}
 8002d74:	e002      	b.n	8002d7c <process_canard_TX_queue+0x100>
    while (txf != NULL)
 8002d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d187      	bne.n	8002c8c <process_canard_TX_queue+0x10>
}
 8002d7c:	bf00      	nop
 8002d7e:	3728      	adds	r7, #40	@ 0x28
 8002d80:	46bd      	mov	sp, r7
 8002d82:	bd80      	pop	{r7, pc}
 8002d84:	20000568 	.word	0x20000568
 8002d88:	40020c00 	.word	0x40020c00
 8002d8c:	200000a0 	.word	0x200000a0

08002d90 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002d90:	b5b0      	push	{r4, r5, r7, lr}
 8002d92:	b090      	sub	sp, #64	@ 0x40
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
    CAN_RxHeaderTypeDef rx_header;
    uint8_t rx_data[8];

    if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &rx_header, rx_data) != HAL_OK)
 8002d98:	f107 031c 	add.w	r3, r7, #28
 8002d9c:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002da0:	2100      	movs	r1, #0
 8002da2:	6878      	ldr	r0, [r7, #4]
 8002da4:	f002 f9bd 	bl	8005122 <HAL_CAN_GetRxMessage>
 8002da8:	4603      	mov	r3, r0
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d14c      	bne.n	8002e48 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>
    {
        return;
    }

    // Toggle orange LED (LD3) to show RX activity
    can_rx_led = !can_rx_led;
 8002dae:	4b28      	ldr	r3, [pc, #160]	@ (8002e50 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	bf0c      	ite	eq
 8002db6:	2301      	moveq	r3, #1
 8002db8:	2300      	movne	r3, #0
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	4b24      	ldr	r3, [pc, #144]	@ (8002e50 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8002dc0:	701a      	strb	r2, [r3, #0]
    HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, can_rx_led ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8002dc2:	4b23      	ldr	r3, [pc, #140]	@ (8002e50 <HAL_CAN_RxFifo0MsgPendingCallback+0xc0>)
 8002dc4:	781b      	ldrb	r3, [r3, #0]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	bf14      	ite	ne
 8002dca:	2301      	movne	r3, #1
 8002dcc:	2300      	moveq	r3, #0
 8002dce:	b2db      	uxtb	r3, r3
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002dd6:	481f      	ldr	r0, [pc, #124]	@ (8002e54 <HAL_CAN_RxFifo0MsgPendingCallback+0xc4>)
 8002dd8:	f002 ffca 	bl	8005d70 <HAL_GPIO_WritePin>

    // Process EPOS4 SDO responses if applicable (StdId 0x580-0x5FF)
    if (rx_header.StdId >= 0x580 && rx_header.StdId < 0x600) {
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dde:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8002de2:	d30c      	bcc.n	8002dfe <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
 8002de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8002dea:	d208      	bcs.n	8002dfe <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
        EPOS4_ProcessRxMessage(hcan, &rx_header, rx_data);
 8002dec:	f107 021c 	add.w	r2, r7, #28
 8002df0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002df4:	4619      	mov	r1, r3
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7fd fce0 	bl	80007bc <EPOS4_ProcessRxMessage>
        return;
 8002dfc:	e025      	b.n	8002e4a <HAL_CAN_RxFifo0MsgPendingCallback+0xba>
    }

    // Prepare CanardCANFrame from received data
    CanardCANFrame frame;
    frame.id = rx_header.IDE == CAN_ID_EXT ? rx_header.ExtId : rx_header.StdId;
 8002dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d101      	bne.n	8002e08 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
 8002e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002e06:	e000      	b.n	8002e0a <HAL_CAN_RxFifo0MsgPendingCallback+0x7a>
 8002e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e0a:	60fb      	str	r3, [r7, #12]
    frame.data_len = rx_header.DLC;
 8002e0c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	763b      	strb	r3, [r7, #24]
    memcpy(frame.data, rx_data, rx_header.DLC);
 8002e12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002e14:	f107 011c 	add.w	r1, r7, #28
 8002e18:	f107 030c 	add.w	r3, r7, #12
 8002e1c:	3304      	adds	r3, #4
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f00a f9d6 	bl	800d1d0 <memcpy>

    // Process the received frame with canard
    canardHandleRxFrame(&canard, &frame, HAL_GetTick() * 1000);
 8002e24:	f001 fe04 	bl	8004a30 <HAL_GetTick>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002e2e:	fb02 f303 	mul.w	r3, r2, r3
 8002e32:	2200      	movs	r2, #0
 8002e34:	461c      	mov	r4, r3
 8002e36:	4615      	mov	r5, r2
 8002e38:	f107 010c 	add.w	r1, r7, #12
 8002e3c:	4622      	mov	r2, r4
 8002e3e:	462b      	mov	r3, r5
 8002e40:	4805      	ldr	r0, [pc, #20]	@ (8002e58 <HAL_CAN_RxFifo0MsgPendingCallback+0xc8>)
 8002e42:	f7fd ff17 	bl	8000c74 <canardHandleRxFrame>
 8002e46:	e000      	b.n	8002e4a <HAL_CAN_RxFifo0MsgPendingCallback+0xba>
        return;
 8002e48:	bf00      	nop
}
 8002e4a:	3740      	adds	r7, #64	@ 0x40
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bdb0      	pop	{r4, r5, r7, pc}
 8002e50:	20000594 	.word	0x20000594
 8002e54:	40020c00 	.word	0x40020c00
 8002e58:	20000568 	.word	0x20000568

08002e5c <HAL_CAN_RxFifo1MsgPendingCallback>:

void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b083      	sub	sp, #12
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
    // Similar to FIFO0 callback if needed
}
 8002e64:	bf00      	nop
 8002e66:	370c      	adds	r7, #12
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr

08002e70 <send_heartbeat>:

void send_heartbeat(void)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08c      	sub	sp, #48	@ 0x30
 8002e74:	af06      	add	r7, sp, #24
    uint8_t buffer[UAVCAN_NODE_STATUS_MESSAGE_SIZE];
    
    // Pack node status message
    uint32_t uptime_sec = HAL_GetTick() / 1000;
 8002e76:	f001 fddb 	bl	8004a30 <HAL_GetTick>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	4a30      	ldr	r2, [pc, #192]	@ (8002f40 <send_heartbeat+0xd0>)
 8002e7e:	fba2 2303 	umull	r2, r3, r2, r3
 8002e82:	099b      	lsrs	r3, r3, #6
 8002e84:	613b      	str	r3, [r7, #16]
    buffer[0] = (uint8_t)(uptime_sec & 0xFF);
 8002e86:	693b      	ldr	r3, [r7, #16]
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	713b      	strb	r3, [r7, #4]
    buffer[1] = (uint8_t)((uptime_sec >> 8) & 0xFF);
 8002e8c:	693b      	ldr	r3, [r7, #16]
 8002e8e:	0a1b      	lsrs	r3, r3, #8
 8002e90:	b2db      	uxtb	r3, r3
 8002e92:	717b      	strb	r3, [r7, #5]
    buffer[2] = (uint8_t)((uptime_sec >> 16) & 0xFF);
 8002e94:	693b      	ldr	r3, [r7, #16]
 8002e96:	0c1b      	lsrs	r3, r3, #16
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	71bb      	strb	r3, [r7, #6]
    buffer[3] = (uint8_t)((uptime_sec >> 24) & 0xFF);
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	0e1b      	lsrs	r3, r3, #24
 8002ea0:	b2db      	uxtb	r3, r3
 8002ea2:	71fb      	strb	r3, [r7, #7]
    
    // Cycle through different health states to make node more visible
    static uint8_t health_counter = 0;
    uint8_t health = UAVCAN_NODE_HEALTH_OK;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	75fb      	strb	r3, [r7, #23]
    
    // Every 15 heartbeats (15 seconds), report a different health
    if (health_counter == 15) {
 8002ea8:	4b26      	ldr	r3, [pc, #152]	@ (8002f44 <send_heartbeat+0xd4>)
 8002eaa:	781b      	ldrb	r3, [r3, #0]
 8002eac:	2b0f      	cmp	r3, #15
 8002eae:	d102      	bne.n	8002eb6 <send_heartbeat+0x46>
        health = UAVCAN_NODE_HEALTH_WARNING;
 8002eb0:	2301      	movs	r3, #1
 8002eb2:	75fb      	strb	r3, [r7, #23]
 8002eb4:	e008      	b.n	8002ec8 <send_heartbeat+0x58>
    } else if (health_counter == 30) {
 8002eb6:	4b23      	ldr	r3, [pc, #140]	@ (8002f44 <send_heartbeat+0xd4>)
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b1e      	cmp	r3, #30
 8002ebc:	d104      	bne.n	8002ec8 <send_heartbeat+0x58>
        health = UAVCAN_NODE_HEALTH_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	75fb      	strb	r3, [r7, #23]
        health_counter = 0;  // Reset counter
 8002ec2:	4b20      	ldr	r3, [pc, #128]	@ (8002f44 <send_heartbeat+0xd4>)
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	701a      	strb	r2, [r3, #0]
    }
    health_counter++;
 8002ec8:	4b1e      	ldr	r3, [pc, #120]	@ (8002f44 <send_heartbeat+0xd4>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	3301      	adds	r3, #1
 8002ece:	b2da      	uxtb	r2, r3
 8002ed0:	4b1c      	ldr	r3, [pc, #112]	@ (8002f44 <send_heartbeat+0xd4>)
 8002ed2:	701a      	strb	r2, [r3, #0]
    
    buffer[4] = health;  // Health
 8002ed4:	7dfb      	ldrb	r3, [r7, #23]
 8002ed6:	723b      	strb	r3, [r7, #8]
    buffer[5] = UAVCAN_NODE_MODE_OPERATIONAL;  // Mode
 8002ed8:	2300      	movs	r3, #0
 8002eda:	727b      	strb	r3, [r7, #9]
    
    // Set vendor-specific status code to 0xA501 (distinctive value)
    // Bytes 6-7 form a uint16_t vendor-specific status code (little-endian)
    uint16_t vendor_status = 0xA501;  // A unique value for this specific implementation
 8002edc:	f24a 5301 	movw	r3, #42241	@ 0xa501
 8002ee0:	81fb      	strh	r3, [r7, #14]
    buffer[6] = (uint8_t)(vendor_status & 0xFF);  // LSB
 8002ee2:	89fb      	ldrh	r3, [r7, #14]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	72bb      	strb	r3, [r7, #10]
    buffer[7] = (uint8_t)((vendor_status >> 8) & 0xFF);  // MSB
 8002ee8:	89fb      	ldrh	r3, [r7, #14]
 8002eea:	0a1b      	lsrs	r3, r3, #8
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	b2db      	uxtb	r3, r3
 8002ef0:	72fb      	strb	r3, [r7, #11]
    
    // Send node status message
    canardBroadcast(&canard,
 8002ef2:	2307      	movs	r3, #7
 8002ef4:	9304      	str	r3, [sp, #16]
 8002ef6:	1d3b      	adds	r3, r7, #4
 8002ef8:	9303      	str	r3, [sp, #12]
 8002efa:	2310      	movs	r3, #16
 8002efc:	9302      	str	r3, [sp, #8]
 8002efe:	4b12      	ldr	r3, [pc, #72]	@ (8002f48 <send_heartbeat+0xd8>)
 8002f00:	9301      	str	r3, [sp, #4]
 8002f02:	f240 1355 	movw	r3, #341	@ 0x155
 8002f06:	9300      	str	r3, [sp, #0]
 8002f08:	a30b      	add	r3, pc, #44	@ (adr r3, 8002f38 <send_heartbeat+0xc8>)
 8002f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f0e:	480f      	ldr	r0, [pc, #60]	@ (8002f4c <send_heartbeat+0xdc>)
 8002f10:	f7fd fcfa 	bl	8000908 <canardBroadcast>
                  CANARD_TRANSFER_PRIORITY_MEDIUM,
                  buffer,
                  UAVCAN_NODE_STATUS_MESSAGE_SIZE);

    // Toggle green LED to indicate heartbeat transmission
    HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8002f14:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002f18:	480d      	ldr	r0, [pc, #52]	@ (8002f50 <send_heartbeat+0xe0>)
 8002f1a:	f002 ff42 	bl	8005da2 <HAL_GPIO_TogglePin>
                  
    // Increment transfer ID (wraps at 31)
    transfer_id = (transfer_id + 1) & 31;
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	@ (8002f48 <send_heartbeat+0xd8>)
 8002f20:	781b      	ldrb	r3, [r3, #0]
 8002f22:	3301      	adds	r3, #1
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	f003 031f 	and.w	r3, r3, #31
 8002f2a:	b2da      	uxtb	r2, r3
 8002f2c:	4b06      	ldr	r3, [pc, #24]	@ (8002f48 <send_heartbeat+0xd8>)
 8002f2e:	701a      	strb	r2, [r3, #0]
}
 8002f30:	bf00      	nop
 8002f32:	3718      	adds	r7, #24
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	c1a7c6f1 	.word	0xc1a7c6f1
 8002f3c:	0f0868d0 	.word	0x0f0868d0
 8002f40:	10624dd3 	.word	0x10624dd3
 8002f44:	20000596 	.word	0x20000596
 8002f48:	20000595 	.word	0x20000595
 8002f4c:	20000568 	.word	0x20000568
 8002f50:	40020c00 	.word	0x40020c00
 8002f54:	00000000 	.word	0x00000000

08002f58 <shouldAcceptTransfer>:
static bool shouldAcceptTransfer(const CanardInstance* ins,
                                uint64_t* out_data_type_signature,
                                uint16_t data_type_id,
                                CanardTransferType transfer_type,
                                uint8_t source_node_id)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	b086      	sub	sp, #24
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	60f8      	str	r0, [r7, #12]
 8002f60:	60b9      	str	r1, [r7, #8]
 8002f62:	4611      	mov	r1, r2
 8002f64:	461a      	mov	r2, r3
 8002f66:	460b      	mov	r3, r1
 8002f68:	80fb      	strh	r3, [r7, #6]
 8002f6a:	4613      	mov	r3, r2
 8002f6c:	717b      	strb	r3, [r7, #5]
    // We're only interested in the node status message from other nodes
    if ((transfer_type == CanardTransferTypeMessage) && 
 8002f6e:	797b      	ldrb	r3, [r7, #5]
 8002f70:	2b02      	cmp	r3, #2
 8002f72:	d10c      	bne.n	8002f8e <shouldAcceptTransfer+0x36>
 8002f74:	88fb      	ldrh	r3, [r7, #6]
 8002f76:	f240 1255 	movw	r2, #341	@ 0x155
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d107      	bne.n	8002f8e <shouldAcceptTransfer+0x36>
        (data_type_id == UAVCAN_NODE_STATUS_DATA_TYPE_ID))
    {
        *out_data_type_signature = UAVCAN_NODE_STATUS_DATA_TYPE_SIGNATURE;
 8002f7e:	68b9      	ldr	r1, [r7, #8]
 8002f80:	a348      	add	r3, pc, #288	@ (adr r3, 80030a4 <shouldAcceptTransfer+0x14c>)
 8002f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f86:	e9c1 2300 	strd	r2, r3, [r1]
        return true;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e06f      	b.n	800306e <shouldAcceptTransfer+0x116>
    }
    
    // Accept GetNodeInfo service requests
    if ((transfer_type == CanardTransferTypeRequest) && 
 8002f8e:	797b      	ldrb	r3, [r7, #5]
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d131      	bne.n	8002ff8 <shouldAcceptTransfer+0xa0>
 8002f94:	88fb      	ldrh	r3, [r7, #6]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d12e      	bne.n	8002ff8 <shouldAcceptTransfer+0xa0>
        (data_type_id == UAVCAN_GET_NODE_INFO_DATA_TYPE_ID))
    {
        // Highly visible notification for GetNodeInfo request at the acceptance stage
        // Alternate orange and green LEDs rapidly to show the request was received
        for (int i = 0; i < 3; i++) {
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	617b      	str	r3, [r7, #20]
 8002f9e:	e020      	b.n	8002fe2 <shouldAcceptTransfer+0x8a>
            HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);   // Orange on
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002fa6:	483e      	ldr	r0, [pc, #248]	@ (80030a0 <shouldAcceptTransfer+0x148>)
 8002fa8:	f002 fee2 	bl	8005d70 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);   // Green on
 8002fac:	2201      	movs	r2, #1
 8002fae:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002fb2:	483b      	ldr	r0, [pc, #236]	@ (80030a0 <shouldAcceptTransfer+0x148>)
 8002fb4:	f002 fedc 	bl	8005d70 <HAL_GPIO_WritePin>
            HAL_Delay(50);
 8002fb8:	2032      	movs	r0, #50	@ 0x32
 8002fba:	f001 fd45 	bl	8004a48 <HAL_Delay>
            HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET); // Orange off
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002fc4:	4836      	ldr	r0, [pc, #216]	@ (80030a0 <shouldAcceptTransfer+0x148>)
 8002fc6:	f002 fed3 	bl	8005d70 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET); // Green off
 8002fca:	2200      	movs	r2, #0
 8002fcc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8002fd0:	4833      	ldr	r0, [pc, #204]	@ (80030a0 <shouldAcceptTransfer+0x148>)
 8002fd2:	f002 fecd 	bl	8005d70 <HAL_GPIO_WritePin>
            HAL_Delay(50);
 8002fd6:	2032      	movs	r0, #50	@ 0x32
 8002fd8:	f001 fd36 	bl	8004a48 <HAL_Delay>
        for (int i = 0; i < 3; i++) {
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	3301      	adds	r3, #1
 8002fe0:	617b      	str	r3, [r7, #20]
 8002fe2:	697b      	ldr	r3, [r7, #20]
 8002fe4:	2b02      	cmp	r3, #2
 8002fe6:	dddb      	ble.n	8002fa0 <shouldAcceptTransfer+0x48>
        }
        
        *out_data_type_signature = UAVCAN_GET_NODE_INFO_DATA_TYPE_SIGNATURE;
 8002fe8:	68b9      	ldr	r1, [r7, #8]
 8002fea:	a323      	add	r3, pc, #140	@ (adr r3, 8003078 <shouldAcceptTransfer+0x120>)
 8002fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff0:	e9c1 2300 	strd	r2, r3, [r1]
        return true;
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	e03a      	b.n	800306e <shouldAcceptTransfer+0x116>
    }
    
    // Accept parameter requests - this is critical for node name recognition
    if ((transfer_type == CanardTransferTypeRequest) && 
 8002ff8:	797b      	ldrb	r3, [r7, #5]
 8002ffa:	2b01      	cmp	r3, #1
 8002ffc:	d10a      	bne.n	8003014 <shouldAcceptTransfer+0xbc>
 8002ffe:	88fb      	ldrh	r3, [r7, #6]
 8003000:	2b0b      	cmp	r3, #11
 8003002:	d107      	bne.n	8003014 <shouldAcceptTransfer+0xbc>
        (data_type_id == UAVCAN_PARAM_STRING_ID))
    {
        *out_data_type_signature = UAVCAN_PARAM_STRING_SIGNATURE;
 8003004:	68b9      	ldr	r1, [r7, #8]
 8003006:	a31e      	add	r3, pc, #120	@ (adr r3, 8003080 <shouldAcceptTransfer+0x128>)
 8003008:	e9d3 2300 	ldrd	r2, r3, [r3]
 800300c:	e9c1 2300 	strd	r2, r3, [r1]
        return true;
 8003010:	2301      	movs	r3, #1
 8003012:	e02c      	b.n	800306e <shouldAcceptTransfer+0x116>
    }
    
    // Accept parameter get/set requests (another way ArduPilot gets params)
    if ((transfer_type == CanardTransferTypeRequest) && 
 8003014:	797b      	ldrb	r3, [r7, #5]
 8003016:	2b01      	cmp	r3, #1
 8003018:	d10a      	bne.n	8003030 <shouldAcceptTransfer+0xd8>
 800301a:	88fb      	ldrh	r3, [r7, #6]
 800301c:	2b0a      	cmp	r3, #10
 800301e:	d107      	bne.n	8003030 <shouldAcceptTransfer+0xd8>
        (data_type_id == UAVCAN_PARAM_GETSET_ID))
    {
        *out_data_type_signature = UAVCAN_PARAM_GETSET_SIGNATURE;
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	a319      	add	r3, pc, #100	@ (adr r3, 8003088 <shouldAcceptTransfer+0x130>)
 8003024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003028:	e9c1 2300 	strd	r2, r3, [r1]
        return true;
 800302c:	2301      	movs	r3, #1
 800302e:	e01e      	b.n	800306e <shouldAcceptTransfer+0x116>
    }
    
    // Accept register access requests (ArduPilot uses this for naming)
    if ((transfer_type == CanardTransferTypeRequest) && 
 8003030:	797b      	ldrb	r3, [r7, #5]
 8003032:	2b01      	cmp	r3, #1
 8003034:	d10a      	bne.n	800304c <shouldAcceptTransfer+0xf4>
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	2b55      	cmp	r3, #85	@ 0x55
 800303a:	d107      	bne.n	800304c <shouldAcceptTransfer+0xf4>
        (data_type_id == UAVCAN_PROTOCOL_REGISTER_ACCESS_ID))
    {
        *out_data_type_signature = UAVCAN_PROTOCOL_REGISTER_ACCESS_SIGNATURE;
 800303c:	68b9      	ldr	r1, [r7, #8]
 800303e:	a314      	add	r3, pc, #80	@ (adr r3, 8003090 <shouldAcceptTransfer+0x138>)
 8003040:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003044:	e9c1 2300 	strd	r2, r3, [r1]
        return true;
 8003048:	2301      	movs	r3, #1
 800304a:	e010      	b.n	800306e <shouldAcceptTransfer+0x116>
    }
    
    // Also accept messages on port 1620 (Yakut test messages)
    if ((transfer_type == CanardTransferTypeMessage) && 
 800304c:	797b      	ldrb	r3, [r7, #5]
 800304e:	2b02      	cmp	r3, #2
 8003050:	d10c      	bne.n	800306c <shouldAcceptTransfer+0x114>
 8003052:	88fb      	ldrh	r3, [r7, #6]
 8003054:	f240 6254 	movw	r2, #1620	@ 0x654
 8003058:	4293      	cmp	r3, r2
 800305a:	d107      	bne.n	800306c <shouldAcceptTransfer+0x114>
        (data_type_id == MSG_PORT_ID))
    {
        // Use a placeholder signature for the Real64 array
        *out_data_type_signature = 0x1234567890ABCDEF;
 800305c:	68b9      	ldr	r1, [r7, #8]
 800305e:	a30e      	add	r3, pc, #56	@ (adr r3, 8003098 <shouldAcceptTransfer+0x140>)
 8003060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003064:	e9c1 2300 	strd	r2, r3, [r1]
        return true;
 8003068:	2301      	movs	r3, #1
 800306a:	e000      	b.n	800306e <shouldAcceptTransfer+0x116>
    }
    
    // Reject all other messages
    return false;
 800306c:	2300      	movs	r3, #0
}
 800306e:	4618      	mov	r0, r3
 8003070:	3718      	adds	r7, #24
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}
 8003076:	bf00      	nop
 8003078:	20a11d40 	.word	0x20a11d40
 800307c:	0b2a8126 	.word	0x0b2a8126
 8003080:	e0c98ae0 	.word	0xe0c98ae0
 8003084:	e02f25d6 	.word	0xe02f25d6
 8003088:	39d1a4d5 	.word	0x39d1a4d5
 800308c:	a7b622f9 	.word	0xa7b622f9
 8003090:	bc4bc330 	.word	0xbc4bc330
 8003094:	b7d72a90 	.word	0xb7d72a90
 8003098:	90abcdef 	.word	0x90abcdef
 800309c:	12345678 	.word	0x12345678
 80030a0:	40020c00 	.word	0x40020c00
 80030a4:	c1a7c6f1 	.word	0xc1a7c6f1
 80030a8:	0f0868d0 	.word	0x0f0868d0
 80030ac:	00000000 	.word	0x00000000

080030b0 <handle_get_node_info>:

// Handle GetNodeInfo service request
void handle_get_node_info(CanardInstance* ins, CanardRxTransfer* transfer)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b0aa      	sub	sp, #168	@ 0xa8
 80030b4:	af06      	add	r7, sp, #24
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
    // Very visible LED pattern - blink green and orange together to indicate GetNodeInfo request
    for (int i = 0; i < 3; i++) {
 80030ba:	2300      	movs	r3, #0
 80030bc:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80030c0:	e022      	b.n	8003108 <handle_get_node_info+0x58>
        HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);     // Green on
 80030c2:	2201      	movs	r2, #1
 80030c4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80030c8:	48ad      	ldr	r0, [pc, #692]	@ (8003380 <handle_get_node_info+0x2d0>)
 80030ca:	f002 fe51 	bl	8005d70 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);     // Orange on
 80030ce:	2201      	movs	r2, #1
 80030d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80030d4:	48aa      	ldr	r0, [pc, #680]	@ (8003380 <handle_get_node_info+0x2d0>)
 80030d6:	f002 fe4b 	bl	8005d70 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80030da:	2032      	movs	r0, #50	@ 0x32
 80030dc:	f001 fcb4 	bl	8004a48 <HAL_Delay>
        HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);   // Green off
 80030e0:	2200      	movs	r2, #0
 80030e2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80030e6:	48a6      	ldr	r0, [pc, #664]	@ (8003380 <handle_get_node_info+0x2d0>)
 80030e8:	f002 fe42 	bl	8005d70 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);   // Orange off
 80030ec:	2200      	movs	r2, #0
 80030ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80030f2:	48a3      	ldr	r0, [pc, #652]	@ (8003380 <handle_get_node_info+0x2d0>)
 80030f4:	f002 fe3c 	bl	8005d70 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80030f8:	2032      	movs	r0, #50	@ 0x32
 80030fa:	f001 fca5 	bl	8004a48 <HAL_Delay>
    for (int i = 0; i < 3; i++) {
 80030fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003102:	3301      	adds	r3, #1
 8003104:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8003108:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800310c:	2b02      	cmp	r3, #2
 800310e:	ddd8      	ble.n	80030c2 <handle_get_node_info+0x12>
    }
    
    uint8_t buffer[UAVCAN_GET_NODE_INFO_RESPONSE_MAX_SIZE] = {0};
 8003110:	f107 0318 	add.w	r3, r7, #24
 8003114:	2250      	movs	r2, #80	@ 0x50
 8003116:	2100      	movs	r1, #0
 8003118:	4618      	mov	r0, r3
 800311a:	f00a f815 	bl	800d148 <memset>
    uint8_t* ptr = buffer;
 800311e:	f107 0318 	add.w	r3, r7, #24
 8003122:	67fb      	str	r3, [r7, #124]	@ 0x7c
    
    // Status info - copy the same info we send in heartbeat
    uint32_t uptime_sec = HAL_GetTick() / 1000;
 8003124:	f001 fc84 	bl	8004a30 <HAL_GetTick>
 8003128:	4603      	mov	r3, r0
 800312a:	4a96      	ldr	r2, [pc, #600]	@ (8003384 <handle_get_node_info+0x2d4>)
 800312c:	fba2 2303 	umull	r2, r3, r2, r3
 8003130:	099b      	lsrs	r3, r3, #6
 8003132:	67bb      	str	r3, [r7, #120]	@ 0x78
    ptr[0] = (uint8_t)(uptime_sec & 0xFF);
 8003134:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003136:	b2da      	uxtb	r2, r3
 8003138:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800313a:	701a      	strb	r2, [r3, #0]
    ptr[1] = (uint8_t)((uptime_sec >> 8) & 0xFF);
 800313c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800313e:	0a1a      	lsrs	r2, r3, #8
 8003140:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003142:	3301      	adds	r3, #1
 8003144:	b2d2      	uxtb	r2, r2
 8003146:	701a      	strb	r2, [r3, #0]
    ptr[2] = (uint8_t)((uptime_sec >> 16) & 0xFF);
 8003148:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800314a:	0c1a      	lsrs	r2, r3, #16
 800314c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800314e:	3302      	adds	r3, #2
 8003150:	b2d2      	uxtb	r2, r2
 8003152:	701a      	strb	r2, [r3, #0]
    ptr[3] = (uint8_t)((uptime_sec >> 24) & 0xFF);
 8003154:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003156:	0e1a      	lsrs	r2, r3, #24
 8003158:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800315a:	3303      	adds	r3, #3
 800315c:	b2d2      	uxtb	r2, r2
 800315e:	701a      	strb	r2, [r3, #0]
    ptr[4] = UAVCAN_NODE_HEALTH_OK;
 8003160:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003162:	3304      	adds	r3, #4
 8003164:	2200      	movs	r2, #0
 8003166:	701a      	strb	r2, [r3, #0]
    ptr[5] = UAVCAN_NODE_MODE_OPERATIONAL;
 8003168:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800316a:	3305      	adds	r3, #5
 800316c:	2200      	movs	r2, #0
 800316e:	701a      	strb	r2, [r3, #0]
    ptr[6] = 0;  // Sub mode
 8003170:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003172:	3306      	adds	r3, #6
 8003174:	2200      	movs	r2, #0
 8003176:	701a      	strb	r2, [r3, #0]
    
    ptr += 7;
 8003178:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800317a:	3307      	adds	r3, #7
 800317c:	67fb      	str	r3, [r7, #124]	@ 0x7c
    
    // Software version
    ptr[0] = APP_VERSION_MAJOR;
 800317e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003180:	2201      	movs	r2, #1
 8003182:	701a      	strb	r2, [r3, #0]
    ptr[1] = APP_VERSION_MINOR;
 8003184:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003186:	3301      	adds	r3, #1
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]
    ptr[2] = 0;  // Optional field flags (empty)
 800318c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800318e:	3302      	adds	r3, #2
 8003190:	2200      	movs	r2, #0
 8003192:	701a      	strb	r2, [r3, #0]
    memset(ptr + 3, 0, 1);  // VCS commit (empty)
 8003194:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003196:	3303      	adds	r3, #3
 8003198:	2201      	movs	r2, #1
 800319a:	2100      	movs	r1, #0
 800319c:	4618      	mov	r0, r3
 800319e:	f009 ffd3 	bl	800d148 <memset>
    ptr += 4;
 80031a2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031a4:	3304      	adds	r3, #4
 80031a6:	67fb      	str	r3, [r7, #124]	@ 0x7c
    
    // Hardware version
    ptr[0] = 1;  // Major
 80031a8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031aa:	2201      	movs	r2, #1
 80031ac:	701a      	strb	r2, [r3, #0]
    ptr[1] = 0;  // Minor
 80031ae:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031b0:	3301      	adds	r3, #1
 80031b2:	2200      	movs	r2, #0
 80031b4:	701a      	strb	r2, [r3, #0]
    
    // Create a unique ID based on STM32 device ID and CAN setup
    // This helps ArduPilot to distinguish this node consistently
    uint32_t device_id_words[3] = {0};
 80031b6:	f107 030c 	add.w	r3, r7, #12
 80031ba:	2200      	movs	r2, #0
 80031bc:	601a      	str	r2, [r3, #0]
 80031be:	605a      	str	r2, [r3, #4]
 80031c0:	609a      	str	r2, [r3, #8]
    device_id_words[0] = HAL_GetUIDw0();
 80031c2:	f001 fc65 	bl	8004a90 <HAL_GetUIDw0>
 80031c6:	4603      	mov	r3, r0
 80031c8:	60fb      	str	r3, [r7, #12]
    device_id_words[1] = HAL_GetUIDw1();
 80031ca:	f001 fc6d 	bl	8004aa8 <HAL_GetUIDw1>
 80031ce:	4603      	mov	r3, r0
 80031d0:	613b      	str	r3, [r7, #16]
    device_id_words[2] = HAL_GetUIDw2();
 80031d2:	f001 fc75 	bl	8004ac0 <HAL_GetUIDw2>
 80031d6:	4603      	mov	r3, r0
 80031d8:	617b      	str	r3, [r7, #20]
    
    // Copy unique ID - use device ID + custom data
    for (int i = 0; i < 4; i++) {
 80031da:	2300      	movs	r3, #0
 80031dc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80031e0:	e02b      	b.n	800323a <handle_get_node_info+0x18a>
        ptr[2 + i] = (device_id_words[0] >> (i*8)) & 0xFF;
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80031e8:	00db      	lsls	r3, r3, #3
 80031ea:	40da      	lsrs	r2, r3
 80031ec:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80031f0:	3302      	adds	r3, #2
 80031f2:	4619      	mov	r1, r3
 80031f4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80031f6:	440b      	add	r3, r1
 80031f8:	b2d2      	uxtb	r2, r2
 80031fa:	701a      	strb	r2, [r3, #0]
        ptr[2 + i + 4] = (device_id_words[1] >> (i*8)) & 0xFF;
 80031fc:	693a      	ldr	r2, [r7, #16]
 80031fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003202:	00db      	lsls	r3, r3, #3
 8003204:	fa22 f103 	lsr.w	r1, r2, r3
 8003208:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800320c:	3306      	adds	r3, #6
 800320e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003210:	4413      	add	r3, r2
 8003212:	b2ca      	uxtb	r2, r1
 8003214:	701a      	strb	r2, [r3, #0]
        ptr[2 + i + 8] = (device_id_words[2] >> (i*8)) & 0xFF;
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	fa22 f103 	lsr.w	r1, r2, r3
 8003222:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003226:	330a      	adds	r3, #10
 8003228:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800322a:	4413      	add	r3, r2
 800322c:	b2ca      	uxtb	r2, r1
 800322e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 4; i++) {
 8003230:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003234:	3301      	adds	r3, #1
 8003236:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800323a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800323e:	2b03      	cmp	r3, #3
 8003240:	ddcf      	ble.n	80031e2 <handle_get_node_info+0x132>
    }
    // Add identifier bytes for this specific application
    ptr[2 + 12] = 'S';
 8003242:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003244:	330e      	adds	r3, #14
 8003246:	2253      	movs	r2, #83	@ 0x53
 8003248:	701a      	strb	r2, [r3, #0]
    ptr[2 + 13] = 'T';
 800324a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800324c:	330f      	adds	r3, #15
 800324e:	2254      	movs	r2, #84	@ 0x54
 8003250:	701a      	strb	r2, [r3, #0]
    ptr[2 + 14] = 'M';
 8003252:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003254:	3310      	adds	r3, #16
 8003256:	224d      	movs	r2, #77	@ 0x4d
 8003258:	701a      	strb	r2, [r3, #0]
    ptr[2 + 15] = NODE_ID; // Add node ID to make it unique per node
 800325a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800325c:	3311      	adds	r3, #17
 800325e:	2260      	movs	r2, #96	@ 0x60
 8003260:	701a      	strb	r2, [r3, #0]
    
    ptr += 18;
 8003262:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003264:	3312      	adds	r3, #18
 8003266:	67fb      	str	r3, [r7, #124]	@ 0x7c
    
    // Node name string - must match exact node name format
    const char* name = APP_NODE_NAME;
 8003268:	4b47      	ldr	r3, [pc, #284]	@ (8003388 <handle_get_node_info+0x2d8>)
 800326a:	677b      	str	r3, [r7, #116]	@ 0x74
    size_t name_len = strlen(name);
 800326c:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800326e:	f7fc ffb5 	bl	80001dc <strlen>
 8003272:	6738      	str	r0, [r7, #112]	@ 0x70
    ptr[0] = (uint8_t)name_len;
 8003274:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003276:	b2da      	uxtb	r2, r3
 8003278:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800327a:	701a      	strb	r2, [r3, #0]
    memcpy(ptr + 1, name, name_len);
 800327c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800327e:	3301      	adds	r3, #1
 8003280:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8003282:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8003284:	4618      	mov	r0, r3
 8003286:	f009 ffa3 	bl	800d1d0 <memcpy>
    ptr += 1 + name_len;
 800328a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800328c:	3301      	adds	r3, #1
 800328e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8003290:	4413      	add	r3, r2
 8003292:	67fb      	str	r3, [r7, #124]	@ 0x7c
    
    size_t total_size = ptr - buffer;
 8003294:	f107 0318 	add.w	r3, r7, #24
 8003298:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800329a:	1ad3      	subs	r3, r2, r3
 800329c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    
    // Send response
    int result = canardRequestOrRespond(ins,
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	7ed8      	ldrb	r0, [r3, #27]
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	3319      	adds	r3, #25
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	7e92      	ldrb	r2, [r2, #26]
 80032aa:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80032ac:	b289      	uxth	r1, r1
 80032ae:	9105      	str	r1, [sp, #20]
 80032b0:	f107 0118 	add.w	r1, r7, #24
 80032b4:	9104      	str	r1, [sp, #16]
 80032b6:	2100      	movs	r1, #0
 80032b8:	9103      	str	r1, [sp, #12]
 80032ba:	9202      	str	r2, [sp, #8]
 80032bc:	9301      	str	r3, [sp, #4]
 80032be:	2301      	movs	r3, #1
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	a32d      	add	r3, pc, #180	@ (adr r3, 8003378 <handle_get_node_info+0x2c8>)
 80032c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c8:	4601      	mov	r1, r0
 80032ca:	6878      	ldr	r0, [r7, #4]
 80032cc:	f7fd fc22 	bl	8000b14 <canardRequestOrRespond>
 80032d0:	4603      	mov	r3, r0
 80032d2:	66bb      	str	r3, [r7, #104]	@ 0x68
                         CanardResponse,
                         buffer,
                         total_size);
                         
    // Blink both orange and green LEDs together to indicate response was sent
    if (result >= 0) {
 80032d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	db2b      	blt.n	8003332 <handle_get_node_info+0x282>
        // Success - blink orange and green LEDs together 3 times
        for (int i = 0; i < 3; i++) {
 80032da:	2300      	movs	r3, #0
 80032dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80032e0:	e022      	b.n	8003328 <handle_get_node_info+0x278>
            HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);   // Orange on
 80032e2:	2201      	movs	r2, #1
 80032e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80032e8:	4825      	ldr	r0, [pc, #148]	@ (8003380 <handle_get_node_info+0x2d0>)
 80032ea:	f002 fd41 	bl	8005d70 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);   // Green on
 80032ee:	2201      	movs	r2, #1
 80032f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80032f4:	4822      	ldr	r0, [pc, #136]	@ (8003380 <handle_get_node_info+0x2d0>)
 80032f6:	f002 fd3b 	bl	8005d70 <HAL_GPIO_WritePin>
            HAL_Delay(50);
 80032fa:	2032      	movs	r0, #50	@ 0x32
 80032fc:	f001 fba4 	bl	8004a48 <HAL_Delay>
            HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET); // Orange off
 8003300:	2200      	movs	r2, #0
 8003302:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003306:	481e      	ldr	r0, [pc, #120]	@ (8003380 <handle_get_node_info+0x2d0>)
 8003308:	f002 fd32 	bl	8005d70 <HAL_GPIO_WritePin>
            HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET); // Green off
 800330c:	2200      	movs	r2, #0
 800330e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003312:	481b      	ldr	r0, [pc, #108]	@ (8003380 <handle_get_node_info+0x2d0>)
 8003314:	f002 fd2c 	bl	8005d70 <HAL_GPIO_WritePin>
            HAL_Delay(50);
 8003318:	2032      	movs	r0, #50	@ 0x32
 800331a:	f001 fb95 	bl	8004a48 <HAL_Delay>
        for (int i = 0; i < 3; i++) {
 800331e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003322:	3301      	adds	r3, #1
 8003324:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003328:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800332c:	2b02      	cmp	r3, #2
 800332e:	ddd8      	ble.n	80032e2 <handle_get_node_info+0x232>
            HAL_Delay(50);
            HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
            HAL_Delay(50);
        }
    }
}
 8003330:	e01e      	b.n	8003370 <handle_get_node_info+0x2c0>
        for (int i = 0; i < 5; i++) {
 8003332:	2300      	movs	r3, #0
 8003334:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003338:	e016      	b.n	8003368 <handle_get_node_info+0x2b8>
            HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 800333a:	2201      	movs	r2, #1
 800333c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003340:	480f      	ldr	r0, [pc, #60]	@ (8003380 <handle_get_node_info+0x2d0>)
 8003342:	f002 fd15 	bl	8005d70 <HAL_GPIO_WritePin>
            HAL_Delay(50);
 8003346:	2032      	movs	r0, #50	@ 0x32
 8003348:	f001 fb7e 	bl	8004a48 <HAL_Delay>
            HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 800334c:	2200      	movs	r2, #0
 800334e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003352:	480b      	ldr	r0, [pc, #44]	@ (8003380 <handle_get_node_info+0x2d0>)
 8003354:	f002 fd0c 	bl	8005d70 <HAL_GPIO_WritePin>
            HAL_Delay(50);
 8003358:	2032      	movs	r0, #50	@ 0x32
 800335a:	f001 fb75 	bl	8004a48 <HAL_Delay>
        for (int i = 0; i < 5; i++) {
 800335e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003362:	3301      	adds	r3, #1
 8003364:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003368:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800336c:	2b04      	cmp	r3, #4
 800336e:	dde4      	ble.n	800333a <handle_get_node_info+0x28a>
}
 8003370:	bf00      	nop
 8003372:	3790      	adds	r7, #144	@ 0x90
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	20a11d40 	.word	0x20a11d40
 800337c:	0b2a8126 	.word	0x0b2a8126
 8003380:	40020c00 	.word	0x40020c00
 8003384:	10624dd3 	.word	0x10624dd3
 8003388:	0800d298 	.word	0x0800d298
 800338c:	00000000 	.word	0x00000000

08003390 <onTransferReceived>:

void onTransferReceived(CanardInstance* ins, CanardRxTransfer* transfer)
{
 8003390:	b590      	push	{r4, r7, lr}
 8003392:	b0d9      	sub	sp, #356	@ 0x164
 8003394:	af06      	add	r7, sp, #24
 8003396:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800339a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800339e:	6018      	str	r0, [r3, #0]
 80033a0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80033a4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80033a8:	6019      	str	r1, [r3, #0]
    if ((transfer->transfer_type == CanardTransferTypeMessage) && 
 80033aa:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80033ae:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	7e1b      	ldrb	r3, [r3, #24]
 80033b6:	2b02      	cmp	r3, #2
 80033b8:	d14b      	bne.n	8003452 <onTransferReceived+0xc2>
        (transfer->data_type_id == UAVCAN_NODE_STATUS_DATA_TYPE_ID))
 80033ba:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80033be:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	8adb      	ldrh	r3, [r3, #22]
    if ((transfer->transfer_type == CanardTransferTypeMessage) && 
 80033c6:	f240 1255 	movw	r2, #341	@ 0x155
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d141      	bne.n	8003452 <onTransferReceived+0xc2>
    {
        // Toggle LED6 (blue) when we receive heartbeat from another node
        HAL_GPIO_TogglePin(LD6_GPIO_Port, LD6_Pin);
 80033ce:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80033d2:	4869      	ldr	r0, [pc, #420]	@ (8003578 <onTransferReceived+0x1e8>)
 80033d4:	f002 fce5 	bl	8005da2 <HAL_GPIO_TogglePin>
        
        // Extract node status info directly
        if (transfer->payload_len >= UAVCAN_NODE_STATUS_MESSAGE_SIZE)
 80033d8:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80033dc:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	8a9b      	ldrh	r3, [r3, #20]
 80033e4:	2b06      	cmp	r3, #6
 80033e6:	f240 84ff 	bls.w	8003de8 <onTransferReceived+0xa58>
        {
            // In libcanard v0, we need to use the payload_head field
            const uint8_t* payload = (const uint8_t*)transfer->payload_head;
 80033ea:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80033ee:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
            
            // Extract uptime (little-endian)
            uint32_t uptime = payload[0] | 
 80033fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80033fe:	781b      	ldrb	r3, [r3, #0]
 8003400:	461a      	mov	r2, r3
                    (payload[1] << 8) | 
 8003402:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003406:	3301      	adds	r3, #1
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	021b      	lsls	r3, r3, #8
            uint32_t uptime = payload[0] | 
 800340c:	431a      	orrs	r2, r3
                    (payload[2] << 16) | 
 800340e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003412:	3302      	adds	r3, #2
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	041b      	lsls	r3, r3, #16
                    (payload[1] << 8) | 
 8003418:	431a      	orrs	r2, r3
                    (payload[3] << 24);
 800341a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800341e:	3303      	adds	r3, #3
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	061b      	lsls	r3, r3, #24
                    (payload[2] << 16) | 
 8003424:	4313      	orrs	r3, r2
            uint32_t uptime = payload[0] | 
 8003426:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
                    
            uint8_t health = payload[4];
 800342a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800342e:	3304      	adds	r3, #4
 8003430:	781b      	ldrb	r3, [r3, #0]
 8003432:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            uint8_t mode = payload[5];
 8003436:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800343a:	3305      	adds	r3, #5
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
            uint8_t submode = payload[6];
 8003442:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8003446:	3306      	adds	r3, #6
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	f887 3125 	strb.w	r3, [r7, #293]	@ 0x125
        if (transfer->payload_len >= UAVCAN_NODE_STATUS_MESSAGE_SIZE)
 800344e:	f000 bccb 	b.w	8003de8 <onTransferReceived+0xa58>
            (void)health;
            (void)mode;
            (void)submode;
        }
    }
    else if ((transfer->transfer_type == CanardTransferTypeRequest) && 
 8003452:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003456:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	7e1b      	ldrb	r3, [r3, #24]
 800345e:	2b01      	cmp	r3, #1
 8003460:	d115      	bne.n	800348e <onTransferReceived+0xfe>
             (transfer->data_type_id == UAVCAN_GET_NODE_INFO_DATA_TYPE_ID))
 8003462:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003466:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	8adb      	ldrh	r3, [r3, #22]
    else if ((transfer->transfer_type == CanardTransferTypeRequest) && 
 800346e:	2b01      	cmp	r3, #1
 8003470:	d10d      	bne.n	800348e <onTransferReceived+0xfe>
    {
        // Handle GetNodeInfo request
        handle_get_node_info(ins, transfer);
 8003472:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003476:	f5a3 72a4 	sub.w	r2, r3, #328	@ 0x148
 800347a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800347e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003482:	6811      	ldr	r1, [r2, #0]
 8003484:	6818      	ldr	r0, [r3, #0]
 8003486:	f7ff fe13 	bl	80030b0 <handle_get_node_info>
 800348a:	f000 bcad 	b.w	8003de8 <onTransferReceived+0xa58>
    }
    else if ((transfer->transfer_type == CanardTransferTypeRequest) && 
 800348e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003492:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	7e1b      	ldrb	r3, [r3, #24]
 800349a:	2b01      	cmp	r3, #1
 800349c:	f040 8222 	bne.w	80038e4 <onTransferReceived+0x554>
             (transfer->data_type_id == UAVCAN_PARAM_STRING_ID))
 80034a0:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80034a4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	8adb      	ldrh	r3, [r3, #22]
    else if ((transfer->transfer_type == CanardTransferTypeRequest) && 
 80034ac:	2b0b      	cmp	r3, #11
 80034ae:	f040 8219 	bne.w	80038e4 <onTransferReceived+0x554>
    {
        // Handle parameter request (like when ArduPilot asks for our name)
        // Blink both orange and green LEDs to indicate parameter request
        HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);   // Orange on
 80034b2:	2201      	movs	r2, #1
 80034b4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80034b8:	482f      	ldr	r0, [pc, #188]	@ (8003578 <onTransferReceived+0x1e8>)
 80034ba:	f002 fc59 	bl	8005d70 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);   // Green on
 80034be:	2201      	movs	r2, #1
 80034c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80034c4:	482c      	ldr	r0, [pc, #176]	@ (8003578 <onTransferReceived+0x1e8>)
 80034c6:	f002 fc53 	bl	8005d70 <HAL_GPIO_WritePin>
        HAL_Delay(100);
 80034ca:	2064      	movs	r0, #100	@ 0x64
 80034cc:	f001 fabc 	bl	8004a48 <HAL_Delay>
        HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET); // Orange off
 80034d0:	2200      	movs	r2, #0
 80034d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80034d6:	4828      	ldr	r0, [pc, #160]	@ (8003578 <onTransferReceived+0x1e8>)
 80034d8:	f002 fc4a 	bl	8005d70 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET); // Green off
 80034dc:	2200      	movs	r2, #0
 80034de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80034e2:	4825      	ldr	r0, [pc, #148]	@ (8003578 <onTransferReceived+0x1e8>)
 80034e4:	f002 fc44 	bl	8005d70 <HAL_GPIO_WritePin>
        
        // Extract parameter name
        bool found = false;
 80034e8:	2300      	movs	r3, #0
 80034ea:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
        uint8_t buffer[128] = {0};
 80034ee:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80034f2:	2280      	movs	r2, #128	@ 0x80
 80034f4:	2100      	movs	r1, #0
 80034f6:	4618      	mov	r0, r3
 80034f8:	f009 fe26 	bl	800d148 <memset>
        
        // For parameter get by name
        uint16_t index = 0;
 80034fc:	2300      	movs	r3, #0
 80034fe:	f8a7 30fc 	strh.w	r3, [r7, #252]	@ 0xfc
        size_t name_len = 0;
 8003502:	2300      	movs	r3, #0
 8003504:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
        char name[32] = {0};
 8003508:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800350c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003510:	4618      	mov	r0, r3
 8003512:	2320      	movs	r3, #32
 8003514:	461a      	mov	r2, r3
 8003516:	2100      	movs	r1, #0
 8003518:	f009 fe16 	bl	800d148 <memset>
        
        // First byte should be 0 for string access or index for numerical access
        canardDecodeScalar(transfer, 0, 8, false, &index);
 800351c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003520:	f5a3 70a4 	sub.w	r0, r3, #328	@ 0x148
 8003524:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8003528:	9300      	str	r3, [sp, #0]
 800352a:	2300      	movs	r3, #0
 800352c:	2208      	movs	r2, #8
 800352e:	2100      	movs	r1, #0
 8003530:	6800      	ldr	r0, [r0, #0]
 8003532:	f7fd ff3d 	bl	80013b0 <canardDecodeScalar>
        
        if (index == 0) {
 8003536:	f8b7 30fc 	ldrh.w	r3, [r7, #252]	@ 0xfc
 800353a:	2b00      	cmp	r3, #0
 800353c:	f040 8192 	bne.w	8003864 <onTransferReceived+0x4d4>
            // Get parameter by name
            canardDecodeScalar(transfer, 8, 8, false, &name_len);
 8003540:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003544:	f5a3 70a4 	sub.w	r0, r3, #328	@ 0x148
 8003548:	f107 03f8 	add.w	r3, r7, #248	@ 0xf8
 800354c:	9300      	str	r3, [sp, #0]
 800354e:	2300      	movs	r3, #0
 8003550:	2208      	movs	r2, #8
 8003552:	2108      	movs	r1, #8
 8003554:	6800      	ldr	r0, [r0, #0]
 8003556:	f7fd ff2b 	bl	80013b0 <canardDecodeScalar>
            
            if (name_len > 0 && name_len < sizeof(name)) {
 800355a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800355e:	2b00      	cmp	r3, #0
 8003560:	f000 8180 	beq.w	8003864 <onTransferReceived+0x4d4>
 8003564:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003568:	2b1f      	cmp	r3, #31
 800356a:	f200 817b 	bhi.w	8003864 <onTransferReceived+0x4d4>
                for (uint8_t i = 0; i < name_len; i++) {
 800356e:	2300      	movs	r3, #0
 8003570:	f887 3146 	strb.w	r3, [r7, #326]	@ 0x146
 8003574:	e024      	b.n	80035c0 <onTransferReceived+0x230>
 8003576:	bf00      	nop
 8003578:	40020c00 	.word	0x40020c00
                    uint8_t c = 0;
 800357c:	2300      	movs	r3, #0
 800357e:	f887 30f7 	strb.w	r3, [r7, #247]	@ 0xf7
                    canardDecodeScalar(transfer, 16 + i * 8, 8, false, &c);
 8003582:	f897 3146 	ldrb.w	r3, [r7, #326]	@ 0x146
 8003586:	3302      	adds	r3, #2
 8003588:	00db      	lsls	r3, r3, #3
 800358a:	4619      	mov	r1, r3
 800358c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003590:	f5a3 70a4 	sub.w	r0, r3, #328	@ 0x148
 8003594:	f107 03f7 	add.w	r3, r7, #247	@ 0xf7
 8003598:	9300      	str	r3, [sp, #0]
 800359a:	2300      	movs	r3, #0
 800359c:	2208      	movs	r2, #8
 800359e:	6800      	ldr	r0, [r0, #0]
 80035a0:	f7fd ff06 	bl	80013b0 <canardDecodeScalar>
                    name[i] = (char)c;
 80035a4:	f897 3146 	ldrb.w	r3, [r7, #326]	@ 0x146
 80035a8:	f897 10f7 	ldrb.w	r1, [r7, #247]	@ 0xf7
 80035ac:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 80035b0:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80035b4:	54d1      	strb	r1, [r2, r3]
                for (uint8_t i = 0; i < name_len; i++) {
 80035b6:	f897 3146 	ldrb.w	r3, [r7, #326]	@ 0x146
 80035ba:	3301      	adds	r3, #1
 80035bc:	f887 3146 	strb.w	r3, [r7, #326]	@ 0x146
 80035c0:	f897 2146 	ldrb.w	r2, [r7, #326]	@ 0x146
 80035c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80035c8:	429a      	cmp	r2, r3
 80035ca:	d3d7      	bcc.n	800357c <onTransferReceived+0x1ec>
                }
                name[name_len] = '\0';
 80035cc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80035d0:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 80035d4:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 80035d8:	2100      	movs	r1, #0
 80035da:	54d1      	strb	r1, [r2, r3]
                
                // Check if we support this parameter
                if (strcmp(name, "name") == 0) {
 80035dc:	f107 030c 	add.w	r3, r7, #12
 80035e0:	49bd      	ldr	r1, [pc, #756]	@ (80038d8 <onTransferReceived+0x548>)
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fc fdf0 	bl	80001c8 <strcmp>
 80035e8:	4603      	mov	r3, r0
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	f040 813a 	bne.w	8003864 <onTransferReceived+0x4d4>
                    found = true;
 80035f0:	2301      	movs	r3, #1
 80035f2:	f887 3147 	strb.w	r3, [r7, #327]	@ 0x147
                    
                    // Prepare response with "name" parameter
                    uint16_t offset = 0;
 80035f6:	2300      	movs	r3, #0
 80035f8:	f8a7 3122 	strh.w	r3, [r7, #290]	@ 0x122
                    // Parameter index (we use string-based access)
                    buffer[offset++] = 0;
 80035fc:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8003600:	1c5a      	adds	r2, r3, #1
 8003602:	f8a7 2122 	strh.w	r2, [r7, #290]	@ 0x122
 8003606:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800360a:	443b      	add	r3, r7
 800360c:	2200      	movs	r2, #0
 800360e:	f803 2ce0 	strb.w	r2, [r3, #-224]
                    
                    // Parameter name length and string
                    buffer[offset++] = (uint8_t)name_len;
 8003612:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 8003616:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 800361a:	1c59      	adds	r1, r3, #1
 800361c:	f8a7 1122 	strh.w	r1, [r7, #290]	@ 0x122
 8003620:	b2d2      	uxtb	r2, r2
 8003622:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003626:	443b      	add	r3, r7
 8003628:	f803 2ce0 	strb.w	r2, [r3, #-224]
                    memcpy(&buffer[offset], name, name_len);
 800362c:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8003630:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 8003634:	4413      	add	r3, r2
 8003636:	f8d7 20f8 	ldr.w	r2, [r7, #248]	@ 0xf8
 800363a:	f107 010c 	add.w	r1, r7, #12
 800363e:	4618      	mov	r0, r3
 8003640:	f009 fdc6 	bl	800d1d0 <memcpy>
                    offset += name_len;
 8003644:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003648:	b29a      	uxth	r2, r3
 800364a:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 800364e:	4413      	add	r3, r2
 8003650:	f8a7 3122 	strh.w	r3, [r7, #290]	@ 0x122
                    
                    // Value is a string (type 0)
                    buffer[offset++] = 0;
 8003654:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8003658:	1c5a      	adds	r2, r3, #1
 800365a:	f8a7 2122 	strh.w	r2, [r7, #290]	@ 0x122
 800365e:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003662:	443b      	add	r3, r7
 8003664:	2200      	movs	r2, #0
 8003666:	f803 2ce0 	strb.w	r2, [r3, #-224]
                    
                    // Value length and data
                    const char* value = APP_NODE_NAME;
 800366a:	4b9c      	ldr	r3, [pc, #624]	@ (80038dc <onTransferReceived+0x54c>)
 800366c:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
                    size_t value_len = strlen(value);
 8003670:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 8003674:	f7fc fdb2 	bl	80001dc <strlen>
 8003678:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
                    buffer[offset++] = (uint8_t)value_len;
 800367c:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	f8a7 2122 	strh.w	r2, [r7, #290]	@ 0x122
 8003686:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800368a:	b2d2      	uxtb	r2, r2
 800368c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003690:	443b      	add	r3, r7
 8003692:	f803 2ce0 	strb.w	r2, [r3, #-224]
                    memcpy(&buffer[offset], value, value_len);
 8003696:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 800369a:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 800369e:	4413      	add	r3, r2
 80036a0:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80036a4:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 80036a8:	4618      	mov	r0, r3
 80036aa:	f009 fd91 	bl	800d1d0 <memcpy>
                    offset += value_len;
 80036ae:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 80036b8:	4413      	add	r3, r2
 80036ba:	f8a7 3122 	strh.w	r3, [r7, #290]	@ 0x122
                    
                    // Default value (same as current)
                    buffer[offset++] = 0;  // String type
 80036be:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 80036c2:	1c5a      	adds	r2, r3, #1
 80036c4:	f8a7 2122 	strh.w	r2, [r7, #290]	@ 0x122
 80036c8:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80036cc:	443b      	add	r3, r7
 80036ce:	2200      	movs	r2, #0
 80036d0:	f803 2ce0 	strb.w	r2, [r3, #-224]
                    buffer[offset++] = (uint8_t)value_len;
 80036d4:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 80036d8:	1c5a      	adds	r2, r3, #1
 80036da:	f8a7 2122 	strh.w	r2, [r7, #290]	@ 0x122
 80036de:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80036e2:	b2d2      	uxtb	r2, r2
 80036e4:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 80036e8:	443b      	add	r3, r7
 80036ea:	f803 2ce0 	strb.w	r2, [r3, #-224]
                    memcpy(&buffer[offset], value, value_len);
 80036ee:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 80036f2:	f107 0268 	add.w	r2, r7, #104	@ 0x68
 80036f6:	4413      	add	r3, r2
 80036f8:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80036fc:	f8d7 111c 	ldr.w	r1, [r7, #284]	@ 0x11c
 8003700:	4618      	mov	r0, r3
 8003702:	f009 fd65 	bl	800d1d0 <memcpy>
                    offset += value_len;
 8003706:	f8d7 3118 	ldr.w	r3, [r7, #280]	@ 0x118
 800370a:	b29a      	uxth	r2, r3
 800370c:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8003710:	4413      	add	r3, r2
 8003712:	f8a7 3122 	strh.w	r3, [r7, #290]	@ 0x122
                    
                    // Min value (empty string)
                    buffer[offset++] = 0;  // String type
 8003716:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 800371a:	1c5a      	adds	r2, r3, #1
 800371c:	f8a7 2122 	strh.w	r2, [r7, #290]	@ 0x122
 8003720:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003724:	443b      	add	r3, r7
 8003726:	2200      	movs	r2, #0
 8003728:	f803 2ce0 	strb.w	r2, [r3, #-224]
                    buffer[offset++] = 0;  // Empty
 800372c:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8003730:	1c5a      	adds	r2, r3, #1
 8003732:	f8a7 2122 	strh.w	r2, [r7, #290]	@ 0x122
 8003736:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 800373a:	443b      	add	r3, r7
 800373c:	2200      	movs	r2, #0
 800373e:	f803 2ce0 	strb.w	r2, [r3, #-224]
                    
                    // Max value (empty string)
                    buffer[offset++] = 0;  // String type
 8003742:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 8003746:	1c5a      	adds	r2, r3, #1
 8003748:	f8a7 2122 	strh.w	r2, [r7, #290]	@ 0x122
 800374c:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003750:	443b      	add	r3, r7
 8003752:	2200      	movs	r2, #0
 8003754:	f803 2ce0 	strb.w	r2, [r3, #-224]
                    buffer[offset++] = 0;  // Empty
 8003758:	f8b7 3122 	ldrh.w	r3, [r7, #290]	@ 0x122
 800375c:	1c5a      	adds	r2, r3, #1
 800375e:	f8a7 2122 	strh.w	r2, [r7, #290]	@ 0x122
 8003762:	f503 73a4 	add.w	r3, r3, #328	@ 0x148
 8003766:	443b      	add	r3, r7
 8003768:	2200      	movs	r2, #0
 800376a:	f803 2ce0 	strb.w	r2, [r3, #-224]
                    
                    // Send parameter response
                    int result = canardRequestOrRespond(ins,
 800376e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003772:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	7edc      	ldrb	r4, [r3, #27]
 800377a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800377e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3319      	adds	r3, #25
 8003786:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 800378a:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 800378e:	6812      	ldr	r2, [r2, #0]
 8003790:	7e92      	ldrb	r2, [r2, #26]
 8003792:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8003796:	f5a1 70a2 	sub.w	r0, r1, #324	@ 0x144
 800379a:	f8b7 1122 	ldrh.w	r1, [r7, #290]	@ 0x122
 800379e:	9105      	str	r1, [sp, #20]
 80037a0:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80037a4:	9104      	str	r1, [sp, #16]
 80037a6:	2100      	movs	r1, #0
 80037a8:	9103      	str	r1, [sp, #12]
 80037aa:	9202      	str	r2, [sp, #8]
 80037ac:	9301      	str	r3, [sp, #4]
 80037ae:	230b      	movs	r3, #11
 80037b0:	9300      	str	r3, [sp, #0]
 80037b2:	a347      	add	r3, pc, #284	@ (adr r3, 80038d0 <onTransferReceived+0x540>)
 80037b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b8:	4621      	mov	r1, r4
 80037ba:	6800      	ldr	r0, [r0, #0]
 80037bc:	f7fd f9aa 	bl	8000b14 <canardRequestOrRespond>
 80037c0:	4603      	mov	r3, r0
 80037c2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
                                             CanardResponse,
                                             buffer,
                                             offset);
                    
                    // Visual feedback about parameter response
                    if (result >= 0) {
 80037c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	db2b      	blt.n	8003826 <onTransferReceived+0x496>
                        // Success - blink orange and green LEDs together
                        for (int i = 0; i < 2; i++) {
 80037ce:	2300      	movs	r3, #0
 80037d0:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80037d4:	e022      	b.n	800381c <onTransferReceived+0x48c>
                            HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 80037d6:	2201      	movs	r2, #1
 80037d8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80037dc:	4840      	ldr	r0, [pc, #256]	@ (80038e0 <onTransferReceived+0x550>)
 80037de:	f002 fac7 	bl	8005d70 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 80037e2:	2201      	movs	r2, #1
 80037e4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80037e8:	483d      	ldr	r0, [pc, #244]	@ (80038e0 <onTransferReceived+0x550>)
 80037ea:	f002 fac1 	bl	8005d70 <HAL_GPIO_WritePin>
                            HAL_Delay(50);
 80037ee:	2032      	movs	r0, #50	@ 0x32
 80037f0:	f001 f92a 	bl	8004a48 <HAL_Delay>
                            HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80037f4:	2200      	movs	r2, #0
 80037f6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80037fa:	4839      	ldr	r0, [pc, #228]	@ (80038e0 <onTransferReceived+0x550>)
 80037fc:	f002 fab8 	bl	8005d70 <HAL_GPIO_WritePin>
                            HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8003800:	2200      	movs	r2, #0
 8003802:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003806:	4836      	ldr	r0, [pc, #216]	@ (80038e0 <onTransferReceived+0x550>)
 8003808:	f002 fab2 	bl	8005d70 <HAL_GPIO_WritePin>
                            HAL_Delay(50);
 800380c:	2032      	movs	r0, #50	@ 0x32
 800380e:	f001 f91b 	bl	8004a48 <HAL_Delay>
                        for (int i = 0; i < 2; i++) {
 8003812:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003816:	3301      	adds	r3, #1
 8003818:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 800381c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8003820:	2b01      	cmp	r3, #1
 8003822:	ddd8      	ble.n	80037d6 <onTransferReceived+0x446>
 8003824:	e01e      	b.n	8003864 <onTransferReceived+0x4d4>
                        }
                    } else {
                        // Error - blink red LED
                        for (int i = 0; i < 5; i++) {
 8003826:	2300      	movs	r3, #0
 8003828:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800382c:	e016      	b.n	800385c <onTransferReceived+0x4cc>
                            HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 800382e:	2201      	movs	r2, #1
 8003830:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003834:	482a      	ldr	r0, [pc, #168]	@ (80038e0 <onTransferReceived+0x550>)
 8003836:	f002 fa9b 	bl	8005d70 <HAL_GPIO_WritePin>
                            HAL_Delay(50);
 800383a:	2032      	movs	r0, #50	@ 0x32
 800383c:	f001 f904 	bl	8004a48 <HAL_Delay>
                            HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8003840:	2200      	movs	r2, #0
 8003842:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003846:	4826      	ldr	r0, [pc, #152]	@ (80038e0 <onTransferReceived+0x550>)
 8003848:	f002 fa92 	bl	8005d70 <HAL_GPIO_WritePin>
                            HAL_Delay(50);
 800384c:	2032      	movs	r0, #50	@ 0x32
 800384e:	f001 f8fb 	bl	8004a48 <HAL_Delay>
                        for (int i = 0; i < 5; i++) {
 8003852:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8003856:	3301      	adds	r3, #1
 8003858:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800385c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8003860:	2b04      	cmp	r3, #4
 8003862:	dde4      	ble.n	800382e <onTransferReceived+0x49e>
                }
            }
        }
        
        // If parameter not found, send an empty response
        if (!found) {
 8003864:	f897 3147 	ldrb.w	r3, [r7, #327]	@ 0x147
 8003868:	f083 0301 	eor.w	r3, r3, #1
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	f000 82b5 	beq.w	8003dde <onTransferReceived+0xa4e>
            // Empty parameter response
            buffer[0] = 0;  // Empty name
 8003874:	2300      	movs	r3, #0
 8003876:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
            
            canardRequestOrRespond(ins, 
 800387a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800387e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	7edc      	ldrb	r4, [r3, #27]
 8003886:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800388a:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	3319      	adds	r3, #25
 8003892:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8003896:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 800389a:	6812      	ldr	r2, [r2, #0]
 800389c:	7e92      	ldrb	r2, [r2, #26]
 800389e:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 80038a2:	f5a1 70a2 	sub.w	r0, r1, #324	@ 0x144
 80038a6:	2101      	movs	r1, #1
 80038a8:	9105      	str	r1, [sp, #20]
 80038aa:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80038ae:	9104      	str	r1, [sp, #16]
 80038b0:	2100      	movs	r1, #0
 80038b2:	9103      	str	r1, [sp, #12]
 80038b4:	9202      	str	r2, [sp, #8]
 80038b6:	9301      	str	r3, [sp, #4]
 80038b8:	230b      	movs	r3, #11
 80038ba:	9300      	str	r3, [sp, #0]
 80038bc:	a304      	add	r3, pc, #16	@ (adr r3, 80038d0 <onTransferReceived+0x540>)
 80038be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c2:	4621      	mov	r1, r4
 80038c4:	6800      	ldr	r0, [r0, #0]
 80038c6:	f7fd f925 	bl	8000b14 <canardRequestOrRespond>
    {
 80038ca:	e288      	b.n	8003dde <onTransferReceived+0xa4e>
 80038cc:	f3af 8000 	nop.w
 80038d0:	e0c98ae0 	.word	0xe0c98ae0
 80038d4:	e02f25d6 	.word	0xe02f25d6
 80038d8:	0800d2a4 	.word	0x0800d2a4
 80038dc:	0800d298 	.word	0x0800d298
 80038e0:	40020c00 	.word	0x40020c00
                                  CanardResponse,
                                  buffer,
                                  1);
        }
    }
    else if ((transfer->transfer_type == CanardTransferTypeRequest) && 
 80038e4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80038e8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	7e1b      	ldrb	r3, [r3, #24]
 80038f0:	2b01      	cmp	r3, #1
 80038f2:	d142      	bne.n	800397a <onTransferReceived+0x5ea>
             (transfer->data_type_id == UAVCAN_PARAM_GETSET_ID))
 80038f4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80038f8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	8adb      	ldrh	r3, [r3, #22]
    else if ((transfer->transfer_type == CanardTransferTypeRequest) && 
 8003900:	2b0a      	cmp	r3, #10
 8003902:	d13a      	bne.n	800397a <onTransferReceived+0x5ea>
    {
        // Handle parameter get/set request
        // Flash green LED to indicate parameter get/set
        HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8003904:	2201      	movs	r2, #1
 8003906:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800390a:	48c1      	ldr	r0, [pc, #772]	@ (8003c10 <onTransferReceived+0x880>)
 800390c:	f002 fa30 	bl	8005d70 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8003910:	2032      	movs	r0, #50	@ 0x32
 8003912:	f001 f899 	bl	8004a48 <HAL_Delay>
        HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8003916:	2200      	movs	r2, #0
 8003918:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800391c:	48bc      	ldr	r0, [pc, #752]	@ (8003c10 <onTransferReceived+0x880>)
 800391e:	f002 fa27 	bl	8005d70 <HAL_GPIO_WritePin>
        
        // For now, just send empty response which means parameter not found
        uint8_t buffer[2] = {0};
 8003922:	2300      	movs	r3, #0
 8003924:	f8a7 30f4 	strh.w	r3, [r7, #244]	@ 0xf4
        
        canardRequestOrRespond(ins, 
 8003928:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800392c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	7edc      	ldrb	r4, [r3, #27]
 8003934:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003938:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	3319      	adds	r3, #25
 8003940:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8003944:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8003948:	6812      	ldr	r2, [r2, #0]
 800394a:	7e92      	ldrb	r2, [r2, #26]
 800394c:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8003950:	f5a1 70a2 	sub.w	r0, r1, #324	@ 0x144
 8003954:	2102      	movs	r1, #2
 8003956:	9105      	str	r1, [sp, #20]
 8003958:	f107 01f4 	add.w	r1, r7, #244	@ 0xf4
 800395c:	9104      	str	r1, [sp, #16]
 800395e:	2100      	movs	r1, #0
 8003960:	9103      	str	r1, [sp, #12]
 8003962:	9202      	str	r2, [sp, #8]
 8003964:	9301      	str	r3, [sp, #4]
 8003966:	230a      	movs	r3, #10
 8003968:	9300      	str	r3, [sp, #0]
 800396a:	a3a5      	add	r3, pc, #660	@ (adr r3, 8003c00 <onTransferReceived+0x870>)
 800396c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003970:	4621      	mov	r1, r4
 8003972:	6800      	ldr	r0, [r0, #0]
 8003974:	f7fd f8ce 	bl	8000b14 <canardRequestOrRespond>
    {
 8003978:	e236      	b.n	8003de8 <onTransferReceived+0xa58>
                              transfer->priority,
                              CanardResponse,
                              buffer,
                              2);
    }
    else if ((transfer->transfer_type == CanardTransferTypeRequest) && 
 800397a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800397e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	7e1b      	ldrb	r3, [r3, #24]
 8003986:	2b01      	cmp	r3, #1
 8003988:	f040 8148 	bne.w	8003c1c <onTransferReceived+0x88c>
             (transfer->data_type_id == UAVCAN_PROTOCOL_REGISTER_ACCESS_ID))
 800398c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003990:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	8adb      	ldrh	r3, [r3, #22]
    else if ((transfer->transfer_type == CanardTransferTypeRequest) && 
 8003998:	2b55      	cmp	r3, #85	@ 0x55
 800399a:	f040 813f 	bne.w	8003c1c <onTransferReceived+0x88c>
    {
        // Handle register access request
        // Flash orange LED to indicate register access
        HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 800399e:	2201      	movs	r2, #1
 80039a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80039a4:	489a      	ldr	r0, [pc, #616]	@ (8003c10 <onTransferReceived+0x880>)
 80039a6:	f002 f9e3 	bl	8005d70 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 80039aa:	2032      	movs	r0, #50	@ 0x32
 80039ac:	f001 f84c 	bl	8004a48 <HAL_Delay>
        HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80039b0:	2200      	movs	r2, #0
 80039b2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80039b6:	4896      	ldr	r0, [pc, #600]	@ (8003c10 <onTransferReceived+0x880>)
 80039b8:	f002 f9da 	bl	8005d70 <HAL_GPIO_WritePin>
        
        // Parse the register name
        bool found = false;
 80039bc:	2300      	movs	r3, #0
 80039be:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
        uint8_t buffer[128] = {0};
 80039c2:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 80039c6:	2280      	movs	r2, #128	@ 0x80
 80039c8:	2100      	movs	r1, #0
 80039ca:	4618      	mov	r0, r3
 80039cc:	f009 fbbc 	bl	800d148 <memset>
        
        uint8_t name_len = 0;
 80039d0:	2300      	movs	r3, #0
 80039d2:	f887 30f3 	strb.w	r3, [r7, #243]	@ 0xf3
        canardDecodeScalar(transfer, 0, 8, false, &name_len);
 80039d6:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 80039da:	f5a3 70a4 	sub.w	r0, r3, #328	@ 0x148
 80039de:	f107 03f3 	add.w	r3, r7, #243	@ 0xf3
 80039e2:	9300      	str	r3, [sp, #0]
 80039e4:	2300      	movs	r3, #0
 80039e6:	2208      	movs	r2, #8
 80039e8:	2100      	movs	r1, #0
 80039ea:	6800      	ldr	r0, [r0, #0]
 80039ec:	f7fd fce0 	bl	80013b0 <canardDecodeScalar>
        
        if (name_len > 0 && name_len < 92) {
 80039f0:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	f000 80cc 	beq.w	8003b92 <onTransferReceived+0x802>
 80039fa:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 80039fe:	2b5b      	cmp	r3, #91	@ 0x5b
 8003a00:	f200 80c7 	bhi.w	8003b92 <onTransferReceived+0x802>
            char name[92] = {0};
 8003a04:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003a08:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	235c      	movs	r3, #92	@ 0x5c
 8003a10:	461a      	mov	r2, r3
 8003a12:	2100      	movs	r1, #0
 8003a14:	f009 fb98 	bl	800d148 <memset>
            
            // Extract the register name
            for (uint8_t i = 0; i < name_len; i++) {
 8003a18:	2300      	movs	r3, #0
 8003a1a:	f887 313a 	strb.w	r3, [r7, #314]	@ 0x13a
 8003a1e:	e021      	b.n	8003a64 <onTransferReceived+0x6d4>
                uint8_t c = 0;
 8003a20:	2300      	movs	r3, #0
 8003a22:	f887 30f2 	strb.w	r3, [r7, #242]	@ 0xf2
                canardDecodeScalar(transfer, 8 + i * 8, 8, false, &c);
 8003a26:	f897 313a 	ldrb.w	r3, [r7, #314]	@ 0x13a
 8003a2a:	3301      	adds	r3, #1
 8003a2c:	00db      	lsls	r3, r3, #3
 8003a2e:	4619      	mov	r1, r3
 8003a30:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003a34:	f5a3 70a4 	sub.w	r0, r3, #328	@ 0x148
 8003a38:	f107 03f2 	add.w	r3, r7, #242	@ 0xf2
 8003a3c:	9300      	str	r3, [sp, #0]
 8003a3e:	2300      	movs	r3, #0
 8003a40:	2208      	movs	r2, #8
 8003a42:	6800      	ldr	r0, [r0, #0]
 8003a44:	f7fd fcb4 	bl	80013b0 <canardDecodeScalar>
                name[i] = (char)c;
 8003a48:	f897 313a 	ldrb.w	r3, [r7, #314]	@ 0x13a
 8003a4c:	f897 10f2 	ldrb.w	r1, [r7, #242]	@ 0xf2
 8003a50:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8003a54:	f5a2 729e 	sub.w	r2, r2, #316	@ 0x13c
 8003a58:	54d1      	strb	r1, [r2, r3]
            for (uint8_t i = 0; i < name_len; i++) {
 8003a5a:	f897 313a 	ldrb.w	r3, [r7, #314]	@ 0x13a
 8003a5e:	3301      	adds	r3, #1
 8003a60:	f887 313a 	strb.w	r3, [r7, #314]	@ 0x13a
 8003a64:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 8003a68:	f897 213a 	ldrb.w	r2, [r7, #314]	@ 0x13a
 8003a6c:	429a      	cmp	r2, r3
 8003a6e:	d3d7      	bcc.n	8003a20 <onTransferReceived+0x690>
            }
            name[name_len] = '\0';
 8003a70:	f897 30f3 	ldrb.w	r3, [r7, #243]	@ 0xf3
 8003a74:	461a      	mov	r2, r3
 8003a76:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003a7a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003a7e:	2100      	movs	r1, #0
 8003a80:	5499      	strb	r1, [r3, r2]
            
            // Check if this is a request for "uavcan.node.name"
            if (strcmp(name, "uavcan.node.name") == 0) {
 8003a82:	f107 030c 	add.w	r3, r7, #12
 8003a86:	4963      	ldr	r1, [pc, #396]	@ (8003c14 <onTransferReceived+0x884>)
 8003a88:	4618      	mov	r0, r3
 8003a8a:	f7fc fb9d 	bl	80001c8 <strcmp>
 8003a8e:	4603      	mov	r3, r0
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d17e      	bne.n	8003b92 <onTransferReceived+0x802>
                // Flash green LED rapidly to indicate node name register request
                for (int i = 0; i < 3; i++) {
 8003a94:	2300      	movs	r3, #0
 8003a96:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003a9a:	e016      	b.n	8003aca <onTransferReceived+0x73a>
                    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003aa2:	485b      	ldr	r0, [pc, #364]	@ (8003c10 <onTransferReceived+0x880>)
 8003aa4:	f002 f964 	bl	8005d70 <HAL_GPIO_WritePin>
                    HAL_Delay(20);
 8003aa8:	2014      	movs	r0, #20
 8003aaa:	f000 ffcd 	bl	8004a48 <HAL_Delay>
                    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8003aae:	2200      	movs	r2, #0
 8003ab0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003ab4:	4856      	ldr	r0, [pc, #344]	@ (8003c10 <onTransferReceived+0x880>)
 8003ab6:	f002 f95b 	bl	8005d70 <HAL_GPIO_WritePin>
                    HAL_Delay(20);
 8003aba:	2014      	movs	r0, #20
 8003abc:	f000 ffc4 	bl	8004a48 <HAL_Delay>
                for (int i = 0; i < 3; i++) {
 8003ac0:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003ac4:	3301      	adds	r3, #1
 8003ac6:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8003aca:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	dde4      	ble.n	8003a9c <onTransferReceived+0x70c>
                }
                
                // Prepare response with node name
                // Value type (0 = string)
                buffer[0] = 0;
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
                
                // For string value
                const char* value = APP_NODE_NAME;
 8003ad8:	4b4f      	ldr	r3, [pc, #316]	@ (8003c18 <onTransferReceived+0x888>)
 8003ada:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
                size_t value_len = strlen(value);
 8003ade:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8003ae2:	f7fc fb7b 	bl	80001dc <strlen>
 8003ae6:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
                
                buffer[1] = (uint8_t)value_len;
 8003aea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003aee:	b2db      	uxtb	r3, r3
 8003af0:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
                memcpy(&buffer[2], value, value_len);
 8003af4:	f107 0368 	add.w	r3, r7, #104	@ 0x68
 8003af8:	3302      	adds	r3, #2
 8003afa:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8003afe:	f8d7 1110 	ldr.w	r1, [r7, #272]	@ 0x110
 8003b02:	4618      	mov	r0, r3
 8003b04:	f009 fb64 	bl	800d1d0 <memcpy>
                
                found = true;
 8003b08:	2301      	movs	r3, #1
 8003b0a:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b
                
                // Send the register value
                int result = canardRequestOrRespond(ins,
 8003b0e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003b12:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	7edc      	ldrb	r4, [r3, #27]
 8003b1a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003b1e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	3319      	adds	r3, #25
 8003b26:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8003b2a:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8003b2e:	6812      	ldr	r2, [r2, #0]
 8003b30:	7e92      	ldrb	r2, [r2, #26]
 8003b32:	f8d7 110c 	ldr.w	r1, [r7, #268]	@ 0x10c
 8003b36:	b289      	uxth	r1, r1
 8003b38:	3102      	adds	r1, #2
 8003b3a:	b289      	uxth	r1, r1
 8003b3c:	f507 70a4 	add.w	r0, r7, #328	@ 0x148
 8003b40:	f5a0 70a2 	sub.w	r0, r0, #324	@ 0x144
 8003b44:	9105      	str	r1, [sp, #20]
 8003b46:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8003b4a:	9104      	str	r1, [sp, #16]
 8003b4c:	2100      	movs	r1, #0
 8003b4e:	9103      	str	r1, [sp, #12]
 8003b50:	9202      	str	r2, [sp, #8]
 8003b52:	9301      	str	r3, [sp, #4]
 8003b54:	2355      	movs	r3, #85	@ 0x55
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	a32b      	add	r3, pc, #172	@ (adr r3, 8003c08 <onTransferReceived+0x878>)
 8003b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5e:	4621      	mov	r1, r4
 8003b60:	6800      	ldr	r0, [r0, #0]
 8003b62:	f7fc ffd7 	bl	8000b14 <canardRequestOrRespond>
 8003b66:	4603      	mov	r3, r0
 8003b68:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
                                       transfer->priority,
                                       CanardResponse,
                                       buffer,
                                       2 + value_len);
                
                if (result >= 0) {
 8003b6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	db0e      	blt.n	8003b92 <onTransferReceived+0x802>
                    // Success - blink green LED
                    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8003b74:	2201      	movs	r2, #1
 8003b76:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b7a:	4825      	ldr	r0, [pc, #148]	@ (8003c10 <onTransferReceived+0x880>)
 8003b7c:	f002 f8f8 	bl	8005d70 <HAL_GPIO_WritePin>
                    HAL_Delay(100);
 8003b80:	2064      	movs	r0, #100	@ 0x64
 8003b82:	f000 ff61 	bl	8004a48 <HAL_Delay>
                    HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8003b86:	2200      	movs	r2, #0
 8003b88:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003b8c:	4820      	ldr	r0, [pc, #128]	@ (8003c10 <onTransferReceived+0x880>)
 8003b8e:	f002 f8ef 	bl	8005d70 <HAL_GPIO_WritePin>
                }
            }
        }
        
        // If register not found, send empty response
        if (!found) {
 8003b92:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 8003b96:	f083 0301 	eor.w	r3, r3, #1
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	f000 8120 	beq.w	8003de2 <onTransferReceived+0xa52>
            // Empty response - value type 0 (string) with empty string
            buffer[0] = 0;
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	f887 3068 	strb.w	r3, [r7, #104]	@ 0x68
            buffer[1] = 0;
 8003ba8:	2300      	movs	r3, #0
 8003baa:	f887 3069 	strb.w	r3, [r7, #105]	@ 0x69
            
            canardRequestOrRespond(ins, 
 8003bae:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003bb2:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	7edc      	ldrb	r4, [r3, #27]
 8003bba:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003bbe:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	3319      	adds	r3, #25
 8003bc6:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8003bca:	f5a2 72a4 	sub.w	r2, r2, #328	@ 0x148
 8003bce:	6812      	ldr	r2, [r2, #0]
 8003bd0:	7e92      	ldrb	r2, [r2, #26]
 8003bd2:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8003bd6:	f5a1 70a2 	sub.w	r0, r1, #324	@ 0x144
 8003bda:	2102      	movs	r1, #2
 8003bdc:	9105      	str	r1, [sp, #20]
 8003bde:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 8003be2:	9104      	str	r1, [sp, #16]
 8003be4:	2100      	movs	r1, #0
 8003be6:	9103      	str	r1, [sp, #12]
 8003be8:	9202      	str	r2, [sp, #8]
 8003bea:	9301      	str	r3, [sp, #4]
 8003bec:	2355      	movs	r3, #85	@ 0x55
 8003bee:	9300      	str	r3, [sp, #0]
 8003bf0:	a305      	add	r3, pc, #20	@ (adr r3, 8003c08 <onTransferReceived+0x878>)
 8003bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf6:	4621      	mov	r1, r4
 8003bf8:	6800      	ldr	r0, [r0, #0]
 8003bfa:	f7fc ff8b 	bl	8000b14 <canardRequestOrRespond>
    {
 8003bfe:	e0f0      	b.n	8003de2 <onTransferReceived+0xa52>
 8003c00:	39d1a4d5 	.word	0x39d1a4d5
 8003c04:	a7b622f9 	.word	0xa7b622f9
 8003c08:	bc4bc330 	.word	0xbc4bc330
 8003c0c:	b7d72a90 	.word	0xb7d72a90
 8003c10:	40020c00 	.word	0x40020c00
 8003c14:	0800d2ac 	.word	0x0800d2ac
 8003c18:	0800d298 	.word	0x0800d298
                                  CanardResponse,
                                  buffer,
                                  2);
        }
    }
    else if ((transfer->transfer_type == CanardTransferTypeMessage) && 
 8003c1c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003c20:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	7e1b      	ldrb	r3, [r3, #24]
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d17d      	bne.n	8003d28 <onTransferReceived+0x998>
             (transfer->data_type_id == MSG_PORT_ID))
 8003c2c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003c30:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	8adb      	ldrh	r3, [r3, #22]
    else if ((transfer->transfer_type == CanardTransferTypeMessage) && 
 8003c38:	f240 6254 	movw	r2, #1620	@ 0x654
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d173      	bne.n	8003d28 <onTransferReceived+0x998>
    {
        // Handle Real64 array message on port 1620 (Yakut test message)
        // Toggle LD4 (green) when we receive a Real64 array
        HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 8003c40:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003c44:	486b      	ldr	r0, [pc, #428]	@ (8003df4 <onTransferReceived+0xa64>)
 8003c46:	f002 f8ac 	bl	8005da2 <HAL_GPIO_TogglePin>
        
        // Process Real64 array data
        if (transfer->payload_len > 0)
 8003c4a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003c4e:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	8a9b      	ldrh	r3, [r3, #20]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	f000 80c5 	beq.w	8003de6 <onTransferReceived+0xa56>
        {
            // First byte is array length - access via payload_head
            uint8_t array_length = transfer->payload_head[0];
 8003c5c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003c60:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	781b      	ldrb	r3, [r3, #0]
 8003c6a:	f887 3107 	strb.w	r3, [r7, #263]	@ 0x107
            
            // Check payload size matches expected size for the array
            if (transfer->payload_len == 1 + (array_length * sizeof(double)))
 8003c6e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003c72:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	8a9b      	ldrh	r3, [r3, #20]
 8003c7a:	461a      	mov	r2, r3
 8003c7c:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8003c80:	00db      	lsls	r3, r3, #3
 8003c82:	3301      	adds	r3, #1
 8003c84:	429a      	cmp	r2, r3
 8003c86:	f040 80ae 	bne.w	8003de6 <onTransferReceived+0xa56>
            {
                // Extract the array values
                // Note: Real64 values need to be carefully extracted due to alignment and endianness
                for (uint8_t i = 0; i < array_length && i < 10; i++)  // limit to 10 elements for safety
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
 8003c90:	e03f      	b.n	8003d12 <onTransferReceived+0x982>
                    // Extract each double (Real64) value - we need to copy to ensure proper alignment
                    double value;
                    
                    // In libcanard v0, we need to use canardDecodeScalar for safely extracting values
                    canardDecodeScalar(transfer, 
                                       8 + (i * sizeof(double) * 8), // bit offset (8 bits for length + position)
 8003c92:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8003c96:	019b      	lsls	r3, r3, #6
 8003c98:	f103 0108 	add.w	r1, r3, #8
                    canardDecodeScalar(transfer, 
 8003c9c:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003ca0:	f5a3 70a4 	sub.w	r0, r3, #328	@ 0x148
 8003ca4:	f107 03e8 	add.w	r3, r7, #232	@ 0xe8
 8003ca8:	9300      	str	r3, [sp, #0]
 8003caa:	2300      	movs	r3, #0
 8003cac:	2240      	movs	r2, #64	@ 0x40
 8003cae:	6800      	ldr	r0, [r0, #0]
 8003cb0:	f7fd fb7e 	bl	80013b0 <canardDecodeScalar>
                                       false,                        // not signed
                                       &value);                      // destination
                    
                    // Do something with each value
                    // For demonstration, we'll flash the LED differently based on value
                    if (value > 0)
 8003cb4:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	@ 0xe8
 8003cb8:	f04f 0200 	mov.w	r2, #0
 8003cbc:	f04f 0300 	mov.w	r3, #0
 8003cc0:	f7fc fb12 	bl	80002e8 <__aeabi_dcmpgt>
 8003cc4:	4603      	mov	r3, r0
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d00f      	beq.n	8003cea <onTransferReceived+0x95a>
                    {
                        // Positive value - blink green LED for a short time
                        HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8003cca:	2201      	movs	r2, #1
 8003ccc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003cd0:	4848      	ldr	r0, [pc, #288]	@ (8003df4 <onTransferReceived+0xa64>)
 8003cd2:	f002 f84d 	bl	8005d70 <HAL_GPIO_WritePin>
                        HAL_Delay(50);
 8003cd6:	2032      	movs	r0, #50	@ 0x32
 8003cd8:	f000 feb6 	bl	8004a48 <HAL_Delay>
                        HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8003cdc:	2200      	movs	r2, #0
 8003cde:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003ce2:	4844      	ldr	r0, [pc, #272]	@ (8003df4 <onTransferReceived+0xa64>)
 8003ce4:	f002 f844 	bl	8005d70 <HAL_GPIO_WritePin>
 8003ce8:	e00e      	b.n	8003d08 <onTransferReceived+0x978>
                    }
                    else
                    {
                        // Negative or zero value - blink orange LED for a short time
                        HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8003cea:	2201      	movs	r2, #1
 8003cec:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003cf0:	4840      	ldr	r0, [pc, #256]	@ (8003df4 <onTransferReceived+0xa64>)
 8003cf2:	f002 f83d 	bl	8005d70 <HAL_GPIO_WritePin>
                        HAL_Delay(50);
 8003cf6:	2032      	movs	r0, #50	@ 0x32
 8003cf8:	f000 fea6 	bl	8004a48 <HAL_Delay>
                        HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003d02:	483c      	ldr	r0, [pc, #240]	@ (8003df4 <onTransferReceived+0xa64>)
 8003d04:	f002 f834 	bl	8005d70 <HAL_GPIO_WritePin>
                for (uint8_t i = 0; i < array_length && i < 10; i++)  // limit to 10 elements for safety
 8003d08:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	f887 3133 	strb.w	r3, [r7, #307]	@ 0x133
 8003d12:	f897 2133 	ldrb.w	r2, [r7, #307]	@ 0x133
 8003d16:	f897 3107 	ldrb.w	r3, [r7, #263]	@ 0x107
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d263      	bcs.n	8003de6 <onTransferReceived+0xa56>
 8003d1e:	f897 3133 	ldrb.w	r3, [r7, #307]	@ 0x133
 8003d22:	2b09      	cmp	r3, #9
 8003d24:	d9b5      	bls.n	8003c92 <onTransferReceived+0x902>
        if (transfer->payload_len > 0)
 8003d26:	e05e      	b.n	8003de6 <onTransferReceived+0xa56>
                    }
                }
            }
        }
    }
    else if ((transfer->transfer_type == CanardTransferTypeMessage) && 
 8003d28:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003d2c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	7e1b      	ldrb	r3, [r3, #24]
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	d157      	bne.n	8003de8 <onTransferReceived+0xa58>
             (transfer->data_type_id == UAVCAN_RAW_COMMAND_ID))
 8003d38:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003d3c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	8adb      	ldrh	r3, [r3, #22]
    else if ((transfer->transfer_type == CanardTransferTypeMessage) && 
 8003d44:	2b1e      	cmp	r3, #30
 8003d46:	d14f      	bne.n	8003de8 <onTransferReceived+0xa58>
    {
        // Flash green and orange LEDs to show raw command received
        HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8003d48:	2201      	movs	r2, #1
 8003d4a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d4e:	4829      	ldr	r0, [pc, #164]	@ (8003df4 <onTransferReceived+0xa64>)
 8003d50:	f002 f80e 	bl	8005d70 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_SET);
 8003d54:	2201      	movs	r2, #1
 8003d56:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003d5a:	4826      	ldr	r0, [pc, #152]	@ (8003df4 <onTransferReceived+0xa64>)
 8003d5c:	f002 f808 	bl	8005d70 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8003d60:	2032      	movs	r0, #50	@ 0x32
 8003d62:	f000 fe71 	bl	8004a48 <HAL_Delay>
        HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8003d66:	2200      	movs	r2, #0
 8003d68:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003d6c:	4821      	ldr	r0, [pc, #132]	@ (8003df4 <onTransferReceived+0xa64>)
 8003d6e:	f001 ffff 	bl	8005d70 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003d72:	2200      	movs	r2, #0
 8003d74:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003d78:	481e      	ldr	r0, [pc, #120]	@ (8003df4 <onTransferReceived+0xa64>)
 8003d7a:	f001 fff9 	bl	8005d70 <HAL_GPIO_WritePin>
        
        // Parse the raw command message
        if (transfer->payload_len > 0)
 8003d7e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003d82:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	8a9b      	ldrh	r3, [r3, #20]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d02c      	beq.n	8003de8 <onTransferReceived+0xa58>
        {
            // Raw command format: 
            // Byte 0: Command type
            // Bytes 1-2: Command value (int16_t, little-endian)
            
            const uint8_t* payload = (const uint8_t*)transfer->payload_head;
 8003d8e:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003d92:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
            
            // For simplicity, we'll just extract the first command value (int16_t)
            // In a real implementation, you might want to check command type and handle accordingly
            int16_t command_value = 0;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
            
            if (transfer->payload_len >= 3) {
 8003da4:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 8003da8:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	8a9b      	ldrh	r3, [r3, #20]
 8003db0:	2b02      	cmp	r3, #2
 8003db2:	d919      	bls.n	8003de8 <onTransferReceived+0xa58>
                // Extract command value (little-endian)
                command_value = (int16_t)(payload[1] | (payload[2] << 8));
 8003db4:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003db8:	3301      	adds	r3, #1
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	b21a      	sxth	r2, r3
 8003dbe:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8003dc2:	3302      	adds	r3, #2
 8003dc4:	781b      	ldrb	r3, [r3, #0]
 8003dc6:	b21b      	sxth	r3, r3
 8003dc8:	021b      	lsls	r3, r3, #8
 8003dca:	b21b      	sxth	r3, r3
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	f8a7 30fe 	strh.w	r3, [r7, #254]	@ 0xfe
                
                // Process the command, translating to EPOS4 format
                handle_ardupilot_command(command_value);
 8003dd2:	f9b7 30fe 	ldrsh.w	r3, [r7, #254]	@ 0xfe
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	f000 f924 	bl	8004024 <handle_ardupilot_command>
            }
        }
    }
}
 8003ddc:	e004      	b.n	8003de8 <onTransferReceived+0xa58>
    {
 8003dde:	bf00      	nop
 8003de0:	e002      	b.n	8003de8 <onTransferReceived+0xa58>
    {
 8003de2:	bf00      	nop
 8003de4:	e000      	b.n	8003de8 <onTransferReceived+0xa58>
        if (transfer->payload_len > 0)
 8003de6:	bf00      	nop
}
 8003de8:	bf00      	nop
 8003dea:	f507 77a6 	add.w	r7, r7, #332	@ 0x14c
 8003dee:	46bd      	mov	sp, r7
 8003df0:	bd90      	pop	{r4, r7, pc}
 8003df2:	bf00      	nop
 8003df4:	40020c00 	.word	0x40020c00

08003df8 <send_node_name>:

// New function to send node name as param string message
void send_node_name(void)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b0ac      	sub	sp, #176	@ 0xb0
 8003dfc:	af06      	add	r7, sp, #24
    // Format parameter message according to UAVCAN specification for ArduPilot
    // Parameter name: "name" (name of the parameter)
    // Parameter value: APP_NODE_NAME (value of the parameter)
    
    const char *param_name = "name";
 8003dfe:	4b84      	ldr	r3, [pc, #528]	@ (8004010 <send_node_name+0x218>)
 8003e00:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    const char *param_value = APP_NODE_NAME;
 8003e04:	4b83      	ldr	r3, [pc, #524]	@ (8004014 <send_node_name+0x21c>)
 8003e06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    size_t name_len = strlen(param_name);
 8003e0a:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 8003e0e:	f7fc f9e5 	bl	80001dc <strlen>
 8003e12:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
    size_t value_len = strlen(param_value);
 8003e16:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8003e1a:	f7fc f9df 	bl	80001dc <strlen>
 8003e1e:	f8c7 0088 	str.w	r0, [r7, #136]	@ 0x88
    
    // Buffer for parameter message
    uint8_t buffer[128] = {0};
 8003e22:	463b      	mov	r3, r7
 8003e24:	2280      	movs	r2, #128	@ 0x80
 8003e26:	2100      	movs	r1, #0
 8003e28:	4618      	mov	r0, r3
 8003e2a:	f009 f98d 	bl	800d148 <memset>
    uint16_t offset = 0;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    
    // Empty key (parameter index) - 0 means not using index
    buffer[offset++] = 0;
 8003e34:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e38:	1c5a      	adds	r2, r3, #1
 8003e3a:	f8a7 2086 	strh.w	r2, [r7, #134]	@ 0x86
 8003e3e:	3398      	adds	r3, #152	@ 0x98
 8003e40:	443b      	add	r3, r7
 8003e42:	2200      	movs	r2, #0
 8003e44:	f803 2c98 	strb.w	r2, [r3, #-152]
    
    // Parameter name as a string
    buffer[offset++] = (uint8_t)name_len;
 8003e48:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e4c:	1c5a      	adds	r2, r3, #1
 8003e4e:	f8a7 2086 	strh.w	r2, [r7, #134]	@ 0x86
 8003e52:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003e56:	b2d2      	uxtb	r2, r2
 8003e58:	3398      	adds	r3, #152	@ 0x98
 8003e5a:	443b      	add	r3, r7
 8003e5c:	f803 2c98 	strb.w	r2, [r3, #-152]
    memcpy(&buffer[offset], param_name, name_len);
 8003e60:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e64:	463a      	mov	r2, r7
 8003e66:	4413      	add	r3, r2
 8003e68:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8003e6c:	f8d7 1094 	ldr.w	r1, [r7, #148]	@ 0x94
 8003e70:	4618      	mov	r0, r3
 8003e72:	f009 f9ad 	bl	800d1d0 <memcpy>
    offset += name_len;
 8003e76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e80:	4413      	add	r3, r2
 8003e82:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    
    // Parameter value - tag for string (0 = string, 1 = integer, etc.)
    buffer[offset++] = 0;  // Tag for string value
 8003e86:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e8a:	1c5a      	adds	r2, r3, #1
 8003e8c:	f8a7 2086 	strh.w	r2, [r7, #134]	@ 0x86
 8003e90:	3398      	adds	r3, #152	@ 0x98
 8003e92:	443b      	add	r3, r7
 8003e94:	2200      	movs	r2, #0
 8003e96:	f803 2c98 	strb.w	r2, [r3, #-152]
    
    // Parameter value - string
    buffer[offset++] = (uint8_t)value_len;
 8003e9a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003e9e:	1c5a      	adds	r2, r3, #1
 8003ea0:	f8a7 2086 	strh.w	r2, [r7, #134]	@ 0x86
 8003ea4:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	3398      	adds	r3, #152	@ 0x98
 8003eac:	443b      	add	r3, r7
 8003eae:	f803 2c98 	strb.w	r2, [r3, #-152]
    memcpy(&buffer[offset], param_value, value_len);
 8003eb2:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003eb6:	463a      	mov	r2, r7
 8003eb8:	4413      	add	r3, r2
 8003eba:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003ebe:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	f009 f984 	bl	800d1d0 <memcpy>
    offset += value_len;
 8003ec8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003ecc:	b29a      	uxth	r2, r3
 8003ece:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    
    // Parameter default value (same as current value for simplicity)
    buffer[offset++] = 0;  // Tag for string value
 8003ed8:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003edc:	1c5a      	adds	r2, r3, #1
 8003ede:	f8a7 2086 	strh.w	r2, [r7, #134]	@ 0x86
 8003ee2:	3398      	adds	r3, #152	@ 0x98
 8003ee4:	443b      	add	r3, r7
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f803 2c98 	strb.w	r2, [r3, #-152]
    buffer[offset++] = (uint8_t)value_len;
 8003eec:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003ef0:	1c5a      	adds	r2, r3, #1
 8003ef2:	f8a7 2086 	strh.w	r2, [r7, #134]	@ 0x86
 8003ef6:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003efa:	b2d2      	uxtb	r2, r2
 8003efc:	3398      	adds	r3, #152	@ 0x98
 8003efe:	443b      	add	r3, r7
 8003f00:	f803 2c98 	strb.w	r2, [r3, #-152]
    memcpy(&buffer[offset], param_value, value_len);
 8003f04:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f08:	463a      	mov	r2, r7
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8003f10:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003f14:	4618      	mov	r0, r3
 8003f16:	f009 f95b 	bl	800d1d0 <memcpy>
    offset += value_len;
 8003f1a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f1e:	b29a      	uxth	r2, r3
 8003f20:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f24:	4413      	add	r3, r2
 8003f26:	f8a7 3086 	strh.w	r3, [r7, #134]	@ 0x86
    
    // Parameter max value (empty string)
    buffer[offset++] = 0;  // Tag for string
 8003f2a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f2e:	1c5a      	adds	r2, r3, #1
 8003f30:	f8a7 2086 	strh.w	r2, [r7, #134]	@ 0x86
 8003f34:	3398      	adds	r3, #152	@ 0x98
 8003f36:	443b      	add	r3, r7
 8003f38:	2200      	movs	r2, #0
 8003f3a:	f803 2c98 	strb.w	r2, [r3, #-152]
    buffer[offset++] = 0;  // Empty string
 8003f3e:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f42:	1c5a      	adds	r2, r3, #1
 8003f44:	f8a7 2086 	strh.w	r2, [r7, #134]	@ 0x86
 8003f48:	3398      	adds	r3, #152	@ 0x98
 8003f4a:	443b      	add	r3, r7
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	f803 2c98 	strb.w	r2, [r3, #-152]
    
    // Parameter min value (empty string)
    buffer[offset++] = 0;  // Tag for string
 8003f52:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	f8a7 2086 	strh.w	r2, [r7, #134]	@ 0x86
 8003f5c:	3398      	adds	r3, #152	@ 0x98
 8003f5e:	443b      	add	r3, r7
 8003f60:	2200      	movs	r2, #0
 8003f62:	f803 2c98 	strb.w	r2, [r3, #-152]
    buffer[offset++] = 0;  // Empty string
 8003f66:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f6a:	1c5a      	adds	r2, r3, #1
 8003f6c:	f8a7 2086 	strh.w	r2, [r7, #134]	@ 0x86
 8003f70:	3398      	adds	r3, #152	@ 0x98
 8003f72:	443b      	add	r3, r7
 8003f74:	2200      	movs	r2, #0
 8003f76:	f803 2c98 	strb.w	r2, [r3, #-152]
    
    // Send the param string message
    static uint8_t param_transfer_id = 0;
    int result = canardBroadcast(&canard,
 8003f7a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	@ 0x86
 8003f7e:	9304      	str	r3, [sp, #16]
 8003f80:	463b      	mov	r3, r7
 8003f82:	9303      	str	r3, [sp, #12]
 8003f84:	2310      	movs	r3, #16
 8003f86:	9302      	str	r3, [sp, #8]
 8003f88:	4b23      	ldr	r3, [pc, #140]	@ (8004018 <send_node_name+0x220>)
 8003f8a:	9301      	str	r3, [sp, #4]
 8003f8c:	230b      	movs	r3, #11
 8003f8e:	9300      	str	r3, [sp, #0]
 8003f90:	a31d      	add	r3, pc, #116	@ (adr r3, 8004008 <send_node_name+0x210>)
 8003f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f96:	4821      	ldr	r0, [pc, #132]	@ (800401c <send_node_name+0x224>)
 8003f98:	f7fc fcb6 	bl	8000908 <canardBroadcast>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                  &param_transfer_id,
                  CANARD_TRANSFER_PRIORITY_MEDIUM,
                  buffer,
                  offset);
    
    if (result >= 0) {
 8003fa2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	db0f      	blt.n	8003fca <send_node_name+0x1d2>
        // Blink green LED to indicate name message sent
        HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_SET);
 8003faa:	2201      	movs	r2, #1
 8003fac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003fb0:	481b      	ldr	r0, [pc, #108]	@ (8004020 <send_node_name+0x228>)
 8003fb2:	f001 fedd 	bl	8005d70 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8003fb6:	2032      	movs	r0, #50	@ 0x32
 8003fb8:	f000 fd46 	bl	8004a48 <HAL_Delay>
        HAL_GPIO_WritePin(LD4_GPIO_Port, LD4_Pin, GPIO_PIN_RESET);
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003fc2:	4817      	ldr	r0, [pc, #92]	@ (8004020 <send_node_name+0x228>)
 8003fc4:	f001 fed4 	bl	8005d70 <HAL_GPIO_WritePin>
 8003fc8:	e00e      	b.n	8003fe8 <send_node_name+0x1f0>
    } else {
        // Error sending - blink red LED
        HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8003fca:	2201      	movs	r2, #1
 8003fcc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003fd0:	4813      	ldr	r0, [pc, #76]	@ (8004020 <send_node_name+0x228>)
 8003fd2:	f001 fecd 	bl	8005d70 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8003fd6:	2032      	movs	r0, #50	@ 0x32
 8003fd8:	f000 fd36 	bl	8004a48 <HAL_Delay>
        HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_RESET);
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8003fe2:	480f      	ldr	r0, [pc, #60]	@ (8004020 <send_node_name+0x228>)
 8003fe4:	f001 fec4 	bl	8005d70 <HAL_GPIO_WritePin>
    }
    
    // Increment transfer ID
    param_transfer_id = (param_transfer_id + 1) & 31;
 8003fe8:	4b0b      	ldr	r3, [pc, #44]	@ (8004018 <send_node_name+0x220>)
 8003fea:	781b      	ldrb	r3, [r3, #0]
 8003fec:	3301      	adds	r3, #1
 8003fee:	b2db      	uxtb	r3, r3
 8003ff0:	f003 031f 	and.w	r3, r3, #31
 8003ff4:	b2da      	uxtb	r2, r3
 8003ff6:	4b08      	ldr	r3, [pc, #32]	@ (8004018 <send_node_name+0x220>)
 8003ff8:	701a      	strb	r2, [r3, #0]
}
 8003ffa:	bf00      	nop
 8003ffc:	3798      	adds	r7, #152	@ 0x98
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd80      	pop	{r7, pc}
 8004002:	bf00      	nop
 8004004:	f3af 8000 	nop.w
 8004008:	e0c98ae0 	.word	0xe0c98ae0
 800400c:	e02f25d6 	.word	0xe02f25d6
 8004010:	0800d2a4 	.word	0x0800d2a4
 8004014:	0800d298 	.word	0x0800d298
 8004018:	20000597 	.word	0x20000597
 800401c:	20000568 	.word	0x20000568
 8004020:	40020c00 	.word	0x40020c00

08004024 <handle_ardupilot_command>:
    // Blink orange LED (LD3) to indicate EPOS4 communication
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
}

void handle_ardupilot_command(int16_t command_value)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b084      	sub	sp, #16
 8004028:	af00      	add	r7, sp, #0
 800402a:	4603      	mov	r3, r0
 800402c:	80fb      	strh	r3, [r7, #6]
    static int32_t last_position = TILT_CENTER_POSITION;
    int32_t target_position;
    
    // Map ArduPilot command value (-10000 to 10000) to position range
    // Apply deadband near center for stability
    if (command_value < -COMMAND_DEADBAND) {
 800402e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004032:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8004036:	da18      	bge.n	800406a <handle_ardupilot_command+0x46>
        target_position = (int32_t)((float)(command_value + COMMAND_DEADBAND) / (10000.0f - COMMAND_DEADBAND) * (TILT_MIN_POSITION - TILT_CENTER_POSITION) + TILT_CENTER_POSITION);
 8004038:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800403c:	3364      	adds	r3, #100	@ 0x64
 800403e:	ee07 3a90 	vmov	s15, r3
 8004042:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004046:	eddf 6a28 	vldr	s13, [pc, #160]	@ 80040e8 <handle_ardupilot_command+0xc4>
 800404a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800404e:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80040ec <handle_ardupilot_command+0xc8>
 8004052:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004056:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80040f0 <handle_ardupilot_command+0xcc>
 800405a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800405e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004062:	ee17 3a90 	vmov	r3, s15
 8004066:	60fb      	str	r3, [r7, #12]
 8004068:	e01e      	b.n	80040a8 <handle_ardupilot_command+0x84>
    } else if (command_value > COMMAND_DEADBAND) {
 800406a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800406e:	2b64      	cmp	r3, #100	@ 0x64
 8004070:	dd18      	ble.n	80040a4 <handle_ardupilot_command+0x80>
        target_position = (int32_t)((float)(command_value - COMMAND_DEADBAND) / (10000.0f - COMMAND_DEADBAND) * (TILT_MAX_POSITION - TILT_CENTER_POSITION) + TILT_CENTER_POSITION);
 8004072:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8004076:	3b64      	subs	r3, #100	@ 0x64
 8004078:	ee07 3a90 	vmov	s15, r3
 800407c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004080:	eddf 6a19 	vldr	s13, [pc, #100]	@ 80040e8 <handle_ardupilot_command+0xc4>
 8004084:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8004088:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 80040f4 <handle_ardupilot_command+0xd0>
 800408c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004090:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 80040f0 <handle_ardupilot_command+0xcc>
 8004094:	ee77 7a87 	vadd.f32	s15, s15, s14
 8004098:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800409c:	ee17 3a90 	vmov	r3, s15
 80040a0:	60fb      	str	r3, [r7, #12]
 80040a2:	e001      	b.n	80040a8 <handle_ardupilot_command+0x84>
    } else {
        target_position = TILT_CENTER_POSITION;
 80040a4:	2300      	movs	r3, #0
 80040a6:	60fb      	str	r3, [r7, #12]
    }
    
    // Only update if the position has changed significantly
    if (abs(target_position - last_position) > 10) {
 80040a8:	4b13      	ldr	r3, [pc, #76]	@ (80040f8 <handle_ardupilot_command+0xd4>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	68fa      	ldr	r2, [r7, #12]
 80040ae:	1ad3      	subs	r3, r2, r3
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	bfb8      	it	lt
 80040b4:	425b      	neglt	r3, r3
 80040b6:	2b0a      	cmp	r3, #10
 80040b8:	dd11      	ble.n	80040de <handle_ardupilot_command+0xba>
        // Set the target position on EPOS4
        EPOS4_SetTargetPosition_Legacy(&hcan1, EPOS4_NODE_ID, target_position);
 80040ba:	68fa      	ldr	r2, [r7, #12]
 80040bc:	2101      	movs	r1, #1
 80040be:	480f      	ldr	r0, [pc, #60]	@ (80040fc <handle_ardupilot_command+0xd8>)
 80040c0:	f000 f820 	bl	8004104 <EPOS4_SetTargetPosition_Legacy>
        
        // Send control word to trigger the move
        EPOS4_SetControlWord(&hcan1, EPOS4_NODE_ID, 0x000F | 0x0010);
 80040c4:	221f      	movs	r2, #31
 80040c6:	2101      	movs	r1, #1
 80040c8:	480c      	ldr	r0, [pc, #48]	@ (80040fc <handle_ardupilot_command+0xd8>)
 80040ca:	f000 f871 	bl	80041b0 <EPOS4_SetControlWord>
        
        last_position = target_position;
 80040ce:	4a0a      	ldr	r2, [pc, #40]	@ (80040f8 <handle_ardupilot_command+0xd4>)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6013      	str	r3, [r2, #0]
        
        // Indicate command processed
        HAL_GPIO_TogglePin(GPIOD, LD4_Pin);
 80040d4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80040d8:	4809      	ldr	r0, [pc, #36]	@ (8004100 <handle_ardupilot_command+0xdc>)
 80040da:	f001 fe62 	bl	8005da2 <HAL_GPIO_TogglePin>
    }
}
 80040de:	bf00      	nop
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	461ab000 	.word	0x461ab000
 80040ec:	c61c4000 	.word	0xc61c4000
 80040f0:	00000000 	.word	0x00000000
 80040f4:	461c4000 	.word	0x461c4000
 80040f8:	20000598 	.word	0x20000598
 80040fc:	200000a0 	.word	0x200000a0
 8004100:	40020c00 	.word	0x40020c00

08004104 <EPOS4_SetTargetPosition_Legacy>:

// EPOS4 CANopen interface functions
bool EPOS4_SetTargetPosition_Legacy(CAN_HandleTypeDef* hcan, uint8_t node_id, int32_t position)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b090      	sub	sp, #64	@ 0x40
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	460b      	mov	r3, r1
 800410e:	607a      	str	r2, [r7, #4]
 8004110:	72fb      	strb	r3, [r7, #11]
    uint8_t dlc = 4;
 8004112:	2304      	movs	r3, #4
 8004114:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    uint8_t data[8] = {0};
 8004118:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800411c:	2200      	movs	r2, #0
 800411e:	601a      	str	r2, [r3, #0]
 8004120:	605a      	str	r2, [r3, #4]
    
    // Format SDO message for EPOS4 position control
    uint32_t can_id = 0x600 + node_id;  // 0x600 is the SDO transmit ID base
 8004122:	7afb      	ldrb	r3, [r7, #11]
 8004124:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8004128:	63bb      	str	r3, [r7, #56]	@ 0x38
    
    // Format SDO write command
    data[0] = 0x23;  // SDO write command (2 bytes)
 800412a:	2323      	movs	r3, #35	@ 0x23
 800412c:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    data[1] = 0x7A;  // Index LSB (0x607A = target position)
 8004130:	237a      	movs	r3, #122	@ 0x7a
 8004132:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    data[2] = 0x60;  // Index MSB
 8004136:	2360      	movs	r3, #96	@ 0x60
 8004138:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
    data[3] = 0x00;  // Subindex
 800413c:	2300      	movs	r3, #0
 800413e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    
    // Format the position data (4 bytes, little-endian)
    data[4] = (uint8_t)(position & 0xFF);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	b2db      	uxtb	r3, r3
 8004146:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
    data[5] = (uint8_t)((position >> 8) & 0xFF);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	121b      	asrs	r3, r3, #8
 800414e:	b2db      	uxtb	r3, r3
 8004150:	f887 3031 	strb.w	r3, [r7, #49]	@ 0x31
    data[6] = (uint8_t)((position >> 16) & 0xFF);
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	141b      	asrs	r3, r3, #16
 8004158:	b2db      	uxtb	r3, r3
 800415a:	f887 3032 	strb.w	r3, [r7, #50]	@ 0x32
    data[7] = (uint8_t)((position >> 24) & 0xFF);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	161b      	asrs	r3, r3, #24
 8004162:	b2db      	uxtb	r3, r3
 8004164:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    
    CAN_TxHeaderTypeDef TxHeader;
    TxHeader.StdId = can_id;
 8004168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800416a:	617b      	str	r3, [r7, #20]
    TxHeader.ExtId = 0;
 800416c:	2300      	movs	r3, #0
 800416e:	61bb      	str	r3, [r7, #24]
    TxHeader.RTR = CAN_RTR_DATA;
 8004170:	2300      	movs	r3, #0
 8004172:	623b      	str	r3, [r7, #32]
    TxHeader.IDE = CAN_ID_STD;
 8004174:	2300      	movs	r3, #0
 8004176:	61fb      	str	r3, [r7, #28]
    TxHeader.DLC = 8;
 8004178:	2308      	movs	r3, #8
 800417a:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.TransmitGlobalTime = DISABLE;
 800417c:	2300      	movs	r3, #0
 800417e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    
    uint32_t tx_mailbox;
    HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(hcan, &TxHeader, data, &tx_mailbox);
 8004182:	f107 0310 	add.w	r3, r7, #16
 8004186:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 800418a:	f107 0114 	add.w	r1, r7, #20
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 fec2 	bl	8004f18 <HAL_CAN_AddTxMessage>
 8004194:	4603      	mov	r3, r0
 8004196:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    
    return (status == HAL_OK);
 800419a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800419e:	2b00      	cmp	r3, #0
 80041a0:	bf0c      	ite	eq
 80041a2:	2301      	moveq	r3, #1
 80041a4:	2300      	movne	r3, #0
 80041a6:	b2db      	uxtb	r3, r3
}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3740      	adds	r7, #64	@ 0x40
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <EPOS4_SetControlWord>:

void EPOS4_SetControlWord(CAN_HandleTypeDef* hcan, uint8_t node_id, uint16_t control_word)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b08e      	sub	sp, #56	@ 0x38
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	460b      	mov	r3, r1
 80041ba:	70fb      	strb	r3, [r7, #3]
 80041bc:	4613      	mov	r3, r2
 80041be:	803b      	strh	r3, [r7, #0]
    uint8_t dlc = 2;
 80041c0:	2302      	movs	r3, #2
 80041c2:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    uint8_t data[8] = {0};
 80041c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80041ca:	2200      	movs	r2, #0
 80041cc:	601a      	str	r2, [r3, #0]
 80041ce:	605a      	str	r2, [r3, #4]
    uint32_t can_id = 0x600 + node_id;  // SDO request ID
 80041d0:	78fb      	ldrb	r3, [r7, #3]
 80041d2:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80041d6:	633b      	str	r3, [r7, #48]	@ 0x30
    
    // Command to write to object dictionary at 0x6040 (control word)
    data[0] = 0x2B;  // Write command (2=write, B=2 bytes)
 80041d8:	232b      	movs	r3, #43	@ 0x2b
 80041da:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    data[1] = 0x40;  // Object index low byte
 80041de:	2340      	movs	r3, #64	@ 0x40
 80041e0:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    data[2] = 0x60;  // Object index high byte
 80041e4:	2360      	movs	r3, #96	@ 0x60
 80041e6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    data[3] = 0x00;  // Subindex
 80041ea:	2300      	movs	r3, #0
 80041ec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    
    // Control word value in little-endian format
    data[4] = (uint8_t)(control_word & 0xFF);
 80041f0:	883b      	ldrh	r3, [r7, #0]
 80041f2:	b2db      	uxtb	r3, r3
 80041f4:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    data[5] = (uint8_t)((control_word >> 8) & 0xFF);
 80041f8:	883b      	ldrh	r3, [r7, #0]
 80041fa:	0a1b      	lsrs	r3, r3, #8
 80041fc:	b29b      	uxth	r3, r3
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
    
    CAN_TxHeaderTypeDef TxHeader;
    TxHeader.StdId = can_id;
 8004204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004206:	613b      	str	r3, [r7, #16]
    TxHeader.ExtId = 0;
 8004208:	2300      	movs	r3, #0
 800420a:	617b      	str	r3, [r7, #20]
    TxHeader.RTR = CAN_RTR_DATA;
 800420c:	2300      	movs	r3, #0
 800420e:	61fb      	str	r3, [r7, #28]
    TxHeader.IDE = CAN_ID_STD;
 8004210:	2300      	movs	r3, #0
 8004212:	61bb      	str	r3, [r7, #24]
    TxHeader.DLC = 8;
 8004214:	2308      	movs	r3, #8
 8004216:	623b      	str	r3, [r7, #32]
    TxHeader.TransmitGlobalTime = DISABLE;
 8004218:	2300      	movs	r3, #0
 800421a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    
    uint32_t mailbox;
    HAL_CAN_AddTxMessage(hcan, &TxHeader, data, &mailbox);
 800421e:	f107 030c 	add.w	r3, r7, #12
 8004222:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 8004226:	f107 0110 	add.w	r1, r7, #16
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 fe74 	bl	8004f18 <HAL_CAN_AddTxMessage>
    
    // Small delay to ensure message transmission
    HAL_Delay(5);
 8004230:	2005      	movs	r0, #5
 8004232:	f000 fc09 	bl	8004a48 <HAL_Delay>
}
 8004236:	bf00      	nop
 8004238:	3738      	adds	r7, #56	@ 0x38
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <EPOS4_Init_Legacy>:

// Function to initialize the EPOS4 controller
bool EPOS4_Init_Legacy(CAN_HandleTypeDef* hcan, uint8_t node_id)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b08e      	sub	sp, #56	@ 0x38
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
 8004246:	460b      	mov	r3, r1
 8004248:	70fb      	strb	r3, [r7, #3]
    // Reset communication
    EPOS4_SetControlWord(hcan, node_id, 0x0080);  // Fault reset
 800424a:	78fb      	ldrb	r3, [r7, #3]
 800424c:	2280      	movs	r2, #128	@ 0x80
 800424e:	4619      	mov	r1, r3
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f7ff ffad 	bl	80041b0 <EPOS4_SetControlWord>
    HAL_Delay(10);
 8004256:	200a      	movs	r0, #10
 8004258:	f000 fbf6 	bl	8004a48 <HAL_Delay>
    
    // Set mode of operation (Profile Position Mode)
    uint8_t data[8] = {0};
 800425c:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004260:	2200      	movs	r2, #0
 8004262:	601a      	str	r2, [r3, #0]
 8004264:	605a      	str	r2, [r3, #4]
    uint32_t can_id = 0x600 + node_id;
 8004266:	78fb      	ldrb	r3, [r7, #3]
 8004268:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800426c:	637b      	str	r3, [r7, #52]	@ 0x34
    
    // Set up write message to change operation mode
    data[0] = 0x2F;  // SDO write command (1 byte)
 800426e:	232f      	movs	r3, #47	@ 0x2f
 8004270:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    data[1] = 0x60;  // Index LSB (0x6060 = Mode of operation)
 8004274:	2360      	movs	r3, #96	@ 0x60
 8004276:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    data[2] = 0x60;  // Index MSB
 800427a:	2360      	movs	r3, #96	@ 0x60
 800427c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    data[3] = 0x00;  // Subindex
 8004280:	2300      	movs	r3, #0
 8004282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    data[4] = 0x01;  // Profile Position Mode
 8004286:	2301      	movs	r3, #1
 8004288:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    
    CAN_TxHeaderTypeDef TxHeader;
    TxHeader.StdId = can_id;
 800428c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800428e:	613b      	str	r3, [r7, #16]
    TxHeader.ExtId = 0;
 8004290:	2300      	movs	r3, #0
 8004292:	617b      	str	r3, [r7, #20]
    TxHeader.RTR = CAN_RTR_DATA;
 8004294:	2300      	movs	r3, #0
 8004296:	61fb      	str	r3, [r7, #28]
    TxHeader.IDE = CAN_ID_STD;
 8004298:	2300      	movs	r3, #0
 800429a:	61bb      	str	r3, [r7, #24]
    TxHeader.DLC = 8;
 800429c:	2308      	movs	r3, #8
 800429e:	623b      	str	r3, [r7, #32]
    TxHeader.TransmitGlobalTime = DISABLE;
 80042a0:	2300      	movs	r3, #0
 80042a2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    
    uint32_t tx_mailbox;
    HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(hcan, &TxHeader, data, &tx_mailbox);
 80042a6:	f107 030c 	add.w	r3, r7, #12
 80042aa:	f107 0228 	add.w	r2, r7, #40	@ 0x28
 80042ae:	f107 0110 	add.w	r1, r7, #16
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fe30 	bl	8004f18 <HAL_CAN_AddTxMessage>
 80042b8:	4603      	mov	r3, r0
 80042ba:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    
    if (status != HAL_OK) {
 80042be:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d001      	beq.n	80042ca <EPOS4_Init_Legacy+0x8c>
        return false;
 80042c6:	2300      	movs	r3, #0
 80042c8:	e01e      	b.n	8004308 <EPOS4_Init_Legacy+0xca>
    }
    
    HAL_Delay(10);
 80042ca:	200a      	movs	r0, #10
 80042cc:	f000 fbbc 	bl	8004a48 <HAL_Delay>
    
    // Send shutdown command
    EPOS4_SetControlWord(hcan, node_id, CMD_SHUTDOWN);
 80042d0:	78fb      	ldrb	r3, [r7, #3]
 80042d2:	2206      	movs	r2, #6
 80042d4:	4619      	mov	r1, r3
 80042d6:	6878      	ldr	r0, [r7, #4]
 80042d8:	f7ff ff6a 	bl	80041b0 <EPOS4_SetControlWord>
    HAL_Delay(10);
 80042dc:	200a      	movs	r0, #10
 80042de:	f000 fbb3 	bl	8004a48 <HAL_Delay>
    
    // Send switch on command
    EPOS4_SetControlWord(hcan, node_id, CMD_SWITCH_ON);
 80042e2:	78fb      	ldrb	r3, [r7, #3]
 80042e4:	2207      	movs	r2, #7
 80042e6:	4619      	mov	r1, r3
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7ff ff61 	bl	80041b0 <EPOS4_SetControlWord>
    HAL_Delay(10);
 80042ee:	200a      	movs	r0, #10
 80042f0:	f000 fbaa 	bl	8004a48 <HAL_Delay>
    
    // Enable operation
    EPOS4_SetControlWord(hcan, node_id, CMD_ENABLE_OPERATION);
 80042f4:	78fb      	ldrb	r3, [r7, #3]
 80042f6:	220f      	movs	r2, #15
 80042f8:	4619      	mov	r1, r3
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f7ff ff58 	bl	80041b0 <EPOS4_SetControlWord>
    HAL_Delay(10);
 8004300:	200a      	movs	r0, #10
 8004302:	f000 fba1 	bl	8004a48 <HAL_Delay>
    
    return true;
 8004306:	2301      	movs	r3, #1
}
 8004308:	4618      	mov	r0, r3
 800430a:	3738      	adds	r7, #56	@ 0x38
 800430c:	46bd      	mov	sp, r7
 800430e:	bd80      	pop	{r7, pc}

08004310 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004314:	b672      	cpsid	i
}
 8004316:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  
  // In case of error, turn on red LED (LD5) and keep it on
  HAL_GPIO_WritePin(LD5_GPIO_Port, LD5_Pin, GPIO_PIN_SET);
 8004318:	2201      	movs	r2, #1
 800431a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800431e:	4802      	ldr	r0, [pc, #8]	@ (8004328 <Error_Handler+0x18>)
 8004320:	f001 fd26 	bl	8005d70 <HAL_GPIO_WritePin>
  
  while (1)
 8004324:	bf00      	nop
 8004326:	e7fd      	b.n	8004324 <Error_Handler+0x14>
 8004328:	40020c00 	.word	0x40020c00

0800432c <CANopen_NMT_Command>:
 * @param hcan CAN handle
 * @param command NMT command (e.g., 0x01 = start, 0x02 = stop, 0x80 = pre-operational, 0x81 = reset node, 0x82 = reset communication)
 * @param node_id Target node ID or 0 for all nodes
 */
void CANopen_NMT_Command(CAN_HandleTypeDef* hcan, uint8_t command, uint8_t node_id)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b08a      	sub	sp, #40	@ 0x28
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
 8004334:	460b      	mov	r3, r1
 8004336:	70fb      	strb	r3, [r7, #3]
 8004338:	4613      	mov	r3, r2
 800433a:	70bb      	strb	r3, [r7, #2]
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t TxMailbox;
    uint8_t TxData[2];
    
    // NMT message is always ID 0x000
    TxHeader.StdId = 0x000;
 800433c:	2300      	movs	r3, #0
 800433e:	613b      	str	r3, [r7, #16]
    TxHeader.ExtId = 0;
 8004340:	2300      	movs	r3, #0
 8004342:	617b      	str	r3, [r7, #20]
    TxHeader.IDE = CAN_ID_STD;
 8004344:	2300      	movs	r3, #0
 8004346:	61bb      	str	r3, [r7, #24]
    TxHeader.RTR = CAN_RTR_DATA;
 8004348:	2300      	movs	r3, #0
 800434a:	61fb      	str	r3, [r7, #28]
    TxHeader.DLC = 2;
 800434c:	2302      	movs	r3, #2
 800434e:	623b      	str	r3, [r7, #32]
    TxHeader.TransmitGlobalTime = DISABLE;
 8004350:	2300      	movs	r3, #0
 8004352:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    
    // First byte is the command
    TxData[0] = command;
 8004356:	78fb      	ldrb	r3, [r7, #3]
 8004358:	723b      	strb	r3, [r7, #8]
    // Second byte is the node ID (0 means all nodes)
    TxData[1] = node_id;
 800435a:	78bb      	ldrb	r3, [r7, #2]
 800435c:	727b      	strb	r3, [r7, #9]
    
    // Send the NMT command
    HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox);
 800435e:	f107 030c 	add.w	r3, r7, #12
 8004362:	f107 0208 	add.w	r2, r7, #8
 8004366:	f107 0110 	add.w	r1, r7, #16
 800436a:	6878      	ldr	r0, [r7, #4]
 800436c:	f000 fdd4 	bl	8004f18 <HAL_CAN_AddTxMessage>
    
    // Short delay to ensure message is processed
    HAL_Delay(10);
 8004370:	200a      	movs	r0, #10
 8004372:	f000 fb69 	bl	8004a48 <HAL_Delay>
}
 8004376:	bf00      	nop
 8004378:	3728      	adds	r7, #40	@ 0x28
 800437a:	46bd      	mov	sp, r7
 800437c:	bd80      	pop	{r7, pc}

0800437e <EPOS4_SetOperationMode>:
 * @param hcan CAN handle
 * @param node_id EPOS4 node ID
 * @param mode Operation mode (e.g., MODE_PROFILE_POSITION)
 */
void EPOS4_SetOperationMode(CAN_HandleTypeDef* hcan, uint8_t node_id, uint8_t mode)
{
 800437e:	b580      	push	{r7, lr}
 8004380:	b08c      	sub	sp, #48	@ 0x30
 8004382:	af00      	add	r7, sp, #0
 8004384:	6078      	str	r0, [r7, #4]
 8004386:	460b      	mov	r3, r1
 8004388:	70fb      	strb	r3, [r7, #3]
 800438a:	4613      	mov	r3, r2
 800438c:	70bb      	strb	r3, [r7, #2]
    // Send SDO command to set operation mode
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t TxMailbox;
    uint8_t TxData[8] = {0};
 800438e:	f107 030c 	add.w	r3, r7, #12
 8004392:	2200      	movs	r2, #0
 8004394:	601a      	str	r2, [r3, #0]
 8004396:	605a      	str	r2, [r3, #4]
    
    TxHeader.StdId = 0x600 + node_id; // SDO transmit ID
 8004398:	78fb      	ldrb	r3, [r7, #3]
 800439a:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800439e:	61bb      	str	r3, [r7, #24]
    TxHeader.ExtId = 0;
 80043a0:	2300      	movs	r3, #0
 80043a2:	61fb      	str	r3, [r7, #28]
    TxHeader.IDE = CAN_ID_STD;
 80043a4:	2300      	movs	r3, #0
 80043a6:	623b      	str	r3, [r7, #32]
    TxHeader.RTR = CAN_RTR_DATA;
 80043a8:	2300      	movs	r3, #0
 80043aa:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.DLC = 8;
 80043ac:	2308      	movs	r3, #8
 80043ae:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.TransmitGlobalTime = DISABLE;
 80043b0:	2300      	movs	r3, #0
 80043b2:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    
    // Command to write 1 byte to object 0x6060 (modes of operation) subindex 0
    TxData[0] = 0x2F;  // Write 1 byte (expedited)
 80043b6:	232f      	movs	r3, #47	@ 0x2f
 80043b8:	733b      	strb	r3, [r7, #12]
    TxData[1] = 0x60;  // Index LSB
 80043ba:	2360      	movs	r3, #96	@ 0x60
 80043bc:	737b      	strb	r3, [r7, #13]
    TxData[2] = 0x60;  // Index MSB
 80043be:	2360      	movs	r3, #96	@ 0x60
 80043c0:	73bb      	strb	r3, [r7, #14]
    TxData[3] = 0x00;  // Subindex
 80043c2:	2300      	movs	r3, #0
 80043c4:	73fb      	strb	r3, [r7, #15]
    TxData[4] = mode;  // Mode value
 80043c6:	78bb      	ldrb	r3, [r7, #2]
 80043c8:	743b      	strb	r3, [r7, #16]
    // Bytes 5-7 are padding (0)
    
    // Send message
    HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox);
 80043ca:	f107 0314 	add.w	r3, r7, #20
 80043ce:	f107 020c 	add.w	r2, r7, #12
 80043d2:	f107 0118 	add.w	r1, r7, #24
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 fd9e 	bl	8004f18 <HAL_CAN_AddTxMessage>
    
    // Wait for message to be processed
    HAL_Delay(10);
 80043dc:	200a      	movs	r0, #10
 80043de:	f000 fb33 	bl	8004a48 <HAL_Delay>
}
 80043e2:	bf00      	nop
 80043e4:	3730      	adds	r7, #48	@ 0x30
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <EPOS4_SetProfileVelocity>:
 * @param hcan CAN handle
 * @param node_id EPOS4 node ID
 * @param velocity Velocity value (encoder counts/sec)
 */
void EPOS4_SetProfileVelocity(CAN_HandleTypeDef* hcan, uint8_t node_id, uint32_t velocity)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b08e      	sub	sp, #56	@ 0x38
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	60f8      	str	r0, [r7, #12]
 80043f2:	460b      	mov	r3, r1
 80043f4:	607a      	str	r2, [r7, #4]
 80043f6:	72fb      	strb	r3, [r7, #11]
    // Send SDO command to set profile velocity
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t TxMailbox;
    uint8_t TxData[8] = {0};
 80043f8:	f107 0314 	add.w	r3, r7, #20
 80043fc:	2200      	movs	r2, #0
 80043fe:	601a      	str	r2, [r3, #0]
 8004400:	605a      	str	r2, [r3, #4]
    
    TxHeader.StdId = 0x600 + node_id; // SDO transmit ID
 8004402:	7afb      	ldrb	r3, [r7, #11]
 8004404:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8004408:	623b      	str	r3, [r7, #32]
    TxHeader.ExtId = 0;
 800440a:	2300      	movs	r3, #0
 800440c:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.IDE = CAN_ID_STD;
 800440e:	2300      	movs	r3, #0
 8004410:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.RTR = CAN_RTR_DATA;
 8004412:	2300      	movs	r3, #0
 8004414:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TxHeader.DLC = 8;
 8004416:	2308      	movs	r3, #8
 8004418:	633b      	str	r3, [r7, #48]	@ 0x30
    TxHeader.TransmitGlobalTime = DISABLE;
 800441a:	2300      	movs	r3, #0
 800441c:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    
    // Command to write 4 bytes to object 0x6081 (profile velocity) subindex 0
    TxData[0] = 0x23;  // Write 4 bytes (expedited)
 8004420:	2323      	movs	r3, #35	@ 0x23
 8004422:	753b      	strb	r3, [r7, #20]
    TxData[1] = 0x81;  // Index LSB
 8004424:	2381      	movs	r3, #129	@ 0x81
 8004426:	757b      	strb	r3, [r7, #21]
    TxData[2] = 0x60;  // Index MSB
 8004428:	2360      	movs	r3, #96	@ 0x60
 800442a:	75bb      	strb	r3, [r7, #22]
    TxData[3] = 0x00;  // Subindex
 800442c:	2300      	movs	r3, #0
 800442e:	75fb      	strb	r3, [r7, #23]
    
    // Velocity value in little-endian format
    TxData[4] = (uint8_t)(velocity & 0xFF);
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	b2db      	uxtb	r3, r3
 8004434:	763b      	strb	r3, [r7, #24]
    TxData[5] = (uint8_t)((velocity >> 8) & 0xFF);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	0a1b      	lsrs	r3, r3, #8
 800443a:	b2db      	uxtb	r3, r3
 800443c:	767b      	strb	r3, [r7, #25]
    TxData[6] = (uint8_t)((velocity >> 16) & 0xFF);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	0c1b      	lsrs	r3, r3, #16
 8004442:	b2db      	uxtb	r3, r3
 8004444:	76bb      	strb	r3, [r7, #26]
    TxData[7] = (uint8_t)((velocity >> 24) & 0xFF);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	0e1b      	lsrs	r3, r3, #24
 800444a:	b2db      	uxtb	r3, r3
 800444c:	76fb      	strb	r3, [r7, #27]
    
    // Send message
    HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox);
 800444e:	f107 031c 	add.w	r3, r7, #28
 8004452:	f107 0214 	add.w	r2, r7, #20
 8004456:	f107 0120 	add.w	r1, r7, #32
 800445a:	68f8      	ldr	r0, [r7, #12]
 800445c:	f000 fd5c 	bl	8004f18 <HAL_CAN_AddTxMessage>
    
    // Wait for message to be processed
    HAL_Delay(10);
 8004460:	200a      	movs	r0, #10
 8004462:	f000 faf1 	bl	8004a48 <HAL_Delay>
}
 8004466:	bf00      	nop
 8004468:	3738      	adds	r7, #56	@ 0x38
 800446a:	46bd      	mov	sp, r7
 800446c:	bd80      	pop	{r7, pc}

0800446e <EPOS4_SetProfileAcceleration>:
 * @param hcan CAN handle
 * @param node_id EPOS4 node ID
 * @param acceleration Acceleration value (encoder counts/sec²)
 */
void EPOS4_SetProfileAcceleration(CAN_HandleTypeDef* hcan, uint8_t node_id, uint32_t acceleration)
{
 800446e:	b580      	push	{r7, lr}
 8004470:	b08e      	sub	sp, #56	@ 0x38
 8004472:	af00      	add	r7, sp, #0
 8004474:	60f8      	str	r0, [r7, #12]
 8004476:	460b      	mov	r3, r1
 8004478:	607a      	str	r2, [r7, #4]
 800447a:	72fb      	strb	r3, [r7, #11]
    // Send SDO command to set profile acceleration
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t TxMailbox;
    uint8_t TxData[8] = {0};
 800447c:	f107 0314 	add.w	r3, r7, #20
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]
 8004484:	605a      	str	r2, [r3, #4]
    
    TxHeader.StdId = 0x600 + node_id; // SDO transmit ID
 8004486:	7afb      	ldrb	r3, [r7, #11]
 8004488:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 800448c:	623b      	str	r3, [r7, #32]
    TxHeader.ExtId = 0;
 800448e:	2300      	movs	r3, #0
 8004490:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.IDE = CAN_ID_STD;
 8004492:	2300      	movs	r3, #0
 8004494:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.RTR = CAN_RTR_DATA;
 8004496:	2300      	movs	r3, #0
 8004498:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TxHeader.DLC = 8;
 800449a:	2308      	movs	r3, #8
 800449c:	633b      	str	r3, [r7, #48]	@ 0x30
    TxHeader.TransmitGlobalTime = DISABLE;
 800449e:	2300      	movs	r3, #0
 80044a0:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    
    // Command to write 4 bytes to object 0x6083 (profile acceleration) subindex 0
    TxData[0] = 0x23;  // Write 4 bytes (expedited)
 80044a4:	2323      	movs	r3, #35	@ 0x23
 80044a6:	753b      	strb	r3, [r7, #20]
    TxData[1] = 0x83;  // Index LSB
 80044a8:	2383      	movs	r3, #131	@ 0x83
 80044aa:	757b      	strb	r3, [r7, #21]
    TxData[2] = 0x60;  // Index MSB
 80044ac:	2360      	movs	r3, #96	@ 0x60
 80044ae:	75bb      	strb	r3, [r7, #22]
    TxData[3] = 0x00;  // Subindex
 80044b0:	2300      	movs	r3, #0
 80044b2:	75fb      	strb	r3, [r7, #23]
    
    // Acceleration value in little-endian format
    TxData[4] = (uint8_t)(acceleration & 0xFF);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	763b      	strb	r3, [r7, #24]
    TxData[5] = (uint8_t)((acceleration >> 8) & 0xFF);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	0a1b      	lsrs	r3, r3, #8
 80044be:	b2db      	uxtb	r3, r3
 80044c0:	767b      	strb	r3, [r7, #25]
    TxData[6] = (uint8_t)((acceleration >> 16) & 0xFF);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	0c1b      	lsrs	r3, r3, #16
 80044c6:	b2db      	uxtb	r3, r3
 80044c8:	76bb      	strb	r3, [r7, #26]
    TxData[7] = (uint8_t)((acceleration >> 24) & 0xFF);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	0e1b      	lsrs	r3, r3, #24
 80044ce:	b2db      	uxtb	r3, r3
 80044d0:	76fb      	strb	r3, [r7, #27]
    
    // Send message
    HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox);
 80044d2:	f107 031c 	add.w	r3, r7, #28
 80044d6:	f107 0214 	add.w	r2, r7, #20
 80044da:	f107 0120 	add.w	r1, r7, #32
 80044de:	68f8      	ldr	r0, [r7, #12]
 80044e0:	f000 fd1a 	bl	8004f18 <HAL_CAN_AddTxMessage>
    
    // Wait for message to be processed
    HAL_Delay(10);
 80044e4:	200a      	movs	r0, #10
 80044e6:	f000 faaf 	bl	8004a48 <HAL_Delay>
}
 80044ea:	bf00      	nop
 80044ec:	3738      	adds	r7, #56	@ 0x38
 80044ee:	46bd      	mov	sp, r7
 80044f0:	bd80      	pop	{r7, pc}

080044f2 <EPOS4_SetProfileDeceleration>:
 * @param hcan CAN handle
 * @param node_id EPOS4 node ID
 * @param deceleration Deceleration value (encoder counts/sec²)
 */
void EPOS4_SetProfileDeceleration(CAN_HandleTypeDef* hcan, uint8_t node_id, uint32_t deceleration)
{
 80044f2:	b580      	push	{r7, lr}
 80044f4:	b08e      	sub	sp, #56	@ 0x38
 80044f6:	af00      	add	r7, sp, #0
 80044f8:	60f8      	str	r0, [r7, #12]
 80044fa:	460b      	mov	r3, r1
 80044fc:	607a      	str	r2, [r7, #4]
 80044fe:	72fb      	strb	r3, [r7, #11]
    // Send SDO command to set profile deceleration
    CAN_TxHeaderTypeDef TxHeader;
    uint32_t TxMailbox;
    uint8_t TxData[8] = {0};
 8004500:	f107 0314 	add.w	r3, r7, #20
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]
 8004508:	605a      	str	r2, [r3, #4]
    
    TxHeader.StdId = 0x600 + node_id; // SDO transmit ID
 800450a:	7afb      	ldrb	r3, [r7, #11]
 800450c:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8004510:	623b      	str	r3, [r7, #32]
    TxHeader.ExtId = 0;
 8004512:	2300      	movs	r3, #0
 8004514:	627b      	str	r3, [r7, #36]	@ 0x24
    TxHeader.IDE = CAN_ID_STD;
 8004516:	2300      	movs	r3, #0
 8004518:	62bb      	str	r3, [r7, #40]	@ 0x28
    TxHeader.RTR = CAN_RTR_DATA;
 800451a:	2300      	movs	r3, #0
 800451c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    TxHeader.DLC = 8;
 800451e:	2308      	movs	r3, #8
 8004520:	633b      	str	r3, [r7, #48]	@ 0x30
    TxHeader.TransmitGlobalTime = DISABLE;
 8004522:	2300      	movs	r3, #0
 8004524:	f887 3034 	strb.w	r3, [r7, #52]	@ 0x34
    
    // Command to write 4 bytes to object 0x6084 (profile deceleration) subindex 0
    TxData[0] = 0x23;  // Write 4 bytes (expedited)
 8004528:	2323      	movs	r3, #35	@ 0x23
 800452a:	753b      	strb	r3, [r7, #20]
    TxData[1] = 0x84;  // Index LSB
 800452c:	2384      	movs	r3, #132	@ 0x84
 800452e:	757b      	strb	r3, [r7, #21]
    TxData[2] = 0x60;  // Index MSB
 8004530:	2360      	movs	r3, #96	@ 0x60
 8004532:	75bb      	strb	r3, [r7, #22]
    TxData[3] = 0x00;  // Subindex
 8004534:	2300      	movs	r3, #0
 8004536:	75fb      	strb	r3, [r7, #23]
    
    // Deceleration value in little-endian format
    TxData[4] = (uint8_t)(deceleration & 0xFF);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	b2db      	uxtb	r3, r3
 800453c:	763b      	strb	r3, [r7, #24]
    TxData[5] = (uint8_t)((deceleration >> 8) & 0xFF);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	0a1b      	lsrs	r3, r3, #8
 8004542:	b2db      	uxtb	r3, r3
 8004544:	767b      	strb	r3, [r7, #25]
    TxData[6] = (uint8_t)((deceleration >> 16) & 0xFF);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	0c1b      	lsrs	r3, r3, #16
 800454a:	b2db      	uxtb	r3, r3
 800454c:	76bb      	strb	r3, [r7, #26]
    TxData[7] = (uint8_t)((deceleration >> 24) & 0xFF);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	0e1b      	lsrs	r3, r3, #24
 8004552:	b2db      	uxtb	r3, r3
 8004554:	76fb      	strb	r3, [r7, #27]
    
    // Send message
    HAL_CAN_AddTxMessage(hcan, &TxHeader, TxData, &TxMailbox);
 8004556:	f107 031c 	add.w	r3, r7, #28
 800455a:	f107 0214 	add.w	r2, r7, #20
 800455e:	f107 0120 	add.w	r1, r7, #32
 8004562:	68f8      	ldr	r0, [r7, #12]
 8004564:	f000 fcd8 	bl	8004f18 <HAL_CAN_AddTxMessage>
    
    // Wait for message to be processed
    HAL_Delay(10);
 8004568:	200a      	movs	r0, #10
 800456a:	f000 fa6d 	bl	8004a48 <HAL_Delay>
}
 800456e:	bf00      	nop
 8004570:	3738      	adds	r7, #56	@ 0x38
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
	...

08004578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004578:	b580      	push	{r7, lr}
 800457a:	b082      	sub	sp, #8
 800457c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800457e:	2300      	movs	r3, #0
 8004580:	607b      	str	r3, [r7, #4]
 8004582:	4b10      	ldr	r3, [pc, #64]	@ (80045c4 <HAL_MspInit+0x4c>)
 8004584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004586:	4a0f      	ldr	r2, [pc, #60]	@ (80045c4 <HAL_MspInit+0x4c>)
 8004588:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800458c:	6453      	str	r3, [r2, #68]	@ 0x44
 800458e:	4b0d      	ldr	r3, [pc, #52]	@ (80045c4 <HAL_MspInit+0x4c>)
 8004590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004592:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004596:	607b      	str	r3, [r7, #4]
 8004598:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800459a:	2300      	movs	r3, #0
 800459c:	603b      	str	r3, [r7, #0]
 800459e:	4b09      	ldr	r3, [pc, #36]	@ (80045c4 <HAL_MspInit+0x4c>)
 80045a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045a2:	4a08      	ldr	r2, [pc, #32]	@ (80045c4 <HAL_MspInit+0x4c>)
 80045a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80045a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80045aa:	4b06      	ldr	r3, [pc, #24]	@ (80045c4 <HAL_MspInit+0x4c>)
 80045ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80045b2:	603b      	str	r3, [r7, #0]
 80045b4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80045b6:	2007      	movs	r0, #7
 80045b8:	f001 f9fc 	bl	80059b4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80045bc:	bf00      	nop
 80045be:	3708      	adds	r7, #8
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40023800 	.word	0x40023800

080045c8 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b08a      	sub	sp, #40	@ 0x28
 80045cc:	af00      	add	r7, sp, #0
 80045ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045d0:	f107 0314 	add.w	r3, r7, #20
 80045d4:	2200      	movs	r2, #0
 80045d6:	601a      	str	r2, [r3, #0]
 80045d8:	605a      	str	r2, [r3, #4]
 80045da:	609a      	str	r2, [r3, #8]
 80045dc:	60da      	str	r2, [r3, #12]
 80045de:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a1d      	ldr	r2, [pc, #116]	@ (800465c <HAL_CAN_MspInit+0x94>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d134      	bne.n	8004654 <HAL_CAN_MspInit+0x8c>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80045ea:	2300      	movs	r3, #0
 80045ec:	613b      	str	r3, [r7, #16]
 80045ee:	4b1c      	ldr	r3, [pc, #112]	@ (8004660 <HAL_CAN_MspInit+0x98>)
 80045f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045f2:	4a1b      	ldr	r2, [pc, #108]	@ (8004660 <HAL_CAN_MspInit+0x98>)
 80045f4:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80045f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80045fa:	4b19      	ldr	r3, [pc, #100]	@ (8004660 <HAL_CAN_MspInit+0x98>)
 80045fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004602:	613b      	str	r3, [r7, #16]
 8004604:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004606:	2300      	movs	r3, #0
 8004608:	60fb      	str	r3, [r7, #12]
 800460a:	4b15      	ldr	r3, [pc, #84]	@ (8004660 <HAL_CAN_MspInit+0x98>)
 800460c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800460e:	4a14      	ldr	r2, [pc, #80]	@ (8004660 <HAL_CAN_MspInit+0x98>)
 8004610:	f043 0302 	orr.w	r3, r3, #2
 8004614:	6313      	str	r3, [r2, #48]	@ 0x30
 8004616:	4b12      	ldr	r3, [pc, #72]	@ (8004660 <HAL_CAN_MspInit+0x98>)
 8004618:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800461a:	f003 0302 	and.w	r3, r3, #2
 800461e:	60fb      	str	r3, [r7, #12]
 8004620:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PB8     ------> CAN1_RX
    PB9     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004622:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004626:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004628:	2302      	movs	r3, #2
 800462a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800462c:	2300      	movs	r3, #0
 800462e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004630:	2303      	movs	r3, #3
 8004632:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004634:	2309      	movs	r3, #9
 8004636:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004638:	f107 0314 	add.w	r3, r7, #20
 800463c:	4619      	mov	r1, r3
 800463e:	4809      	ldr	r0, [pc, #36]	@ (8004664 <HAL_CAN_MspInit+0x9c>)
 8004640:	f001 f9fa 	bl	8005a38 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8004644:	2200      	movs	r2, #0
 8004646:	2100      	movs	r1, #0
 8004648:	2014      	movs	r0, #20
 800464a:	f001 f9be 	bl	80059ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800464e:	2014      	movs	r0, #20
 8004650:	f001 f9d7 	bl	8005a02 <HAL_NVIC_EnableIRQ>

    /* USER CODE END CAN1_MspInit 1 */

  }

}
 8004654:	bf00      	nop
 8004656:	3728      	adds	r7, #40	@ 0x28
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40006400 	.word	0x40006400
 8004660:	40023800 	.word	0x40023800
 8004664:	40020400 	.word	0x40020400

08004668 <HAL_I2S_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2s: I2S handle pointer
  * @retval None
  */
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8004668:	b580      	push	{r7, lr}
 800466a:	b08e      	sub	sp, #56	@ 0x38
 800466c:	af00      	add	r7, sp, #0
 800466e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004670:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004674:	2200      	movs	r2, #0
 8004676:	601a      	str	r2, [r3, #0]
 8004678:	605a      	str	r2, [r3, #4]
 800467a:	609a      	str	r2, [r3, #8]
 800467c:	60da      	str	r2, [r3, #12]
 800467e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004680:	f107 0314 	add.w	r3, r7, #20
 8004684:	2200      	movs	r2, #0
 8004686:	601a      	str	r2, [r3, #0]
 8004688:	605a      	str	r2, [r3, #4]
 800468a:	609a      	str	r2, [r3, #8]
 800468c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4a31      	ldr	r2, [pc, #196]	@ (8004758 <HAL_I2S_MspInit+0xf0>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d15a      	bne.n	800474e <HAL_I2S_MspInit+0xe6>

    /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8004698:	2301      	movs	r3, #1
 800469a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800469c:	23c0      	movs	r3, #192	@ 0xc0
 800469e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 80046a0:	2302      	movs	r3, #2
 80046a2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80046a4:	f107 0314 	add.w	r3, r7, #20
 80046a8:	4618      	mov	r0, r3
 80046aa:	f004 fdcd 	bl	8009248 <HAL_RCCEx_PeriphCLKConfig>
 80046ae:	4603      	mov	r3, r0
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d001      	beq.n	80046b8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 80046b4:	f7ff fe2c 	bl	8004310 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 80046b8:	2300      	movs	r3, #0
 80046ba:	613b      	str	r3, [r7, #16]
 80046bc:	4b27      	ldr	r3, [pc, #156]	@ (800475c <HAL_I2S_MspInit+0xf4>)
 80046be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046c0:	4a26      	ldr	r2, [pc, #152]	@ (800475c <HAL_I2S_MspInit+0xf4>)
 80046c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80046c6:	6413      	str	r3, [r2, #64]	@ 0x40
 80046c8:	4b24      	ldr	r3, [pc, #144]	@ (800475c <HAL_I2S_MspInit+0xf4>)
 80046ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80046d0:	613b      	str	r3, [r7, #16]
 80046d2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046d4:	2300      	movs	r3, #0
 80046d6:	60fb      	str	r3, [r7, #12]
 80046d8:	4b20      	ldr	r3, [pc, #128]	@ (800475c <HAL_I2S_MspInit+0xf4>)
 80046da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046dc:	4a1f      	ldr	r2, [pc, #124]	@ (800475c <HAL_I2S_MspInit+0xf4>)
 80046de:	f043 0301 	orr.w	r3, r3, #1
 80046e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80046e4:	4b1d      	ldr	r3, [pc, #116]	@ (800475c <HAL_I2S_MspInit+0xf4>)
 80046e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046e8:	f003 0301 	and.w	r3, r3, #1
 80046ec:	60fb      	str	r3, [r7, #12]
 80046ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80046f0:	2300      	movs	r3, #0
 80046f2:	60bb      	str	r3, [r7, #8]
 80046f4:	4b19      	ldr	r3, [pc, #100]	@ (800475c <HAL_I2S_MspInit+0xf4>)
 80046f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046f8:	4a18      	ldr	r2, [pc, #96]	@ (800475c <HAL_I2S_MspInit+0xf4>)
 80046fa:	f043 0304 	orr.w	r3, r3, #4
 80046fe:	6313      	str	r3, [r2, #48]	@ 0x30
 8004700:	4b16      	ldr	r3, [pc, #88]	@ (800475c <HAL_I2S_MspInit+0xf4>)
 8004702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004704:	f003 0304 	and.w	r3, r3, #4
 8004708:	60bb      	str	r3, [r7, #8]
 800470a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800470c:	2310      	movs	r3, #16
 800470e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004710:	2302      	movs	r3, #2
 8004712:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004714:	2300      	movs	r3, #0
 8004716:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004718:	2300      	movs	r3, #0
 800471a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800471c:	2306      	movs	r3, #6
 800471e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8004720:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004724:	4619      	mov	r1, r3
 8004726:	480e      	ldr	r0, [pc, #56]	@ (8004760 <HAL_I2S_MspInit+0xf8>)
 8004728:	f001 f986 	bl	8005a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 800472c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8004730:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004732:	2302      	movs	r3, #2
 8004734:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004736:	2300      	movs	r3, #0
 8004738:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800473a:	2300      	movs	r3, #0
 800473c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800473e:	2306      	movs	r3, #6
 8004740:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004742:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004746:	4619      	mov	r1, r3
 8004748:	4806      	ldr	r0, [pc, #24]	@ (8004764 <HAL_I2S_MspInit+0xfc>)
 800474a:	f001 f975 	bl	8005a38 <HAL_GPIO_Init>

    /* USER CODE END SPI3_MspInit 1 */

  }

}
 800474e:	bf00      	nop
 8004750:	3738      	adds	r7, #56	@ 0x38
 8004752:	46bd      	mov	sp, r7
 8004754:	bd80      	pop	{r7, pc}
 8004756:	bf00      	nop
 8004758:	40003c00 	.word	0x40003c00
 800475c:	40023800 	.word	0x40023800
 8004760:	40020000 	.word	0x40020000
 8004764:	40020800 	.word	0x40020800

08004768 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b08a      	sub	sp, #40	@ 0x28
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004770:	f107 0314 	add.w	r3, r7, #20
 8004774:	2200      	movs	r2, #0
 8004776:	601a      	str	r2, [r3, #0]
 8004778:	605a      	str	r2, [r3, #4]
 800477a:	609a      	str	r2, [r3, #8]
 800477c:	60da      	str	r2, [r3, #12]
 800477e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	4a19      	ldr	r2, [pc, #100]	@ (80047ec <HAL_SPI_MspInit+0x84>)
 8004786:	4293      	cmp	r3, r2
 8004788:	d12b      	bne.n	80047e2 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800478a:	2300      	movs	r3, #0
 800478c:	613b      	str	r3, [r7, #16]
 800478e:	4b18      	ldr	r3, [pc, #96]	@ (80047f0 <HAL_SPI_MspInit+0x88>)
 8004790:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004792:	4a17      	ldr	r2, [pc, #92]	@ (80047f0 <HAL_SPI_MspInit+0x88>)
 8004794:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8004798:	6453      	str	r3, [r2, #68]	@ 0x44
 800479a:	4b15      	ldr	r3, [pc, #84]	@ (80047f0 <HAL_SPI_MspInit+0x88>)
 800479c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800479e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047a2:	613b      	str	r3, [r7, #16]
 80047a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047a6:	2300      	movs	r3, #0
 80047a8:	60fb      	str	r3, [r7, #12]
 80047aa:	4b11      	ldr	r3, [pc, #68]	@ (80047f0 <HAL_SPI_MspInit+0x88>)
 80047ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ae:	4a10      	ldr	r2, [pc, #64]	@ (80047f0 <HAL_SPI_MspInit+0x88>)
 80047b0:	f043 0301 	orr.w	r3, r3, #1
 80047b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80047b6:	4b0e      	ldr	r3, [pc, #56]	@ (80047f0 <HAL_SPI_MspInit+0x88>)
 80047b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047ba:	f003 0301 	and.w	r3, r3, #1
 80047be:	60fb      	str	r3, [r7, #12]
 80047c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80047c2:	23e0      	movs	r3, #224	@ 0xe0
 80047c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047c6:	2302      	movs	r3, #2
 80047c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047ca:	2300      	movs	r3, #0
 80047cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047ce:	2300      	movs	r3, #0
 80047d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80047d2:	2305      	movs	r3, #5
 80047d4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047d6:	f107 0314 	add.w	r3, r7, #20
 80047da:	4619      	mov	r1, r3
 80047dc:	4805      	ldr	r0, [pc, #20]	@ (80047f4 <HAL_SPI_MspInit+0x8c>)
 80047de:	f001 f92b 	bl	8005a38 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80047e2:	bf00      	nop
 80047e4:	3728      	adds	r7, #40	@ 0x28
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	40013000 	.word	0x40013000
 80047f0:	40023800 	.word	0x40023800
 80047f4:	40020000 	.word	0x40020000

080047f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047f8:	b480      	push	{r7}
 80047fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80047fc:	bf00      	nop
 80047fe:	e7fd      	b.n	80047fc <NMI_Handler+0x4>

08004800 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004800:	b480      	push	{r7}
 8004802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004804:	bf00      	nop
 8004806:	e7fd      	b.n	8004804 <HardFault_Handler+0x4>

08004808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800480c:	bf00      	nop
 800480e:	e7fd      	b.n	800480c <MemManage_Handler+0x4>

08004810 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004814:	bf00      	nop
 8004816:	e7fd      	b.n	8004814 <BusFault_Handler+0x4>

08004818 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004818:	b480      	push	{r7}
 800481a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800481c:	bf00      	nop
 800481e:	e7fd      	b.n	800481c <UsageFault_Handler+0x4>

08004820 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004824:	bf00      	nop
 8004826:	46bd      	mov	sp, r7
 8004828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800482c:	4770      	bx	lr

0800482e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800482e:	b480      	push	{r7}
 8004830:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004832:	bf00      	nop
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004840:	bf00      	nop
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr

0800484a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800484a:	b580      	push	{r7, lr}
 800484c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800484e:	f000 f8db 	bl	8004a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004852:	bf00      	nop
 8004854:	bd80      	pop	{r7, pc}
	...

08004858 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8004858:	b580      	push	{r7, lr}
 800485a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800485c:	4802      	ldr	r0, [pc, #8]	@ (8004868 <CAN1_RX0_IRQHandler+0x10>)
 800485e:	f000 fda8 	bl	80053b2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8004862:	bf00      	nop
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	200000a0 	.word	0x200000a0

0800486c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800486c:	b580      	push	{r7, lr}
 800486e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8004870:	4802      	ldr	r0, [pc, #8]	@ (800487c <OTG_FS_IRQHandler+0x10>)
 8004872:	f001 fd91 	bl	8006398 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8004876:	bf00      	nop
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	20000980 	.word	0x20000980

08004880 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004880:	b580      	push	{r7, lr}
 8004882:	b086      	sub	sp, #24
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004888:	4a14      	ldr	r2, [pc, #80]	@ (80048dc <_sbrk+0x5c>)
 800488a:	4b15      	ldr	r3, [pc, #84]	@ (80048e0 <_sbrk+0x60>)
 800488c:	1ad3      	subs	r3, r2, r3
 800488e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004890:	697b      	ldr	r3, [r7, #20]
 8004892:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004894:	4b13      	ldr	r3, [pc, #76]	@ (80048e4 <_sbrk+0x64>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	2b00      	cmp	r3, #0
 800489a:	d102      	bne.n	80048a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800489c:	4b11      	ldr	r3, [pc, #68]	@ (80048e4 <_sbrk+0x64>)
 800489e:	4a12      	ldr	r2, [pc, #72]	@ (80048e8 <_sbrk+0x68>)
 80048a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80048a2:	4b10      	ldr	r3, [pc, #64]	@ (80048e4 <_sbrk+0x64>)
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4413      	add	r3, r2
 80048aa:	693a      	ldr	r2, [r7, #16]
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d207      	bcs.n	80048c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80048b0:	f008 fc62 	bl	800d178 <__errno>
 80048b4:	4603      	mov	r3, r0
 80048b6:	220c      	movs	r2, #12
 80048b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80048ba:	f04f 33ff 	mov.w	r3, #4294967295
 80048be:	e009      	b.n	80048d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80048c0:	4b08      	ldr	r3, [pc, #32]	@ (80048e4 <_sbrk+0x64>)
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80048c6:	4b07      	ldr	r3, [pc, #28]	@ (80048e4 <_sbrk+0x64>)
 80048c8:	681a      	ldr	r2, [r3, #0]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	4413      	add	r3, r2
 80048ce:	4a05      	ldr	r2, [pc, #20]	@ (80048e4 <_sbrk+0x64>)
 80048d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80048d2:	68fb      	ldr	r3, [r7, #12]
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3718      	adds	r7, #24
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}
 80048dc:	20020000 	.word	0x20020000
 80048e0:	00000400 	.word	0x00000400
 80048e4:	2000059c 	.word	0x2000059c
 80048e8:	20000ea8 	.word	0x20000ea8

080048ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80048f0:	4b06      	ldr	r3, [pc, #24]	@ (800490c <SystemInit+0x20>)
 80048f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80048f6:	4a05      	ldr	r2, [pc, #20]	@ (800490c <SystemInit+0x20>)
 80048f8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80048fc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004900:	bf00      	nop
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	e000ed00 	.word	0xe000ed00

08004910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004910:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004948 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004914:	f7ff ffea 	bl	80048ec <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004918:	480c      	ldr	r0, [pc, #48]	@ (800494c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800491a:	490d      	ldr	r1, [pc, #52]	@ (8004950 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800491c:	4a0d      	ldr	r2, [pc, #52]	@ (8004954 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800491e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004920:	e002      	b.n	8004928 <LoopCopyDataInit>

08004922 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004922:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004924:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004926:	3304      	adds	r3, #4

08004928 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004928:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800492a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800492c:	d3f9      	bcc.n	8004922 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800492e:	4a0a      	ldr	r2, [pc, #40]	@ (8004958 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004930:	4c0a      	ldr	r4, [pc, #40]	@ (800495c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004932:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004934:	e001      	b.n	800493a <LoopFillZerobss>

08004936 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004936:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004938:	3204      	adds	r2, #4

0800493a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800493a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800493c:	d3fb      	bcc.n	8004936 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800493e:	f008 fc21 	bl	800d184 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004942:	f7fd fe4b 	bl	80025dc <main>
  bx  lr    
 8004946:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004948:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800494c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004950:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 8004954:	0800d2e8 	.word	0x0800d2e8
  ldr r2, =_sbss
 8004958:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 800495c:	20000ea8 	.word	0x20000ea8

08004960 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004960:	e7fe      	b.n	8004960 <ADC_IRQHandler>
	...

08004964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004968:	4b0e      	ldr	r3, [pc, #56]	@ (80049a4 <HAL_Init+0x40>)
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4a0d      	ldr	r2, [pc, #52]	@ (80049a4 <HAL_Init+0x40>)
 800496e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004972:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004974:	4b0b      	ldr	r3, [pc, #44]	@ (80049a4 <HAL_Init+0x40>)
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a0a      	ldr	r2, [pc, #40]	@ (80049a4 <HAL_Init+0x40>)
 800497a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800497e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004980:	4b08      	ldr	r3, [pc, #32]	@ (80049a4 <HAL_Init+0x40>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	4a07      	ldr	r2, [pc, #28]	@ (80049a4 <HAL_Init+0x40>)
 8004986:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800498a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800498c:	2003      	movs	r0, #3
 800498e:	f001 f811 	bl	80059b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004992:	2000      	movs	r0, #0
 8004994:	f000 f808 	bl	80049a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004998:	f7ff fdee 	bl	8004578 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800499c:	2300      	movs	r3, #0
}
 800499e:	4618      	mov	r0, r3
 80049a0:	bd80      	pop	{r7, pc}
 80049a2:	bf00      	nop
 80049a4:	40023c00 	.word	0x40023c00

080049a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	b082      	sub	sp, #8
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80049b0:	4b12      	ldr	r3, [pc, #72]	@ (80049fc <HAL_InitTick+0x54>)
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	4b12      	ldr	r3, [pc, #72]	@ (8004a00 <HAL_InitTick+0x58>)
 80049b6:	781b      	ldrb	r3, [r3, #0]
 80049b8:	4619      	mov	r1, r3
 80049ba:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80049be:	fbb3 f3f1 	udiv	r3, r3, r1
 80049c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80049c6:	4618      	mov	r0, r3
 80049c8:	f001 f829 	bl	8005a1e <HAL_SYSTICK_Config>
 80049cc:	4603      	mov	r3, r0
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d001      	beq.n	80049d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80049d2:	2301      	movs	r3, #1
 80049d4:	e00e      	b.n	80049f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	2b0f      	cmp	r3, #15
 80049da:	d80a      	bhi.n	80049f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80049dc:	2200      	movs	r2, #0
 80049de:	6879      	ldr	r1, [r7, #4]
 80049e0:	f04f 30ff 	mov.w	r0, #4294967295
 80049e4:	f000 fff1 	bl	80059ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80049e8:	4a06      	ldr	r2, [pc, #24]	@ (8004a04 <HAL_InitTick+0x5c>)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80049ee:	2300      	movs	r3, #0
 80049f0:	e000      	b.n	80049f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80049f2:	2301      	movs	r3, #1
}
 80049f4:	4618      	mov	r0, r3
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	20000000 	.word	0x20000000
 8004a00:	20000008 	.word	0x20000008
 8004a04:	20000004 	.word	0x20000004

08004a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004a0c:	4b06      	ldr	r3, [pc, #24]	@ (8004a28 <HAL_IncTick+0x20>)
 8004a0e:	781b      	ldrb	r3, [r3, #0]
 8004a10:	461a      	mov	r2, r3
 8004a12:	4b06      	ldr	r3, [pc, #24]	@ (8004a2c <HAL_IncTick+0x24>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4413      	add	r3, r2
 8004a18:	4a04      	ldr	r2, [pc, #16]	@ (8004a2c <HAL_IncTick+0x24>)
 8004a1a:	6013      	str	r3, [r2, #0]
}
 8004a1c:	bf00      	nop
 8004a1e:	46bd      	mov	sp, r7
 8004a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a24:	4770      	bx	lr
 8004a26:	bf00      	nop
 8004a28:	20000008 	.word	0x20000008
 8004a2c:	200005a0 	.word	0x200005a0

08004a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004a30:	b480      	push	{r7}
 8004a32:	af00      	add	r7, sp, #0
  return uwTick;
 8004a34:	4b03      	ldr	r3, [pc, #12]	@ (8004a44 <HAL_GetTick+0x14>)
 8004a36:	681b      	ldr	r3, [r3, #0]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	200005a0 	.word	0x200005a0

08004a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004a50:	f7ff ffee 	bl	8004a30 <HAL_GetTick>
 8004a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a60:	d005      	beq.n	8004a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004a62:	4b0a      	ldr	r3, [pc, #40]	@ (8004a8c <HAL_Delay+0x44>)
 8004a64:	781b      	ldrb	r3, [r3, #0]
 8004a66:	461a      	mov	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	4413      	add	r3, r2
 8004a6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004a6e:	bf00      	nop
 8004a70:	f7ff ffde 	bl	8004a30 <HAL_GetTick>
 8004a74:	4602      	mov	r2, r0
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	1ad3      	subs	r3, r2, r3
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d8f7      	bhi.n	8004a70 <HAL_Delay+0x28>
  {
  }
}
 8004a80:	bf00      	nop
 8004a82:	bf00      	nop
 8004a84:	3710      	adds	r7, #16
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	20000008 	.word	0x20000008

08004a90 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8004a90:	b480      	push	{r7}
 8004a92:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)UID_BASE)));
 8004a94:	4b03      	ldr	r3, [pc, #12]	@ (8004aa4 <HAL_GetUIDw0+0x14>)
 8004a96:	681b      	ldr	r3, [r3, #0]
}
 8004a98:	4618      	mov	r0, r3
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa0:	4770      	bx	lr
 8004aa2:	bf00      	nop
 8004aa4:	1fff7a10 	.word	0x1fff7a10

08004aa8 <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8004aac:	4b03      	ldr	r3, [pc, #12]	@ (8004abc <HAL_GetUIDw1+0x14>)
 8004aae:	681b      	ldr	r3, [r3, #0]
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab8:	4770      	bx	lr
 8004aba:	bf00      	nop
 8004abc:	1fff7a14 	.word	0x1fff7a14

08004ac0 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	af00      	add	r7, sp, #0
  return (READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8004ac4:	4b03      	ldr	r3, [pc, #12]	@ (8004ad4 <HAL_GetUIDw2+0x14>)
 8004ac6:	681b      	ldr	r3, [r3, #0]
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	1fff7a18 	.word	0x1fff7a18

08004ad8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	b084      	sub	sp, #16
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e0ed      	b.n	8004cc6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004af0:	b2db      	uxtb	r3, r3
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d102      	bne.n	8004afc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f7ff fd66 	bl	80045c8 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f042 0201 	orr.w	r2, r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b0c:	f7ff ff90 	bl	8004a30 <HAL_GetTick>
 8004b10:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004b12:	e012      	b.n	8004b3a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b14:	f7ff ff8c 	bl	8004a30 <HAL_GetTick>
 8004b18:	4602      	mov	r2, r0
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	1ad3      	subs	r3, r2, r3
 8004b1e:	2b0a      	cmp	r3, #10
 8004b20:	d90b      	bls.n	8004b3a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b26:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	2205      	movs	r2, #5
 8004b32:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e0c5      	b.n	8004cc6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f003 0301 	and.w	r3, r3, #1
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0e5      	beq.n	8004b14 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681a      	ldr	r2, [r3, #0]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f022 0202 	bic.w	r2, r2, #2
 8004b56:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b58:	f7ff ff6a 	bl	8004a30 <HAL_GetTick>
 8004b5c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004b5e:	e012      	b.n	8004b86 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b60:	f7ff ff66 	bl	8004a30 <HAL_GetTick>
 8004b64:	4602      	mov	r2, r0
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	1ad3      	subs	r3, r2, r3
 8004b6a:	2b0a      	cmp	r3, #10
 8004b6c:	d90b      	bls.n	8004b86 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b72:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2205      	movs	r2, #5
 8004b7e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004b82:	2301      	movs	r3, #1
 8004b84:	e09f      	b.n	8004cc6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1e5      	bne.n	8004b60 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	7e1b      	ldrb	r3, [r3, #24]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d108      	bne.n	8004bae <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	681a      	ldr	r2, [r3, #0]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8004baa:	601a      	str	r2, [r3, #0]
 8004bac:	e007      	b.n	8004bbe <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	681a      	ldr	r2, [r3, #0]
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004bbc:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	7e5b      	ldrb	r3, [r3, #25]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d108      	bne.n	8004bd8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681a      	ldr	r2, [r3, #0]
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004bd4:	601a      	str	r2, [r3, #0]
 8004bd6:	e007      	b.n	8004be8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004be6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	7e9b      	ldrb	r3, [r3, #26]
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d108      	bne.n	8004c02 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	681a      	ldr	r2, [r3, #0]
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f042 0220 	orr.w	r2, r2, #32
 8004bfe:	601a      	str	r2, [r3, #0]
 8004c00:	e007      	b.n	8004c12 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f022 0220 	bic.w	r2, r2, #32
 8004c10:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	7edb      	ldrb	r3, [r3, #27]
 8004c16:	2b01      	cmp	r3, #1
 8004c18:	d108      	bne.n	8004c2c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	681a      	ldr	r2, [r3, #0]
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	f022 0210 	bic.w	r2, r2, #16
 8004c28:	601a      	str	r2, [r3, #0]
 8004c2a:	e007      	b.n	8004c3c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	681a      	ldr	r2, [r3, #0]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0210 	orr.w	r2, r2, #16
 8004c3a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	7f1b      	ldrb	r3, [r3, #28]
 8004c40:	2b01      	cmp	r3, #1
 8004c42:	d108      	bne.n	8004c56 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f042 0208 	orr.w	r2, r2, #8
 8004c52:	601a      	str	r2, [r3, #0]
 8004c54:	e007      	b.n	8004c66 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	681a      	ldr	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f022 0208 	bic.w	r2, r2, #8
 8004c64:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	7f5b      	ldrb	r3, [r3, #29]
 8004c6a:	2b01      	cmp	r3, #1
 8004c6c:	d108      	bne.n	8004c80 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	681a      	ldr	r2, [r3, #0]
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f042 0204 	orr.w	r2, r2, #4
 8004c7c:	601a      	str	r2, [r3, #0]
 8004c7e:	e007      	b.n	8004c90 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	681a      	ldr	r2, [r3, #0]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f022 0204 	bic.w	r2, r2, #4
 8004c8e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	689a      	ldr	r2, [r3, #8]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	691b      	ldr	r3, [r3, #16]
 8004c9e:	431a      	orrs	r2, r3
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	ea42 0103 	orr.w	r1, r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	685b      	ldr	r3, [r3, #4]
 8004cac:	1e5a      	subs	r2, r3, #1
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	430a      	orrs	r2, r1
 8004cb4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
	...

08004cd0 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b087      	sub	sp, #28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
 8004cd8:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004ce6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004ce8:	7cfb      	ldrb	r3, [r7, #19]
 8004cea:	2b01      	cmp	r3, #1
 8004cec:	d003      	beq.n	8004cf6 <HAL_CAN_ConfigFilter+0x26>
 8004cee:	7cfb      	ldrb	r3, [r7, #19]
 8004cf0:	2b02      	cmp	r3, #2
 8004cf2:	f040 80be 	bne.w	8004e72 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8004cf6:	4b65      	ldr	r3, [pc, #404]	@ (8004e8c <HAL_CAN_ConfigFilter+0x1bc>)
 8004cf8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004d00:	f043 0201 	orr.w	r2, r3, #1
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004d10:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8004d1a:	697b      	ldr	r3, [r7, #20]
 8004d1c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d24:	021b      	lsls	r3, r3, #8
 8004d26:	431a      	orrs	r2, r3
 8004d28:	697b      	ldr	r3, [r7, #20]
 8004d2a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	695b      	ldr	r3, [r3, #20]
 8004d32:	f003 031f 	and.w	r3, r3, #31
 8004d36:	2201      	movs	r2, #1
 8004d38:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3c:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	43db      	mvns	r3, r3
 8004d48:	401a      	ands	r2, r3
 8004d4a:	697b      	ldr	r3, [r7, #20]
 8004d4c:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004d50:	683b      	ldr	r3, [r7, #0]
 8004d52:	69db      	ldr	r3, [r3, #28]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d123      	bne.n	8004da0 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	43db      	mvns	r3, r3
 8004d62:	401a      	ands	r2, r3
 8004d64:	697b      	ldr	r3, [r7, #20]
 8004d66:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	68db      	ldr	r3, [r3, #12]
 8004d6e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685b      	ldr	r3, [r3, #4]
 8004d74:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d76:	683a      	ldr	r2, [r7, #0]
 8004d78:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004d7a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004d7c:	697b      	ldr	r3, [r7, #20]
 8004d7e:	3248      	adds	r2, #72	@ 0x48
 8004d80:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004d94:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004d96:	6979      	ldr	r1, [r7, #20]
 8004d98:	3348      	adds	r3, #72	@ 0x48
 8004d9a:	00db      	lsls	r3, r3, #3
 8004d9c:	440b      	add	r3, r1
 8004d9e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	69db      	ldr	r3, [r3, #28]
 8004da4:	2b01      	cmp	r3, #1
 8004da6:	d122      	bne.n	8004dee <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	431a      	orrs	r2, r3
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004dbe:	683b      	ldr	r3, [r7, #0]
 8004dc0:	685b      	ldr	r3, [r3, #4]
 8004dc2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004dc8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	3248      	adds	r2, #72	@ 0x48
 8004dce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	689b      	ldr	r3, [r3, #8]
 8004dd6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004dd8:	683b      	ldr	r3, [r7, #0]
 8004dda:	68db      	ldr	r3, [r3, #12]
 8004ddc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004de2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004de4:	6979      	ldr	r1, [r7, #20]
 8004de6:	3348      	adds	r3, #72	@ 0x48
 8004de8:	00db      	lsls	r3, r3, #3
 8004dea:	440b      	add	r3, r1
 8004dec:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	699b      	ldr	r3, [r3, #24]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d109      	bne.n	8004e0a <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8004df6:	697b      	ldr	r3, [r7, #20]
 8004df8:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	43db      	mvns	r3, r3
 8004e00:	401a      	ands	r2, r3
 8004e02:	697b      	ldr	r3, [r7, #20]
 8004e04:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8004e08:	e007      	b.n	8004e1a <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	431a      	orrs	r2, r3
 8004e14:	697b      	ldr	r3, [r7, #20]
 8004e16:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d109      	bne.n	8004e36 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8004e22:	697b      	ldr	r3, [r7, #20]
 8004e24:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	43db      	mvns	r3, r3
 8004e2c:	401a      	ands	r2, r3
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8004e34:	e007      	b.n	8004e46 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	431a      	orrs	r2, r3
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	6a1b      	ldr	r3, [r3, #32]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d107      	bne.n	8004e5e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	431a      	orrs	r2, r3
 8004e58:	697b      	ldr	r3, [r7, #20]
 8004e5a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8004e64:	f023 0201 	bic.w	r2, r3, #1
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	e006      	b.n	8004e80 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e76:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
  }
}
 8004e80:	4618      	mov	r0, r3
 8004e82:	371c      	adds	r7, #28
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	40006400 	.word	0x40006400

08004e90 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b084      	sub	sp, #16
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d12e      	bne.n	8004f02 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	f022 0201 	bic.w	r2, r2, #1
 8004eba:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004ebc:	f7ff fdb8 	bl	8004a30 <HAL_GetTick>
 8004ec0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004ec2:	e012      	b.n	8004eea <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004ec4:	f7ff fdb4 	bl	8004a30 <HAL_GetTick>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	1ad3      	subs	r3, r2, r3
 8004ece:	2b0a      	cmp	r3, #10
 8004ed0:	d90b      	bls.n	8004eea <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ed6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2205      	movs	r2, #5
 8004ee2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e012      	b.n	8004f10 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f003 0301 	and.w	r3, r3, #1
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d1e5      	bne.n	8004ec4 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2200      	movs	r2, #0
 8004efc:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8004efe:	2300      	movs	r3, #0
 8004f00:	e006      	b.n	8004f10 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f06:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
  }
}
 8004f10:	4618      	mov	r0, r3
 8004f12:	3710      	adds	r7, #16
 8004f14:	46bd      	mov	sp, r7
 8004f16:	bd80      	pop	{r7, pc}

08004f18 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8004f18:	b480      	push	{r7}
 8004f1a:	b089      	sub	sp, #36	@ 0x24
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
 8004f24:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f2c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	689b      	ldr	r3, [r3, #8]
 8004f34:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8004f36:	7ffb      	ldrb	r3, [r7, #31]
 8004f38:	2b01      	cmp	r3, #1
 8004f3a:	d003      	beq.n	8004f44 <HAL_CAN_AddTxMessage+0x2c>
 8004f3c:	7ffb      	ldrb	r3, [r7, #31]
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	f040 80ad 	bne.w	800509e <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d10a      	bne.n	8004f64 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004f4e:	69bb      	ldr	r3, [r7, #24]
 8004f50:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d105      	bne.n	8004f64 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	f000 8095 	beq.w	800508e <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	0e1b      	lsrs	r3, r3, #24
 8004f68:	f003 0303 	and.w	r3, r3, #3
 8004f6c:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8004f6e:	2201      	movs	r2, #1
 8004f70:	697b      	ldr	r3, [r7, #20]
 8004f72:	409a      	lsls	r2, r3
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10d      	bne.n	8004f9c <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8004f86:	68bb      	ldr	r3, [r7, #8]
 8004f88:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8004f8a:	68f9      	ldr	r1, [r7, #12]
 8004f8c:	6809      	ldr	r1, [r1, #0]
 8004f8e:	431a      	orrs	r2, r3
 8004f90:	697b      	ldr	r3, [r7, #20]
 8004f92:	3318      	adds	r3, #24
 8004f94:	011b      	lsls	r3, r3, #4
 8004f96:	440b      	add	r3, r1
 8004f98:	601a      	str	r2, [r3, #0]
 8004f9a:	e00f      	b.n	8004fbc <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004fa6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8004fa8:	68bb      	ldr	r3, [r7, #8]
 8004faa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004fac:	68f9      	ldr	r1, [r7, #12]
 8004fae:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8004fb0:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	3318      	adds	r3, #24
 8004fb6:	011b      	lsls	r3, r3, #4
 8004fb8:	440b      	add	r3, r1
 8004fba:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	6819      	ldr	r1, [r3, #0]
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	691a      	ldr	r2, [r3, #16]
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	3318      	adds	r3, #24
 8004fc8:	011b      	lsls	r3, r3, #4
 8004fca:	440b      	add	r3, r1
 8004fcc:	3304      	adds	r3, #4
 8004fce:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	7d1b      	ldrb	r3, [r3, #20]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d111      	bne.n	8004ffc <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	3318      	adds	r3, #24
 8004fe0:	011b      	lsls	r3, r3, #4
 8004fe2:	4413      	add	r3, r2
 8004fe4:	3304      	adds	r3, #4
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	6811      	ldr	r1, [r2, #0]
 8004fec:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8004ff0:	697b      	ldr	r3, [r7, #20]
 8004ff2:	3318      	adds	r3, #24
 8004ff4:	011b      	lsls	r3, r3, #4
 8004ff6:	440b      	add	r3, r1
 8004ff8:	3304      	adds	r3, #4
 8004ffa:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	3307      	adds	r3, #7
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	061a      	lsls	r2, r3, #24
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	3306      	adds	r3, #6
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	041b      	lsls	r3, r3, #16
 800500c:	431a      	orrs	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	3305      	adds	r3, #5
 8005012:	781b      	ldrb	r3, [r3, #0]
 8005014:	021b      	lsls	r3, r3, #8
 8005016:	4313      	orrs	r3, r2
 8005018:	687a      	ldr	r2, [r7, #4]
 800501a:	3204      	adds	r2, #4
 800501c:	7812      	ldrb	r2, [r2, #0]
 800501e:	4610      	mov	r0, r2
 8005020:	68fa      	ldr	r2, [r7, #12]
 8005022:	6811      	ldr	r1, [r2, #0]
 8005024:	ea43 0200 	orr.w	r2, r3, r0
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	440b      	add	r3, r1
 800502e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8005032:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	3303      	adds	r3, #3
 8005038:	781b      	ldrb	r3, [r3, #0]
 800503a:	061a      	lsls	r2, r3, #24
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	3302      	adds	r3, #2
 8005040:	781b      	ldrb	r3, [r3, #0]
 8005042:	041b      	lsls	r3, r3, #16
 8005044:	431a      	orrs	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	3301      	adds	r3, #1
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	021b      	lsls	r3, r3, #8
 800504e:	4313      	orrs	r3, r2
 8005050:	687a      	ldr	r2, [r7, #4]
 8005052:	7812      	ldrb	r2, [r2, #0]
 8005054:	4610      	mov	r0, r2
 8005056:	68fa      	ldr	r2, [r7, #12]
 8005058:	6811      	ldr	r1, [r2, #0]
 800505a:	ea43 0200 	orr.w	r2, r3, r0
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	011b      	lsls	r3, r3, #4
 8005062:	440b      	add	r3, r1
 8005064:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 8005068:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	697b      	ldr	r3, [r7, #20]
 8005070:	3318      	adds	r3, #24
 8005072:	011b      	lsls	r3, r3, #4
 8005074:	4413      	add	r3, r2
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	68fa      	ldr	r2, [r7, #12]
 800507a:	6811      	ldr	r1, [r2, #0]
 800507c:	f043 0201 	orr.w	r2, r3, #1
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	3318      	adds	r3, #24
 8005084:	011b      	lsls	r3, r3, #4
 8005086:	440b      	add	r3, r1
 8005088:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800508a:	2300      	movs	r3, #0
 800508c:	e00e      	b.n	80050ac <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005092:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 800509a:	2301      	movs	r3, #1
 800509c:	e006      	b.n	80050ac <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80050aa:	2301      	movs	r3, #1
  }
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3724      	adds	r7, #36	@ 0x24
 80050b0:	46bd      	mov	sp, r7
 80050b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b6:	4770      	bx	lr

080050b8 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80050c0:	2300      	movs	r3, #0
 80050c2:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050ca:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80050cc:	7afb      	ldrb	r3, [r7, #11]
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d002      	beq.n	80050d8 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80050d2:	7afb      	ldrb	r3, [r7, #11]
 80050d4:	2b02      	cmp	r3, #2
 80050d6:	d11d      	bne.n	8005114 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d002      	beq.n	80050ec <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	3301      	adds	r3, #1
 80050ea:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	689b      	ldr	r3, [r3, #8]
 80050f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d002      	beq.n	8005100 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	3301      	adds	r3, #1
 80050fe:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800510a:	2b00      	cmp	r3, #0
 800510c:	d002      	beq.n	8005114 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	3301      	adds	r3, #1
 8005112:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8005114:	68fb      	ldr	r3, [r7, #12]
}
 8005116:	4618      	mov	r0, r3
 8005118:	3714      	adds	r7, #20
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8005122:	b480      	push	{r7}
 8005124:	b087      	sub	sp, #28
 8005126:	af00      	add	r7, sp, #0
 8005128:	60f8      	str	r0, [r7, #12]
 800512a:	60b9      	str	r1, [r7, #8]
 800512c:	607a      	str	r2, [r7, #4]
 800512e:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005136:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005138:	7dfb      	ldrb	r3, [r7, #23]
 800513a:	2b01      	cmp	r3, #1
 800513c:	d003      	beq.n	8005146 <HAL_CAN_GetRxMessage+0x24>
 800513e:	7dfb      	ldrb	r3, [r7, #23]
 8005140:	2b02      	cmp	r3, #2
 8005142:	f040 8103 	bne.w	800534c <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005146:	68bb      	ldr	r3, [r7, #8]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d10e      	bne.n	800516a <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	2b00      	cmp	r3, #0
 8005158:	d116      	bne.n	8005188 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005166:	2301      	movs	r3, #1
 8005168:	e0f7      	b.n	800535a <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	f003 0303 	and.w	r3, r3, #3
 8005174:	2b00      	cmp	r3, #0
 8005176:	d107      	bne.n	8005188 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800517c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e0e8      	b.n	800535a <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	68bb      	ldr	r3, [r7, #8]
 800518e:	331b      	adds	r3, #27
 8005190:	011b      	lsls	r3, r3, #4
 8005192:	4413      	add	r3, r2
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0204 	and.w	r2, r3, #4
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d10c      	bne.n	80051c0 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	681a      	ldr	r2, [r3, #0]
 80051aa:	68bb      	ldr	r3, [r7, #8]
 80051ac:	331b      	adds	r3, #27
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	4413      	add	r3, r2
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	0d5b      	lsrs	r3, r3, #21
 80051b6:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	601a      	str	r2, [r3, #0]
 80051be:	e00b      	b.n	80051d8 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	681a      	ldr	r2, [r3, #0]
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	331b      	adds	r3, #27
 80051c8:	011b      	lsls	r3, r3, #4
 80051ca:	4413      	add	r3, r2
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	08db      	lsrs	r3, r3, #3
 80051d0:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681a      	ldr	r2, [r3, #0]
 80051dc:	68bb      	ldr	r3, [r7, #8]
 80051de:	331b      	adds	r3, #27
 80051e0:	011b      	lsls	r3, r3, #4
 80051e2:	4413      	add	r3, r2
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f003 0202 	and.w	r2, r3, #2
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	331b      	adds	r3, #27
 80051f6:	011b      	lsls	r3, r3, #4
 80051f8:	4413      	add	r3, r2
 80051fa:	3304      	adds	r3, #4
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 0308 	and.w	r3, r3, #8
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2208      	movs	r2, #8
 800520a:	611a      	str	r2, [r3, #16]
 800520c:	e00b      	b.n	8005226 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681a      	ldr	r2, [r3, #0]
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	331b      	adds	r3, #27
 8005216:	011b      	lsls	r3, r3, #4
 8005218:	4413      	add	r3, r2
 800521a:	3304      	adds	r3, #4
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	f003 020f 	and.w	r2, r3, #15
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	331b      	adds	r3, #27
 800522e:	011b      	lsls	r3, r3, #4
 8005230:	4413      	add	r3, r2
 8005232:	3304      	adds	r3, #4
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	0a1b      	lsrs	r3, r3, #8
 8005238:	b2da      	uxtb	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681a      	ldr	r2, [r3, #0]
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	331b      	adds	r3, #27
 8005246:	011b      	lsls	r3, r3, #4
 8005248:	4413      	add	r3, r2
 800524a:	3304      	adds	r3, #4
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	0c1b      	lsrs	r3, r3, #16
 8005250:	b29a      	uxth	r2, r3
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	681a      	ldr	r2, [r3, #0]
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	011b      	lsls	r3, r3, #4
 800525e:	4413      	add	r3, r2
 8005260:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	b2da      	uxtb	r2, r3
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	011b      	lsls	r3, r3, #4
 8005274:	4413      	add	r3, r2
 8005276:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	0a1a      	lsrs	r2, r3, #8
 800527e:	683b      	ldr	r3, [r7, #0]
 8005280:	3301      	adds	r3, #1
 8005282:	b2d2      	uxtb	r2, r2
 8005284:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	011b      	lsls	r3, r3, #4
 800528e:	4413      	add	r3, r2
 8005290:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	0c1a      	lsrs	r2, r3, #16
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	3302      	adds	r3, #2
 800529c:	b2d2      	uxtb	r2, r2
 800529e:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681a      	ldr	r2, [r3, #0]
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	011b      	lsls	r3, r3, #4
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	0e1a      	lsrs	r2, r3, #24
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	3303      	adds	r3, #3
 80052b6:	b2d2      	uxtb	r2, r2
 80052b8:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	681a      	ldr	r2, [r3, #0]
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	011b      	lsls	r3, r3, #4
 80052c2:	4413      	add	r3, r2
 80052c4:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	3304      	adds	r3, #4
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	681a      	ldr	r2, [r3, #0]
 80052d6:	68bb      	ldr	r3, [r7, #8]
 80052d8:	011b      	lsls	r3, r3, #4
 80052da:	4413      	add	r3, r2
 80052dc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	0a1a      	lsrs	r2, r3, #8
 80052e4:	683b      	ldr	r3, [r7, #0]
 80052e6:	3305      	adds	r3, #5
 80052e8:	b2d2      	uxtb	r2, r2
 80052ea:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	681a      	ldr	r2, [r3, #0]
 80052f0:	68bb      	ldr	r3, [r7, #8]
 80052f2:	011b      	lsls	r3, r3, #4
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	0c1a      	lsrs	r2, r3, #16
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	3306      	adds	r3, #6
 8005302:	b2d2      	uxtb	r2, r2
 8005304:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	68bb      	ldr	r3, [r7, #8]
 800530c:	011b      	lsls	r3, r3, #4
 800530e:	4413      	add	r3, r2
 8005310:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	0e1a      	lsrs	r2, r3, #24
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	3307      	adds	r3, #7
 800531c:	b2d2      	uxtb	r2, r2
 800531e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005320:	68bb      	ldr	r3, [r7, #8]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d108      	bne.n	8005338 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	68da      	ldr	r2, [r3, #12]
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f042 0220 	orr.w	r2, r2, #32
 8005334:	60da      	str	r2, [r3, #12]
 8005336:	e007      	b.n	8005348 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	691a      	ldr	r2, [r3, #16]
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f042 0220 	orr.w	r2, r2, #32
 8005346:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005348:	2300      	movs	r3, #0
 800534a:	e006      	b.n	800535a <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005350:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8005358:	2301      	movs	r3, #1
  }
}
 800535a:	4618      	mov	r0, r3
 800535c:	371c      	adds	r7, #28
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8005366:	b480      	push	{r7}
 8005368:	b085      	sub	sp, #20
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
 800536e:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005376:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8005378:	7bfb      	ldrb	r3, [r7, #15]
 800537a:	2b01      	cmp	r3, #1
 800537c:	d002      	beq.n	8005384 <HAL_CAN_ActivateNotification+0x1e>
 800537e:	7bfb      	ldrb	r3, [r7, #15]
 8005380:	2b02      	cmp	r3, #2
 8005382:	d109      	bne.n	8005398 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	6959      	ldr	r1, [r3, #20]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	683a      	ldr	r2, [r7, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8005394:	2300      	movs	r3, #0
 8005396:	e006      	b.n	80053a6 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800539c:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80053a4:	2301      	movs	r3, #1
  }
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3714      	adds	r7, #20
 80053aa:	46bd      	mov	sp, r7
 80053ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b0:	4770      	bx	lr

080053b2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80053b2:	b580      	push	{r7, lr}
 80053b4:	b08a      	sub	sp, #40	@ 0x28
 80053b6:	af00      	add	r7, sp, #0
 80053b8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80053ba:	2300      	movs	r3, #0
 80053bc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	695b      	ldr	r3, [r3, #20]
 80053c4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	685b      	ldr	r3, [r3, #4]
 80053cc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	699b      	ldr	r3, [r3, #24]
 80053ec:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80053ee:	6a3b      	ldr	r3, [r7, #32]
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d07c      	beq.n	80054f2 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80053f8:	69bb      	ldr	r3, [r7, #24]
 80053fa:	f003 0301 	and.w	r3, r3, #1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d023      	beq.n	800544a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	2201      	movs	r2, #1
 8005408:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800540a:	69bb      	ldr	r3, [r7, #24]
 800540c:	f003 0302 	and.w	r3, r3, #2
 8005410:	2b00      	cmp	r3, #0
 8005412:	d003      	beq.n	800541c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005414:	6878      	ldr	r0, [r7, #4]
 8005416:	f000 f983 	bl	8005720 <HAL_CAN_TxMailbox0CompleteCallback>
 800541a:	e016      	b.n	800544a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800541c:	69bb      	ldr	r3, [r7, #24]
 800541e:	f003 0304 	and.w	r3, r3, #4
 8005422:	2b00      	cmp	r3, #0
 8005424:	d004      	beq.n	8005430 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005426:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005428:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800542c:	627b      	str	r3, [r7, #36]	@ 0x24
 800542e:	e00c      	b.n	800544a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005430:	69bb      	ldr	r3, [r7, #24]
 8005432:	f003 0308 	and.w	r3, r3, #8
 8005436:	2b00      	cmp	r3, #0
 8005438:	d004      	beq.n	8005444 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800543a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8005440:	627b      	str	r3, [r7, #36]	@ 0x24
 8005442:	e002      	b.n	800544a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f000 f989 	bl	800575c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800544a:	69bb      	ldr	r3, [r7, #24]
 800544c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005450:	2b00      	cmp	r3, #0
 8005452:	d024      	beq.n	800549e <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800545c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800545e:	69bb      	ldr	r3, [r7, #24]
 8005460:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005464:	2b00      	cmp	r3, #0
 8005466:	d003      	beq.n	8005470 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005468:	6878      	ldr	r0, [r7, #4]
 800546a:	f000 f963 	bl	8005734 <HAL_CAN_TxMailbox1CompleteCallback>
 800546e:	e016      	b.n	800549e <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005470:	69bb      	ldr	r3, [r7, #24]
 8005472:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005476:	2b00      	cmp	r3, #0
 8005478:	d004      	beq.n	8005484 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800547a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800547c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005480:	627b      	str	r3, [r7, #36]	@ 0x24
 8005482:	e00c      	b.n	800549e <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800548a:	2b00      	cmp	r3, #0
 800548c:	d004      	beq.n	8005498 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800548e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005490:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005494:	627b      	str	r3, [r7, #36]	@ 0x24
 8005496:	e002      	b.n	800549e <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f000 f969 	bl	8005770 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d024      	beq.n	80054f2 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80054b0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d003      	beq.n	80054c4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f000 f943 	bl	8005748 <HAL_CAN_TxMailbox2CompleteCallback>
 80054c2:	e016      	b.n	80054f2 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80054c4:	69bb      	ldr	r3, [r7, #24]
 80054c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d004      	beq.n	80054d8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80054ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80054d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80054d6:	e00c      	b.n	80054f2 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80054d8:	69bb      	ldr	r3, [r7, #24]
 80054da:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d004      	beq.n	80054ec <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80054e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80054e8:	627b      	str	r3, [r7, #36]	@ 0x24
 80054ea:	e002      	b.n	80054f2 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80054ec:	6878      	ldr	r0, [r7, #4]
 80054ee:	f000 f949 	bl	8005784 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80054f2:	6a3b      	ldr	r3, [r7, #32]
 80054f4:	f003 0308 	and.w	r3, r3, #8
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00c      	beq.n	8005516 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f003 0310 	and.w	r3, r3, #16
 8005502:	2b00      	cmp	r3, #0
 8005504:	d007      	beq.n	8005516 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005506:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005508:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800550c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2210      	movs	r2, #16
 8005514:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005516:	6a3b      	ldr	r3, [r7, #32]
 8005518:	f003 0304 	and.w	r3, r3, #4
 800551c:	2b00      	cmp	r3, #0
 800551e:	d00b      	beq.n	8005538 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005520:	697b      	ldr	r3, [r7, #20]
 8005522:	f003 0308 	and.w	r3, r3, #8
 8005526:	2b00      	cmp	r3, #0
 8005528:	d006      	beq.n	8005538 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	2208      	movs	r2, #8
 8005530:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005532:	6878      	ldr	r0, [r7, #4]
 8005534:	f000 f930 	bl	8005798 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005538:	6a3b      	ldr	r3, [r7, #32]
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	2b00      	cmp	r3, #0
 8005540:	d009      	beq.n	8005556 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68db      	ldr	r3, [r3, #12]
 8005548:	f003 0303 	and.w	r3, r3, #3
 800554c:	2b00      	cmp	r3, #0
 800554e:	d002      	beq.n	8005556 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005550:	6878      	ldr	r0, [r7, #4]
 8005552:	f7fd fc1d 	bl	8002d90 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00c      	beq.n	800557a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	f003 0310 	and.w	r3, r3, #16
 8005566:	2b00      	cmp	r3, #0
 8005568:	d007      	beq.n	800557a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800556a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800556c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005570:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	2210      	movs	r2, #16
 8005578:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800557a:	6a3b      	ldr	r3, [r7, #32]
 800557c:	f003 0320 	and.w	r3, r3, #32
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00b      	beq.n	800559c <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005584:	693b      	ldr	r3, [r7, #16]
 8005586:	f003 0308 	and.w	r3, r3, #8
 800558a:	2b00      	cmp	r3, #0
 800558c:	d006      	beq.n	800559c <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	2208      	movs	r2, #8
 8005594:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f908 	bl	80057ac <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800559c:	6a3b      	ldr	r3, [r7, #32]
 800559e:	f003 0310 	and.w	r3, r3, #16
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d009      	beq.n	80055ba <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	691b      	ldr	r3, [r3, #16]
 80055ac:	f003 0303 	and.w	r3, r3, #3
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d002      	beq.n	80055ba <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7fd fc51 	bl	8002e5c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80055ba:	6a3b      	ldr	r3, [r7, #32]
 80055bc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00b      	beq.n	80055dc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80055c4:	69fb      	ldr	r3, [r7, #28]
 80055c6:	f003 0310 	and.w	r3, r3, #16
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d006      	beq.n	80055dc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2210      	movs	r2, #16
 80055d4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f8f2 	bl	80057c0 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80055dc:	6a3b      	ldr	r3, [r7, #32]
 80055de:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d00b      	beq.n	80055fe <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	f003 0308 	and.w	r3, r3, #8
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d006      	beq.n	80055fe <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	2208      	movs	r2, #8
 80055f6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	f000 f8eb 	bl	80057d4 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005604:	2b00      	cmp	r3, #0
 8005606:	d07b      	beq.n	8005700 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	f003 0304 	and.w	r3, r3, #4
 800560e:	2b00      	cmp	r3, #0
 8005610:	d072      	beq.n	80056f8 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005612:	6a3b      	ldr	r3, [r7, #32]
 8005614:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005618:	2b00      	cmp	r3, #0
 800561a:	d008      	beq.n	800562e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005628:	f043 0301 	orr.w	r3, r3, #1
 800562c:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005634:	2b00      	cmp	r3, #0
 8005636:	d008      	beq.n	800564a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800563e:	2b00      	cmp	r3, #0
 8005640:	d003      	beq.n	800564a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005644:	f043 0302 	orr.w	r3, r3, #2
 8005648:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005650:	2b00      	cmp	r3, #0
 8005652:	d008      	beq.n	8005666 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800565e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005660:	f043 0304 	orr.w	r3, r3, #4
 8005664:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005666:	6a3b      	ldr	r3, [r7, #32]
 8005668:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800566c:	2b00      	cmp	r3, #0
 800566e:	d043      	beq.n	80056f8 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005676:	2b00      	cmp	r3, #0
 8005678:	d03e      	beq.n	80056f8 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8005680:	2b60      	cmp	r3, #96	@ 0x60
 8005682:	d02b      	beq.n	80056dc <HAL_CAN_IRQHandler+0x32a>
 8005684:	2b60      	cmp	r3, #96	@ 0x60
 8005686:	d82e      	bhi.n	80056e6 <HAL_CAN_IRQHandler+0x334>
 8005688:	2b50      	cmp	r3, #80	@ 0x50
 800568a:	d022      	beq.n	80056d2 <HAL_CAN_IRQHandler+0x320>
 800568c:	2b50      	cmp	r3, #80	@ 0x50
 800568e:	d82a      	bhi.n	80056e6 <HAL_CAN_IRQHandler+0x334>
 8005690:	2b40      	cmp	r3, #64	@ 0x40
 8005692:	d019      	beq.n	80056c8 <HAL_CAN_IRQHandler+0x316>
 8005694:	2b40      	cmp	r3, #64	@ 0x40
 8005696:	d826      	bhi.n	80056e6 <HAL_CAN_IRQHandler+0x334>
 8005698:	2b30      	cmp	r3, #48	@ 0x30
 800569a:	d010      	beq.n	80056be <HAL_CAN_IRQHandler+0x30c>
 800569c:	2b30      	cmp	r3, #48	@ 0x30
 800569e:	d822      	bhi.n	80056e6 <HAL_CAN_IRQHandler+0x334>
 80056a0:	2b10      	cmp	r3, #16
 80056a2:	d002      	beq.n	80056aa <HAL_CAN_IRQHandler+0x2f8>
 80056a4:	2b20      	cmp	r3, #32
 80056a6:	d005      	beq.n	80056b4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80056a8:	e01d      	b.n	80056e6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80056aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ac:	f043 0308 	orr.w	r3, r3, #8
 80056b0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80056b2:	e019      	b.n	80056e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80056b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056b6:	f043 0310 	orr.w	r3, r3, #16
 80056ba:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80056bc:	e014      	b.n	80056e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80056be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056c0:	f043 0320 	orr.w	r3, r3, #32
 80056c4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80056c6:	e00f      	b.n	80056e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80056c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80056ce:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80056d0:	e00a      	b.n	80056e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80056d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80056d8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80056da:	e005      	b.n	80056e8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80056dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80056de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80056e2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80056e4:	e000      	b.n	80056e8 <HAL_CAN_IRQHandler+0x336>
            break;
 80056e6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	699a      	ldr	r2, [r3, #24]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 80056f6:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	2204      	movs	r2, #4
 80056fe:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005702:	2b00      	cmp	r3, #0
 8005704:	d008      	beq.n	8005718 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800570a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800570c:	431a      	orrs	r2, r3
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f000 f868 	bl	80057e8 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005718:	bf00      	nop
 800571a:	3728      	adds	r7, #40	@ 0x28
 800571c:	46bd      	mov	sp, r7
 800571e:	bd80      	pop	{r7, pc}

08005720 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005720:	b480      	push	{r7}
 8005722:	b083      	sub	sp, #12
 8005724:	af00      	add	r7, sp, #0
 8005726:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005728:	bf00      	nop
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800573c:	bf00      	nop
 800573e:	370c      	adds	r7, #12
 8005740:	46bd      	mov	sp, r7
 8005742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005746:	4770      	bx	lr

08005748 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005748:	b480      	push	{r7}
 800574a:	b083      	sub	sp, #12
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005750:	bf00      	nop
 8005752:	370c      	adds	r7, #12
 8005754:	46bd      	mov	sp, r7
 8005756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575a:	4770      	bx	lr

0800575c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800575c:	b480      	push	{r7}
 800575e:	b083      	sub	sp, #12
 8005760:	af00      	add	r7, sp, #0
 8005762:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005764:	bf00      	nop
 8005766:	370c      	adds	r7, #12
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005770:	b480      	push	{r7}
 8005772:	b083      	sub	sp, #12
 8005774:	af00      	add	r7, sp, #0
 8005776:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005778:	bf00      	nop
 800577a:	370c      	adds	r7, #12
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005784:	b480      	push	{r7}
 8005786:	b083      	sub	sp, #12
 8005788:	af00      	add	r7, sp, #0
 800578a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800578c:	bf00      	nop
 800578e:	370c      	adds	r7, #12
 8005790:	46bd      	mov	sp, r7
 8005792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005796:	4770      	bx	lr

08005798 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005798:	b480      	push	{r7}
 800579a:	b083      	sub	sp, #12
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80057a0:	bf00      	nop
 80057a2:	370c      	adds	r7, #12
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b083      	sub	sp, #12
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80057b4:	bf00      	nop
 80057b6:	370c      	adds	r7, #12
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b083      	sub	sp, #12
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80057c8:	bf00      	nop
 80057ca:	370c      	adds	r7, #12
 80057cc:	46bd      	mov	sp, r7
 80057ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d2:	4770      	bx	lr

080057d4 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80057d4:	b480      	push	{r7}
 80057d6:	b083      	sub	sp, #12
 80057d8:	af00      	add	r7, sp, #0
 80057da:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e6:	4770      	bx	lr

080057e8 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80057e8:	b480      	push	{r7}
 80057ea:	b083      	sub	sp, #12
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80057f0:	bf00      	nop
 80057f2:	370c      	adds	r7, #12
 80057f4:	46bd      	mov	sp, r7
 80057f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fa:	4770      	bx	lr

080057fc <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 80057fc:	b480      	push	{r7}
 80057fe:	b083      	sub	sp, #12
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8005808:	4618      	mov	r0, r3
 800580a:	370c      	adds	r7, #12
 800580c:	46bd      	mov	sp, r7
 800580e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005812:	4770      	bx	lr

08005814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005814:	b480      	push	{r7}
 8005816:	b085      	sub	sp, #20
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	f003 0307 	and.w	r3, r3, #7
 8005822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005824:	4b0c      	ldr	r3, [pc, #48]	@ (8005858 <__NVIC_SetPriorityGrouping+0x44>)
 8005826:	68db      	ldr	r3, [r3, #12]
 8005828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800582a:	68ba      	ldr	r2, [r7, #8]
 800582c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8005830:	4013      	ands	r3, r2
 8005832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005838:	68bb      	ldr	r3, [r7, #8]
 800583a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800583c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8005840:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8005844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005846:	4a04      	ldr	r2, [pc, #16]	@ (8005858 <__NVIC_SetPriorityGrouping+0x44>)
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	60d3      	str	r3, [r2, #12]
}
 800584c:	bf00      	nop
 800584e:	3714      	adds	r7, #20
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	e000ed00 	.word	0xe000ed00

0800585c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800585c:	b480      	push	{r7}
 800585e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005860:	4b04      	ldr	r3, [pc, #16]	@ (8005874 <__NVIC_GetPriorityGrouping+0x18>)
 8005862:	68db      	ldr	r3, [r3, #12]
 8005864:	0a1b      	lsrs	r3, r3, #8
 8005866:	f003 0307 	and.w	r3, r3, #7
}
 800586a:	4618      	mov	r0, r3
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	e000ed00 	.word	0xe000ed00

08005878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005878:	b480      	push	{r7}
 800587a:	b083      	sub	sp, #12
 800587c:	af00      	add	r7, sp, #0
 800587e:	4603      	mov	r3, r0
 8005880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005886:	2b00      	cmp	r3, #0
 8005888:	db0b      	blt.n	80058a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800588a:	79fb      	ldrb	r3, [r7, #7]
 800588c:	f003 021f 	and.w	r2, r3, #31
 8005890:	4907      	ldr	r1, [pc, #28]	@ (80058b0 <__NVIC_EnableIRQ+0x38>)
 8005892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005896:	095b      	lsrs	r3, r3, #5
 8005898:	2001      	movs	r0, #1
 800589a:	fa00 f202 	lsl.w	r2, r0, r2
 800589e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	e000e100 	.word	0xe000e100

080058b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80058b4:	b480      	push	{r7}
 80058b6:	b083      	sub	sp, #12
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	4603      	mov	r3, r0
 80058bc:	6039      	str	r1, [r7, #0]
 80058be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80058c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	db0a      	blt.n	80058de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	b2da      	uxtb	r2, r3
 80058cc:	490c      	ldr	r1, [pc, #48]	@ (8005900 <__NVIC_SetPriority+0x4c>)
 80058ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80058d2:	0112      	lsls	r2, r2, #4
 80058d4:	b2d2      	uxtb	r2, r2
 80058d6:	440b      	add	r3, r1
 80058d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80058dc:	e00a      	b.n	80058f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	b2da      	uxtb	r2, r3
 80058e2:	4908      	ldr	r1, [pc, #32]	@ (8005904 <__NVIC_SetPriority+0x50>)
 80058e4:	79fb      	ldrb	r3, [r7, #7]
 80058e6:	f003 030f 	and.w	r3, r3, #15
 80058ea:	3b04      	subs	r3, #4
 80058ec:	0112      	lsls	r2, r2, #4
 80058ee:	b2d2      	uxtb	r2, r2
 80058f0:	440b      	add	r3, r1
 80058f2:	761a      	strb	r2, [r3, #24]
}
 80058f4:	bf00      	nop
 80058f6:	370c      	adds	r7, #12
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	e000e100 	.word	0xe000e100
 8005904:	e000ed00 	.word	0xe000ed00

08005908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005908:	b480      	push	{r7}
 800590a:	b089      	sub	sp, #36	@ 0x24
 800590c:	af00      	add	r7, sp, #0
 800590e:	60f8      	str	r0, [r7, #12]
 8005910:	60b9      	str	r1, [r7, #8]
 8005912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	f003 0307 	and.w	r3, r3, #7
 800591a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800591c:	69fb      	ldr	r3, [r7, #28]
 800591e:	f1c3 0307 	rsb	r3, r3, #7
 8005922:	2b04      	cmp	r3, #4
 8005924:	bf28      	it	cs
 8005926:	2304      	movcs	r3, #4
 8005928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800592a:	69fb      	ldr	r3, [r7, #28]
 800592c:	3304      	adds	r3, #4
 800592e:	2b06      	cmp	r3, #6
 8005930:	d902      	bls.n	8005938 <NVIC_EncodePriority+0x30>
 8005932:	69fb      	ldr	r3, [r7, #28]
 8005934:	3b03      	subs	r3, #3
 8005936:	e000      	b.n	800593a <NVIC_EncodePriority+0x32>
 8005938:	2300      	movs	r3, #0
 800593a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800593c:	f04f 32ff 	mov.w	r2, #4294967295
 8005940:	69bb      	ldr	r3, [r7, #24]
 8005942:	fa02 f303 	lsl.w	r3, r2, r3
 8005946:	43da      	mvns	r2, r3
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	401a      	ands	r2, r3
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005950:	f04f 31ff 	mov.w	r1, #4294967295
 8005954:	697b      	ldr	r3, [r7, #20]
 8005956:	fa01 f303 	lsl.w	r3, r1, r3
 800595a:	43d9      	mvns	r1, r3
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005960:	4313      	orrs	r3, r2
         );
}
 8005962:	4618      	mov	r0, r3
 8005964:	3724      	adds	r7, #36	@ 0x24
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
	...

08005970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b082      	sub	sp, #8
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	3b01      	subs	r3, #1
 800597c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005980:	d301      	bcc.n	8005986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005982:	2301      	movs	r3, #1
 8005984:	e00f      	b.n	80059a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8005986:	4a0a      	ldr	r2, [pc, #40]	@ (80059b0 <SysTick_Config+0x40>)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	3b01      	subs	r3, #1
 800598c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800598e:	210f      	movs	r1, #15
 8005990:	f04f 30ff 	mov.w	r0, #4294967295
 8005994:	f7ff ff8e 	bl	80058b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8005998:	4b05      	ldr	r3, [pc, #20]	@ (80059b0 <SysTick_Config+0x40>)
 800599a:	2200      	movs	r2, #0
 800599c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800599e:	4b04      	ldr	r3, [pc, #16]	@ (80059b0 <SysTick_Config+0x40>)
 80059a0:	2207      	movs	r2, #7
 80059a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80059a4:	2300      	movs	r3, #0
}
 80059a6:	4618      	mov	r0, r3
 80059a8:	3708      	adds	r7, #8
 80059aa:	46bd      	mov	sp, r7
 80059ac:	bd80      	pop	{r7, pc}
 80059ae:	bf00      	nop
 80059b0:	e000e010 	.word	0xe000e010

080059b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b082      	sub	sp, #8
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80059bc:	6878      	ldr	r0, [r7, #4]
 80059be:	f7ff ff29 	bl	8005814 <__NVIC_SetPriorityGrouping>
}
 80059c2:	bf00      	nop
 80059c4:	3708      	adds	r7, #8
 80059c6:	46bd      	mov	sp, r7
 80059c8:	bd80      	pop	{r7, pc}

080059ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b086      	sub	sp, #24
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	4603      	mov	r3, r0
 80059d2:	60b9      	str	r1, [r7, #8]
 80059d4:	607a      	str	r2, [r7, #4]
 80059d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80059d8:	2300      	movs	r3, #0
 80059da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80059dc:	f7ff ff3e 	bl	800585c <__NVIC_GetPriorityGrouping>
 80059e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80059e2:	687a      	ldr	r2, [r7, #4]
 80059e4:	68b9      	ldr	r1, [r7, #8]
 80059e6:	6978      	ldr	r0, [r7, #20]
 80059e8:	f7ff ff8e 	bl	8005908 <NVIC_EncodePriority>
 80059ec:	4602      	mov	r2, r0
 80059ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80059f2:	4611      	mov	r1, r2
 80059f4:	4618      	mov	r0, r3
 80059f6:	f7ff ff5d 	bl	80058b4 <__NVIC_SetPriority>
}
 80059fa:	bf00      	nop
 80059fc:	3718      	adds	r7, #24
 80059fe:	46bd      	mov	sp, r7
 8005a00:	bd80      	pop	{r7, pc}

08005a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a02:	b580      	push	{r7, lr}
 8005a04:	b082      	sub	sp, #8
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	4603      	mov	r3, r0
 8005a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a10:	4618      	mov	r0, r3
 8005a12:	f7ff ff31 	bl	8005878 <__NVIC_EnableIRQ>
}
 8005a16:	bf00      	nop
 8005a18:	3708      	adds	r7, #8
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}

08005a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8005a1e:	b580      	push	{r7, lr}
 8005a20:	b082      	sub	sp, #8
 8005a22:	af00      	add	r7, sp, #0
 8005a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f7ff ffa2 	bl	8005970 <SysTick_Config>
 8005a2c:	4603      	mov	r3, r0
}
 8005a2e:	4618      	mov	r0, r3
 8005a30:	3708      	adds	r7, #8
 8005a32:	46bd      	mov	sp, r7
 8005a34:	bd80      	pop	{r7, pc}
	...

08005a38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005a38:	b480      	push	{r7}
 8005a3a:	b089      	sub	sp, #36	@ 0x24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8005a42:	2300      	movs	r3, #0
 8005a44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8005a46:	2300      	movs	r3, #0
 8005a48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005a4e:	2300      	movs	r3, #0
 8005a50:	61fb      	str	r3, [r7, #28]
 8005a52:	e16b      	b.n	8005d2c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8005a54:	2201      	movs	r2, #1
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	fa02 f303 	lsl.w	r3, r2, r3
 8005a5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	697a      	ldr	r2, [r7, #20]
 8005a64:	4013      	ands	r3, r2
 8005a66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005a68:	693a      	ldr	r2, [r7, #16]
 8005a6a:	697b      	ldr	r3, [r7, #20]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	f040 815a 	bne.w	8005d26 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a72:	683b      	ldr	r3, [r7, #0]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	f003 0303 	and.w	r3, r3, #3
 8005a7a:	2b01      	cmp	r3, #1
 8005a7c:	d005      	beq.n	8005a8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005a7e:	683b      	ldr	r3, [r7, #0]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8005a86:	2b02      	cmp	r3, #2
 8005a88:	d130      	bne.n	8005aec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	689b      	ldr	r3, [r3, #8]
 8005a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8005a90:	69fb      	ldr	r3, [r7, #28]
 8005a92:	005b      	lsls	r3, r3, #1
 8005a94:	2203      	movs	r2, #3
 8005a96:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9a:	43db      	mvns	r3, r3
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005aa2:	683b      	ldr	r3, [r7, #0]
 8005aa4:	68da      	ldr	r2, [r3, #12]
 8005aa6:	69fb      	ldr	r3, [r7, #28]
 8005aa8:	005b      	lsls	r3, r3, #1
 8005aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	4313      	orrs	r3, r2
 8005ab2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	69ba      	ldr	r2, [r7, #24]
 8005ab8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac8:	43db      	mvns	r3, r3
 8005aca:	69ba      	ldr	r2, [r7, #24]
 8005acc:	4013      	ands	r3, r2
 8005ace:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	685b      	ldr	r3, [r3, #4]
 8005ad4:	091b      	lsrs	r3, r3, #4
 8005ad6:	f003 0201 	and.w	r2, r3, #1
 8005ada:	69fb      	ldr	r3, [r7, #28]
 8005adc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae0:	69ba      	ldr	r2, [r7, #24]
 8005ae2:	4313      	orrs	r3, r2
 8005ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	69ba      	ldr	r2, [r7, #24]
 8005aea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685b      	ldr	r3, [r3, #4]
 8005af0:	f003 0303 	and.w	r3, r3, #3
 8005af4:	2b03      	cmp	r3, #3
 8005af6:	d017      	beq.n	8005b28 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	68db      	ldr	r3, [r3, #12]
 8005afc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	005b      	lsls	r3, r3, #1
 8005b02:	2203      	movs	r2, #3
 8005b04:	fa02 f303 	lsl.w	r3, r2, r3
 8005b08:	43db      	mvns	r3, r3
 8005b0a:	69ba      	ldr	r2, [r7, #24]
 8005b0c:	4013      	ands	r3, r2
 8005b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	689a      	ldr	r2, [r3, #8]
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	005b      	lsls	r3, r3, #1
 8005b18:	fa02 f303 	lsl.w	r3, r2, r3
 8005b1c:	69ba      	ldr	r2, [r7, #24]
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	69ba      	ldr	r2, [r7, #24]
 8005b26:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	f003 0303 	and.w	r3, r3, #3
 8005b30:	2b02      	cmp	r3, #2
 8005b32:	d123      	bne.n	8005b7c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005b34:	69fb      	ldr	r3, [r7, #28]
 8005b36:	08da      	lsrs	r2, r3, #3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	3208      	adds	r2, #8
 8005b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b40:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005b42:	69fb      	ldr	r3, [r7, #28]
 8005b44:	f003 0307 	and.w	r3, r3, #7
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	220f      	movs	r2, #15
 8005b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b50:	43db      	mvns	r3, r3
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	4013      	ands	r3, r2
 8005b56:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	691a      	ldr	r2, [r3, #16]
 8005b5c:	69fb      	ldr	r3, [r7, #28]
 8005b5e:	f003 0307 	and.w	r3, r3, #7
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	fa02 f303 	lsl.w	r3, r2, r3
 8005b68:	69ba      	ldr	r2, [r7, #24]
 8005b6a:	4313      	orrs	r3, r2
 8005b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8005b6e:	69fb      	ldr	r3, [r7, #28]
 8005b70:	08da      	lsrs	r2, r3, #3
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	3208      	adds	r2, #8
 8005b76:	69b9      	ldr	r1, [r7, #24]
 8005b78:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8005b82:	69fb      	ldr	r3, [r7, #28]
 8005b84:	005b      	lsls	r3, r3, #1
 8005b86:	2203      	movs	r2, #3
 8005b88:	fa02 f303 	lsl.w	r3, r2, r3
 8005b8c:	43db      	mvns	r3, r3
 8005b8e:	69ba      	ldr	r2, [r7, #24]
 8005b90:	4013      	ands	r3, r2
 8005b92:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	685b      	ldr	r3, [r3, #4]
 8005b98:	f003 0203 	and.w	r2, r3, #3
 8005b9c:	69fb      	ldr	r3, [r7, #28]
 8005b9e:	005b      	lsls	r3, r3, #1
 8005ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ba4:	69ba      	ldr	r2, [r7, #24]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	69ba      	ldr	r2, [r7, #24]
 8005bae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	685b      	ldr	r3, [r3, #4]
 8005bb4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f000 80b4 	beq.w	8005d26 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	60fb      	str	r3, [r7, #12]
 8005bc2:	4b60      	ldr	r3, [pc, #384]	@ (8005d44 <HAL_GPIO_Init+0x30c>)
 8005bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bc6:	4a5f      	ldr	r2, [pc, #380]	@ (8005d44 <HAL_GPIO_Init+0x30c>)
 8005bc8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005bcc:	6453      	str	r3, [r2, #68]	@ 0x44
 8005bce:	4b5d      	ldr	r3, [pc, #372]	@ (8005d44 <HAL_GPIO_Init+0x30c>)
 8005bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005bd2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005bd6:	60fb      	str	r3, [r7, #12]
 8005bd8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005bda:	4a5b      	ldr	r2, [pc, #364]	@ (8005d48 <HAL_GPIO_Init+0x310>)
 8005bdc:	69fb      	ldr	r3, [r7, #28]
 8005bde:	089b      	lsrs	r3, r3, #2
 8005be0:	3302      	adds	r3, #2
 8005be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005be6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005be8:	69fb      	ldr	r3, [r7, #28]
 8005bea:	f003 0303 	and.w	r3, r3, #3
 8005bee:	009b      	lsls	r3, r3, #2
 8005bf0:	220f      	movs	r2, #15
 8005bf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005bf6:	43db      	mvns	r3, r3
 8005bf8:	69ba      	ldr	r2, [r7, #24]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a52      	ldr	r2, [pc, #328]	@ (8005d4c <HAL_GPIO_Init+0x314>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d02b      	beq.n	8005c5e <HAL_GPIO_Init+0x226>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a51      	ldr	r2, [pc, #324]	@ (8005d50 <HAL_GPIO_Init+0x318>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d025      	beq.n	8005c5a <HAL_GPIO_Init+0x222>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	4a50      	ldr	r2, [pc, #320]	@ (8005d54 <HAL_GPIO_Init+0x31c>)
 8005c12:	4293      	cmp	r3, r2
 8005c14:	d01f      	beq.n	8005c56 <HAL_GPIO_Init+0x21e>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	4a4f      	ldr	r2, [pc, #316]	@ (8005d58 <HAL_GPIO_Init+0x320>)
 8005c1a:	4293      	cmp	r3, r2
 8005c1c:	d019      	beq.n	8005c52 <HAL_GPIO_Init+0x21a>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	4a4e      	ldr	r2, [pc, #312]	@ (8005d5c <HAL_GPIO_Init+0x324>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d013      	beq.n	8005c4e <HAL_GPIO_Init+0x216>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	4a4d      	ldr	r2, [pc, #308]	@ (8005d60 <HAL_GPIO_Init+0x328>)
 8005c2a:	4293      	cmp	r3, r2
 8005c2c:	d00d      	beq.n	8005c4a <HAL_GPIO_Init+0x212>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	4a4c      	ldr	r2, [pc, #304]	@ (8005d64 <HAL_GPIO_Init+0x32c>)
 8005c32:	4293      	cmp	r3, r2
 8005c34:	d007      	beq.n	8005c46 <HAL_GPIO_Init+0x20e>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	4a4b      	ldr	r2, [pc, #300]	@ (8005d68 <HAL_GPIO_Init+0x330>)
 8005c3a:	4293      	cmp	r3, r2
 8005c3c:	d101      	bne.n	8005c42 <HAL_GPIO_Init+0x20a>
 8005c3e:	2307      	movs	r3, #7
 8005c40:	e00e      	b.n	8005c60 <HAL_GPIO_Init+0x228>
 8005c42:	2308      	movs	r3, #8
 8005c44:	e00c      	b.n	8005c60 <HAL_GPIO_Init+0x228>
 8005c46:	2306      	movs	r3, #6
 8005c48:	e00a      	b.n	8005c60 <HAL_GPIO_Init+0x228>
 8005c4a:	2305      	movs	r3, #5
 8005c4c:	e008      	b.n	8005c60 <HAL_GPIO_Init+0x228>
 8005c4e:	2304      	movs	r3, #4
 8005c50:	e006      	b.n	8005c60 <HAL_GPIO_Init+0x228>
 8005c52:	2303      	movs	r3, #3
 8005c54:	e004      	b.n	8005c60 <HAL_GPIO_Init+0x228>
 8005c56:	2302      	movs	r3, #2
 8005c58:	e002      	b.n	8005c60 <HAL_GPIO_Init+0x228>
 8005c5a:	2301      	movs	r3, #1
 8005c5c:	e000      	b.n	8005c60 <HAL_GPIO_Init+0x228>
 8005c5e:	2300      	movs	r3, #0
 8005c60:	69fa      	ldr	r2, [r7, #28]
 8005c62:	f002 0203 	and.w	r2, r2, #3
 8005c66:	0092      	lsls	r2, r2, #2
 8005c68:	4093      	lsls	r3, r2
 8005c6a:	69ba      	ldr	r2, [r7, #24]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005c70:	4935      	ldr	r1, [pc, #212]	@ (8005d48 <HAL_GPIO_Init+0x310>)
 8005c72:	69fb      	ldr	r3, [r7, #28]
 8005c74:	089b      	lsrs	r3, r3, #2
 8005c76:	3302      	adds	r3, #2
 8005c78:	69ba      	ldr	r2, [r7, #24]
 8005c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005c7e:	4b3b      	ldr	r3, [pc, #236]	@ (8005d6c <HAL_GPIO_Init+0x334>)
 8005c80:	689b      	ldr	r3, [r3, #8]
 8005c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005c84:	693b      	ldr	r3, [r7, #16]
 8005c86:	43db      	mvns	r3, r3
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	4013      	ands	r3, r2
 8005c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	685b      	ldr	r3, [r3, #4]
 8005c92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d003      	beq.n	8005ca2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005c9a:	69ba      	ldr	r2, [r7, #24]
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005ca2:	4a32      	ldr	r2, [pc, #200]	@ (8005d6c <HAL_GPIO_Init+0x334>)
 8005ca4:	69bb      	ldr	r3, [r7, #24]
 8005ca6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005ca8:	4b30      	ldr	r3, [pc, #192]	@ (8005d6c <HAL_GPIO_Init+0x334>)
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	43db      	mvns	r3, r3
 8005cb2:	69ba      	ldr	r2, [r7, #24]
 8005cb4:	4013      	ands	r3, r2
 8005cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	685b      	ldr	r3, [r3, #4]
 8005cbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d003      	beq.n	8005ccc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005cc4:	69ba      	ldr	r2, [r7, #24]
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005ccc:	4a27      	ldr	r2, [pc, #156]	@ (8005d6c <HAL_GPIO_Init+0x334>)
 8005cce:	69bb      	ldr	r3, [r7, #24]
 8005cd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005cd2:	4b26      	ldr	r3, [pc, #152]	@ (8005d6c <HAL_GPIO_Init+0x334>)
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005cd8:	693b      	ldr	r3, [r7, #16]
 8005cda:	43db      	mvns	r3, r3
 8005cdc:	69ba      	ldr	r2, [r7, #24]
 8005cde:	4013      	ands	r3, r2
 8005ce0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	685b      	ldr	r3, [r3, #4]
 8005ce6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d003      	beq.n	8005cf6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005cee:	69ba      	ldr	r2, [r7, #24]
 8005cf0:	693b      	ldr	r3, [r7, #16]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005cf6:	4a1d      	ldr	r2, [pc, #116]	@ (8005d6c <HAL_GPIO_Init+0x334>)
 8005cf8:	69bb      	ldr	r3, [r7, #24]
 8005cfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005cfc:	4b1b      	ldr	r3, [pc, #108]	@ (8005d6c <HAL_GPIO_Init+0x334>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005d02:	693b      	ldr	r3, [r7, #16]
 8005d04:	43db      	mvns	r3, r3
 8005d06:	69ba      	ldr	r2, [r7, #24]
 8005d08:	4013      	ands	r3, r2
 8005d0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005d0c:	683b      	ldr	r3, [r7, #0]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d003      	beq.n	8005d20 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005d18:	69ba      	ldr	r2, [r7, #24]
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005d20:	4a12      	ldr	r2, [pc, #72]	@ (8005d6c <HAL_GPIO_Init+0x334>)
 8005d22:	69bb      	ldr	r3, [r7, #24]
 8005d24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005d26:	69fb      	ldr	r3, [r7, #28]
 8005d28:	3301      	adds	r3, #1
 8005d2a:	61fb      	str	r3, [r7, #28]
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	2b0f      	cmp	r3, #15
 8005d30:	f67f ae90 	bls.w	8005a54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005d34:	bf00      	nop
 8005d36:	bf00      	nop
 8005d38:	3724      	adds	r7, #36	@ 0x24
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr
 8005d42:	bf00      	nop
 8005d44:	40023800 	.word	0x40023800
 8005d48:	40013800 	.word	0x40013800
 8005d4c:	40020000 	.word	0x40020000
 8005d50:	40020400 	.word	0x40020400
 8005d54:	40020800 	.word	0x40020800
 8005d58:	40020c00 	.word	0x40020c00
 8005d5c:	40021000 	.word	0x40021000
 8005d60:	40021400 	.word	0x40021400
 8005d64:	40021800 	.word	0x40021800
 8005d68:	40021c00 	.word	0x40021c00
 8005d6c:	40013c00 	.word	0x40013c00

08005d70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	460b      	mov	r3, r1
 8005d7a:	807b      	strh	r3, [r7, #2]
 8005d7c:	4613      	mov	r3, r2
 8005d7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005d80:	787b      	ldrb	r3, [r7, #1]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d003      	beq.n	8005d8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005d86:	887a      	ldrh	r2, [r7, #2]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005d8c:	e003      	b.n	8005d96 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005d8e:	887b      	ldrh	r3, [r7, #2]
 8005d90:	041a      	lsls	r2, r3, #16
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	619a      	str	r2, [r3, #24]
}
 8005d96:	bf00      	nop
 8005d98:	370c      	adds	r7, #12
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr

08005da2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005da2:	b480      	push	{r7}
 8005da4:	b085      	sub	sp, #20
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	6078      	str	r0, [r7, #4]
 8005daa:	460b      	mov	r3, r1
 8005dac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	695b      	ldr	r3, [r3, #20]
 8005db2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005db4:	887a      	ldrh	r2, [r7, #2]
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	4013      	ands	r3, r2
 8005dba:	041a      	lsls	r2, r3, #16
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	43d9      	mvns	r1, r3
 8005dc0:	887b      	ldrh	r3, [r7, #2]
 8005dc2:	400b      	ands	r3, r1
 8005dc4:	431a      	orrs	r2, r3
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	619a      	str	r2, [r3, #24]
}
 8005dca:	bf00      	nop
 8005dcc:	3714      	adds	r7, #20
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd4:	4770      	bx	lr

08005dd6 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8005dd6:	b580      	push	{r7, lr}
 8005dd8:	b086      	sub	sp, #24
 8005dda:	af02      	add	r7, sp, #8
 8005ddc:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d101      	bne.n	8005de8 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e059      	b.n	8005e9c <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8005df4:	b2db      	uxtb	r3, r3
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d106      	bne.n	8005e08 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2200      	movs	r2, #0
 8005dfe:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f006 fe36 	bl	800ca74 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2203      	movs	r2, #3
 8005e0c:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8005e16:	d102      	bne.n	8005e1e <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2200      	movs	r2, #0
 8005e1c:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	4618      	mov	r0, r3
 8005e24:	f003 fc50 	bl	80096c8 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6818      	ldr	r0, [r3, #0]
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	7c1a      	ldrb	r2, [r3, #16]
 8005e30:	f88d 2000 	strb.w	r2, [sp]
 8005e34:	3304      	adds	r3, #4
 8005e36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e38:	f003 fbd1 	bl	80095de <USB_CoreInit>
 8005e3c:	4603      	mov	r3, r0
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d005      	beq.n	8005e4e <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2202      	movs	r2, #2
 8005e46:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	e026      	b.n	8005e9c <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2101      	movs	r1, #1
 8005e54:	4618      	mov	r0, r3
 8005e56:	f003 fc48 	bl	80096ea <USB_SetCurrentMode>
 8005e5a:	4603      	mov	r3, r0
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d005      	beq.n	8005e6c <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2202      	movs	r2, #2
 8005e64:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e017      	b.n	8005e9c <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	6818      	ldr	r0, [r3, #0]
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	7c1a      	ldrb	r2, [r3, #16]
 8005e74:	f88d 2000 	strb.w	r2, [sp]
 8005e78:	3304      	adds	r3, #4
 8005e7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005e7c:	f003 fdea 	bl	8009a54 <USB_HostInit>
 8005e80:	4603      	mov	r3, r0
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d005      	beq.n	8005e92 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2202      	movs	r2, #2
 8005e8a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	e004      	b.n	8005e9c <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3710      	adds	r7, #16
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8005ea4:	b590      	push	{r4, r7, lr}
 8005ea6:	b08b      	sub	sp, #44	@ 0x2c
 8005ea8:	af04      	add	r7, sp, #16
 8005eaa:	6078      	str	r0, [r7, #4]
 8005eac:	4608      	mov	r0, r1
 8005eae:	4611      	mov	r1, r2
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	70fb      	strb	r3, [r7, #3]
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	70bb      	strb	r3, [r7, #2]
 8005eba:	4613      	mov	r3, r2
 8005ebc:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8005ebe:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8005ec0:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d101      	bne.n	8005ed0 <HAL_HCD_HC_Init+0x2c>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	e09d      	b.n	800600c <HAL_HCD_HC_Init+0x168>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8005ed8:	78fa      	ldrb	r2, [r7, #3]
 8005eda:	6879      	ldr	r1, [r7, #4]
 8005edc:	4613      	mov	r3, r2
 8005ede:	011b      	lsls	r3, r3, #4
 8005ee0:	1a9b      	subs	r3, r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	440b      	add	r3, r1
 8005ee6:	3319      	adds	r3, #25
 8005ee8:	2200      	movs	r2, #0
 8005eea:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8005eec:	78fa      	ldrb	r2, [r7, #3]
 8005eee:	6879      	ldr	r1, [r7, #4]
 8005ef0:	4613      	mov	r3, r2
 8005ef2:	011b      	lsls	r3, r3, #4
 8005ef4:	1a9b      	subs	r3, r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	440b      	add	r3, r1
 8005efa:	3314      	adds	r3, #20
 8005efc:	787a      	ldrb	r2, [r7, #1]
 8005efe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8005f00:	78fa      	ldrb	r2, [r7, #3]
 8005f02:	6879      	ldr	r1, [r7, #4]
 8005f04:	4613      	mov	r3, r2
 8005f06:	011b      	lsls	r3, r3, #4
 8005f08:	1a9b      	subs	r3, r3, r2
 8005f0a:	009b      	lsls	r3, r3, #2
 8005f0c:	440b      	add	r3, r1
 8005f0e:	3315      	adds	r3, #21
 8005f10:	78fa      	ldrb	r2, [r7, #3]
 8005f12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8005f14:	78fa      	ldrb	r2, [r7, #3]
 8005f16:	6879      	ldr	r1, [r7, #4]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	011b      	lsls	r3, r3, #4
 8005f1c:	1a9b      	subs	r3, r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	440b      	add	r3, r1
 8005f22:	3326      	adds	r3, #38	@ 0x26
 8005f24:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8005f28:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8005f2a:	78fa      	ldrb	r2, [r7, #3]
 8005f2c:	78bb      	ldrb	r3, [r7, #2]
 8005f2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005f32:	b2d8      	uxtb	r0, r3
 8005f34:	6879      	ldr	r1, [r7, #4]
 8005f36:	4613      	mov	r3, r2
 8005f38:	011b      	lsls	r3, r3, #4
 8005f3a:	1a9b      	subs	r3, r3, r2
 8005f3c:	009b      	lsls	r3, r3, #2
 8005f3e:	440b      	add	r3, r1
 8005f40:	3316      	adds	r3, #22
 8005f42:	4602      	mov	r2, r0
 8005f44:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8005f46:	78fb      	ldrb	r3, [r7, #3]
 8005f48:	4619      	mov	r1, r3
 8005f4a:	6878      	ldr	r0, [r7, #4]
 8005f4c:	f000 fbc8 	bl	80066e0 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8005f50:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	da0a      	bge.n	8005f6e <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8005f58:	78fa      	ldrb	r2, [r7, #3]
 8005f5a:	6879      	ldr	r1, [r7, #4]
 8005f5c:	4613      	mov	r3, r2
 8005f5e:	011b      	lsls	r3, r3, #4
 8005f60:	1a9b      	subs	r3, r3, r2
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	440b      	add	r3, r1
 8005f66:	3317      	adds	r3, #23
 8005f68:	2201      	movs	r2, #1
 8005f6a:	701a      	strb	r2, [r3, #0]
 8005f6c:	e009      	b.n	8005f82 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8005f6e:	78fa      	ldrb	r2, [r7, #3]
 8005f70:	6879      	ldr	r1, [r7, #4]
 8005f72:	4613      	mov	r3, r2
 8005f74:	011b      	lsls	r3, r3, #4
 8005f76:	1a9b      	subs	r3, r3, r2
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	440b      	add	r3, r1
 8005f7c:	3317      	adds	r3, #23
 8005f7e:	2200      	movs	r2, #0
 8005f80:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	4618      	mov	r0, r3
 8005f88:	f003 fec8 	bl	8009d1c <USB_GetHostSpeed>
 8005f8c:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8005f8e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005f92:	2b01      	cmp	r3, #1
 8005f94:	d10b      	bne.n	8005fae <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8005f96:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005f9a:	2b01      	cmp	r3, #1
 8005f9c:	d107      	bne.n	8005fae <HAL_HCD_HC_Init+0x10a>
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d104      	bne.n	8005fae <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	2bbc      	cmp	r3, #188	@ 0xbc
 8005fa8:	d901      	bls.n	8005fae <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8005faa:	23bc      	movs	r3, #188	@ 0xbc
 8005fac:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8005fae:	78fa      	ldrb	r2, [r7, #3]
 8005fb0:	6879      	ldr	r1, [r7, #4]
 8005fb2:	4613      	mov	r3, r2
 8005fb4:	011b      	lsls	r3, r3, #4
 8005fb6:	1a9b      	subs	r3, r3, r2
 8005fb8:	009b      	lsls	r3, r3, #2
 8005fba:	440b      	add	r3, r1
 8005fbc:	3318      	adds	r3, #24
 8005fbe:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8005fc2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8005fc4:	78fa      	ldrb	r2, [r7, #3]
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	b298      	uxth	r0, r3
 8005fca:	6879      	ldr	r1, [r7, #4]
 8005fcc:	4613      	mov	r3, r2
 8005fce:	011b      	lsls	r3, r3, #4
 8005fd0:	1a9b      	subs	r3, r3, r2
 8005fd2:	009b      	lsls	r3, r3, #2
 8005fd4:	440b      	add	r3, r1
 8005fd6:	3328      	adds	r3, #40	@ 0x28
 8005fd8:	4602      	mov	r2, r0
 8005fda:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	6818      	ldr	r0, [r3, #0]
 8005fe0:	697b      	ldr	r3, [r7, #20]
 8005fe2:	b29b      	uxth	r3, r3
 8005fe4:	787c      	ldrb	r4, [r7, #1]
 8005fe6:	78ba      	ldrb	r2, [r7, #2]
 8005fe8:	78f9      	ldrb	r1, [r7, #3]
 8005fea:	9302      	str	r3, [sp, #8]
 8005fec:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8005ff0:	9301      	str	r3, [sp, #4]
 8005ff2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005ff6:	9300      	str	r3, [sp, #0]
 8005ff8:	4623      	mov	r3, r4
 8005ffa:	f003 feb7 	bl	8009d6c <USB_HC_Init>
 8005ffe:	4603      	mov	r3, r0
 8006000:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800600a:	7bfb      	ldrb	r3, [r7, #15]
}
 800600c:	4618      	mov	r0, r3
 800600e:	371c      	adds	r7, #28
 8006010:	46bd      	mov	sp, r7
 8006012:	bd90      	pop	{r4, r7, pc}

08006014 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	b084      	sub	sp, #16
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
 800601c:	460b      	mov	r3, r1
 800601e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8006020:	2300      	movs	r3, #0
 8006022:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800602a:	2b01      	cmp	r3, #1
 800602c:	d101      	bne.n	8006032 <HAL_HCD_HC_Halt+0x1e>
 800602e:	2302      	movs	r3, #2
 8006030:	e00f      	b.n	8006052 <HAL_HCD_HC_Halt+0x3e>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2201      	movs	r2, #1
 8006036:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	78fa      	ldrb	r2, [r7, #3]
 8006040:	4611      	mov	r1, r2
 8006042:	4618      	mov	r0, r3
 8006044:	f004 fa49 	bl	800a4da <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2200      	movs	r2, #0
 800604c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8006050:	7bfb      	ldrb	r3, [r7, #15]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3710      	adds	r7, #16
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
	...

0800605c <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b082      	sub	sp, #8
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	4608      	mov	r0, r1
 8006066:	4611      	mov	r1, r2
 8006068:	461a      	mov	r2, r3
 800606a:	4603      	mov	r3, r0
 800606c:	70fb      	strb	r3, [r7, #3]
 800606e:	460b      	mov	r3, r1
 8006070:	70bb      	strb	r3, [r7, #2]
 8006072:	4613      	mov	r3, r2
 8006074:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8006076:	78fa      	ldrb	r2, [r7, #3]
 8006078:	6879      	ldr	r1, [r7, #4]
 800607a:	4613      	mov	r3, r2
 800607c:	011b      	lsls	r3, r3, #4
 800607e:	1a9b      	subs	r3, r3, r2
 8006080:	009b      	lsls	r3, r3, #2
 8006082:	440b      	add	r3, r1
 8006084:	3317      	adds	r3, #23
 8006086:	78ba      	ldrb	r2, [r7, #2]
 8006088:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 800608a:	78fa      	ldrb	r2, [r7, #3]
 800608c:	6879      	ldr	r1, [r7, #4]
 800608e:	4613      	mov	r3, r2
 8006090:	011b      	lsls	r3, r3, #4
 8006092:	1a9b      	subs	r3, r3, r2
 8006094:	009b      	lsls	r3, r3, #2
 8006096:	440b      	add	r3, r1
 8006098:	3326      	adds	r3, #38	@ 0x26
 800609a:	787a      	ldrb	r2, [r7, #1]
 800609c:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800609e:	7c3b      	ldrb	r3, [r7, #16]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d114      	bne.n	80060ce <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80060a4:	78fa      	ldrb	r2, [r7, #3]
 80060a6:	6879      	ldr	r1, [r7, #4]
 80060a8:	4613      	mov	r3, r2
 80060aa:	011b      	lsls	r3, r3, #4
 80060ac:	1a9b      	subs	r3, r3, r2
 80060ae:	009b      	lsls	r3, r3, #2
 80060b0:	440b      	add	r3, r1
 80060b2:	332a      	adds	r3, #42	@ 0x2a
 80060b4:	2203      	movs	r2, #3
 80060b6:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80060b8:	78fa      	ldrb	r2, [r7, #3]
 80060ba:	6879      	ldr	r1, [r7, #4]
 80060bc:	4613      	mov	r3, r2
 80060be:	011b      	lsls	r3, r3, #4
 80060c0:	1a9b      	subs	r3, r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	440b      	add	r3, r1
 80060c6:	3319      	adds	r3, #25
 80060c8:	7f3a      	ldrb	r2, [r7, #28]
 80060ca:	701a      	strb	r2, [r3, #0]
 80060cc:	e009      	b.n	80060e2 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80060ce:	78fa      	ldrb	r2, [r7, #3]
 80060d0:	6879      	ldr	r1, [r7, #4]
 80060d2:	4613      	mov	r3, r2
 80060d4:	011b      	lsls	r3, r3, #4
 80060d6:	1a9b      	subs	r3, r3, r2
 80060d8:	009b      	lsls	r3, r3, #2
 80060da:	440b      	add	r3, r1
 80060dc:	332a      	adds	r3, #42	@ 0x2a
 80060de:	2202      	movs	r2, #2
 80060e0:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80060e2:	787b      	ldrb	r3, [r7, #1]
 80060e4:	2b03      	cmp	r3, #3
 80060e6:	f200 8102 	bhi.w	80062ee <HAL_HCD_HC_SubmitRequest+0x292>
 80060ea:	a201      	add	r2, pc, #4	@ (adr r2, 80060f0 <HAL_HCD_HC_SubmitRequest+0x94>)
 80060ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060f0:	08006101 	.word	0x08006101
 80060f4:	080062d9 	.word	0x080062d9
 80060f8:	080061c5 	.word	0x080061c5
 80060fc:	0800624f 	.word	0x0800624f
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8006100:	7c3b      	ldrb	r3, [r7, #16]
 8006102:	2b01      	cmp	r3, #1
 8006104:	f040 80f5 	bne.w	80062f2 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 8006108:	78bb      	ldrb	r3, [r7, #2]
 800610a:	2b00      	cmp	r3, #0
 800610c:	d12d      	bne.n	800616a <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 800610e:	8b3b      	ldrh	r3, [r7, #24]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d109      	bne.n	8006128 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8006114:	78fa      	ldrb	r2, [r7, #3]
 8006116:	6879      	ldr	r1, [r7, #4]
 8006118:	4613      	mov	r3, r2
 800611a:	011b      	lsls	r3, r3, #4
 800611c:	1a9b      	subs	r3, r3, r2
 800611e:	009b      	lsls	r3, r3, #2
 8006120:	440b      	add	r3, r1
 8006122:	333d      	adds	r3, #61	@ 0x3d
 8006124:	2201      	movs	r2, #1
 8006126:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 8006128:	78fa      	ldrb	r2, [r7, #3]
 800612a:	6879      	ldr	r1, [r7, #4]
 800612c:	4613      	mov	r3, r2
 800612e:	011b      	lsls	r3, r3, #4
 8006130:	1a9b      	subs	r3, r3, r2
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	440b      	add	r3, r1
 8006136:	333d      	adds	r3, #61	@ 0x3d
 8006138:	781b      	ldrb	r3, [r3, #0]
 800613a:	2b00      	cmp	r3, #0
 800613c:	d10a      	bne.n	8006154 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800613e:	78fa      	ldrb	r2, [r7, #3]
 8006140:	6879      	ldr	r1, [r7, #4]
 8006142:	4613      	mov	r3, r2
 8006144:	011b      	lsls	r3, r3, #4
 8006146:	1a9b      	subs	r3, r3, r2
 8006148:	009b      	lsls	r3, r3, #2
 800614a:	440b      	add	r3, r1
 800614c:	332a      	adds	r3, #42	@ 0x2a
 800614e:	2200      	movs	r2, #0
 8006150:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8006152:	e0ce      	b.n	80062f2 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006154:	78fa      	ldrb	r2, [r7, #3]
 8006156:	6879      	ldr	r1, [r7, #4]
 8006158:	4613      	mov	r3, r2
 800615a:	011b      	lsls	r3, r3, #4
 800615c:	1a9b      	subs	r3, r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	440b      	add	r3, r1
 8006162:	332a      	adds	r3, #42	@ 0x2a
 8006164:	2202      	movs	r2, #2
 8006166:	701a      	strb	r2, [r3, #0]
      break;
 8006168:	e0c3      	b.n	80062f2 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 800616a:	78fa      	ldrb	r2, [r7, #3]
 800616c:	6879      	ldr	r1, [r7, #4]
 800616e:	4613      	mov	r3, r2
 8006170:	011b      	lsls	r3, r3, #4
 8006172:	1a9b      	subs	r3, r3, r2
 8006174:	009b      	lsls	r3, r3, #2
 8006176:	440b      	add	r3, r1
 8006178:	331a      	adds	r3, #26
 800617a:	781b      	ldrb	r3, [r3, #0]
 800617c:	2b01      	cmp	r3, #1
 800617e:	f040 80b8 	bne.w	80062f2 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 8006182:	78fa      	ldrb	r2, [r7, #3]
 8006184:	6879      	ldr	r1, [r7, #4]
 8006186:	4613      	mov	r3, r2
 8006188:	011b      	lsls	r3, r3, #4
 800618a:	1a9b      	subs	r3, r3, r2
 800618c:	009b      	lsls	r3, r3, #2
 800618e:	440b      	add	r3, r1
 8006190:	333c      	adds	r3, #60	@ 0x3c
 8006192:	781b      	ldrb	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d10a      	bne.n	80061ae <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006198:	78fa      	ldrb	r2, [r7, #3]
 800619a:	6879      	ldr	r1, [r7, #4]
 800619c:	4613      	mov	r3, r2
 800619e:	011b      	lsls	r3, r3, #4
 80061a0:	1a9b      	subs	r3, r3, r2
 80061a2:	009b      	lsls	r3, r3, #2
 80061a4:	440b      	add	r3, r1
 80061a6:	332a      	adds	r3, #42	@ 0x2a
 80061a8:	2200      	movs	r2, #0
 80061aa:	701a      	strb	r2, [r3, #0]
      break;
 80061ac:	e0a1      	b.n	80062f2 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80061ae:	78fa      	ldrb	r2, [r7, #3]
 80061b0:	6879      	ldr	r1, [r7, #4]
 80061b2:	4613      	mov	r3, r2
 80061b4:	011b      	lsls	r3, r3, #4
 80061b6:	1a9b      	subs	r3, r3, r2
 80061b8:	009b      	lsls	r3, r3, #2
 80061ba:	440b      	add	r3, r1
 80061bc:	332a      	adds	r3, #42	@ 0x2a
 80061be:	2202      	movs	r2, #2
 80061c0:	701a      	strb	r2, [r3, #0]
      break;
 80061c2:	e096      	b.n	80062f2 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 80061c4:	78bb      	ldrb	r3, [r7, #2]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d120      	bne.n	800620c <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80061ca:	78fa      	ldrb	r2, [r7, #3]
 80061cc:	6879      	ldr	r1, [r7, #4]
 80061ce:	4613      	mov	r3, r2
 80061d0:	011b      	lsls	r3, r3, #4
 80061d2:	1a9b      	subs	r3, r3, r2
 80061d4:	009b      	lsls	r3, r3, #2
 80061d6:	440b      	add	r3, r1
 80061d8:	333d      	adds	r3, #61	@ 0x3d
 80061da:	781b      	ldrb	r3, [r3, #0]
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d10a      	bne.n	80061f6 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80061e0:	78fa      	ldrb	r2, [r7, #3]
 80061e2:	6879      	ldr	r1, [r7, #4]
 80061e4:	4613      	mov	r3, r2
 80061e6:	011b      	lsls	r3, r3, #4
 80061e8:	1a9b      	subs	r3, r3, r2
 80061ea:	009b      	lsls	r3, r3, #2
 80061ec:	440b      	add	r3, r1
 80061ee:	332a      	adds	r3, #42	@ 0x2a
 80061f0:	2200      	movs	r2, #0
 80061f2:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 80061f4:	e07e      	b.n	80062f4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80061f6:	78fa      	ldrb	r2, [r7, #3]
 80061f8:	6879      	ldr	r1, [r7, #4]
 80061fa:	4613      	mov	r3, r2
 80061fc:	011b      	lsls	r3, r3, #4
 80061fe:	1a9b      	subs	r3, r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	440b      	add	r3, r1
 8006204:	332a      	adds	r3, #42	@ 0x2a
 8006206:	2202      	movs	r2, #2
 8006208:	701a      	strb	r2, [r3, #0]
      break;
 800620a:	e073      	b.n	80062f4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800620c:	78fa      	ldrb	r2, [r7, #3]
 800620e:	6879      	ldr	r1, [r7, #4]
 8006210:	4613      	mov	r3, r2
 8006212:	011b      	lsls	r3, r3, #4
 8006214:	1a9b      	subs	r3, r3, r2
 8006216:	009b      	lsls	r3, r3, #2
 8006218:	440b      	add	r3, r1
 800621a:	333c      	adds	r3, #60	@ 0x3c
 800621c:	781b      	ldrb	r3, [r3, #0]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d10a      	bne.n	8006238 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8006222:	78fa      	ldrb	r2, [r7, #3]
 8006224:	6879      	ldr	r1, [r7, #4]
 8006226:	4613      	mov	r3, r2
 8006228:	011b      	lsls	r3, r3, #4
 800622a:	1a9b      	subs	r3, r3, r2
 800622c:	009b      	lsls	r3, r3, #2
 800622e:	440b      	add	r3, r1
 8006230:	332a      	adds	r3, #42	@ 0x2a
 8006232:	2200      	movs	r2, #0
 8006234:	701a      	strb	r2, [r3, #0]
      break;
 8006236:	e05d      	b.n	80062f4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006238:	78fa      	ldrb	r2, [r7, #3]
 800623a:	6879      	ldr	r1, [r7, #4]
 800623c:	4613      	mov	r3, r2
 800623e:	011b      	lsls	r3, r3, #4
 8006240:	1a9b      	subs	r3, r3, r2
 8006242:	009b      	lsls	r3, r3, #2
 8006244:	440b      	add	r3, r1
 8006246:	332a      	adds	r3, #42	@ 0x2a
 8006248:	2202      	movs	r2, #2
 800624a:	701a      	strb	r2, [r3, #0]
      break;
 800624c:	e052      	b.n	80062f4 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 800624e:	78bb      	ldrb	r3, [r7, #2]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d120      	bne.n	8006296 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8006254:	78fa      	ldrb	r2, [r7, #3]
 8006256:	6879      	ldr	r1, [r7, #4]
 8006258:	4613      	mov	r3, r2
 800625a:	011b      	lsls	r3, r3, #4
 800625c:	1a9b      	subs	r3, r3, r2
 800625e:	009b      	lsls	r3, r3, #2
 8006260:	440b      	add	r3, r1
 8006262:	333d      	adds	r3, #61	@ 0x3d
 8006264:	781b      	ldrb	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d10a      	bne.n	8006280 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800626a:	78fa      	ldrb	r2, [r7, #3]
 800626c:	6879      	ldr	r1, [r7, #4]
 800626e:	4613      	mov	r3, r2
 8006270:	011b      	lsls	r3, r3, #4
 8006272:	1a9b      	subs	r3, r3, r2
 8006274:	009b      	lsls	r3, r3, #2
 8006276:	440b      	add	r3, r1
 8006278:	332a      	adds	r3, #42	@ 0x2a
 800627a:	2200      	movs	r2, #0
 800627c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800627e:	e039      	b.n	80062f4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8006280:	78fa      	ldrb	r2, [r7, #3]
 8006282:	6879      	ldr	r1, [r7, #4]
 8006284:	4613      	mov	r3, r2
 8006286:	011b      	lsls	r3, r3, #4
 8006288:	1a9b      	subs	r3, r3, r2
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	440b      	add	r3, r1
 800628e:	332a      	adds	r3, #42	@ 0x2a
 8006290:	2202      	movs	r2, #2
 8006292:	701a      	strb	r2, [r3, #0]
      break;
 8006294:	e02e      	b.n	80062f4 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8006296:	78fa      	ldrb	r2, [r7, #3]
 8006298:	6879      	ldr	r1, [r7, #4]
 800629a:	4613      	mov	r3, r2
 800629c:	011b      	lsls	r3, r3, #4
 800629e:	1a9b      	subs	r3, r3, r2
 80062a0:	009b      	lsls	r3, r3, #2
 80062a2:	440b      	add	r3, r1
 80062a4:	333c      	adds	r3, #60	@ 0x3c
 80062a6:	781b      	ldrb	r3, [r3, #0]
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d10a      	bne.n	80062c2 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80062ac:	78fa      	ldrb	r2, [r7, #3]
 80062ae:	6879      	ldr	r1, [r7, #4]
 80062b0:	4613      	mov	r3, r2
 80062b2:	011b      	lsls	r3, r3, #4
 80062b4:	1a9b      	subs	r3, r3, r2
 80062b6:	009b      	lsls	r3, r3, #2
 80062b8:	440b      	add	r3, r1
 80062ba:	332a      	adds	r3, #42	@ 0x2a
 80062bc:	2200      	movs	r2, #0
 80062be:	701a      	strb	r2, [r3, #0]
      break;
 80062c0:	e018      	b.n	80062f4 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80062c2:	78fa      	ldrb	r2, [r7, #3]
 80062c4:	6879      	ldr	r1, [r7, #4]
 80062c6:	4613      	mov	r3, r2
 80062c8:	011b      	lsls	r3, r3, #4
 80062ca:	1a9b      	subs	r3, r3, r2
 80062cc:	009b      	lsls	r3, r3, #2
 80062ce:	440b      	add	r3, r1
 80062d0:	332a      	adds	r3, #42	@ 0x2a
 80062d2:	2202      	movs	r2, #2
 80062d4:	701a      	strb	r2, [r3, #0]
      break;
 80062d6:	e00d      	b.n	80062f4 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80062d8:	78fa      	ldrb	r2, [r7, #3]
 80062da:	6879      	ldr	r1, [r7, #4]
 80062dc:	4613      	mov	r3, r2
 80062de:	011b      	lsls	r3, r3, #4
 80062e0:	1a9b      	subs	r3, r3, r2
 80062e2:	009b      	lsls	r3, r3, #2
 80062e4:	440b      	add	r3, r1
 80062e6:	332a      	adds	r3, #42	@ 0x2a
 80062e8:	2200      	movs	r2, #0
 80062ea:	701a      	strb	r2, [r3, #0]
      break;
 80062ec:	e002      	b.n	80062f4 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 80062ee:	bf00      	nop
 80062f0:	e000      	b.n	80062f4 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 80062f2:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 80062f4:	78fa      	ldrb	r2, [r7, #3]
 80062f6:	6879      	ldr	r1, [r7, #4]
 80062f8:	4613      	mov	r3, r2
 80062fa:	011b      	lsls	r3, r3, #4
 80062fc:	1a9b      	subs	r3, r3, r2
 80062fe:	009b      	lsls	r3, r3, #2
 8006300:	440b      	add	r3, r1
 8006302:	332c      	adds	r3, #44	@ 0x2c
 8006304:	697a      	ldr	r2, [r7, #20]
 8006306:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8006308:	78fa      	ldrb	r2, [r7, #3]
 800630a:	8b39      	ldrh	r1, [r7, #24]
 800630c:	6878      	ldr	r0, [r7, #4]
 800630e:	4613      	mov	r3, r2
 8006310:	011b      	lsls	r3, r3, #4
 8006312:	1a9b      	subs	r3, r3, r2
 8006314:	009b      	lsls	r3, r3, #2
 8006316:	4403      	add	r3, r0
 8006318:	3334      	adds	r3, #52	@ 0x34
 800631a:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800631c:	78fa      	ldrb	r2, [r7, #3]
 800631e:	6879      	ldr	r1, [r7, #4]
 8006320:	4613      	mov	r3, r2
 8006322:	011b      	lsls	r3, r3, #4
 8006324:	1a9b      	subs	r3, r3, r2
 8006326:	009b      	lsls	r3, r3, #2
 8006328:	440b      	add	r3, r1
 800632a:	334c      	adds	r3, #76	@ 0x4c
 800632c:	2200      	movs	r2, #0
 800632e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8006330:	78fa      	ldrb	r2, [r7, #3]
 8006332:	6879      	ldr	r1, [r7, #4]
 8006334:	4613      	mov	r3, r2
 8006336:	011b      	lsls	r3, r3, #4
 8006338:	1a9b      	subs	r3, r3, r2
 800633a:	009b      	lsls	r3, r3, #2
 800633c:	440b      	add	r3, r1
 800633e:	3338      	adds	r3, #56	@ 0x38
 8006340:	2200      	movs	r2, #0
 8006342:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8006344:	78fa      	ldrb	r2, [r7, #3]
 8006346:	6879      	ldr	r1, [r7, #4]
 8006348:	4613      	mov	r3, r2
 800634a:	011b      	lsls	r3, r3, #4
 800634c:	1a9b      	subs	r3, r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	440b      	add	r3, r1
 8006352:	3315      	adds	r3, #21
 8006354:	78fa      	ldrb	r2, [r7, #3]
 8006356:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8006358:	78fa      	ldrb	r2, [r7, #3]
 800635a:	6879      	ldr	r1, [r7, #4]
 800635c:	4613      	mov	r3, r2
 800635e:	011b      	lsls	r3, r3, #4
 8006360:	1a9b      	subs	r3, r3, r2
 8006362:	009b      	lsls	r3, r3, #2
 8006364:	440b      	add	r3, r1
 8006366:	334d      	adds	r3, #77	@ 0x4d
 8006368:	2200      	movs	r2, #0
 800636a:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6818      	ldr	r0, [r3, #0]
 8006370:	78fa      	ldrb	r2, [r7, #3]
 8006372:	4613      	mov	r3, r2
 8006374:	011b      	lsls	r3, r3, #4
 8006376:	1a9b      	subs	r3, r3, r2
 8006378:	009b      	lsls	r3, r3, #2
 800637a:	3310      	adds	r3, #16
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	4413      	add	r3, r2
 8006380:	1d19      	adds	r1, r3, #4
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	799b      	ldrb	r3, [r3, #6]
 8006386:	461a      	mov	r2, r3
 8006388:	f003 fe1c 	bl	8009fc4 <USB_HC_StartXfer>
 800638c:	4603      	mov	r3, r0
}
 800638e:	4618      	mov	r0, r3
 8006390:	3708      	adds	r7, #8
 8006392:	46bd      	mov	sp, r7
 8006394:	bd80      	pop	{r7, pc}
 8006396:	bf00      	nop

08006398 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80063a6:	693b      	ldr	r3, [r7, #16]
 80063a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	4618      	mov	r0, r3
 80063b0:	f003 fb11 	bl	80099d6 <USB_GetMode>
 80063b4:	4603      	mov	r3, r0
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	f040 80fb 	bne.w	80065b2 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4618      	mov	r0, r3
 80063c2:	f003 fad4 	bl	800996e <USB_ReadInterrupts>
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	f000 80f1 	beq.w	80065b0 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	4618      	mov	r0, r3
 80063d4:	f003 facb 	bl	800996e <USB_ReadInterrupts>
 80063d8:	4603      	mov	r3, r0
 80063da:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80063de:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80063e2:	d104      	bne.n	80063ee <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80063ec:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	4618      	mov	r0, r3
 80063f4:	f003 fabb 	bl	800996e <USB_ReadInterrupts>
 80063f8:	4603      	mov	r3, r0
 80063fa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063fe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006402:	d104      	bne.n	800640e <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 800640c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	4618      	mov	r0, r3
 8006414:	f003 faab 	bl	800996e <USB_ReadInterrupts>
 8006418:	4603      	mov	r3, r0
 800641a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800641e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8006422:	d104      	bne.n	800642e <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 800642c:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	4618      	mov	r0, r3
 8006434:	f003 fa9b 	bl	800996e <USB_ReadInterrupts>
 8006438:	4603      	mov	r3, r0
 800643a:	f003 0302 	and.w	r3, r3, #2
 800643e:	2b02      	cmp	r3, #2
 8006440:	d103      	bne.n	800644a <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	2202      	movs	r2, #2
 8006448:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	4618      	mov	r0, r3
 8006450:	f003 fa8d 	bl	800996e <USB_ReadInterrupts>
 8006454:	4603      	mov	r3, r0
 8006456:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800645a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800645e:	d120      	bne.n	80064a2 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8006468:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	2b00      	cmp	r3, #0
 8006478:	d113      	bne.n	80064a2 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 800647a:	2110      	movs	r1, #16
 800647c:	6938      	ldr	r0, [r7, #16]
 800647e:	f003 f980 	bl	8009782 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8006482:	6938      	ldr	r0, [r7, #16]
 8006484:	f003 f9af 	bl	80097e6 <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	7a5b      	ldrb	r3, [r3, #9]
 800648c:	2b02      	cmp	r3, #2
 800648e:	d105      	bne.n	800649c <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	2101      	movs	r1, #1
 8006496:	4618      	mov	r0, r3
 8006498:	f003 fba0 	bl	8009bdc <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f006 fb67 	bl	800cb70 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	4618      	mov	r0, r3
 80064a8:	f003 fa61 	bl	800996e <USB_ReadInterrupts>
 80064ac:	4603      	mov	r3, r0
 80064ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80064b2:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80064b6:	d102      	bne.n	80064be <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f001 fd4d 	bl	8007f58 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	4618      	mov	r0, r3
 80064c4:	f003 fa53 	bl	800996e <USB_ReadInterrupts>
 80064c8:	4603      	mov	r3, r0
 80064ca:	f003 0308 	and.w	r3, r3, #8
 80064ce:	2b08      	cmp	r3, #8
 80064d0:	d106      	bne.n	80064e0 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 80064d2:	6878      	ldr	r0, [r7, #4]
 80064d4:	f006 fb30 	bl	800cb38 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	2208      	movs	r2, #8
 80064de:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	4618      	mov	r0, r3
 80064e6:	f003 fa42 	bl	800996e <USB_ReadInterrupts>
 80064ea:	4603      	mov	r3, r0
 80064ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80064f0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80064f4:	d139      	bne.n	800656a <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	4618      	mov	r0, r3
 80064fc:	f003 ffdc 	bl	800a4b8 <USB_HC_ReadInterrupt>
 8006500:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8006502:	2300      	movs	r3, #0
 8006504:	617b      	str	r3, [r7, #20]
 8006506:	e025      	b.n	8006554 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8006508:	697b      	ldr	r3, [r7, #20]
 800650a:	f003 030f 	and.w	r3, r3, #15
 800650e:	68ba      	ldr	r2, [r7, #8]
 8006510:	fa22 f303 	lsr.w	r3, r2, r3
 8006514:	f003 0301 	and.w	r3, r3, #1
 8006518:	2b00      	cmp	r3, #0
 800651a:	d018      	beq.n	800654e <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	015a      	lsls	r2, r3, #5
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	4413      	add	r3, r2
 8006524:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800652e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006532:	d106      	bne.n	8006542 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	b2db      	uxtb	r3, r3
 8006538:	4619      	mov	r1, r3
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f905 	bl	800674a <HCD_HC_IN_IRQHandler>
 8006540:	e005      	b.n	800654e <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	b2db      	uxtb	r3, r3
 8006546:	4619      	mov	r1, r3
 8006548:	6878      	ldr	r0, [r7, #4]
 800654a:	f000 ff67 	bl	800741c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	3301      	adds	r3, #1
 8006552:	617b      	str	r3, [r7, #20]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	795b      	ldrb	r3, [r3, #5]
 8006558:	461a      	mov	r2, r3
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	4293      	cmp	r3, r2
 800655e:	d3d3      	bcc.n	8006508 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8006568:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	4618      	mov	r0, r3
 8006570:	f003 f9fd 	bl	800996e <USB_ReadInterrupts>
 8006574:	4603      	mov	r3, r0
 8006576:	f003 0310 	and.w	r3, r3, #16
 800657a:	2b10      	cmp	r3, #16
 800657c:	d101      	bne.n	8006582 <HAL_HCD_IRQHandler+0x1ea>
 800657e:	2301      	movs	r3, #1
 8006580:	e000      	b.n	8006584 <HAL_HCD_IRQHandler+0x1ec>
 8006582:	2300      	movs	r3, #0
 8006584:	2b00      	cmp	r3, #0
 8006586:	d014      	beq.n	80065b2 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	699a      	ldr	r2, [r3, #24]
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f022 0210 	bic.w	r2, r2, #16
 8006596:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f001 fbfe 	bl	8007d9a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	699a      	ldr	r2, [r3, #24]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f042 0210 	orr.w	r2, r2, #16
 80065ac:	619a      	str	r2, [r3, #24]
 80065ae:	e000      	b.n	80065b2 <HAL_HCD_IRQHandler+0x21a>
      return;
 80065b0:	bf00      	nop
    }
  }
}
 80065b2:	3718      	adds	r7, #24
 80065b4:	46bd      	mov	sp, r7
 80065b6:	bd80      	pop	{r7, pc}

080065b8 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80065b8:	b580      	push	{r7, lr}
 80065ba:	b082      	sub	sp, #8
 80065bc:	af00      	add	r7, sp, #0
 80065be:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80065c6:	2b01      	cmp	r3, #1
 80065c8:	d101      	bne.n	80065ce <HAL_HCD_Start+0x16>
 80065ca:	2302      	movs	r3, #2
 80065cc:	e013      	b.n	80065f6 <HAL_HCD_Start+0x3e>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	2201      	movs	r2, #1
 80065d2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	2101      	movs	r1, #1
 80065dc:	4618      	mov	r0, r3
 80065de:	f003 fb64 	bl	8009caa <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4618      	mov	r0, r3
 80065e8:	f003 f85d 	bl	80096a6 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3708      	adds	r7, #8
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b082      	sub	sp, #8
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800660c:	2b01      	cmp	r3, #1
 800660e:	d101      	bne.n	8006614 <HAL_HCD_Stop+0x16>
 8006610:	2302      	movs	r3, #2
 8006612:	e00d      	b.n	8006630 <HAL_HCD_Stop+0x32>
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	4618      	mov	r0, r3
 8006622:	f004 f8b7 	bl	800a794 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2200      	movs	r2, #0
 800662a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3708      	adds	r7, #8
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}

08006638 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 8006638:	b580      	push	{r7, lr}
 800663a:	b082      	sub	sp, #8
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	4618      	mov	r0, r3
 8006646:	f003 fb06 	bl	8009c56 <USB_ResetPort>
 800664a:	4603      	mov	r3, r0
}
 800664c:	4618      	mov	r0, r3
 800664e:	3708      	adds	r7, #8
 8006650:	46bd      	mov	sp, r7
 8006652:	bd80      	pop	{r7, pc}

08006654 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8006654:	b480      	push	{r7}
 8006656:	b083      	sub	sp, #12
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
 800665c:	460b      	mov	r3, r1
 800665e:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8006660:	78fa      	ldrb	r2, [r7, #3]
 8006662:	6879      	ldr	r1, [r7, #4]
 8006664:	4613      	mov	r3, r2
 8006666:	011b      	lsls	r3, r3, #4
 8006668:	1a9b      	subs	r3, r3, r2
 800666a:	009b      	lsls	r3, r3, #2
 800666c:	440b      	add	r3, r1
 800666e:	334c      	adds	r3, #76	@ 0x4c
 8006670:	781b      	ldrb	r3, [r3, #0]
}
 8006672:	4618      	mov	r0, r3
 8006674:	370c      	adds	r7, #12
 8006676:	46bd      	mov	sp, r7
 8006678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667c:	4770      	bx	lr

0800667e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800667e:	b480      	push	{r7}
 8006680:	b083      	sub	sp, #12
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
 8006686:	460b      	mov	r3, r1
 8006688:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800668a:	78fa      	ldrb	r2, [r7, #3]
 800668c:	6879      	ldr	r1, [r7, #4]
 800668e:	4613      	mov	r3, r2
 8006690:	011b      	lsls	r3, r3, #4
 8006692:	1a9b      	subs	r3, r3, r2
 8006694:	009b      	lsls	r3, r3, #2
 8006696:	440b      	add	r3, r1
 8006698:	3338      	adds	r3, #56	@ 0x38
 800669a:	681b      	ldr	r3, [r3, #0]
}
 800669c:	4618      	mov	r0, r3
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	4618      	mov	r0, r3
 80066b6:	f003 fb48 	bl	8009d4a <USB_GetCurrentFrame>
 80066ba:	4603      	mov	r3, r0
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3708      	adds	r7, #8
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}

080066c4 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b082      	sub	sp, #8
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	4618      	mov	r0, r3
 80066d2:	f003 fb23 	bl	8009d1c <USB_GetHostSpeed>
 80066d6:	4603      	mov	r3, r0
}
 80066d8:	4618      	mov	r0, r3
 80066da:	3708      	adds	r7, #8
 80066dc:	46bd      	mov	sp, r7
 80066de:	bd80      	pop	{r7, pc}

080066e0 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80066e0:	b480      	push	{r7}
 80066e2:	b083      	sub	sp, #12
 80066e4:	af00      	add	r7, sp, #0
 80066e6:	6078      	str	r0, [r7, #4]
 80066e8:	460b      	mov	r3, r1
 80066ea:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 80066ec:	78fa      	ldrb	r2, [r7, #3]
 80066ee:	6879      	ldr	r1, [r7, #4]
 80066f0:	4613      	mov	r3, r2
 80066f2:	011b      	lsls	r3, r3, #4
 80066f4:	1a9b      	subs	r3, r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	440b      	add	r3, r1
 80066fa:	331a      	adds	r3, #26
 80066fc:	2200      	movs	r2, #0
 80066fe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8006700:	78fa      	ldrb	r2, [r7, #3]
 8006702:	6879      	ldr	r1, [r7, #4]
 8006704:	4613      	mov	r3, r2
 8006706:	011b      	lsls	r3, r3, #4
 8006708:	1a9b      	subs	r3, r3, r2
 800670a:	009b      	lsls	r3, r3, #2
 800670c:	440b      	add	r3, r1
 800670e:	331b      	adds	r3, #27
 8006710:	2200      	movs	r2, #0
 8006712:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8006714:	78fa      	ldrb	r2, [r7, #3]
 8006716:	6879      	ldr	r1, [r7, #4]
 8006718:	4613      	mov	r3, r2
 800671a:	011b      	lsls	r3, r3, #4
 800671c:	1a9b      	subs	r3, r3, r2
 800671e:	009b      	lsls	r3, r3, #2
 8006720:	440b      	add	r3, r1
 8006722:	3325      	adds	r3, #37	@ 0x25
 8006724:	2200      	movs	r2, #0
 8006726:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 8006728:	78fa      	ldrb	r2, [r7, #3]
 800672a:	6879      	ldr	r1, [r7, #4]
 800672c:	4613      	mov	r3, r2
 800672e:	011b      	lsls	r3, r3, #4
 8006730:	1a9b      	subs	r3, r3, r2
 8006732:	009b      	lsls	r3, r3, #2
 8006734:	440b      	add	r3, r1
 8006736:	3324      	adds	r3, #36	@ 0x24
 8006738:	2200      	movs	r2, #0
 800673a:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 800673c:	2300      	movs	r3, #0
}
 800673e:	4618      	mov	r0, r3
 8006740:	370c      	adds	r7, #12
 8006742:	46bd      	mov	sp, r7
 8006744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006748:	4770      	bx	lr

0800674a <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800674a:	b580      	push	{r7, lr}
 800674c:	b086      	sub	sp, #24
 800674e:	af00      	add	r7, sp, #0
 8006750:	6078      	str	r0, [r7, #4]
 8006752:	460b      	mov	r3, r1
 8006754:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	78fa      	ldrb	r2, [r7, #3]
 8006766:	4611      	mov	r1, r2
 8006768:	4618      	mov	r0, r3
 800676a:	f003 f913 	bl	8009994 <USB_ReadChInterrupts>
 800676e:	4603      	mov	r3, r0
 8006770:	f003 0304 	and.w	r3, r3, #4
 8006774:	2b04      	cmp	r3, #4
 8006776:	d11a      	bne.n	80067ae <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8006778:	78fb      	ldrb	r3, [r7, #3]
 800677a:	015a      	lsls	r2, r3, #5
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	4413      	add	r3, r2
 8006780:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006784:	461a      	mov	r2, r3
 8006786:	2304      	movs	r3, #4
 8006788:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800678a:	78fa      	ldrb	r2, [r7, #3]
 800678c:	6879      	ldr	r1, [r7, #4]
 800678e:	4613      	mov	r3, r2
 8006790:	011b      	lsls	r3, r3, #4
 8006792:	1a9b      	subs	r3, r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	440b      	add	r3, r1
 8006798:	334d      	adds	r3, #77	@ 0x4d
 800679a:	2207      	movs	r2, #7
 800679c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	78fa      	ldrb	r2, [r7, #3]
 80067a4:	4611      	mov	r1, r2
 80067a6:	4618      	mov	r0, r3
 80067a8:	f003 fe97 	bl	800a4da <USB_HC_Halt>
 80067ac:	e09e      	b.n	80068ec <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	78fa      	ldrb	r2, [r7, #3]
 80067b4:	4611      	mov	r1, r2
 80067b6:	4618      	mov	r0, r3
 80067b8:	f003 f8ec 	bl	8009994 <USB_ReadChInterrupts>
 80067bc:	4603      	mov	r3, r0
 80067be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80067c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80067c6:	d11b      	bne.n	8006800 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 80067c8:	78fb      	ldrb	r3, [r7, #3]
 80067ca:	015a      	lsls	r2, r3, #5
 80067cc:	693b      	ldr	r3, [r7, #16]
 80067ce:	4413      	add	r3, r2
 80067d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80067d4:	461a      	mov	r2, r3
 80067d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80067da:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 80067dc:	78fa      	ldrb	r2, [r7, #3]
 80067de:	6879      	ldr	r1, [r7, #4]
 80067e0:	4613      	mov	r3, r2
 80067e2:	011b      	lsls	r3, r3, #4
 80067e4:	1a9b      	subs	r3, r3, r2
 80067e6:	009b      	lsls	r3, r3, #2
 80067e8:	440b      	add	r3, r1
 80067ea:	334d      	adds	r3, #77	@ 0x4d
 80067ec:	2208      	movs	r2, #8
 80067ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	78fa      	ldrb	r2, [r7, #3]
 80067f6:	4611      	mov	r1, r2
 80067f8:	4618      	mov	r0, r3
 80067fa:	f003 fe6e 	bl	800a4da <USB_HC_Halt>
 80067fe:	e075      	b.n	80068ec <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	78fa      	ldrb	r2, [r7, #3]
 8006806:	4611      	mov	r1, r2
 8006808:	4618      	mov	r0, r3
 800680a:	f003 f8c3 	bl	8009994 <USB_ReadChInterrupts>
 800680e:	4603      	mov	r3, r0
 8006810:	f003 0308 	and.w	r3, r3, #8
 8006814:	2b08      	cmp	r3, #8
 8006816:	d11a      	bne.n	800684e <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8006818:	78fb      	ldrb	r3, [r7, #3]
 800681a:	015a      	lsls	r2, r3, #5
 800681c:	693b      	ldr	r3, [r7, #16]
 800681e:	4413      	add	r3, r2
 8006820:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006824:	461a      	mov	r2, r3
 8006826:	2308      	movs	r3, #8
 8006828:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800682a:	78fa      	ldrb	r2, [r7, #3]
 800682c:	6879      	ldr	r1, [r7, #4]
 800682e:	4613      	mov	r3, r2
 8006830:	011b      	lsls	r3, r3, #4
 8006832:	1a9b      	subs	r3, r3, r2
 8006834:	009b      	lsls	r3, r3, #2
 8006836:	440b      	add	r3, r1
 8006838:	334d      	adds	r3, #77	@ 0x4d
 800683a:	2206      	movs	r2, #6
 800683c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	78fa      	ldrb	r2, [r7, #3]
 8006844:	4611      	mov	r1, r2
 8006846:	4618      	mov	r0, r3
 8006848:	f003 fe47 	bl	800a4da <USB_HC_Halt>
 800684c:	e04e      	b.n	80068ec <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	78fa      	ldrb	r2, [r7, #3]
 8006854:	4611      	mov	r1, r2
 8006856:	4618      	mov	r0, r3
 8006858:	f003 f89c 	bl	8009994 <USB_ReadChInterrupts>
 800685c:	4603      	mov	r3, r0
 800685e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006862:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006866:	d11b      	bne.n	80068a0 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8006868:	78fb      	ldrb	r3, [r7, #3]
 800686a:	015a      	lsls	r2, r3, #5
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	4413      	add	r3, r2
 8006870:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006874:	461a      	mov	r2, r3
 8006876:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800687a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800687c:	78fa      	ldrb	r2, [r7, #3]
 800687e:	6879      	ldr	r1, [r7, #4]
 8006880:	4613      	mov	r3, r2
 8006882:	011b      	lsls	r3, r3, #4
 8006884:	1a9b      	subs	r3, r3, r2
 8006886:	009b      	lsls	r3, r3, #2
 8006888:	440b      	add	r3, r1
 800688a:	334d      	adds	r3, #77	@ 0x4d
 800688c:	2209      	movs	r2, #9
 800688e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	78fa      	ldrb	r2, [r7, #3]
 8006896:	4611      	mov	r1, r2
 8006898:	4618      	mov	r0, r3
 800689a:	f003 fe1e 	bl	800a4da <USB_HC_Halt>
 800689e:	e025      	b.n	80068ec <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	78fa      	ldrb	r2, [r7, #3]
 80068a6:	4611      	mov	r1, r2
 80068a8:	4618      	mov	r0, r3
 80068aa:	f003 f873 	bl	8009994 <USB_ReadChInterrupts>
 80068ae:	4603      	mov	r3, r0
 80068b0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80068b4:	2b80      	cmp	r3, #128	@ 0x80
 80068b6:	d119      	bne.n	80068ec <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80068b8:	78fb      	ldrb	r3, [r7, #3]
 80068ba:	015a      	lsls	r2, r3, #5
 80068bc:	693b      	ldr	r3, [r7, #16]
 80068be:	4413      	add	r3, r2
 80068c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80068c4:	461a      	mov	r2, r3
 80068c6:	2380      	movs	r3, #128	@ 0x80
 80068c8:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80068ca:	78fa      	ldrb	r2, [r7, #3]
 80068cc:	6879      	ldr	r1, [r7, #4]
 80068ce:	4613      	mov	r3, r2
 80068d0:	011b      	lsls	r3, r3, #4
 80068d2:	1a9b      	subs	r3, r3, r2
 80068d4:	009b      	lsls	r3, r3, #2
 80068d6:	440b      	add	r3, r1
 80068d8:	334d      	adds	r3, #77	@ 0x4d
 80068da:	2207      	movs	r2, #7
 80068dc:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	78fa      	ldrb	r2, [r7, #3]
 80068e4:	4611      	mov	r1, r2
 80068e6:	4618      	mov	r0, r3
 80068e8:	f003 fdf7 	bl	800a4da <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	78fa      	ldrb	r2, [r7, #3]
 80068f2:	4611      	mov	r1, r2
 80068f4:	4618      	mov	r0, r3
 80068f6:	f003 f84d 	bl	8009994 <USB_ReadChInterrupts>
 80068fa:	4603      	mov	r3, r0
 80068fc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006900:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006904:	d112      	bne.n	800692c <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	78fa      	ldrb	r2, [r7, #3]
 800690c:	4611      	mov	r1, r2
 800690e:	4618      	mov	r0, r3
 8006910:	f003 fde3 	bl	800a4da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8006914:	78fb      	ldrb	r3, [r7, #3]
 8006916:	015a      	lsls	r2, r3, #5
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	4413      	add	r3, r2
 800691c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006920:	461a      	mov	r2, r3
 8006922:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006926:	6093      	str	r3, [r2, #8]
 8006928:	f000 bd75 	b.w	8007416 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	78fa      	ldrb	r2, [r7, #3]
 8006932:	4611      	mov	r1, r2
 8006934:	4618      	mov	r0, r3
 8006936:	f003 f82d 	bl	8009994 <USB_ReadChInterrupts>
 800693a:	4603      	mov	r3, r0
 800693c:	f003 0301 	and.w	r3, r3, #1
 8006940:	2b01      	cmp	r3, #1
 8006942:	f040 8128 	bne.w	8006b96 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006946:	78fb      	ldrb	r3, [r7, #3]
 8006948:	015a      	lsls	r2, r3, #5
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	4413      	add	r3, r2
 800694e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006952:	461a      	mov	r2, r3
 8006954:	2320      	movs	r3, #32
 8006956:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8006958:	78fa      	ldrb	r2, [r7, #3]
 800695a:	6879      	ldr	r1, [r7, #4]
 800695c:	4613      	mov	r3, r2
 800695e:	011b      	lsls	r3, r3, #4
 8006960:	1a9b      	subs	r3, r3, r2
 8006962:	009b      	lsls	r3, r3, #2
 8006964:	440b      	add	r3, r1
 8006966:	331b      	adds	r3, #27
 8006968:	781b      	ldrb	r3, [r3, #0]
 800696a:	2b01      	cmp	r3, #1
 800696c:	d119      	bne.n	80069a2 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800696e:	78fa      	ldrb	r2, [r7, #3]
 8006970:	6879      	ldr	r1, [r7, #4]
 8006972:	4613      	mov	r3, r2
 8006974:	011b      	lsls	r3, r3, #4
 8006976:	1a9b      	subs	r3, r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	440b      	add	r3, r1
 800697c:	331b      	adds	r3, #27
 800697e:	2200      	movs	r2, #0
 8006980:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006982:	78fb      	ldrb	r3, [r7, #3]
 8006984:	015a      	lsls	r2, r3, #5
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	4413      	add	r3, r2
 800698a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	78fa      	ldrb	r2, [r7, #3]
 8006992:	0151      	lsls	r1, r2, #5
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	440a      	add	r2, r1
 8006998:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800699c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80069a0:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	799b      	ldrb	r3, [r3, #6]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d01b      	beq.n	80069e2 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80069aa:	78fa      	ldrb	r2, [r7, #3]
 80069ac:	6879      	ldr	r1, [r7, #4]
 80069ae:	4613      	mov	r3, r2
 80069b0:	011b      	lsls	r3, r3, #4
 80069b2:	1a9b      	subs	r3, r3, r2
 80069b4:	009b      	lsls	r3, r3, #2
 80069b6:	440b      	add	r3, r1
 80069b8:	3330      	adds	r3, #48	@ 0x30
 80069ba:	6819      	ldr	r1, [r3, #0]
 80069bc:	78fb      	ldrb	r3, [r7, #3]
 80069be:	015a      	lsls	r2, r3, #5
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	4413      	add	r3, r2
 80069c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80069c8:	691b      	ldr	r3, [r3, #16]
 80069ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80069ce:	78fa      	ldrb	r2, [r7, #3]
 80069d0:	1ac9      	subs	r1, r1, r3
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	4613      	mov	r3, r2
 80069d6:	011b      	lsls	r3, r3, #4
 80069d8:	1a9b      	subs	r3, r3, r2
 80069da:	009b      	lsls	r3, r3, #2
 80069dc:	4403      	add	r3, r0
 80069de:	3338      	adds	r3, #56	@ 0x38
 80069e0:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 80069e2:	78fa      	ldrb	r2, [r7, #3]
 80069e4:	6879      	ldr	r1, [r7, #4]
 80069e6:	4613      	mov	r3, r2
 80069e8:	011b      	lsls	r3, r3, #4
 80069ea:	1a9b      	subs	r3, r3, r2
 80069ec:	009b      	lsls	r3, r3, #2
 80069ee:	440b      	add	r3, r1
 80069f0:	334d      	adds	r3, #77	@ 0x4d
 80069f2:	2201      	movs	r2, #1
 80069f4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 80069f6:	78fa      	ldrb	r2, [r7, #3]
 80069f8:	6879      	ldr	r1, [r7, #4]
 80069fa:	4613      	mov	r3, r2
 80069fc:	011b      	lsls	r3, r3, #4
 80069fe:	1a9b      	subs	r3, r3, r2
 8006a00:	009b      	lsls	r3, r3, #2
 8006a02:	440b      	add	r3, r1
 8006a04:	3344      	adds	r3, #68	@ 0x44
 8006a06:	2200      	movs	r2, #0
 8006a08:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8006a0a:	78fb      	ldrb	r3, [r7, #3]
 8006a0c:	015a      	lsls	r2, r3, #5
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	4413      	add	r3, r2
 8006a12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a16:	461a      	mov	r2, r3
 8006a18:	2301      	movs	r3, #1
 8006a1a:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006a1c:	78fa      	ldrb	r2, [r7, #3]
 8006a1e:	6879      	ldr	r1, [r7, #4]
 8006a20:	4613      	mov	r3, r2
 8006a22:	011b      	lsls	r3, r3, #4
 8006a24:	1a9b      	subs	r3, r3, r2
 8006a26:	009b      	lsls	r3, r3, #2
 8006a28:	440b      	add	r3, r1
 8006a2a:	3326      	adds	r3, #38	@ 0x26
 8006a2c:	781b      	ldrb	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d00a      	beq.n	8006a48 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006a32:	78fa      	ldrb	r2, [r7, #3]
 8006a34:	6879      	ldr	r1, [r7, #4]
 8006a36:	4613      	mov	r3, r2
 8006a38:	011b      	lsls	r3, r3, #4
 8006a3a:	1a9b      	subs	r3, r3, r2
 8006a3c:	009b      	lsls	r3, r3, #2
 8006a3e:	440b      	add	r3, r1
 8006a40:	3326      	adds	r3, #38	@ 0x26
 8006a42:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006a44:	2b02      	cmp	r3, #2
 8006a46:	d110      	bne.n	8006a6a <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	78fa      	ldrb	r2, [r7, #3]
 8006a4e:	4611      	mov	r1, r2
 8006a50:	4618      	mov	r0, r3
 8006a52:	f003 fd42 	bl	800a4da <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8006a56:	78fb      	ldrb	r3, [r7, #3]
 8006a58:	015a      	lsls	r2, r3, #5
 8006a5a:	693b      	ldr	r3, [r7, #16]
 8006a5c:	4413      	add	r3, r2
 8006a5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006a62:	461a      	mov	r2, r3
 8006a64:	2310      	movs	r3, #16
 8006a66:	6093      	str	r3, [r2, #8]
 8006a68:	e03d      	b.n	8006ae6 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8006a6a:	78fa      	ldrb	r2, [r7, #3]
 8006a6c:	6879      	ldr	r1, [r7, #4]
 8006a6e:	4613      	mov	r3, r2
 8006a70:	011b      	lsls	r3, r3, #4
 8006a72:	1a9b      	subs	r3, r3, r2
 8006a74:	009b      	lsls	r3, r3, #2
 8006a76:	440b      	add	r3, r1
 8006a78:	3326      	adds	r3, #38	@ 0x26
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	2b03      	cmp	r3, #3
 8006a7e:	d00a      	beq.n	8006a96 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8006a80:	78fa      	ldrb	r2, [r7, #3]
 8006a82:	6879      	ldr	r1, [r7, #4]
 8006a84:	4613      	mov	r3, r2
 8006a86:	011b      	lsls	r3, r3, #4
 8006a88:	1a9b      	subs	r3, r3, r2
 8006a8a:	009b      	lsls	r3, r3, #2
 8006a8c:	440b      	add	r3, r1
 8006a8e:	3326      	adds	r3, #38	@ 0x26
 8006a90:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d127      	bne.n	8006ae6 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006a96:	78fb      	ldrb	r3, [r7, #3]
 8006a98:	015a      	lsls	r2, r3, #5
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	78fa      	ldrb	r2, [r7, #3]
 8006aa6:	0151      	lsls	r1, r2, #5
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	440a      	add	r2, r1
 8006aac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006ab0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8006ab4:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006ab6:	78fa      	ldrb	r2, [r7, #3]
 8006ab8:	6879      	ldr	r1, [r7, #4]
 8006aba:	4613      	mov	r3, r2
 8006abc:	011b      	lsls	r3, r3, #4
 8006abe:	1a9b      	subs	r3, r3, r2
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	440b      	add	r3, r1
 8006ac4:	334c      	adds	r3, #76	@ 0x4c
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8006aca:	78fa      	ldrb	r2, [r7, #3]
 8006acc:	6879      	ldr	r1, [r7, #4]
 8006ace:	4613      	mov	r3, r2
 8006ad0:	011b      	lsls	r3, r3, #4
 8006ad2:	1a9b      	subs	r3, r3, r2
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	440b      	add	r3, r1
 8006ad8:	334c      	adds	r3, #76	@ 0x4c
 8006ada:	781a      	ldrb	r2, [r3, #0]
 8006adc:	78fb      	ldrb	r3, [r7, #3]
 8006ade:	4619      	mov	r1, r3
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f006 f853 	bl	800cb8c <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	799b      	ldrb	r3, [r3, #6]
 8006aea:	2b01      	cmp	r3, #1
 8006aec:	d13b      	bne.n	8006b66 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8006aee:	78fa      	ldrb	r2, [r7, #3]
 8006af0:	6879      	ldr	r1, [r7, #4]
 8006af2:	4613      	mov	r3, r2
 8006af4:	011b      	lsls	r3, r3, #4
 8006af6:	1a9b      	subs	r3, r3, r2
 8006af8:	009b      	lsls	r3, r3, #2
 8006afa:	440b      	add	r3, r1
 8006afc:	3338      	adds	r3, #56	@ 0x38
 8006afe:	6819      	ldr	r1, [r3, #0]
 8006b00:	78fa      	ldrb	r2, [r7, #3]
 8006b02:	6878      	ldr	r0, [r7, #4]
 8006b04:	4613      	mov	r3, r2
 8006b06:	011b      	lsls	r3, r3, #4
 8006b08:	1a9b      	subs	r3, r3, r2
 8006b0a:	009b      	lsls	r3, r3, #2
 8006b0c:	4403      	add	r3, r0
 8006b0e:	3328      	adds	r3, #40	@ 0x28
 8006b10:	881b      	ldrh	r3, [r3, #0]
 8006b12:	440b      	add	r3, r1
 8006b14:	1e59      	subs	r1, r3, #1
 8006b16:	78fa      	ldrb	r2, [r7, #3]
 8006b18:	6878      	ldr	r0, [r7, #4]
 8006b1a:	4613      	mov	r3, r2
 8006b1c:	011b      	lsls	r3, r3, #4
 8006b1e:	1a9b      	subs	r3, r3, r2
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	4403      	add	r3, r0
 8006b24:	3328      	adds	r3, #40	@ 0x28
 8006b26:	881b      	ldrh	r3, [r3, #0]
 8006b28:	fbb1 f3f3 	udiv	r3, r1, r3
 8006b2c:	f003 0301 	and.w	r3, r3, #1
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	f000 8470 	beq.w	8007416 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8006b36:	78fa      	ldrb	r2, [r7, #3]
 8006b38:	6879      	ldr	r1, [r7, #4]
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	011b      	lsls	r3, r3, #4
 8006b3e:	1a9b      	subs	r3, r3, r2
 8006b40:	009b      	lsls	r3, r3, #2
 8006b42:	440b      	add	r3, r1
 8006b44:	333c      	adds	r3, #60	@ 0x3c
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	78fa      	ldrb	r2, [r7, #3]
 8006b4a:	f083 0301 	eor.w	r3, r3, #1
 8006b4e:	b2d8      	uxtb	r0, r3
 8006b50:	6879      	ldr	r1, [r7, #4]
 8006b52:	4613      	mov	r3, r2
 8006b54:	011b      	lsls	r3, r3, #4
 8006b56:	1a9b      	subs	r3, r3, r2
 8006b58:	009b      	lsls	r3, r3, #2
 8006b5a:	440b      	add	r3, r1
 8006b5c:	333c      	adds	r3, #60	@ 0x3c
 8006b5e:	4602      	mov	r2, r0
 8006b60:	701a      	strb	r2, [r3, #0]
 8006b62:	f000 bc58 	b.w	8007416 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8006b66:	78fa      	ldrb	r2, [r7, #3]
 8006b68:	6879      	ldr	r1, [r7, #4]
 8006b6a:	4613      	mov	r3, r2
 8006b6c:	011b      	lsls	r3, r3, #4
 8006b6e:	1a9b      	subs	r3, r3, r2
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	440b      	add	r3, r1
 8006b74:	333c      	adds	r3, #60	@ 0x3c
 8006b76:	781b      	ldrb	r3, [r3, #0]
 8006b78:	78fa      	ldrb	r2, [r7, #3]
 8006b7a:	f083 0301 	eor.w	r3, r3, #1
 8006b7e:	b2d8      	uxtb	r0, r3
 8006b80:	6879      	ldr	r1, [r7, #4]
 8006b82:	4613      	mov	r3, r2
 8006b84:	011b      	lsls	r3, r3, #4
 8006b86:	1a9b      	subs	r3, r3, r2
 8006b88:	009b      	lsls	r3, r3, #2
 8006b8a:	440b      	add	r3, r1
 8006b8c:	333c      	adds	r3, #60	@ 0x3c
 8006b8e:	4602      	mov	r2, r0
 8006b90:	701a      	strb	r2, [r3, #0]
 8006b92:	f000 bc40 	b.w	8007416 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	78fa      	ldrb	r2, [r7, #3]
 8006b9c:	4611      	mov	r1, r2
 8006b9e:	4618      	mov	r0, r3
 8006ba0:	f002 fef8 	bl	8009994 <USB_ReadChInterrupts>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	f003 0320 	and.w	r3, r3, #32
 8006baa:	2b20      	cmp	r3, #32
 8006bac:	d131      	bne.n	8006c12 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8006bae:	78fb      	ldrb	r3, [r7, #3]
 8006bb0:	015a      	lsls	r2, r3, #5
 8006bb2:	693b      	ldr	r3, [r7, #16]
 8006bb4:	4413      	add	r3, r2
 8006bb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006bba:	461a      	mov	r2, r3
 8006bbc:	2320      	movs	r3, #32
 8006bbe:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8006bc0:	78fa      	ldrb	r2, [r7, #3]
 8006bc2:	6879      	ldr	r1, [r7, #4]
 8006bc4:	4613      	mov	r3, r2
 8006bc6:	011b      	lsls	r3, r3, #4
 8006bc8:	1a9b      	subs	r3, r3, r2
 8006bca:	009b      	lsls	r3, r3, #2
 8006bcc:	440b      	add	r3, r1
 8006bce:	331a      	adds	r3, #26
 8006bd0:	781b      	ldrb	r3, [r3, #0]
 8006bd2:	2b01      	cmp	r3, #1
 8006bd4:	f040 841f 	bne.w	8007416 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8006bd8:	78fa      	ldrb	r2, [r7, #3]
 8006bda:	6879      	ldr	r1, [r7, #4]
 8006bdc:	4613      	mov	r3, r2
 8006bde:	011b      	lsls	r3, r3, #4
 8006be0:	1a9b      	subs	r3, r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	440b      	add	r3, r1
 8006be6:	331b      	adds	r3, #27
 8006be8:	2201      	movs	r2, #1
 8006bea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8006bec:	78fa      	ldrb	r2, [r7, #3]
 8006bee:	6879      	ldr	r1, [r7, #4]
 8006bf0:	4613      	mov	r3, r2
 8006bf2:	011b      	lsls	r3, r3, #4
 8006bf4:	1a9b      	subs	r3, r3, r2
 8006bf6:	009b      	lsls	r3, r3, #2
 8006bf8:	440b      	add	r3, r1
 8006bfa:	334d      	adds	r3, #77	@ 0x4d
 8006bfc:	2203      	movs	r2, #3
 8006bfe:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	78fa      	ldrb	r2, [r7, #3]
 8006c06:	4611      	mov	r1, r2
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f003 fc66 	bl	800a4da <USB_HC_Halt>
 8006c0e:	f000 bc02 	b.w	8007416 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	78fa      	ldrb	r2, [r7, #3]
 8006c18:	4611      	mov	r1, r2
 8006c1a:	4618      	mov	r0, r3
 8006c1c:	f002 feba 	bl	8009994 <USB_ReadChInterrupts>
 8006c20:	4603      	mov	r3, r0
 8006c22:	f003 0302 	and.w	r3, r3, #2
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	f040 8305 	bne.w	8007236 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8006c2c:	78fb      	ldrb	r3, [r7, #3]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006c38:	461a      	mov	r2, r3
 8006c3a:	2302      	movs	r3, #2
 8006c3c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8006c3e:	78fa      	ldrb	r2, [r7, #3]
 8006c40:	6879      	ldr	r1, [r7, #4]
 8006c42:	4613      	mov	r3, r2
 8006c44:	011b      	lsls	r3, r3, #4
 8006c46:	1a9b      	subs	r3, r3, r2
 8006c48:	009b      	lsls	r3, r3, #2
 8006c4a:	440b      	add	r3, r1
 8006c4c:	334d      	adds	r3, #77	@ 0x4d
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	2b01      	cmp	r3, #1
 8006c52:	d114      	bne.n	8006c7e <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006c54:	78fa      	ldrb	r2, [r7, #3]
 8006c56:	6879      	ldr	r1, [r7, #4]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	011b      	lsls	r3, r3, #4
 8006c5c:	1a9b      	subs	r3, r3, r2
 8006c5e:	009b      	lsls	r3, r3, #2
 8006c60:	440b      	add	r3, r1
 8006c62:	334d      	adds	r3, #77	@ 0x4d
 8006c64:	2202      	movs	r2, #2
 8006c66:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8006c68:	78fa      	ldrb	r2, [r7, #3]
 8006c6a:	6879      	ldr	r1, [r7, #4]
 8006c6c:	4613      	mov	r3, r2
 8006c6e:	011b      	lsls	r3, r3, #4
 8006c70:	1a9b      	subs	r3, r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	440b      	add	r3, r1
 8006c76:	334c      	adds	r3, #76	@ 0x4c
 8006c78:	2201      	movs	r2, #1
 8006c7a:	701a      	strb	r2, [r3, #0]
 8006c7c:	e2cc      	b.n	8007218 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8006c7e:	78fa      	ldrb	r2, [r7, #3]
 8006c80:	6879      	ldr	r1, [r7, #4]
 8006c82:	4613      	mov	r3, r2
 8006c84:	011b      	lsls	r3, r3, #4
 8006c86:	1a9b      	subs	r3, r3, r2
 8006c88:	009b      	lsls	r3, r3, #2
 8006c8a:	440b      	add	r3, r1
 8006c8c:	334d      	adds	r3, #77	@ 0x4d
 8006c8e:	781b      	ldrb	r3, [r3, #0]
 8006c90:	2b06      	cmp	r3, #6
 8006c92:	d114      	bne.n	8006cbe <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006c94:	78fa      	ldrb	r2, [r7, #3]
 8006c96:	6879      	ldr	r1, [r7, #4]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	011b      	lsls	r3, r3, #4
 8006c9c:	1a9b      	subs	r3, r3, r2
 8006c9e:	009b      	lsls	r3, r3, #2
 8006ca0:	440b      	add	r3, r1
 8006ca2:	334d      	adds	r3, #77	@ 0x4d
 8006ca4:	2202      	movs	r2, #2
 8006ca6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8006ca8:	78fa      	ldrb	r2, [r7, #3]
 8006caa:	6879      	ldr	r1, [r7, #4]
 8006cac:	4613      	mov	r3, r2
 8006cae:	011b      	lsls	r3, r3, #4
 8006cb0:	1a9b      	subs	r3, r3, r2
 8006cb2:	009b      	lsls	r3, r3, #2
 8006cb4:	440b      	add	r3, r1
 8006cb6:	334c      	adds	r3, #76	@ 0x4c
 8006cb8:	2205      	movs	r2, #5
 8006cba:	701a      	strb	r2, [r3, #0]
 8006cbc:	e2ac      	b.n	8007218 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006cbe:	78fa      	ldrb	r2, [r7, #3]
 8006cc0:	6879      	ldr	r1, [r7, #4]
 8006cc2:	4613      	mov	r3, r2
 8006cc4:	011b      	lsls	r3, r3, #4
 8006cc6:	1a9b      	subs	r3, r3, r2
 8006cc8:	009b      	lsls	r3, r3, #2
 8006cca:	440b      	add	r3, r1
 8006ccc:	334d      	adds	r3, #77	@ 0x4d
 8006cce:	781b      	ldrb	r3, [r3, #0]
 8006cd0:	2b07      	cmp	r3, #7
 8006cd2:	d00b      	beq.n	8006cec <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8006cd4:	78fa      	ldrb	r2, [r7, #3]
 8006cd6:	6879      	ldr	r1, [r7, #4]
 8006cd8:	4613      	mov	r3, r2
 8006cda:	011b      	lsls	r3, r3, #4
 8006cdc:	1a9b      	subs	r3, r3, r2
 8006cde:	009b      	lsls	r3, r3, #2
 8006ce0:	440b      	add	r3, r1
 8006ce2:	334d      	adds	r3, #77	@ 0x4d
 8006ce4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8006ce6:	2b09      	cmp	r3, #9
 8006ce8:	f040 80a6 	bne.w	8006e38 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006cec:	78fa      	ldrb	r2, [r7, #3]
 8006cee:	6879      	ldr	r1, [r7, #4]
 8006cf0:	4613      	mov	r3, r2
 8006cf2:	011b      	lsls	r3, r3, #4
 8006cf4:	1a9b      	subs	r3, r3, r2
 8006cf6:	009b      	lsls	r3, r3, #2
 8006cf8:	440b      	add	r3, r1
 8006cfa:	334d      	adds	r3, #77	@ 0x4d
 8006cfc:	2202      	movs	r2, #2
 8006cfe:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8006d00:	78fa      	ldrb	r2, [r7, #3]
 8006d02:	6879      	ldr	r1, [r7, #4]
 8006d04:	4613      	mov	r3, r2
 8006d06:	011b      	lsls	r3, r3, #4
 8006d08:	1a9b      	subs	r3, r3, r2
 8006d0a:	009b      	lsls	r3, r3, #2
 8006d0c:	440b      	add	r3, r1
 8006d0e:	3344      	adds	r3, #68	@ 0x44
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	1c59      	adds	r1, r3, #1
 8006d14:	6878      	ldr	r0, [r7, #4]
 8006d16:	4613      	mov	r3, r2
 8006d18:	011b      	lsls	r3, r3, #4
 8006d1a:	1a9b      	subs	r3, r3, r2
 8006d1c:	009b      	lsls	r3, r3, #2
 8006d1e:	4403      	add	r3, r0
 8006d20:	3344      	adds	r3, #68	@ 0x44
 8006d22:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006d24:	78fa      	ldrb	r2, [r7, #3]
 8006d26:	6879      	ldr	r1, [r7, #4]
 8006d28:	4613      	mov	r3, r2
 8006d2a:	011b      	lsls	r3, r3, #4
 8006d2c:	1a9b      	subs	r3, r3, r2
 8006d2e:	009b      	lsls	r3, r3, #2
 8006d30:	440b      	add	r3, r1
 8006d32:	3344      	adds	r3, #68	@ 0x44
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b02      	cmp	r3, #2
 8006d38:	d943      	bls.n	8006dc2 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8006d3a:	78fa      	ldrb	r2, [r7, #3]
 8006d3c:	6879      	ldr	r1, [r7, #4]
 8006d3e:	4613      	mov	r3, r2
 8006d40:	011b      	lsls	r3, r3, #4
 8006d42:	1a9b      	subs	r3, r3, r2
 8006d44:	009b      	lsls	r3, r3, #2
 8006d46:	440b      	add	r3, r1
 8006d48:	3344      	adds	r3, #68	@ 0x44
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8006d4e:	78fa      	ldrb	r2, [r7, #3]
 8006d50:	6879      	ldr	r1, [r7, #4]
 8006d52:	4613      	mov	r3, r2
 8006d54:	011b      	lsls	r3, r3, #4
 8006d56:	1a9b      	subs	r3, r3, r2
 8006d58:	009b      	lsls	r3, r3, #2
 8006d5a:	440b      	add	r3, r1
 8006d5c:	331a      	adds	r3, #26
 8006d5e:	781b      	ldrb	r3, [r3, #0]
 8006d60:	2b01      	cmp	r3, #1
 8006d62:	d123      	bne.n	8006dac <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8006d64:	78fa      	ldrb	r2, [r7, #3]
 8006d66:	6879      	ldr	r1, [r7, #4]
 8006d68:	4613      	mov	r3, r2
 8006d6a:	011b      	lsls	r3, r3, #4
 8006d6c:	1a9b      	subs	r3, r3, r2
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	440b      	add	r3, r1
 8006d72:	331b      	adds	r3, #27
 8006d74:	2200      	movs	r2, #0
 8006d76:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8006d78:	78fa      	ldrb	r2, [r7, #3]
 8006d7a:	6879      	ldr	r1, [r7, #4]
 8006d7c:	4613      	mov	r3, r2
 8006d7e:	011b      	lsls	r3, r3, #4
 8006d80:	1a9b      	subs	r3, r3, r2
 8006d82:	009b      	lsls	r3, r3, #2
 8006d84:	440b      	add	r3, r1
 8006d86:	331c      	adds	r3, #28
 8006d88:	2200      	movs	r2, #0
 8006d8a:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006d8c:	78fb      	ldrb	r3, [r7, #3]
 8006d8e:	015a      	lsls	r2, r3, #5
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	4413      	add	r3, r2
 8006d94:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	78fa      	ldrb	r2, [r7, #3]
 8006d9c:	0151      	lsls	r1, r2, #5
 8006d9e:	693a      	ldr	r2, [r7, #16]
 8006da0:	440a      	add	r2, r1
 8006da2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006da6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006daa:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8006dac:	78fa      	ldrb	r2, [r7, #3]
 8006dae:	6879      	ldr	r1, [r7, #4]
 8006db0:	4613      	mov	r3, r2
 8006db2:	011b      	lsls	r3, r3, #4
 8006db4:	1a9b      	subs	r3, r3, r2
 8006db6:	009b      	lsls	r3, r3, #2
 8006db8:	440b      	add	r3, r1
 8006dba:	334c      	adds	r3, #76	@ 0x4c
 8006dbc:	2204      	movs	r2, #4
 8006dbe:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006dc0:	e229      	b.n	8007216 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006dc2:	78fa      	ldrb	r2, [r7, #3]
 8006dc4:	6879      	ldr	r1, [r7, #4]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	011b      	lsls	r3, r3, #4
 8006dca:	1a9b      	subs	r3, r3, r2
 8006dcc:	009b      	lsls	r3, r3, #2
 8006dce:	440b      	add	r3, r1
 8006dd0:	334c      	adds	r3, #76	@ 0x4c
 8006dd2:	2202      	movs	r2, #2
 8006dd4:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006dd6:	78fa      	ldrb	r2, [r7, #3]
 8006dd8:	6879      	ldr	r1, [r7, #4]
 8006dda:	4613      	mov	r3, r2
 8006ddc:	011b      	lsls	r3, r3, #4
 8006dde:	1a9b      	subs	r3, r3, r2
 8006de0:	009b      	lsls	r3, r3, #2
 8006de2:	440b      	add	r3, r1
 8006de4:	3326      	adds	r3, #38	@ 0x26
 8006de6:	781b      	ldrb	r3, [r3, #0]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00b      	beq.n	8006e04 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006dec:	78fa      	ldrb	r2, [r7, #3]
 8006dee:	6879      	ldr	r1, [r7, #4]
 8006df0:	4613      	mov	r3, r2
 8006df2:	011b      	lsls	r3, r3, #4
 8006df4:	1a9b      	subs	r3, r3, r2
 8006df6:	009b      	lsls	r3, r3, #2
 8006df8:	440b      	add	r3, r1
 8006dfa:	3326      	adds	r3, #38	@ 0x26
 8006dfc:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	f040 8209 	bne.w	8007216 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006e04:	78fb      	ldrb	r3, [r7, #3]
 8006e06:	015a      	lsls	r2, r3, #5
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	4413      	add	r3, r2
 8006e0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006e1a:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006e22:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006e24:	78fb      	ldrb	r3, [r7, #3]
 8006e26:	015a      	lsls	r2, r3, #5
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	4413      	add	r3, r2
 8006e2c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006e30:	461a      	mov	r2, r3
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8006e36:	e1ee      	b.n	8007216 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8006e38:	78fa      	ldrb	r2, [r7, #3]
 8006e3a:	6879      	ldr	r1, [r7, #4]
 8006e3c:	4613      	mov	r3, r2
 8006e3e:	011b      	lsls	r3, r3, #4
 8006e40:	1a9b      	subs	r3, r3, r2
 8006e42:	009b      	lsls	r3, r3, #2
 8006e44:	440b      	add	r3, r1
 8006e46:	334d      	adds	r3, #77	@ 0x4d
 8006e48:	781b      	ldrb	r3, [r3, #0]
 8006e4a:	2b05      	cmp	r3, #5
 8006e4c:	f040 80c8 	bne.w	8006fe0 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006e50:	78fa      	ldrb	r2, [r7, #3]
 8006e52:	6879      	ldr	r1, [r7, #4]
 8006e54:	4613      	mov	r3, r2
 8006e56:	011b      	lsls	r3, r3, #4
 8006e58:	1a9b      	subs	r3, r3, r2
 8006e5a:	009b      	lsls	r3, r3, #2
 8006e5c:	440b      	add	r3, r1
 8006e5e:	334d      	adds	r3, #77	@ 0x4d
 8006e60:	2202      	movs	r2, #2
 8006e62:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8006e64:	78fa      	ldrb	r2, [r7, #3]
 8006e66:	6879      	ldr	r1, [r7, #4]
 8006e68:	4613      	mov	r3, r2
 8006e6a:	011b      	lsls	r3, r3, #4
 8006e6c:	1a9b      	subs	r3, r3, r2
 8006e6e:	009b      	lsls	r3, r3, #2
 8006e70:	440b      	add	r3, r1
 8006e72:	331b      	adds	r3, #27
 8006e74:	781b      	ldrb	r3, [r3, #0]
 8006e76:	2b01      	cmp	r3, #1
 8006e78:	f040 81ce 	bne.w	8007218 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8006e7c:	78fa      	ldrb	r2, [r7, #3]
 8006e7e:	6879      	ldr	r1, [r7, #4]
 8006e80:	4613      	mov	r3, r2
 8006e82:	011b      	lsls	r3, r3, #4
 8006e84:	1a9b      	subs	r3, r3, r2
 8006e86:	009b      	lsls	r3, r3, #2
 8006e88:	440b      	add	r3, r1
 8006e8a:	3326      	adds	r3, #38	@ 0x26
 8006e8c:	781b      	ldrb	r3, [r3, #0]
 8006e8e:	2b03      	cmp	r3, #3
 8006e90:	d16b      	bne.n	8006f6a <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8006e92:	78fa      	ldrb	r2, [r7, #3]
 8006e94:	6879      	ldr	r1, [r7, #4]
 8006e96:	4613      	mov	r3, r2
 8006e98:	011b      	lsls	r3, r3, #4
 8006e9a:	1a9b      	subs	r3, r3, r2
 8006e9c:	009b      	lsls	r3, r3, #2
 8006e9e:	440b      	add	r3, r1
 8006ea0:	3348      	adds	r3, #72	@ 0x48
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	1c59      	adds	r1, r3, #1
 8006ea6:	6878      	ldr	r0, [r7, #4]
 8006ea8:	4613      	mov	r3, r2
 8006eaa:	011b      	lsls	r3, r3, #4
 8006eac:	1a9b      	subs	r3, r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4403      	add	r3, r0
 8006eb2:	3348      	adds	r3, #72	@ 0x48
 8006eb4:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8006eb6:	78fa      	ldrb	r2, [r7, #3]
 8006eb8:	6879      	ldr	r1, [r7, #4]
 8006eba:	4613      	mov	r3, r2
 8006ebc:	011b      	lsls	r3, r3, #4
 8006ebe:	1a9b      	subs	r3, r3, r2
 8006ec0:	009b      	lsls	r3, r3, #2
 8006ec2:	440b      	add	r3, r1
 8006ec4:	3348      	adds	r3, #72	@ 0x48
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	2b02      	cmp	r3, #2
 8006eca:	d943      	bls.n	8006f54 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8006ecc:	78fa      	ldrb	r2, [r7, #3]
 8006ece:	6879      	ldr	r1, [r7, #4]
 8006ed0:	4613      	mov	r3, r2
 8006ed2:	011b      	lsls	r3, r3, #4
 8006ed4:	1a9b      	subs	r3, r3, r2
 8006ed6:	009b      	lsls	r3, r3, #2
 8006ed8:	440b      	add	r3, r1
 8006eda:	3348      	adds	r3, #72	@ 0x48
 8006edc:	2200      	movs	r2, #0
 8006ede:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8006ee0:	78fa      	ldrb	r2, [r7, #3]
 8006ee2:	6879      	ldr	r1, [r7, #4]
 8006ee4:	4613      	mov	r3, r2
 8006ee6:	011b      	lsls	r3, r3, #4
 8006ee8:	1a9b      	subs	r3, r3, r2
 8006eea:	009b      	lsls	r3, r3, #2
 8006eec:	440b      	add	r3, r1
 8006eee:	331b      	adds	r3, #27
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8006ef4:	78fa      	ldrb	r2, [r7, #3]
 8006ef6:	6879      	ldr	r1, [r7, #4]
 8006ef8:	4613      	mov	r3, r2
 8006efa:	011b      	lsls	r3, r3, #4
 8006efc:	1a9b      	subs	r3, r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	440b      	add	r3, r1
 8006f02:	3344      	adds	r3, #68	@ 0x44
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	2b02      	cmp	r3, #2
 8006f08:	d809      	bhi.n	8006f1e <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8006f0a:	78fa      	ldrb	r2, [r7, #3]
 8006f0c:	6879      	ldr	r1, [r7, #4]
 8006f0e:	4613      	mov	r3, r2
 8006f10:	011b      	lsls	r3, r3, #4
 8006f12:	1a9b      	subs	r3, r3, r2
 8006f14:	009b      	lsls	r3, r3, #2
 8006f16:	440b      	add	r3, r1
 8006f18:	331c      	adds	r3, #28
 8006f1a:	2201      	movs	r2, #1
 8006f1c:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8006f1e:	78fb      	ldrb	r3, [r7, #3]
 8006f20:	015a      	lsls	r2, r3, #5
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	4413      	add	r3, r2
 8006f26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	78fa      	ldrb	r2, [r7, #3]
 8006f2e:	0151      	lsls	r1, r2, #5
 8006f30:	693a      	ldr	r2, [r7, #16]
 8006f32:	440a      	add	r2, r1
 8006f34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8006f38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8006f3c:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8006f3e:	78fa      	ldrb	r2, [r7, #3]
 8006f40:	6879      	ldr	r1, [r7, #4]
 8006f42:	4613      	mov	r3, r2
 8006f44:	011b      	lsls	r3, r3, #4
 8006f46:	1a9b      	subs	r3, r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	440b      	add	r3, r1
 8006f4c:	334c      	adds	r3, #76	@ 0x4c
 8006f4e:	2204      	movs	r2, #4
 8006f50:	701a      	strb	r2, [r3, #0]
 8006f52:	e014      	b.n	8006f7e <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006f54:	78fa      	ldrb	r2, [r7, #3]
 8006f56:	6879      	ldr	r1, [r7, #4]
 8006f58:	4613      	mov	r3, r2
 8006f5a:	011b      	lsls	r3, r3, #4
 8006f5c:	1a9b      	subs	r3, r3, r2
 8006f5e:	009b      	lsls	r3, r3, #2
 8006f60:	440b      	add	r3, r1
 8006f62:	334c      	adds	r3, #76	@ 0x4c
 8006f64:	2202      	movs	r2, #2
 8006f66:	701a      	strb	r2, [r3, #0]
 8006f68:	e009      	b.n	8006f7e <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8006f6a:	78fa      	ldrb	r2, [r7, #3]
 8006f6c:	6879      	ldr	r1, [r7, #4]
 8006f6e:	4613      	mov	r3, r2
 8006f70:	011b      	lsls	r3, r3, #4
 8006f72:	1a9b      	subs	r3, r3, r2
 8006f74:	009b      	lsls	r3, r3, #2
 8006f76:	440b      	add	r3, r1
 8006f78:	334c      	adds	r3, #76	@ 0x4c
 8006f7a:	2202      	movs	r2, #2
 8006f7c:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006f7e:	78fa      	ldrb	r2, [r7, #3]
 8006f80:	6879      	ldr	r1, [r7, #4]
 8006f82:	4613      	mov	r3, r2
 8006f84:	011b      	lsls	r3, r3, #4
 8006f86:	1a9b      	subs	r3, r3, r2
 8006f88:	009b      	lsls	r3, r3, #2
 8006f8a:	440b      	add	r3, r1
 8006f8c:	3326      	adds	r3, #38	@ 0x26
 8006f8e:	781b      	ldrb	r3, [r3, #0]
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d00b      	beq.n	8006fac <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8006f94:	78fa      	ldrb	r2, [r7, #3]
 8006f96:	6879      	ldr	r1, [r7, #4]
 8006f98:	4613      	mov	r3, r2
 8006f9a:	011b      	lsls	r3, r3, #4
 8006f9c:	1a9b      	subs	r3, r3, r2
 8006f9e:	009b      	lsls	r3, r3, #2
 8006fa0:	440b      	add	r3, r1
 8006fa2:	3326      	adds	r3, #38	@ 0x26
 8006fa4:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8006fa6:	2b02      	cmp	r3, #2
 8006fa8:	f040 8136 	bne.w	8007218 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8006fac:	78fb      	ldrb	r3, [r7, #3]
 8006fae:	015a      	lsls	r2, r3, #5
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	4413      	add	r3, r2
 8006fb4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8006fc2:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8006fca:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8006fcc:	78fb      	ldrb	r3, [r7, #3]
 8006fce:	015a      	lsls	r2, r3, #5
 8006fd0:	693b      	ldr	r3, [r7, #16]
 8006fd2:	4413      	add	r3, r2
 8006fd4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006fd8:	461a      	mov	r2, r3
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6013      	str	r3, [r2, #0]
 8006fde:	e11b      	b.n	8007218 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8006fe0:	78fa      	ldrb	r2, [r7, #3]
 8006fe2:	6879      	ldr	r1, [r7, #4]
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	011b      	lsls	r3, r3, #4
 8006fe8:	1a9b      	subs	r3, r3, r2
 8006fea:	009b      	lsls	r3, r3, #2
 8006fec:	440b      	add	r3, r1
 8006fee:	334d      	adds	r3, #77	@ 0x4d
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	2b03      	cmp	r3, #3
 8006ff4:	f040 8081 	bne.w	80070fa <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8006ff8:	78fa      	ldrb	r2, [r7, #3]
 8006ffa:	6879      	ldr	r1, [r7, #4]
 8006ffc:	4613      	mov	r3, r2
 8006ffe:	011b      	lsls	r3, r3, #4
 8007000:	1a9b      	subs	r3, r3, r2
 8007002:	009b      	lsls	r3, r3, #2
 8007004:	440b      	add	r3, r1
 8007006:	334d      	adds	r3, #77	@ 0x4d
 8007008:	2202      	movs	r2, #2
 800700a:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 800700c:	78fa      	ldrb	r2, [r7, #3]
 800700e:	6879      	ldr	r1, [r7, #4]
 8007010:	4613      	mov	r3, r2
 8007012:	011b      	lsls	r3, r3, #4
 8007014:	1a9b      	subs	r3, r3, r2
 8007016:	009b      	lsls	r3, r3, #2
 8007018:	440b      	add	r3, r1
 800701a:	331b      	adds	r3, #27
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	2b01      	cmp	r3, #1
 8007020:	f040 80fa 	bne.w	8007218 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007024:	78fa      	ldrb	r2, [r7, #3]
 8007026:	6879      	ldr	r1, [r7, #4]
 8007028:	4613      	mov	r3, r2
 800702a:	011b      	lsls	r3, r3, #4
 800702c:	1a9b      	subs	r3, r3, r2
 800702e:	009b      	lsls	r3, r3, #2
 8007030:	440b      	add	r3, r1
 8007032:	334c      	adds	r3, #76	@ 0x4c
 8007034:	2202      	movs	r2, #2
 8007036:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007038:	78fb      	ldrb	r3, [r7, #3]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	693b      	ldr	r3, [r7, #16]
 800703e:	4413      	add	r3, r2
 8007040:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007044:	685b      	ldr	r3, [r3, #4]
 8007046:	78fa      	ldrb	r2, [r7, #3]
 8007048:	0151      	lsls	r1, r2, #5
 800704a:	693a      	ldr	r2, [r7, #16]
 800704c:	440a      	add	r2, r1
 800704e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007052:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007056:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007058:	78fb      	ldrb	r3, [r7, #3]
 800705a:	015a      	lsls	r2, r3, #5
 800705c:	693b      	ldr	r3, [r7, #16]
 800705e:	4413      	add	r3, r2
 8007060:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007064:	68db      	ldr	r3, [r3, #12]
 8007066:	78fa      	ldrb	r2, [r7, #3]
 8007068:	0151      	lsls	r1, r2, #5
 800706a:	693a      	ldr	r2, [r7, #16]
 800706c:	440a      	add	r2, r1
 800706e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007072:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007076:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8007078:	78fb      	ldrb	r3, [r7, #3]
 800707a:	015a      	lsls	r2, r3, #5
 800707c:	693b      	ldr	r3, [r7, #16]
 800707e:	4413      	add	r3, r2
 8007080:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	78fa      	ldrb	r2, [r7, #3]
 8007088:	0151      	lsls	r1, r2, #5
 800708a:	693a      	ldr	r2, [r7, #16]
 800708c:	440a      	add	r2, r1
 800708e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007092:	f023 0320 	bic.w	r3, r3, #32
 8007096:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007098:	78fa      	ldrb	r2, [r7, #3]
 800709a:	6879      	ldr	r1, [r7, #4]
 800709c:	4613      	mov	r3, r2
 800709e:	011b      	lsls	r3, r3, #4
 80070a0:	1a9b      	subs	r3, r3, r2
 80070a2:	009b      	lsls	r3, r3, #2
 80070a4:	440b      	add	r3, r1
 80070a6:	3326      	adds	r3, #38	@ 0x26
 80070a8:	781b      	ldrb	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d00b      	beq.n	80070c6 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80070ae:	78fa      	ldrb	r2, [r7, #3]
 80070b0:	6879      	ldr	r1, [r7, #4]
 80070b2:	4613      	mov	r3, r2
 80070b4:	011b      	lsls	r3, r3, #4
 80070b6:	1a9b      	subs	r3, r3, r2
 80070b8:	009b      	lsls	r3, r3, #2
 80070ba:	440b      	add	r3, r1
 80070bc:	3326      	adds	r3, #38	@ 0x26
 80070be:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80070c0:	2b02      	cmp	r3, #2
 80070c2:	f040 80a9 	bne.w	8007218 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 80070c6:	78fb      	ldrb	r3, [r7, #3]
 80070c8:	015a      	lsls	r2, r3, #5
 80070ca:	693b      	ldr	r3, [r7, #16]
 80070cc:	4413      	add	r3, r2
 80070ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80070dc:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80070e4:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 80070e6:	78fb      	ldrb	r3, [r7, #3]
 80070e8:	015a      	lsls	r2, r3, #5
 80070ea:	693b      	ldr	r3, [r7, #16]
 80070ec:	4413      	add	r3, r2
 80070ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070f2:	461a      	mov	r2, r3
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6013      	str	r3, [r2, #0]
 80070f8:	e08e      	b.n	8007218 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 80070fa:	78fa      	ldrb	r2, [r7, #3]
 80070fc:	6879      	ldr	r1, [r7, #4]
 80070fe:	4613      	mov	r3, r2
 8007100:	011b      	lsls	r3, r3, #4
 8007102:	1a9b      	subs	r3, r3, r2
 8007104:	009b      	lsls	r3, r3, #2
 8007106:	440b      	add	r3, r1
 8007108:	334d      	adds	r3, #77	@ 0x4d
 800710a:	781b      	ldrb	r3, [r3, #0]
 800710c:	2b04      	cmp	r3, #4
 800710e:	d143      	bne.n	8007198 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007110:	78fa      	ldrb	r2, [r7, #3]
 8007112:	6879      	ldr	r1, [r7, #4]
 8007114:	4613      	mov	r3, r2
 8007116:	011b      	lsls	r3, r3, #4
 8007118:	1a9b      	subs	r3, r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	440b      	add	r3, r1
 800711e:	334d      	adds	r3, #77	@ 0x4d
 8007120:	2202      	movs	r2, #2
 8007122:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007124:	78fa      	ldrb	r2, [r7, #3]
 8007126:	6879      	ldr	r1, [r7, #4]
 8007128:	4613      	mov	r3, r2
 800712a:	011b      	lsls	r3, r3, #4
 800712c:	1a9b      	subs	r3, r3, r2
 800712e:	009b      	lsls	r3, r3, #2
 8007130:	440b      	add	r3, r1
 8007132:	334c      	adds	r3, #76	@ 0x4c
 8007134:	2202      	movs	r2, #2
 8007136:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007138:	78fa      	ldrb	r2, [r7, #3]
 800713a:	6879      	ldr	r1, [r7, #4]
 800713c:	4613      	mov	r3, r2
 800713e:	011b      	lsls	r3, r3, #4
 8007140:	1a9b      	subs	r3, r3, r2
 8007142:	009b      	lsls	r3, r3, #2
 8007144:	440b      	add	r3, r1
 8007146:	3326      	adds	r3, #38	@ 0x26
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d00a      	beq.n	8007164 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800714e:	78fa      	ldrb	r2, [r7, #3]
 8007150:	6879      	ldr	r1, [r7, #4]
 8007152:	4613      	mov	r3, r2
 8007154:	011b      	lsls	r3, r3, #4
 8007156:	1a9b      	subs	r3, r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	440b      	add	r3, r1
 800715c:	3326      	adds	r3, #38	@ 0x26
 800715e:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007160:	2b02      	cmp	r3, #2
 8007162:	d159      	bne.n	8007218 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8007164:	78fb      	ldrb	r3, [r7, #3]
 8007166:	015a      	lsls	r2, r3, #5
 8007168:	693b      	ldr	r3, [r7, #16]
 800716a:	4413      	add	r3, r2
 800716c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007170:	681b      	ldr	r3, [r3, #0]
 8007172:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800717a:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007182:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8007184:	78fb      	ldrb	r3, [r7, #3]
 8007186:	015a      	lsls	r2, r3, #5
 8007188:	693b      	ldr	r3, [r7, #16]
 800718a:	4413      	add	r3, r2
 800718c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007190:	461a      	mov	r2, r3
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	6013      	str	r3, [r2, #0]
 8007196:	e03f      	b.n	8007218 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8007198:	78fa      	ldrb	r2, [r7, #3]
 800719a:	6879      	ldr	r1, [r7, #4]
 800719c:	4613      	mov	r3, r2
 800719e:	011b      	lsls	r3, r3, #4
 80071a0:	1a9b      	subs	r3, r3, r2
 80071a2:	009b      	lsls	r3, r3, #2
 80071a4:	440b      	add	r3, r1
 80071a6:	334d      	adds	r3, #77	@ 0x4d
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	2b08      	cmp	r3, #8
 80071ac:	d126      	bne.n	80071fc <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80071ae:	78fa      	ldrb	r2, [r7, #3]
 80071b0:	6879      	ldr	r1, [r7, #4]
 80071b2:	4613      	mov	r3, r2
 80071b4:	011b      	lsls	r3, r3, #4
 80071b6:	1a9b      	subs	r3, r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	440b      	add	r3, r1
 80071bc:	334d      	adds	r3, #77	@ 0x4d
 80071be:	2202      	movs	r2, #2
 80071c0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 80071c2:	78fa      	ldrb	r2, [r7, #3]
 80071c4:	6879      	ldr	r1, [r7, #4]
 80071c6:	4613      	mov	r3, r2
 80071c8:	011b      	lsls	r3, r3, #4
 80071ca:	1a9b      	subs	r3, r3, r2
 80071cc:	009b      	lsls	r3, r3, #2
 80071ce:	440b      	add	r3, r1
 80071d0:	3344      	adds	r3, #68	@ 0x44
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	1c59      	adds	r1, r3, #1
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	4613      	mov	r3, r2
 80071da:	011b      	lsls	r3, r3, #4
 80071dc:	1a9b      	subs	r3, r3, r2
 80071de:	009b      	lsls	r3, r3, #2
 80071e0:	4403      	add	r3, r0
 80071e2:	3344      	adds	r3, #68	@ 0x44
 80071e4:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 80071e6:	78fa      	ldrb	r2, [r7, #3]
 80071e8:	6879      	ldr	r1, [r7, #4]
 80071ea:	4613      	mov	r3, r2
 80071ec:	011b      	lsls	r3, r3, #4
 80071ee:	1a9b      	subs	r3, r3, r2
 80071f0:	009b      	lsls	r3, r3, #2
 80071f2:	440b      	add	r3, r1
 80071f4:	334c      	adds	r3, #76	@ 0x4c
 80071f6:	2204      	movs	r2, #4
 80071f8:	701a      	strb	r2, [r3, #0]
 80071fa:	e00d      	b.n	8007218 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 80071fc:	78fa      	ldrb	r2, [r7, #3]
 80071fe:	6879      	ldr	r1, [r7, #4]
 8007200:	4613      	mov	r3, r2
 8007202:	011b      	lsls	r3, r3, #4
 8007204:	1a9b      	subs	r3, r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	440b      	add	r3, r1
 800720a:	334d      	adds	r3, #77	@ 0x4d
 800720c:	781b      	ldrb	r3, [r3, #0]
 800720e:	2b02      	cmp	r3, #2
 8007210:	f000 8100 	beq.w	8007414 <HCD_HC_IN_IRQHandler+0xcca>
 8007214:	e000      	b.n	8007218 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007216:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007218:	78fa      	ldrb	r2, [r7, #3]
 800721a:	6879      	ldr	r1, [r7, #4]
 800721c:	4613      	mov	r3, r2
 800721e:	011b      	lsls	r3, r3, #4
 8007220:	1a9b      	subs	r3, r3, r2
 8007222:	009b      	lsls	r3, r3, #2
 8007224:	440b      	add	r3, r1
 8007226:	334c      	adds	r3, #76	@ 0x4c
 8007228:	781a      	ldrb	r2, [r3, #0]
 800722a:	78fb      	ldrb	r3, [r7, #3]
 800722c:	4619      	mov	r1, r3
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	f005 fcac 	bl	800cb8c <HAL_HCD_HC_NotifyURBChange_Callback>
 8007234:	e0ef      	b.n	8007416 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	78fa      	ldrb	r2, [r7, #3]
 800723c:	4611      	mov	r1, r2
 800723e:	4618      	mov	r0, r3
 8007240:	f002 fba8 	bl	8009994 <USB_ReadChInterrupts>
 8007244:	4603      	mov	r3, r0
 8007246:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800724a:	2b40      	cmp	r3, #64	@ 0x40
 800724c:	d12f      	bne.n	80072ae <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800724e:	78fb      	ldrb	r3, [r7, #3]
 8007250:	015a      	lsls	r2, r3, #5
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	4413      	add	r3, r2
 8007256:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800725a:	461a      	mov	r2, r3
 800725c:	2340      	movs	r3, #64	@ 0x40
 800725e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 8007260:	78fa      	ldrb	r2, [r7, #3]
 8007262:	6879      	ldr	r1, [r7, #4]
 8007264:	4613      	mov	r3, r2
 8007266:	011b      	lsls	r3, r3, #4
 8007268:	1a9b      	subs	r3, r3, r2
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	440b      	add	r3, r1
 800726e:	334d      	adds	r3, #77	@ 0x4d
 8007270:	2205      	movs	r2, #5
 8007272:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8007274:	78fa      	ldrb	r2, [r7, #3]
 8007276:	6879      	ldr	r1, [r7, #4]
 8007278:	4613      	mov	r3, r2
 800727a:	011b      	lsls	r3, r3, #4
 800727c:	1a9b      	subs	r3, r3, r2
 800727e:	009b      	lsls	r3, r3, #2
 8007280:	440b      	add	r3, r1
 8007282:	331a      	adds	r3, #26
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d109      	bne.n	800729e <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800728a:	78fa      	ldrb	r2, [r7, #3]
 800728c:	6879      	ldr	r1, [r7, #4]
 800728e:	4613      	mov	r3, r2
 8007290:	011b      	lsls	r3, r3, #4
 8007292:	1a9b      	subs	r3, r3, r2
 8007294:	009b      	lsls	r3, r3, #2
 8007296:	440b      	add	r3, r1
 8007298:	3344      	adds	r3, #68	@ 0x44
 800729a:	2200      	movs	r2, #0
 800729c:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	78fa      	ldrb	r2, [r7, #3]
 80072a4:	4611      	mov	r1, r2
 80072a6:	4618      	mov	r0, r3
 80072a8:	f003 f917 	bl	800a4da <USB_HC_Halt>
 80072ac:	e0b3      	b.n	8007416 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	78fa      	ldrb	r2, [r7, #3]
 80072b4:	4611      	mov	r1, r2
 80072b6:	4618      	mov	r0, r3
 80072b8:	f002 fb6c 	bl	8009994 <USB_ReadChInterrupts>
 80072bc:	4603      	mov	r3, r0
 80072be:	f003 0310 	and.w	r3, r3, #16
 80072c2:	2b10      	cmp	r3, #16
 80072c4:	f040 80a7 	bne.w	8007416 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 80072c8:	78fa      	ldrb	r2, [r7, #3]
 80072ca:	6879      	ldr	r1, [r7, #4]
 80072cc:	4613      	mov	r3, r2
 80072ce:	011b      	lsls	r3, r3, #4
 80072d0:	1a9b      	subs	r3, r3, r2
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	440b      	add	r3, r1
 80072d6:	3326      	adds	r3, #38	@ 0x26
 80072d8:	781b      	ldrb	r3, [r3, #0]
 80072da:	2b03      	cmp	r3, #3
 80072dc:	d11b      	bne.n	8007316 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80072de:	78fa      	ldrb	r2, [r7, #3]
 80072e0:	6879      	ldr	r1, [r7, #4]
 80072e2:	4613      	mov	r3, r2
 80072e4:	011b      	lsls	r3, r3, #4
 80072e6:	1a9b      	subs	r3, r3, r2
 80072e8:	009b      	lsls	r3, r3, #2
 80072ea:	440b      	add	r3, r1
 80072ec:	3344      	adds	r3, #68	@ 0x44
 80072ee:	2200      	movs	r2, #0
 80072f0:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 80072f2:	78fa      	ldrb	r2, [r7, #3]
 80072f4:	6879      	ldr	r1, [r7, #4]
 80072f6:	4613      	mov	r3, r2
 80072f8:	011b      	lsls	r3, r3, #4
 80072fa:	1a9b      	subs	r3, r3, r2
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	440b      	add	r3, r1
 8007300:	334d      	adds	r3, #77	@ 0x4d
 8007302:	2204      	movs	r2, #4
 8007304:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	78fa      	ldrb	r2, [r7, #3]
 800730c:	4611      	mov	r1, r2
 800730e:	4618      	mov	r0, r3
 8007310:	f003 f8e3 	bl	800a4da <USB_HC_Halt>
 8007314:	e03f      	b.n	8007396 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8007316:	78fa      	ldrb	r2, [r7, #3]
 8007318:	6879      	ldr	r1, [r7, #4]
 800731a:	4613      	mov	r3, r2
 800731c:	011b      	lsls	r3, r3, #4
 800731e:	1a9b      	subs	r3, r3, r2
 8007320:	009b      	lsls	r3, r3, #2
 8007322:	440b      	add	r3, r1
 8007324:	3326      	adds	r3, #38	@ 0x26
 8007326:	781b      	ldrb	r3, [r3, #0]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d00a      	beq.n	8007342 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800732c:	78fa      	ldrb	r2, [r7, #3]
 800732e:	6879      	ldr	r1, [r7, #4]
 8007330:	4613      	mov	r3, r2
 8007332:	011b      	lsls	r3, r3, #4
 8007334:	1a9b      	subs	r3, r3, r2
 8007336:	009b      	lsls	r3, r3, #2
 8007338:	440b      	add	r3, r1
 800733a:	3326      	adds	r3, #38	@ 0x26
 800733c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800733e:	2b02      	cmp	r3, #2
 8007340:	d129      	bne.n	8007396 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8007342:	78fa      	ldrb	r2, [r7, #3]
 8007344:	6879      	ldr	r1, [r7, #4]
 8007346:	4613      	mov	r3, r2
 8007348:	011b      	lsls	r3, r3, #4
 800734a:	1a9b      	subs	r3, r3, r2
 800734c:	009b      	lsls	r3, r3, #2
 800734e:	440b      	add	r3, r1
 8007350:	3344      	adds	r3, #68	@ 0x44
 8007352:	2200      	movs	r2, #0
 8007354:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	799b      	ldrb	r3, [r3, #6]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d00a      	beq.n	8007374 <HCD_HC_IN_IRQHandler+0xc2a>
 800735e:	78fa      	ldrb	r2, [r7, #3]
 8007360:	6879      	ldr	r1, [r7, #4]
 8007362:	4613      	mov	r3, r2
 8007364:	011b      	lsls	r3, r3, #4
 8007366:	1a9b      	subs	r3, r3, r2
 8007368:	009b      	lsls	r3, r3, #2
 800736a:	440b      	add	r3, r1
 800736c:	331b      	adds	r3, #27
 800736e:	781b      	ldrb	r3, [r3, #0]
 8007370:	2b01      	cmp	r3, #1
 8007372:	d110      	bne.n	8007396 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8007374:	78fa      	ldrb	r2, [r7, #3]
 8007376:	6879      	ldr	r1, [r7, #4]
 8007378:	4613      	mov	r3, r2
 800737a:	011b      	lsls	r3, r3, #4
 800737c:	1a9b      	subs	r3, r3, r2
 800737e:	009b      	lsls	r3, r3, #2
 8007380:	440b      	add	r3, r1
 8007382:	334d      	adds	r3, #77	@ 0x4d
 8007384:	2204      	movs	r2, #4
 8007386:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	78fa      	ldrb	r2, [r7, #3]
 800738e:	4611      	mov	r1, r2
 8007390:	4618      	mov	r0, r3
 8007392:	f003 f8a2 	bl	800a4da <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8007396:	78fa      	ldrb	r2, [r7, #3]
 8007398:	6879      	ldr	r1, [r7, #4]
 800739a:	4613      	mov	r3, r2
 800739c:	011b      	lsls	r3, r3, #4
 800739e:	1a9b      	subs	r3, r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	440b      	add	r3, r1
 80073a4:	331b      	adds	r3, #27
 80073a6:	781b      	ldrb	r3, [r3, #0]
 80073a8:	2b01      	cmp	r3, #1
 80073aa:	d129      	bne.n	8007400 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80073ac:	78fa      	ldrb	r2, [r7, #3]
 80073ae:	6879      	ldr	r1, [r7, #4]
 80073b0:	4613      	mov	r3, r2
 80073b2:	011b      	lsls	r3, r3, #4
 80073b4:	1a9b      	subs	r3, r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	440b      	add	r3, r1
 80073ba:	331b      	adds	r3, #27
 80073bc:	2200      	movs	r2, #0
 80073be:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80073c0:	78fb      	ldrb	r3, [r7, #3]
 80073c2:	015a      	lsls	r2, r3, #5
 80073c4:	693b      	ldr	r3, [r7, #16]
 80073c6:	4413      	add	r3, r2
 80073c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073cc:	685b      	ldr	r3, [r3, #4]
 80073ce:	78fa      	ldrb	r2, [r7, #3]
 80073d0:	0151      	lsls	r1, r2, #5
 80073d2:	693a      	ldr	r2, [r7, #16]
 80073d4:	440a      	add	r2, r1
 80073d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80073de:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 80073e0:	78fb      	ldrb	r3, [r7, #3]
 80073e2:	015a      	lsls	r2, r3, #5
 80073e4:	693b      	ldr	r3, [r7, #16]
 80073e6:	4413      	add	r3, r2
 80073e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073ec:	68db      	ldr	r3, [r3, #12]
 80073ee:	78fa      	ldrb	r2, [r7, #3]
 80073f0:	0151      	lsls	r1, r2, #5
 80073f2:	693a      	ldr	r2, [r7, #16]
 80073f4:	440a      	add	r2, r1
 80073f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073fa:	f043 0320 	orr.w	r3, r3, #32
 80073fe:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8007400:	78fb      	ldrb	r3, [r7, #3]
 8007402:	015a      	lsls	r2, r3, #5
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	4413      	add	r3, r2
 8007408:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800740c:	461a      	mov	r2, r3
 800740e:	2310      	movs	r3, #16
 8007410:	6093      	str	r3, [r2, #8]
 8007412:	e000      	b.n	8007416 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8007414:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 8007416:	3718      	adds	r7, #24
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b086      	sub	sp, #24
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	460b      	mov	r3, r1
 8007426:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	78fa      	ldrb	r2, [r7, #3]
 8007438:	4611      	mov	r1, r2
 800743a:	4618      	mov	r0, r3
 800743c:	f002 faaa 	bl	8009994 <USB_ReadChInterrupts>
 8007440:	4603      	mov	r3, r0
 8007442:	f003 0304 	and.w	r3, r3, #4
 8007446:	2b04      	cmp	r3, #4
 8007448:	d11b      	bne.n	8007482 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800744a:	78fb      	ldrb	r3, [r7, #3]
 800744c:	015a      	lsls	r2, r3, #5
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	4413      	add	r3, r2
 8007452:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007456:	461a      	mov	r2, r3
 8007458:	2304      	movs	r3, #4
 800745a:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800745c:	78fa      	ldrb	r2, [r7, #3]
 800745e:	6879      	ldr	r1, [r7, #4]
 8007460:	4613      	mov	r3, r2
 8007462:	011b      	lsls	r3, r3, #4
 8007464:	1a9b      	subs	r3, r3, r2
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	440b      	add	r3, r1
 800746a:	334d      	adds	r3, #77	@ 0x4d
 800746c:	2207      	movs	r2, #7
 800746e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	78fa      	ldrb	r2, [r7, #3]
 8007476:	4611      	mov	r1, r2
 8007478:	4618      	mov	r0, r3
 800747a:	f003 f82e 	bl	800a4da <USB_HC_Halt>
 800747e:	f000 bc89 	b.w	8007d94 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	78fa      	ldrb	r2, [r7, #3]
 8007488:	4611      	mov	r1, r2
 800748a:	4618      	mov	r0, r3
 800748c:	f002 fa82 	bl	8009994 <USB_ReadChInterrupts>
 8007490:	4603      	mov	r3, r0
 8007492:	f003 0320 	and.w	r3, r3, #32
 8007496:	2b20      	cmp	r3, #32
 8007498:	f040 8082 	bne.w	80075a0 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800749c:	78fb      	ldrb	r3, [r7, #3]
 800749e:	015a      	lsls	r2, r3, #5
 80074a0:	693b      	ldr	r3, [r7, #16]
 80074a2:	4413      	add	r3, r2
 80074a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80074a8:	461a      	mov	r2, r3
 80074aa:	2320      	movs	r3, #32
 80074ac:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80074ae:	78fa      	ldrb	r2, [r7, #3]
 80074b0:	6879      	ldr	r1, [r7, #4]
 80074b2:	4613      	mov	r3, r2
 80074b4:	011b      	lsls	r3, r3, #4
 80074b6:	1a9b      	subs	r3, r3, r2
 80074b8:	009b      	lsls	r3, r3, #2
 80074ba:	440b      	add	r3, r1
 80074bc:	3319      	adds	r3, #25
 80074be:	781b      	ldrb	r3, [r3, #0]
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	d124      	bne.n	800750e <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 80074c4:	78fa      	ldrb	r2, [r7, #3]
 80074c6:	6879      	ldr	r1, [r7, #4]
 80074c8:	4613      	mov	r3, r2
 80074ca:	011b      	lsls	r3, r3, #4
 80074cc:	1a9b      	subs	r3, r3, r2
 80074ce:	009b      	lsls	r3, r3, #2
 80074d0:	440b      	add	r3, r1
 80074d2:	3319      	adds	r3, #25
 80074d4:	2200      	movs	r2, #0
 80074d6:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80074d8:	78fa      	ldrb	r2, [r7, #3]
 80074da:	6879      	ldr	r1, [r7, #4]
 80074dc:	4613      	mov	r3, r2
 80074de:	011b      	lsls	r3, r3, #4
 80074e0:	1a9b      	subs	r3, r3, r2
 80074e2:	009b      	lsls	r3, r3, #2
 80074e4:	440b      	add	r3, r1
 80074e6:	334c      	adds	r3, #76	@ 0x4c
 80074e8:	2202      	movs	r2, #2
 80074ea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 80074ec:	78fa      	ldrb	r2, [r7, #3]
 80074ee:	6879      	ldr	r1, [r7, #4]
 80074f0:	4613      	mov	r3, r2
 80074f2:	011b      	lsls	r3, r3, #4
 80074f4:	1a9b      	subs	r3, r3, r2
 80074f6:	009b      	lsls	r3, r3, #2
 80074f8:	440b      	add	r3, r1
 80074fa:	334d      	adds	r3, #77	@ 0x4d
 80074fc:	2203      	movs	r2, #3
 80074fe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	78fa      	ldrb	r2, [r7, #3]
 8007506:	4611      	mov	r1, r2
 8007508:	4618      	mov	r0, r3
 800750a:	f002 ffe6 	bl	800a4da <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 800750e:	78fa      	ldrb	r2, [r7, #3]
 8007510:	6879      	ldr	r1, [r7, #4]
 8007512:	4613      	mov	r3, r2
 8007514:	011b      	lsls	r3, r3, #4
 8007516:	1a9b      	subs	r3, r3, r2
 8007518:	009b      	lsls	r3, r3, #2
 800751a:	440b      	add	r3, r1
 800751c:	331a      	adds	r3, #26
 800751e:	781b      	ldrb	r3, [r3, #0]
 8007520:	2b01      	cmp	r3, #1
 8007522:	f040 8437 	bne.w	8007d94 <HCD_HC_OUT_IRQHandler+0x978>
 8007526:	78fa      	ldrb	r2, [r7, #3]
 8007528:	6879      	ldr	r1, [r7, #4]
 800752a:	4613      	mov	r3, r2
 800752c:	011b      	lsls	r3, r3, #4
 800752e:	1a9b      	subs	r3, r3, r2
 8007530:	009b      	lsls	r3, r3, #2
 8007532:	440b      	add	r3, r1
 8007534:	331b      	adds	r3, #27
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	f040 842b 	bne.w	8007d94 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 800753e:	78fa      	ldrb	r2, [r7, #3]
 8007540:	6879      	ldr	r1, [r7, #4]
 8007542:	4613      	mov	r3, r2
 8007544:	011b      	lsls	r3, r3, #4
 8007546:	1a9b      	subs	r3, r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	440b      	add	r3, r1
 800754c:	3326      	adds	r3, #38	@ 0x26
 800754e:	781b      	ldrb	r3, [r3, #0]
 8007550:	2b01      	cmp	r3, #1
 8007552:	d009      	beq.n	8007568 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8007554:	78fa      	ldrb	r2, [r7, #3]
 8007556:	6879      	ldr	r1, [r7, #4]
 8007558:	4613      	mov	r3, r2
 800755a:	011b      	lsls	r3, r3, #4
 800755c:	1a9b      	subs	r3, r3, r2
 800755e:	009b      	lsls	r3, r3, #2
 8007560:	440b      	add	r3, r1
 8007562:	331b      	adds	r3, #27
 8007564:	2201      	movs	r2, #1
 8007566:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8007568:	78fa      	ldrb	r2, [r7, #3]
 800756a:	6879      	ldr	r1, [r7, #4]
 800756c:	4613      	mov	r3, r2
 800756e:	011b      	lsls	r3, r3, #4
 8007570:	1a9b      	subs	r3, r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	440b      	add	r3, r1
 8007576:	334d      	adds	r3, #77	@ 0x4d
 8007578:	2203      	movs	r2, #3
 800757a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	78fa      	ldrb	r2, [r7, #3]
 8007582:	4611      	mov	r1, r2
 8007584:	4618      	mov	r0, r3
 8007586:	f002 ffa8 	bl	800a4da <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 800758a:	78fa      	ldrb	r2, [r7, #3]
 800758c:	6879      	ldr	r1, [r7, #4]
 800758e:	4613      	mov	r3, r2
 8007590:	011b      	lsls	r3, r3, #4
 8007592:	1a9b      	subs	r3, r3, r2
 8007594:	009b      	lsls	r3, r3, #2
 8007596:	440b      	add	r3, r1
 8007598:	3344      	adds	r3, #68	@ 0x44
 800759a:	2200      	movs	r2, #0
 800759c:	601a      	str	r2, [r3, #0]
 800759e:	e3f9      	b.n	8007d94 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	78fa      	ldrb	r2, [r7, #3]
 80075a6:	4611      	mov	r1, r2
 80075a8:	4618      	mov	r0, r3
 80075aa:	f002 f9f3 	bl	8009994 <USB_ReadChInterrupts>
 80075ae:	4603      	mov	r3, r0
 80075b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80075b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80075b8:	d111      	bne.n	80075de <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80075ba:	78fb      	ldrb	r3, [r7, #3]
 80075bc:	015a      	lsls	r2, r3, #5
 80075be:	693b      	ldr	r3, [r7, #16]
 80075c0:	4413      	add	r3, r2
 80075c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80075c6:	461a      	mov	r2, r3
 80075c8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80075cc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	78fa      	ldrb	r2, [r7, #3]
 80075d4:	4611      	mov	r1, r2
 80075d6:	4618      	mov	r0, r3
 80075d8:	f002 ff7f 	bl	800a4da <USB_HC_Halt>
 80075dc:	e3da      	b.n	8007d94 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	78fa      	ldrb	r2, [r7, #3]
 80075e4:	4611      	mov	r1, r2
 80075e6:	4618      	mov	r0, r3
 80075e8:	f002 f9d4 	bl	8009994 <USB_ReadChInterrupts>
 80075ec:	4603      	mov	r3, r0
 80075ee:	f003 0301 	and.w	r3, r3, #1
 80075f2:	2b01      	cmp	r3, #1
 80075f4:	d168      	bne.n	80076c8 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80075f6:	78fa      	ldrb	r2, [r7, #3]
 80075f8:	6879      	ldr	r1, [r7, #4]
 80075fa:	4613      	mov	r3, r2
 80075fc:	011b      	lsls	r3, r3, #4
 80075fe:	1a9b      	subs	r3, r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	440b      	add	r3, r1
 8007604:	3344      	adds	r3, #68	@ 0x44
 8007606:	2200      	movs	r2, #0
 8007608:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	78fa      	ldrb	r2, [r7, #3]
 8007610:	4611      	mov	r1, r2
 8007612:	4618      	mov	r0, r3
 8007614:	f002 f9be 	bl	8009994 <USB_ReadChInterrupts>
 8007618:	4603      	mov	r3, r0
 800761a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800761e:	2b40      	cmp	r3, #64	@ 0x40
 8007620:	d112      	bne.n	8007648 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8007622:	78fa      	ldrb	r2, [r7, #3]
 8007624:	6879      	ldr	r1, [r7, #4]
 8007626:	4613      	mov	r3, r2
 8007628:	011b      	lsls	r3, r3, #4
 800762a:	1a9b      	subs	r3, r3, r2
 800762c:	009b      	lsls	r3, r3, #2
 800762e:	440b      	add	r3, r1
 8007630:	3319      	adds	r3, #25
 8007632:	2201      	movs	r2, #1
 8007634:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8007636:	78fb      	ldrb	r3, [r7, #3]
 8007638:	015a      	lsls	r2, r3, #5
 800763a:	693b      	ldr	r3, [r7, #16]
 800763c:	4413      	add	r3, r2
 800763e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007642:	461a      	mov	r2, r3
 8007644:	2340      	movs	r3, #64	@ 0x40
 8007646:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 8007648:	78fa      	ldrb	r2, [r7, #3]
 800764a:	6879      	ldr	r1, [r7, #4]
 800764c:	4613      	mov	r3, r2
 800764e:	011b      	lsls	r3, r3, #4
 8007650:	1a9b      	subs	r3, r3, r2
 8007652:	009b      	lsls	r3, r3, #2
 8007654:	440b      	add	r3, r1
 8007656:	331b      	adds	r3, #27
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d019      	beq.n	8007692 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 800765e:	78fa      	ldrb	r2, [r7, #3]
 8007660:	6879      	ldr	r1, [r7, #4]
 8007662:	4613      	mov	r3, r2
 8007664:	011b      	lsls	r3, r3, #4
 8007666:	1a9b      	subs	r3, r3, r2
 8007668:	009b      	lsls	r3, r3, #2
 800766a:	440b      	add	r3, r1
 800766c:	331b      	adds	r3, #27
 800766e:	2200      	movs	r2, #0
 8007670:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007672:	78fb      	ldrb	r3, [r7, #3]
 8007674:	015a      	lsls	r2, r3, #5
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	4413      	add	r3, r2
 800767a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	78fa      	ldrb	r2, [r7, #3]
 8007682:	0151      	lsls	r1, r2, #5
 8007684:	693a      	ldr	r2, [r7, #16]
 8007686:	440a      	add	r2, r1
 8007688:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800768c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007690:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8007692:	78fb      	ldrb	r3, [r7, #3]
 8007694:	015a      	lsls	r2, r3, #5
 8007696:	693b      	ldr	r3, [r7, #16]
 8007698:	4413      	add	r3, r2
 800769a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800769e:	461a      	mov	r2, r3
 80076a0:	2301      	movs	r3, #1
 80076a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80076a4:	78fa      	ldrb	r2, [r7, #3]
 80076a6:	6879      	ldr	r1, [r7, #4]
 80076a8:	4613      	mov	r3, r2
 80076aa:	011b      	lsls	r3, r3, #4
 80076ac:	1a9b      	subs	r3, r3, r2
 80076ae:	009b      	lsls	r3, r3, #2
 80076b0:	440b      	add	r3, r1
 80076b2:	334d      	adds	r3, #77	@ 0x4d
 80076b4:	2201      	movs	r2, #1
 80076b6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	78fa      	ldrb	r2, [r7, #3]
 80076be:	4611      	mov	r1, r2
 80076c0:	4618      	mov	r0, r3
 80076c2:	f002 ff0a 	bl	800a4da <USB_HC_Halt>
 80076c6:	e365      	b.n	8007d94 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	681b      	ldr	r3, [r3, #0]
 80076cc:	78fa      	ldrb	r2, [r7, #3]
 80076ce:	4611      	mov	r1, r2
 80076d0:	4618      	mov	r0, r3
 80076d2:	f002 f95f 	bl	8009994 <USB_ReadChInterrupts>
 80076d6:	4603      	mov	r3, r0
 80076d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80076dc:	2b40      	cmp	r3, #64	@ 0x40
 80076de:	d139      	bne.n	8007754 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 80076e0:	78fa      	ldrb	r2, [r7, #3]
 80076e2:	6879      	ldr	r1, [r7, #4]
 80076e4:	4613      	mov	r3, r2
 80076e6:	011b      	lsls	r3, r3, #4
 80076e8:	1a9b      	subs	r3, r3, r2
 80076ea:	009b      	lsls	r3, r3, #2
 80076ec:	440b      	add	r3, r1
 80076ee:	334d      	adds	r3, #77	@ 0x4d
 80076f0:	2205      	movs	r2, #5
 80076f2:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80076f4:	78fa      	ldrb	r2, [r7, #3]
 80076f6:	6879      	ldr	r1, [r7, #4]
 80076f8:	4613      	mov	r3, r2
 80076fa:	011b      	lsls	r3, r3, #4
 80076fc:	1a9b      	subs	r3, r3, r2
 80076fe:	009b      	lsls	r3, r3, #2
 8007700:	440b      	add	r3, r1
 8007702:	331a      	adds	r3, #26
 8007704:	781b      	ldrb	r3, [r3, #0]
 8007706:	2b00      	cmp	r3, #0
 8007708:	d109      	bne.n	800771e <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800770a:	78fa      	ldrb	r2, [r7, #3]
 800770c:	6879      	ldr	r1, [r7, #4]
 800770e:	4613      	mov	r3, r2
 8007710:	011b      	lsls	r3, r3, #4
 8007712:	1a9b      	subs	r3, r3, r2
 8007714:	009b      	lsls	r3, r3, #2
 8007716:	440b      	add	r3, r1
 8007718:	3319      	adds	r3, #25
 800771a:	2201      	movs	r2, #1
 800771c:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 800771e:	78fa      	ldrb	r2, [r7, #3]
 8007720:	6879      	ldr	r1, [r7, #4]
 8007722:	4613      	mov	r3, r2
 8007724:	011b      	lsls	r3, r3, #4
 8007726:	1a9b      	subs	r3, r3, r2
 8007728:	009b      	lsls	r3, r3, #2
 800772a:	440b      	add	r3, r1
 800772c:	3344      	adds	r3, #68	@ 0x44
 800772e:	2200      	movs	r2, #0
 8007730:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	78fa      	ldrb	r2, [r7, #3]
 8007738:	4611      	mov	r1, r2
 800773a:	4618      	mov	r0, r3
 800773c:	f002 fecd 	bl	800a4da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8007740:	78fb      	ldrb	r3, [r7, #3]
 8007742:	015a      	lsls	r2, r3, #5
 8007744:	693b      	ldr	r3, [r7, #16]
 8007746:	4413      	add	r3, r2
 8007748:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800774c:	461a      	mov	r2, r3
 800774e:	2340      	movs	r3, #64	@ 0x40
 8007750:	6093      	str	r3, [r2, #8]
 8007752:	e31f      	b.n	8007d94 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	78fa      	ldrb	r2, [r7, #3]
 800775a:	4611      	mov	r1, r2
 800775c:	4618      	mov	r0, r3
 800775e:	f002 f919 	bl	8009994 <USB_ReadChInterrupts>
 8007762:	4603      	mov	r3, r0
 8007764:	f003 0308 	and.w	r3, r3, #8
 8007768:	2b08      	cmp	r3, #8
 800776a:	d11a      	bne.n	80077a2 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800776c:	78fb      	ldrb	r3, [r7, #3]
 800776e:	015a      	lsls	r2, r3, #5
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	4413      	add	r3, r2
 8007774:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007778:	461a      	mov	r2, r3
 800777a:	2308      	movs	r3, #8
 800777c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800777e:	78fa      	ldrb	r2, [r7, #3]
 8007780:	6879      	ldr	r1, [r7, #4]
 8007782:	4613      	mov	r3, r2
 8007784:	011b      	lsls	r3, r3, #4
 8007786:	1a9b      	subs	r3, r3, r2
 8007788:	009b      	lsls	r3, r3, #2
 800778a:	440b      	add	r3, r1
 800778c:	334d      	adds	r3, #77	@ 0x4d
 800778e:	2206      	movs	r2, #6
 8007790:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	78fa      	ldrb	r2, [r7, #3]
 8007798:	4611      	mov	r1, r2
 800779a:	4618      	mov	r0, r3
 800779c:	f002 fe9d 	bl	800a4da <USB_HC_Halt>
 80077a0:	e2f8      	b.n	8007d94 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	78fa      	ldrb	r2, [r7, #3]
 80077a8:	4611      	mov	r1, r2
 80077aa:	4618      	mov	r0, r3
 80077ac:	f002 f8f2 	bl	8009994 <USB_ReadChInterrupts>
 80077b0:	4603      	mov	r3, r0
 80077b2:	f003 0310 	and.w	r3, r3, #16
 80077b6:	2b10      	cmp	r3, #16
 80077b8:	d144      	bne.n	8007844 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80077ba:	78fa      	ldrb	r2, [r7, #3]
 80077bc:	6879      	ldr	r1, [r7, #4]
 80077be:	4613      	mov	r3, r2
 80077c0:	011b      	lsls	r3, r3, #4
 80077c2:	1a9b      	subs	r3, r3, r2
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	440b      	add	r3, r1
 80077c8:	3344      	adds	r3, #68	@ 0x44
 80077ca:	2200      	movs	r2, #0
 80077cc:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 80077ce:	78fa      	ldrb	r2, [r7, #3]
 80077d0:	6879      	ldr	r1, [r7, #4]
 80077d2:	4613      	mov	r3, r2
 80077d4:	011b      	lsls	r3, r3, #4
 80077d6:	1a9b      	subs	r3, r3, r2
 80077d8:	009b      	lsls	r3, r3, #2
 80077da:	440b      	add	r3, r1
 80077dc:	334d      	adds	r3, #77	@ 0x4d
 80077de:	2204      	movs	r2, #4
 80077e0:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 80077e2:	78fa      	ldrb	r2, [r7, #3]
 80077e4:	6879      	ldr	r1, [r7, #4]
 80077e6:	4613      	mov	r3, r2
 80077e8:	011b      	lsls	r3, r3, #4
 80077ea:	1a9b      	subs	r3, r3, r2
 80077ec:	009b      	lsls	r3, r3, #2
 80077ee:	440b      	add	r3, r1
 80077f0:	3319      	adds	r3, #25
 80077f2:	781b      	ldrb	r3, [r3, #0]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d114      	bne.n	8007822 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 80077f8:	78fa      	ldrb	r2, [r7, #3]
 80077fa:	6879      	ldr	r1, [r7, #4]
 80077fc:	4613      	mov	r3, r2
 80077fe:	011b      	lsls	r3, r3, #4
 8007800:	1a9b      	subs	r3, r3, r2
 8007802:	009b      	lsls	r3, r3, #2
 8007804:	440b      	add	r3, r1
 8007806:	3318      	adds	r3, #24
 8007808:	781b      	ldrb	r3, [r3, #0]
 800780a:	2b00      	cmp	r3, #0
 800780c:	d109      	bne.n	8007822 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 800780e:	78fa      	ldrb	r2, [r7, #3]
 8007810:	6879      	ldr	r1, [r7, #4]
 8007812:	4613      	mov	r3, r2
 8007814:	011b      	lsls	r3, r3, #4
 8007816:	1a9b      	subs	r3, r3, r2
 8007818:	009b      	lsls	r3, r3, #2
 800781a:	440b      	add	r3, r1
 800781c:	3319      	adds	r3, #25
 800781e:	2201      	movs	r2, #1
 8007820:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	78fa      	ldrb	r2, [r7, #3]
 8007828:	4611      	mov	r1, r2
 800782a:	4618      	mov	r0, r3
 800782c:	f002 fe55 	bl	800a4da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8007830:	78fb      	ldrb	r3, [r7, #3]
 8007832:	015a      	lsls	r2, r3, #5
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	4413      	add	r3, r2
 8007838:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800783c:	461a      	mov	r2, r3
 800783e:	2310      	movs	r3, #16
 8007840:	6093      	str	r3, [r2, #8]
 8007842:	e2a7      	b.n	8007d94 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	78fa      	ldrb	r2, [r7, #3]
 800784a:	4611      	mov	r1, r2
 800784c:	4618      	mov	r0, r3
 800784e:	f002 f8a1 	bl	8009994 <USB_ReadChInterrupts>
 8007852:	4603      	mov	r3, r0
 8007854:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007858:	2b80      	cmp	r3, #128	@ 0x80
 800785a:	f040 8083 	bne.w	8007964 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	799b      	ldrb	r3, [r3, #6]
 8007862:	2b00      	cmp	r3, #0
 8007864:	d111      	bne.n	800788a <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8007866:	78fa      	ldrb	r2, [r7, #3]
 8007868:	6879      	ldr	r1, [r7, #4]
 800786a:	4613      	mov	r3, r2
 800786c:	011b      	lsls	r3, r3, #4
 800786e:	1a9b      	subs	r3, r3, r2
 8007870:	009b      	lsls	r3, r3, #2
 8007872:	440b      	add	r3, r1
 8007874:	334d      	adds	r3, #77	@ 0x4d
 8007876:	2207      	movs	r2, #7
 8007878:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	78fa      	ldrb	r2, [r7, #3]
 8007880:	4611      	mov	r1, r2
 8007882:	4618      	mov	r0, r3
 8007884:	f002 fe29 	bl	800a4da <USB_HC_Halt>
 8007888:	e062      	b.n	8007950 <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 800788a:	78fa      	ldrb	r2, [r7, #3]
 800788c:	6879      	ldr	r1, [r7, #4]
 800788e:	4613      	mov	r3, r2
 8007890:	011b      	lsls	r3, r3, #4
 8007892:	1a9b      	subs	r3, r3, r2
 8007894:	009b      	lsls	r3, r3, #2
 8007896:	440b      	add	r3, r1
 8007898:	3344      	adds	r3, #68	@ 0x44
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	1c59      	adds	r1, r3, #1
 800789e:	6878      	ldr	r0, [r7, #4]
 80078a0:	4613      	mov	r3, r2
 80078a2:	011b      	lsls	r3, r3, #4
 80078a4:	1a9b      	subs	r3, r3, r2
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	4403      	add	r3, r0
 80078aa:	3344      	adds	r3, #68	@ 0x44
 80078ac:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80078ae:	78fa      	ldrb	r2, [r7, #3]
 80078b0:	6879      	ldr	r1, [r7, #4]
 80078b2:	4613      	mov	r3, r2
 80078b4:	011b      	lsls	r3, r3, #4
 80078b6:	1a9b      	subs	r3, r3, r2
 80078b8:	009b      	lsls	r3, r3, #2
 80078ba:	440b      	add	r3, r1
 80078bc:	3344      	adds	r3, #68	@ 0x44
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	2b02      	cmp	r3, #2
 80078c2:	d922      	bls.n	800790a <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 80078c4:	78fa      	ldrb	r2, [r7, #3]
 80078c6:	6879      	ldr	r1, [r7, #4]
 80078c8:	4613      	mov	r3, r2
 80078ca:	011b      	lsls	r3, r3, #4
 80078cc:	1a9b      	subs	r3, r3, r2
 80078ce:	009b      	lsls	r3, r3, #2
 80078d0:	440b      	add	r3, r1
 80078d2:	3344      	adds	r3, #68	@ 0x44
 80078d4:	2200      	movs	r2, #0
 80078d6:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 80078d8:	78fa      	ldrb	r2, [r7, #3]
 80078da:	6879      	ldr	r1, [r7, #4]
 80078dc:	4613      	mov	r3, r2
 80078de:	011b      	lsls	r3, r3, #4
 80078e0:	1a9b      	subs	r3, r3, r2
 80078e2:	009b      	lsls	r3, r3, #2
 80078e4:	440b      	add	r3, r1
 80078e6:	334c      	adds	r3, #76	@ 0x4c
 80078e8:	2204      	movs	r2, #4
 80078ea:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80078ec:	78fa      	ldrb	r2, [r7, #3]
 80078ee:	6879      	ldr	r1, [r7, #4]
 80078f0:	4613      	mov	r3, r2
 80078f2:	011b      	lsls	r3, r3, #4
 80078f4:	1a9b      	subs	r3, r3, r2
 80078f6:	009b      	lsls	r3, r3, #2
 80078f8:	440b      	add	r3, r1
 80078fa:	334c      	adds	r3, #76	@ 0x4c
 80078fc:	781a      	ldrb	r2, [r3, #0]
 80078fe:	78fb      	ldrb	r3, [r7, #3]
 8007900:	4619      	mov	r1, r3
 8007902:	6878      	ldr	r0, [r7, #4]
 8007904:	f005 f942 	bl	800cb8c <HAL_HCD_HC_NotifyURBChange_Callback>
 8007908:	e022      	b.n	8007950 <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800790a:	78fa      	ldrb	r2, [r7, #3]
 800790c:	6879      	ldr	r1, [r7, #4]
 800790e:	4613      	mov	r3, r2
 8007910:	011b      	lsls	r3, r3, #4
 8007912:	1a9b      	subs	r3, r3, r2
 8007914:	009b      	lsls	r3, r3, #2
 8007916:	440b      	add	r3, r1
 8007918:	334c      	adds	r3, #76	@ 0x4c
 800791a:	2202      	movs	r2, #2
 800791c:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 800791e:	78fb      	ldrb	r3, [r7, #3]
 8007920:	015a      	lsls	r2, r3, #5
 8007922:	693b      	ldr	r3, [r7, #16]
 8007924:	4413      	add	r3, r2
 8007926:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007934:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800793c:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 800793e:	78fb      	ldrb	r3, [r7, #3]
 8007940:	015a      	lsls	r2, r3, #5
 8007942:	693b      	ldr	r3, [r7, #16]
 8007944:	4413      	add	r3, r2
 8007946:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800794a:	461a      	mov	r2, r3
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8007950:	78fb      	ldrb	r3, [r7, #3]
 8007952:	015a      	lsls	r2, r3, #5
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	4413      	add	r3, r2
 8007958:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800795c:	461a      	mov	r2, r3
 800795e:	2380      	movs	r3, #128	@ 0x80
 8007960:	6093      	str	r3, [r2, #8]
 8007962:	e217      	b.n	8007d94 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	78fa      	ldrb	r2, [r7, #3]
 800796a:	4611      	mov	r1, r2
 800796c:	4618      	mov	r0, r3
 800796e:	f002 f811 	bl	8009994 <USB_ReadChInterrupts>
 8007972:	4603      	mov	r3, r0
 8007974:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007978:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800797c:	d11b      	bne.n	80079b6 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800797e:	78fa      	ldrb	r2, [r7, #3]
 8007980:	6879      	ldr	r1, [r7, #4]
 8007982:	4613      	mov	r3, r2
 8007984:	011b      	lsls	r3, r3, #4
 8007986:	1a9b      	subs	r3, r3, r2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	440b      	add	r3, r1
 800798c:	334d      	adds	r3, #77	@ 0x4d
 800798e:	2209      	movs	r2, #9
 8007990:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	78fa      	ldrb	r2, [r7, #3]
 8007998:	4611      	mov	r1, r2
 800799a:	4618      	mov	r0, r3
 800799c:	f002 fd9d 	bl	800a4da <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80079a0:	78fb      	ldrb	r3, [r7, #3]
 80079a2:	015a      	lsls	r2, r3, #5
 80079a4:	693b      	ldr	r3, [r7, #16]
 80079a6:	4413      	add	r3, r2
 80079a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079ac:	461a      	mov	r2, r3
 80079ae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80079b2:	6093      	str	r3, [r2, #8]
 80079b4:	e1ee      	b.n	8007d94 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	78fa      	ldrb	r2, [r7, #3]
 80079bc:	4611      	mov	r1, r2
 80079be:	4618      	mov	r0, r3
 80079c0:	f001 ffe8 	bl	8009994 <USB_ReadChInterrupts>
 80079c4:	4603      	mov	r3, r0
 80079c6:	f003 0302 	and.w	r3, r3, #2
 80079ca:	2b02      	cmp	r3, #2
 80079cc:	f040 81df 	bne.w	8007d8e <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80079d0:	78fb      	ldrb	r3, [r7, #3]
 80079d2:	015a      	lsls	r2, r3, #5
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	4413      	add	r3, r2
 80079d8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80079dc:	461a      	mov	r2, r3
 80079de:	2302      	movs	r3, #2
 80079e0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80079e2:	78fa      	ldrb	r2, [r7, #3]
 80079e4:	6879      	ldr	r1, [r7, #4]
 80079e6:	4613      	mov	r3, r2
 80079e8:	011b      	lsls	r3, r3, #4
 80079ea:	1a9b      	subs	r3, r3, r2
 80079ec:	009b      	lsls	r3, r3, #2
 80079ee:	440b      	add	r3, r1
 80079f0:	334d      	adds	r3, #77	@ 0x4d
 80079f2:	781b      	ldrb	r3, [r3, #0]
 80079f4:	2b01      	cmp	r3, #1
 80079f6:	f040 8093 	bne.w	8007b20 <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80079fa:	78fa      	ldrb	r2, [r7, #3]
 80079fc:	6879      	ldr	r1, [r7, #4]
 80079fe:	4613      	mov	r3, r2
 8007a00:	011b      	lsls	r3, r3, #4
 8007a02:	1a9b      	subs	r3, r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	440b      	add	r3, r1
 8007a08:	334d      	adds	r3, #77	@ 0x4d
 8007a0a:	2202      	movs	r2, #2
 8007a0c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8007a0e:	78fa      	ldrb	r2, [r7, #3]
 8007a10:	6879      	ldr	r1, [r7, #4]
 8007a12:	4613      	mov	r3, r2
 8007a14:	011b      	lsls	r3, r3, #4
 8007a16:	1a9b      	subs	r3, r3, r2
 8007a18:	009b      	lsls	r3, r3, #2
 8007a1a:	440b      	add	r3, r1
 8007a1c:	334c      	adds	r3, #76	@ 0x4c
 8007a1e:	2201      	movs	r2, #1
 8007a20:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8007a22:	78fa      	ldrb	r2, [r7, #3]
 8007a24:	6879      	ldr	r1, [r7, #4]
 8007a26:	4613      	mov	r3, r2
 8007a28:	011b      	lsls	r3, r3, #4
 8007a2a:	1a9b      	subs	r3, r3, r2
 8007a2c:	009b      	lsls	r3, r3, #2
 8007a2e:	440b      	add	r3, r1
 8007a30:	3326      	adds	r3, #38	@ 0x26
 8007a32:	781b      	ldrb	r3, [r3, #0]
 8007a34:	2b02      	cmp	r3, #2
 8007a36:	d00b      	beq.n	8007a50 <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8007a38:	78fa      	ldrb	r2, [r7, #3]
 8007a3a:	6879      	ldr	r1, [r7, #4]
 8007a3c:	4613      	mov	r3, r2
 8007a3e:	011b      	lsls	r3, r3, #4
 8007a40:	1a9b      	subs	r3, r3, r2
 8007a42:	009b      	lsls	r3, r3, #2
 8007a44:	440b      	add	r3, r1
 8007a46:	3326      	adds	r3, #38	@ 0x26
 8007a48:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8007a4a:	2b03      	cmp	r3, #3
 8007a4c:	f040 8190 	bne.w	8007d70 <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	799b      	ldrb	r3, [r3, #6]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d115      	bne.n	8007a84 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8007a58:	78fa      	ldrb	r2, [r7, #3]
 8007a5a:	6879      	ldr	r1, [r7, #4]
 8007a5c:	4613      	mov	r3, r2
 8007a5e:	011b      	lsls	r3, r3, #4
 8007a60:	1a9b      	subs	r3, r3, r2
 8007a62:	009b      	lsls	r3, r3, #2
 8007a64:	440b      	add	r3, r1
 8007a66:	333d      	adds	r3, #61	@ 0x3d
 8007a68:	781b      	ldrb	r3, [r3, #0]
 8007a6a:	78fa      	ldrb	r2, [r7, #3]
 8007a6c:	f083 0301 	eor.w	r3, r3, #1
 8007a70:	b2d8      	uxtb	r0, r3
 8007a72:	6879      	ldr	r1, [r7, #4]
 8007a74:	4613      	mov	r3, r2
 8007a76:	011b      	lsls	r3, r3, #4
 8007a78:	1a9b      	subs	r3, r3, r2
 8007a7a:	009b      	lsls	r3, r3, #2
 8007a7c:	440b      	add	r3, r1
 8007a7e:	333d      	adds	r3, #61	@ 0x3d
 8007a80:	4602      	mov	r2, r0
 8007a82:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	799b      	ldrb	r3, [r3, #6]
 8007a88:	2b01      	cmp	r3, #1
 8007a8a:	f040 8171 	bne.w	8007d70 <HCD_HC_OUT_IRQHandler+0x954>
 8007a8e:	78fa      	ldrb	r2, [r7, #3]
 8007a90:	6879      	ldr	r1, [r7, #4]
 8007a92:	4613      	mov	r3, r2
 8007a94:	011b      	lsls	r3, r3, #4
 8007a96:	1a9b      	subs	r3, r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	440b      	add	r3, r1
 8007a9c:	3334      	adds	r3, #52	@ 0x34
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	f000 8165 	beq.w	8007d70 <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8007aa6:	78fa      	ldrb	r2, [r7, #3]
 8007aa8:	6879      	ldr	r1, [r7, #4]
 8007aaa:	4613      	mov	r3, r2
 8007aac:	011b      	lsls	r3, r3, #4
 8007aae:	1a9b      	subs	r3, r3, r2
 8007ab0:	009b      	lsls	r3, r3, #2
 8007ab2:	440b      	add	r3, r1
 8007ab4:	3334      	adds	r3, #52	@ 0x34
 8007ab6:	6819      	ldr	r1, [r3, #0]
 8007ab8:	78fa      	ldrb	r2, [r7, #3]
 8007aba:	6878      	ldr	r0, [r7, #4]
 8007abc:	4613      	mov	r3, r2
 8007abe:	011b      	lsls	r3, r3, #4
 8007ac0:	1a9b      	subs	r3, r3, r2
 8007ac2:	009b      	lsls	r3, r3, #2
 8007ac4:	4403      	add	r3, r0
 8007ac6:	3328      	adds	r3, #40	@ 0x28
 8007ac8:	881b      	ldrh	r3, [r3, #0]
 8007aca:	440b      	add	r3, r1
 8007acc:	1e59      	subs	r1, r3, #1
 8007ace:	78fa      	ldrb	r2, [r7, #3]
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	4613      	mov	r3, r2
 8007ad4:	011b      	lsls	r3, r3, #4
 8007ad6:	1a9b      	subs	r3, r3, r2
 8007ad8:	009b      	lsls	r3, r3, #2
 8007ada:	4403      	add	r3, r0
 8007adc:	3328      	adds	r3, #40	@ 0x28
 8007ade:	881b      	ldrh	r3, [r3, #0]
 8007ae0:	fbb1 f3f3 	udiv	r3, r1, r3
 8007ae4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8007ae6:	68bb      	ldr	r3, [r7, #8]
 8007ae8:	f003 0301 	and.w	r3, r3, #1
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	f000 813f 	beq.w	8007d70 <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8007af2:	78fa      	ldrb	r2, [r7, #3]
 8007af4:	6879      	ldr	r1, [r7, #4]
 8007af6:	4613      	mov	r3, r2
 8007af8:	011b      	lsls	r3, r3, #4
 8007afa:	1a9b      	subs	r3, r3, r2
 8007afc:	009b      	lsls	r3, r3, #2
 8007afe:	440b      	add	r3, r1
 8007b00:	333d      	adds	r3, #61	@ 0x3d
 8007b02:	781b      	ldrb	r3, [r3, #0]
 8007b04:	78fa      	ldrb	r2, [r7, #3]
 8007b06:	f083 0301 	eor.w	r3, r3, #1
 8007b0a:	b2d8      	uxtb	r0, r3
 8007b0c:	6879      	ldr	r1, [r7, #4]
 8007b0e:	4613      	mov	r3, r2
 8007b10:	011b      	lsls	r3, r3, #4
 8007b12:	1a9b      	subs	r3, r3, r2
 8007b14:	009b      	lsls	r3, r3, #2
 8007b16:	440b      	add	r3, r1
 8007b18:	333d      	adds	r3, #61	@ 0x3d
 8007b1a:	4602      	mov	r2, r0
 8007b1c:	701a      	strb	r2, [r3, #0]
 8007b1e:	e127      	b.n	8007d70 <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8007b20:	78fa      	ldrb	r2, [r7, #3]
 8007b22:	6879      	ldr	r1, [r7, #4]
 8007b24:	4613      	mov	r3, r2
 8007b26:	011b      	lsls	r3, r3, #4
 8007b28:	1a9b      	subs	r3, r3, r2
 8007b2a:	009b      	lsls	r3, r3, #2
 8007b2c:	440b      	add	r3, r1
 8007b2e:	334d      	adds	r3, #77	@ 0x4d
 8007b30:	781b      	ldrb	r3, [r3, #0]
 8007b32:	2b03      	cmp	r3, #3
 8007b34:	d120      	bne.n	8007b78 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007b36:	78fa      	ldrb	r2, [r7, #3]
 8007b38:	6879      	ldr	r1, [r7, #4]
 8007b3a:	4613      	mov	r3, r2
 8007b3c:	011b      	lsls	r3, r3, #4
 8007b3e:	1a9b      	subs	r3, r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	440b      	add	r3, r1
 8007b44:	334d      	adds	r3, #77	@ 0x4d
 8007b46:	2202      	movs	r2, #2
 8007b48:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8007b4a:	78fa      	ldrb	r2, [r7, #3]
 8007b4c:	6879      	ldr	r1, [r7, #4]
 8007b4e:	4613      	mov	r3, r2
 8007b50:	011b      	lsls	r3, r3, #4
 8007b52:	1a9b      	subs	r3, r3, r2
 8007b54:	009b      	lsls	r3, r3, #2
 8007b56:	440b      	add	r3, r1
 8007b58:	331b      	adds	r3, #27
 8007b5a:	781b      	ldrb	r3, [r3, #0]
 8007b5c:	2b01      	cmp	r3, #1
 8007b5e:	f040 8107 	bne.w	8007d70 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007b62:	78fa      	ldrb	r2, [r7, #3]
 8007b64:	6879      	ldr	r1, [r7, #4]
 8007b66:	4613      	mov	r3, r2
 8007b68:	011b      	lsls	r3, r3, #4
 8007b6a:	1a9b      	subs	r3, r3, r2
 8007b6c:	009b      	lsls	r3, r3, #2
 8007b6e:	440b      	add	r3, r1
 8007b70:	334c      	adds	r3, #76	@ 0x4c
 8007b72:	2202      	movs	r2, #2
 8007b74:	701a      	strb	r2, [r3, #0]
 8007b76:	e0fb      	b.n	8007d70 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8007b78:	78fa      	ldrb	r2, [r7, #3]
 8007b7a:	6879      	ldr	r1, [r7, #4]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	011b      	lsls	r3, r3, #4
 8007b80:	1a9b      	subs	r3, r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	440b      	add	r3, r1
 8007b86:	334d      	adds	r3, #77	@ 0x4d
 8007b88:	781b      	ldrb	r3, [r3, #0]
 8007b8a:	2b04      	cmp	r3, #4
 8007b8c:	d13a      	bne.n	8007c04 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007b8e:	78fa      	ldrb	r2, [r7, #3]
 8007b90:	6879      	ldr	r1, [r7, #4]
 8007b92:	4613      	mov	r3, r2
 8007b94:	011b      	lsls	r3, r3, #4
 8007b96:	1a9b      	subs	r3, r3, r2
 8007b98:	009b      	lsls	r3, r3, #2
 8007b9a:	440b      	add	r3, r1
 8007b9c:	334d      	adds	r3, #77	@ 0x4d
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007ba2:	78fa      	ldrb	r2, [r7, #3]
 8007ba4:	6879      	ldr	r1, [r7, #4]
 8007ba6:	4613      	mov	r3, r2
 8007ba8:	011b      	lsls	r3, r3, #4
 8007baa:	1a9b      	subs	r3, r3, r2
 8007bac:	009b      	lsls	r3, r3, #2
 8007bae:	440b      	add	r3, r1
 8007bb0:	334c      	adds	r3, #76	@ 0x4c
 8007bb2:	2202      	movs	r2, #2
 8007bb4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8007bb6:	78fa      	ldrb	r2, [r7, #3]
 8007bb8:	6879      	ldr	r1, [r7, #4]
 8007bba:	4613      	mov	r3, r2
 8007bbc:	011b      	lsls	r3, r3, #4
 8007bbe:	1a9b      	subs	r3, r3, r2
 8007bc0:	009b      	lsls	r3, r3, #2
 8007bc2:	440b      	add	r3, r1
 8007bc4:	331b      	adds	r3, #27
 8007bc6:	781b      	ldrb	r3, [r3, #0]
 8007bc8:	2b01      	cmp	r3, #1
 8007bca:	f040 80d1 	bne.w	8007d70 <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8007bce:	78fa      	ldrb	r2, [r7, #3]
 8007bd0:	6879      	ldr	r1, [r7, #4]
 8007bd2:	4613      	mov	r3, r2
 8007bd4:	011b      	lsls	r3, r3, #4
 8007bd6:	1a9b      	subs	r3, r3, r2
 8007bd8:	009b      	lsls	r3, r3, #2
 8007bda:	440b      	add	r3, r1
 8007bdc:	331b      	adds	r3, #27
 8007bde:	2200      	movs	r2, #0
 8007be0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8007be2:	78fb      	ldrb	r3, [r7, #3]
 8007be4:	015a      	lsls	r2, r3, #5
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	4413      	add	r3, r2
 8007bea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	78fa      	ldrb	r2, [r7, #3]
 8007bf2:	0151      	lsls	r1, r2, #5
 8007bf4:	693a      	ldr	r2, [r7, #16]
 8007bf6:	440a      	add	r2, r1
 8007bf8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bfc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007c00:	6053      	str	r3, [r2, #4]
 8007c02:	e0b5      	b.n	8007d70 <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8007c04:	78fa      	ldrb	r2, [r7, #3]
 8007c06:	6879      	ldr	r1, [r7, #4]
 8007c08:	4613      	mov	r3, r2
 8007c0a:	011b      	lsls	r3, r3, #4
 8007c0c:	1a9b      	subs	r3, r3, r2
 8007c0e:	009b      	lsls	r3, r3, #2
 8007c10:	440b      	add	r3, r1
 8007c12:	334d      	adds	r3, #77	@ 0x4d
 8007c14:	781b      	ldrb	r3, [r3, #0]
 8007c16:	2b05      	cmp	r3, #5
 8007c18:	d114      	bne.n	8007c44 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007c1a:	78fa      	ldrb	r2, [r7, #3]
 8007c1c:	6879      	ldr	r1, [r7, #4]
 8007c1e:	4613      	mov	r3, r2
 8007c20:	011b      	lsls	r3, r3, #4
 8007c22:	1a9b      	subs	r3, r3, r2
 8007c24:	009b      	lsls	r3, r3, #2
 8007c26:	440b      	add	r3, r1
 8007c28:	334d      	adds	r3, #77	@ 0x4d
 8007c2a:	2202      	movs	r2, #2
 8007c2c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8007c2e:	78fa      	ldrb	r2, [r7, #3]
 8007c30:	6879      	ldr	r1, [r7, #4]
 8007c32:	4613      	mov	r3, r2
 8007c34:	011b      	lsls	r3, r3, #4
 8007c36:	1a9b      	subs	r3, r3, r2
 8007c38:	009b      	lsls	r3, r3, #2
 8007c3a:	440b      	add	r3, r1
 8007c3c:	334c      	adds	r3, #76	@ 0x4c
 8007c3e:	2202      	movs	r2, #2
 8007c40:	701a      	strb	r2, [r3, #0]
 8007c42:	e095      	b.n	8007d70 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8007c44:	78fa      	ldrb	r2, [r7, #3]
 8007c46:	6879      	ldr	r1, [r7, #4]
 8007c48:	4613      	mov	r3, r2
 8007c4a:	011b      	lsls	r3, r3, #4
 8007c4c:	1a9b      	subs	r3, r3, r2
 8007c4e:	009b      	lsls	r3, r3, #2
 8007c50:	440b      	add	r3, r1
 8007c52:	334d      	adds	r3, #77	@ 0x4d
 8007c54:	781b      	ldrb	r3, [r3, #0]
 8007c56:	2b06      	cmp	r3, #6
 8007c58:	d114      	bne.n	8007c84 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007c5a:	78fa      	ldrb	r2, [r7, #3]
 8007c5c:	6879      	ldr	r1, [r7, #4]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	011b      	lsls	r3, r3, #4
 8007c62:	1a9b      	subs	r3, r3, r2
 8007c64:	009b      	lsls	r3, r3, #2
 8007c66:	440b      	add	r3, r1
 8007c68:	334d      	adds	r3, #77	@ 0x4d
 8007c6a:	2202      	movs	r2, #2
 8007c6c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8007c6e:	78fa      	ldrb	r2, [r7, #3]
 8007c70:	6879      	ldr	r1, [r7, #4]
 8007c72:	4613      	mov	r3, r2
 8007c74:	011b      	lsls	r3, r3, #4
 8007c76:	1a9b      	subs	r3, r3, r2
 8007c78:	009b      	lsls	r3, r3, #2
 8007c7a:	440b      	add	r3, r1
 8007c7c:	334c      	adds	r3, #76	@ 0x4c
 8007c7e:	2205      	movs	r2, #5
 8007c80:	701a      	strb	r2, [r3, #0]
 8007c82:	e075      	b.n	8007d70 <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8007c84:	78fa      	ldrb	r2, [r7, #3]
 8007c86:	6879      	ldr	r1, [r7, #4]
 8007c88:	4613      	mov	r3, r2
 8007c8a:	011b      	lsls	r3, r3, #4
 8007c8c:	1a9b      	subs	r3, r3, r2
 8007c8e:	009b      	lsls	r3, r3, #2
 8007c90:	440b      	add	r3, r1
 8007c92:	334d      	adds	r3, #77	@ 0x4d
 8007c94:	781b      	ldrb	r3, [r3, #0]
 8007c96:	2b07      	cmp	r3, #7
 8007c98:	d00a      	beq.n	8007cb0 <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8007c9a:	78fa      	ldrb	r2, [r7, #3]
 8007c9c:	6879      	ldr	r1, [r7, #4]
 8007c9e:	4613      	mov	r3, r2
 8007ca0:	011b      	lsls	r3, r3, #4
 8007ca2:	1a9b      	subs	r3, r3, r2
 8007ca4:	009b      	lsls	r3, r3, #2
 8007ca6:	440b      	add	r3, r1
 8007ca8:	334d      	adds	r3, #77	@ 0x4d
 8007caa:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8007cac:	2b09      	cmp	r3, #9
 8007cae:	d170      	bne.n	8007d92 <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8007cb0:	78fa      	ldrb	r2, [r7, #3]
 8007cb2:	6879      	ldr	r1, [r7, #4]
 8007cb4:	4613      	mov	r3, r2
 8007cb6:	011b      	lsls	r3, r3, #4
 8007cb8:	1a9b      	subs	r3, r3, r2
 8007cba:	009b      	lsls	r3, r3, #2
 8007cbc:	440b      	add	r3, r1
 8007cbe:	334d      	adds	r3, #77	@ 0x4d
 8007cc0:	2202      	movs	r2, #2
 8007cc2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8007cc4:	78fa      	ldrb	r2, [r7, #3]
 8007cc6:	6879      	ldr	r1, [r7, #4]
 8007cc8:	4613      	mov	r3, r2
 8007cca:	011b      	lsls	r3, r3, #4
 8007ccc:	1a9b      	subs	r3, r3, r2
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	440b      	add	r3, r1
 8007cd2:	3344      	adds	r3, #68	@ 0x44
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	1c59      	adds	r1, r3, #1
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	4613      	mov	r3, r2
 8007cdc:	011b      	lsls	r3, r3, #4
 8007cde:	1a9b      	subs	r3, r3, r2
 8007ce0:	009b      	lsls	r3, r3, #2
 8007ce2:	4403      	add	r3, r0
 8007ce4:	3344      	adds	r3, #68	@ 0x44
 8007ce6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007ce8:	78fa      	ldrb	r2, [r7, #3]
 8007cea:	6879      	ldr	r1, [r7, #4]
 8007cec:	4613      	mov	r3, r2
 8007cee:	011b      	lsls	r3, r3, #4
 8007cf0:	1a9b      	subs	r3, r3, r2
 8007cf2:	009b      	lsls	r3, r3, #2
 8007cf4:	440b      	add	r3, r1
 8007cf6:	3344      	adds	r3, #68	@ 0x44
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	2b02      	cmp	r3, #2
 8007cfc:	d914      	bls.n	8007d28 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8007cfe:	78fa      	ldrb	r2, [r7, #3]
 8007d00:	6879      	ldr	r1, [r7, #4]
 8007d02:	4613      	mov	r3, r2
 8007d04:	011b      	lsls	r3, r3, #4
 8007d06:	1a9b      	subs	r3, r3, r2
 8007d08:	009b      	lsls	r3, r3, #2
 8007d0a:	440b      	add	r3, r1
 8007d0c:	3344      	adds	r3, #68	@ 0x44
 8007d0e:	2200      	movs	r2, #0
 8007d10:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8007d12:	78fa      	ldrb	r2, [r7, #3]
 8007d14:	6879      	ldr	r1, [r7, #4]
 8007d16:	4613      	mov	r3, r2
 8007d18:	011b      	lsls	r3, r3, #4
 8007d1a:	1a9b      	subs	r3, r3, r2
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	440b      	add	r3, r1
 8007d20:	334c      	adds	r3, #76	@ 0x4c
 8007d22:	2204      	movs	r2, #4
 8007d24:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007d26:	e022      	b.n	8007d6e <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8007d28:	78fa      	ldrb	r2, [r7, #3]
 8007d2a:	6879      	ldr	r1, [r7, #4]
 8007d2c:	4613      	mov	r3, r2
 8007d2e:	011b      	lsls	r3, r3, #4
 8007d30:	1a9b      	subs	r3, r3, r2
 8007d32:	009b      	lsls	r3, r3, #2
 8007d34:	440b      	add	r3, r1
 8007d36:	334c      	adds	r3, #76	@ 0x4c
 8007d38:	2202      	movs	r2, #2
 8007d3a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8007d3c:	78fb      	ldrb	r3, [r7, #3]
 8007d3e:	015a      	lsls	r2, r3, #5
 8007d40:	693b      	ldr	r3, [r7, #16]
 8007d42:	4413      	add	r3, r2
 8007d44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007d52:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007d5a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8007d5c:	78fb      	ldrb	r3, [r7, #3]
 8007d5e:	015a      	lsls	r2, r3, #5
 8007d60:	693b      	ldr	r3, [r7, #16]
 8007d62:	4413      	add	r3, r2
 8007d64:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d68:	461a      	mov	r2, r3
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8007d6e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8007d70:	78fa      	ldrb	r2, [r7, #3]
 8007d72:	6879      	ldr	r1, [r7, #4]
 8007d74:	4613      	mov	r3, r2
 8007d76:	011b      	lsls	r3, r3, #4
 8007d78:	1a9b      	subs	r3, r3, r2
 8007d7a:	009b      	lsls	r3, r3, #2
 8007d7c:	440b      	add	r3, r1
 8007d7e:	334c      	adds	r3, #76	@ 0x4c
 8007d80:	781a      	ldrb	r2, [r3, #0]
 8007d82:	78fb      	ldrb	r3, [r7, #3]
 8007d84:	4619      	mov	r1, r3
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f004 ff00 	bl	800cb8c <HAL_HCD_HC_NotifyURBChange_Callback>
 8007d8c:	e002      	b.n	8007d94 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8007d8e:	bf00      	nop
 8007d90:	e000      	b.n	8007d94 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8007d92:	bf00      	nop
  }
}
 8007d94:	3718      	adds	r7, #24
 8007d96:	46bd      	mov	sp, r7
 8007d98:	bd80      	pop	{r7, pc}

08007d9a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007d9a:	b580      	push	{r7, lr}
 8007d9c:	b08a      	sub	sp, #40	@ 0x28
 8007d9e:	af00      	add	r7, sp, #0
 8007da0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	681b      	ldr	r3, [r3, #0]
 8007da6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007daa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	6a1b      	ldr	r3, [r3, #32]
 8007db2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8007db4:	69fb      	ldr	r3, [r7, #28]
 8007db6:	f003 030f 	and.w	r3, r3, #15
 8007dba:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8007dbc:	69fb      	ldr	r3, [r7, #28]
 8007dbe:	0c5b      	lsrs	r3, r3, #17
 8007dc0:	f003 030f 	and.w	r3, r3, #15
 8007dc4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8007dc6:	69fb      	ldr	r3, [r7, #28]
 8007dc8:	091b      	lsrs	r3, r3, #4
 8007dca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007dce:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8007dd0:	697b      	ldr	r3, [r7, #20]
 8007dd2:	2b02      	cmp	r3, #2
 8007dd4:	d004      	beq.n	8007de0 <HCD_RXQLVL_IRQHandler+0x46>
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	2b05      	cmp	r3, #5
 8007dda:	f000 80b6 	beq.w	8007f4a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8007dde:	e0b7      	b.n	8007f50 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	f000 80b3 	beq.w	8007f4e <HCD_RXQLVL_IRQHandler+0x1b4>
 8007de8:	6879      	ldr	r1, [r7, #4]
 8007dea:	69ba      	ldr	r2, [r7, #24]
 8007dec:	4613      	mov	r3, r2
 8007dee:	011b      	lsls	r3, r3, #4
 8007df0:	1a9b      	subs	r3, r3, r2
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	440b      	add	r3, r1
 8007df6:	332c      	adds	r3, #44	@ 0x2c
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	f000 80a7 	beq.w	8007f4e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8007e00:	6879      	ldr	r1, [r7, #4]
 8007e02:	69ba      	ldr	r2, [r7, #24]
 8007e04:	4613      	mov	r3, r2
 8007e06:	011b      	lsls	r3, r3, #4
 8007e08:	1a9b      	subs	r3, r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	440b      	add	r3, r1
 8007e0e:	3338      	adds	r3, #56	@ 0x38
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	693b      	ldr	r3, [r7, #16]
 8007e14:	18d1      	adds	r1, r2, r3
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	69ba      	ldr	r2, [r7, #24]
 8007e1a:	4613      	mov	r3, r2
 8007e1c:	011b      	lsls	r3, r3, #4
 8007e1e:	1a9b      	subs	r3, r3, r2
 8007e20:	009b      	lsls	r3, r3, #2
 8007e22:	4403      	add	r3, r0
 8007e24:	3334      	adds	r3, #52	@ 0x34
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	4299      	cmp	r1, r3
 8007e2a:	f200 8083 	bhi.w	8007f34 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6818      	ldr	r0, [r3, #0]
 8007e32:	6879      	ldr	r1, [r7, #4]
 8007e34:	69ba      	ldr	r2, [r7, #24]
 8007e36:	4613      	mov	r3, r2
 8007e38:	011b      	lsls	r3, r3, #4
 8007e3a:	1a9b      	subs	r3, r3, r2
 8007e3c:	009b      	lsls	r3, r3, #2
 8007e3e:	440b      	add	r3, r1
 8007e40:	332c      	adds	r3, #44	@ 0x2c
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	693a      	ldr	r2, [r7, #16]
 8007e46:	b292      	uxth	r2, r2
 8007e48:	4619      	mov	r1, r3
 8007e4a:	f001 fd38 	bl	80098be <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8007e4e:	6879      	ldr	r1, [r7, #4]
 8007e50:	69ba      	ldr	r2, [r7, #24]
 8007e52:	4613      	mov	r3, r2
 8007e54:	011b      	lsls	r3, r3, #4
 8007e56:	1a9b      	subs	r3, r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	440b      	add	r3, r1
 8007e5c:	332c      	adds	r3, #44	@ 0x2c
 8007e5e:	681a      	ldr	r2, [r3, #0]
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	18d1      	adds	r1, r2, r3
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	69ba      	ldr	r2, [r7, #24]
 8007e68:	4613      	mov	r3, r2
 8007e6a:	011b      	lsls	r3, r3, #4
 8007e6c:	1a9b      	subs	r3, r3, r2
 8007e6e:	009b      	lsls	r3, r3, #2
 8007e70:	4403      	add	r3, r0
 8007e72:	332c      	adds	r3, #44	@ 0x2c
 8007e74:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8007e76:	6879      	ldr	r1, [r7, #4]
 8007e78:	69ba      	ldr	r2, [r7, #24]
 8007e7a:	4613      	mov	r3, r2
 8007e7c:	011b      	lsls	r3, r3, #4
 8007e7e:	1a9b      	subs	r3, r3, r2
 8007e80:	009b      	lsls	r3, r3, #2
 8007e82:	440b      	add	r3, r1
 8007e84:	3338      	adds	r3, #56	@ 0x38
 8007e86:	681a      	ldr	r2, [r3, #0]
 8007e88:	693b      	ldr	r3, [r7, #16]
 8007e8a:	18d1      	adds	r1, r2, r3
 8007e8c:	6878      	ldr	r0, [r7, #4]
 8007e8e:	69ba      	ldr	r2, [r7, #24]
 8007e90:	4613      	mov	r3, r2
 8007e92:	011b      	lsls	r3, r3, #4
 8007e94:	1a9b      	subs	r3, r3, r2
 8007e96:	009b      	lsls	r3, r3, #2
 8007e98:	4403      	add	r3, r0
 8007e9a:	3338      	adds	r3, #56	@ 0x38
 8007e9c:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	015a      	lsls	r2, r3, #5
 8007ea2:	6a3b      	ldr	r3, [r7, #32]
 8007ea4:	4413      	add	r3, r2
 8007ea6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	0cdb      	lsrs	r3, r3, #19
 8007eae:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007eb2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8007eb4:	6879      	ldr	r1, [r7, #4]
 8007eb6:	69ba      	ldr	r2, [r7, #24]
 8007eb8:	4613      	mov	r3, r2
 8007eba:	011b      	lsls	r3, r3, #4
 8007ebc:	1a9b      	subs	r3, r3, r2
 8007ebe:	009b      	lsls	r3, r3, #2
 8007ec0:	440b      	add	r3, r1
 8007ec2:	3328      	adds	r3, #40	@ 0x28
 8007ec4:	881b      	ldrh	r3, [r3, #0]
 8007ec6:	461a      	mov	r2, r3
 8007ec8:	693b      	ldr	r3, [r7, #16]
 8007eca:	4293      	cmp	r3, r2
 8007ecc:	d13f      	bne.n	8007f4e <HCD_RXQLVL_IRQHandler+0x1b4>
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d03c      	beq.n	8007f4e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8007ed4:	69bb      	ldr	r3, [r7, #24]
 8007ed6:	015a      	lsls	r2, r3, #5
 8007ed8:	6a3b      	ldr	r3, [r7, #32]
 8007eda:	4413      	add	r3, r2
 8007edc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007eea:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007ef2:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	015a      	lsls	r2, r3, #5
 8007ef8:	6a3b      	ldr	r3, [r7, #32]
 8007efa:	4413      	add	r3, r2
 8007efc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f00:	461a      	mov	r2, r3
 8007f02:	68bb      	ldr	r3, [r7, #8]
 8007f04:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8007f06:	6879      	ldr	r1, [r7, #4]
 8007f08:	69ba      	ldr	r2, [r7, #24]
 8007f0a:	4613      	mov	r3, r2
 8007f0c:	011b      	lsls	r3, r3, #4
 8007f0e:	1a9b      	subs	r3, r3, r2
 8007f10:	009b      	lsls	r3, r3, #2
 8007f12:	440b      	add	r3, r1
 8007f14:	333c      	adds	r3, #60	@ 0x3c
 8007f16:	781b      	ldrb	r3, [r3, #0]
 8007f18:	f083 0301 	eor.w	r3, r3, #1
 8007f1c:	b2d8      	uxtb	r0, r3
 8007f1e:	6879      	ldr	r1, [r7, #4]
 8007f20:	69ba      	ldr	r2, [r7, #24]
 8007f22:	4613      	mov	r3, r2
 8007f24:	011b      	lsls	r3, r3, #4
 8007f26:	1a9b      	subs	r3, r3, r2
 8007f28:	009b      	lsls	r3, r3, #2
 8007f2a:	440b      	add	r3, r1
 8007f2c:	333c      	adds	r3, #60	@ 0x3c
 8007f2e:	4602      	mov	r2, r0
 8007f30:	701a      	strb	r2, [r3, #0]
      break;
 8007f32:	e00c      	b.n	8007f4e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8007f34:	6879      	ldr	r1, [r7, #4]
 8007f36:	69ba      	ldr	r2, [r7, #24]
 8007f38:	4613      	mov	r3, r2
 8007f3a:	011b      	lsls	r3, r3, #4
 8007f3c:	1a9b      	subs	r3, r3, r2
 8007f3e:	009b      	lsls	r3, r3, #2
 8007f40:	440b      	add	r3, r1
 8007f42:	334c      	adds	r3, #76	@ 0x4c
 8007f44:	2204      	movs	r2, #4
 8007f46:	701a      	strb	r2, [r3, #0]
      break;
 8007f48:	e001      	b.n	8007f4e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8007f4a:	bf00      	nop
 8007f4c:	e000      	b.n	8007f50 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8007f4e:	bf00      	nop
  }
}
 8007f50:	bf00      	nop
 8007f52:	3728      	adds	r7, #40	@ 0x28
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b086      	sub	sp, #24
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007f66:	697b      	ldr	r3, [r7, #20]
 8007f68:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8007f74:	693b      	ldr	r3, [r7, #16]
 8007f76:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007f84:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f003 0302 	and.w	r3, r3, #2
 8007f8c:	2b02      	cmp	r3, #2
 8007f8e:	d10b      	bne.n	8007fa8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f003 0301 	and.w	r3, r3, #1
 8007f96:	2b01      	cmp	r3, #1
 8007f98:	d102      	bne.n	8007fa0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8007f9a:	6878      	ldr	r0, [r7, #4]
 8007f9c:	f004 fdda 	bl	800cb54 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8007fa0:	68bb      	ldr	r3, [r7, #8]
 8007fa2:	f043 0302 	orr.w	r3, r3, #2
 8007fa6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	f003 0308 	and.w	r3, r3, #8
 8007fae:	2b08      	cmp	r3, #8
 8007fb0:	d132      	bne.n	8008018 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	f043 0308 	orr.w	r3, r3, #8
 8007fb8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	f003 0304 	and.w	r3, r3, #4
 8007fc0:	2b04      	cmp	r3, #4
 8007fc2:	d126      	bne.n	8008012 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	7a5b      	ldrb	r3, [r3, #9]
 8007fc8:	2b02      	cmp	r3, #2
 8007fca:	d113      	bne.n	8007ff4 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8007fd2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8007fd6:	d106      	bne.n	8007fe6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	681b      	ldr	r3, [r3, #0]
 8007fdc:	2102      	movs	r1, #2
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f001 fdfc 	bl	8009bdc <USB_InitFSLSPClkSel>
 8007fe4:	e011      	b.n	800800a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	2101      	movs	r1, #1
 8007fec:	4618      	mov	r0, r3
 8007fee:	f001 fdf5 	bl	8009bdc <USB_InitFSLSPClkSel>
 8007ff2:	e00a      	b.n	800800a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	79db      	ldrb	r3, [r3, #7]
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d106      	bne.n	800800a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8007ffc:	693b      	ldr	r3, [r7, #16]
 8007ffe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008002:	461a      	mov	r2, r3
 8008004:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8008008:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800800a:	6878      	ldr	r0, [r7, #4]
 800800c:	f004 fdcc 	bl	800cba8 <HAL_HCD_PortEnabled_Callback>
 8008010:	e002      	b.n	8008018 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8008012:	6878      	ldr	r0, [r7, #4]
 8008014:	f004 fdd6 	bl	800cbc4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	f003 0320 	and.w	r3, r3, #32
 800801e:	2b20      	cmp	r3, #32
 8008020:	d103      	bne.n	800802a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	f043 0320 	orr.w	r3, r3, #32
 8008028:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8008030:	461a      	mov	r2, r3
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	6013      	str	r3, [r2, #0]
}
 8008036:	bf00      	nop
 8008038:	3718      	adds	r7, #24
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}
	...

08008040 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8008040:	b580      	push	{r7, lr}
 8008042:	b088      	sub	sp, #32
 8008044:	af00      	add	r7, sp, #0
 8008046:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d101      	bne.n	8008052 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800804e:	2301      	movs	r3, #1
 8008050:	e128      	b.n	80082a4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8008058:	b2db      	uxtb	r3, r3
 800805a:	2b00      	cmp	r3, #0
 800805c:	d109      	bne.n	8008072 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2200      	movs	r2, #0
 8008062:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	4a90      	ldr	r2, [pc, #576]	@ (80082ac <HAL_I2S_Init+0x26c>)
 800806a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800806c:	6878      	ldr	r0, [r7, #4]
 800806e:	f7fc fafb 	bl	8004668 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	2202      	movs	r2, #2
 8008076:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	69db      	ldr	r3, [r3, #28]
 8008080:	687a      	ldr	r2, [r7, #4]
 8008082:	6812      	ldr	r2, [r2, #0]
 8008084:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8008088:	f023 030f 	bic.w	r3, r3, #15
 800808c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	2202      	movs	r2, #2
 8008094:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	695b      	ldr	r3, [r3, #20]
 800809a:	2b02      	cmp	r3, #2
 800809c:	d060      	beq.n	8008160 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	68db      	ldr	r3, [r3, #12]
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d102      	bne.n	80080ac <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80080a6:	2310      	movs	r3, #16
 80080a8:	617b      	str	r3, [r7, #20]
 80080aa:	e001      	b.n	80080b0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80080ac:	2320      	movs	r3, #32
 80080ae:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	2b20      	cmp	r3, #32
 80080b6:	d802      	bhi.n	80080be <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80080b8:	697b      	ldr	r3, [r7, #20]
 80080ba:	005b      	lsls	r3, r3, #1
 80080bc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80080be:	2001      	movs	r0, #1
 80080c0:	f001 f9a4 	bl	800940c <HAL_RCCEx_GetPeriphCLKFreq>
 80080c4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	691b      	ldr	r3, [r3, #16]
 80080ca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80080ce:	d125      	bne.n	800811c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	68db      	ldr	r3, [r3, #12]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d010      	beq.n	80080fa <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80080d8:	697b      	ldr	r3, [r7, #20]
 80080da:	009b      	lsls	r3, r3, #2
 80080dc:	68fa      	ldr	r2, [r7, #12]
 80080de:	fbb2 f2f3 	udiv	r2, r2, r3
 80080e2:	4613      	mov	r3, r2
 80080e4:	009b      	lsls	r3, r3, #2
 80080e6:	4413      	add	r3, r2
 80080e8:	005b      	lsls	r3, r3, #1
 80080ea:	461a      	mov	r2, r3
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	695b      	ldr	r3, [r3, #20]
 80080f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80080f4:	3305      	adds	r3, #5
 80080f6:	613b      	str	r3, [r7, #16]
 80080f8:	e01f      	b.n	800813a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80080fa:	697b      	ldr	r3, [r7, #20]
 80080fc:	00db      	lsls	r3, r3, #3
 80080fe:	68fa      	ldr	r2, [r7, #12]
 8008100:	fbb2 f2f3 	udiv	r2, r2, r3
 8008104:	4613      	mov	r3, r2
 8008106:	009b      	lsls	r3, r3, #2
 8008108:	4413      	add	r3, r2
 800810a:	005b      	lsls	r3, r3, #1
 800810c:	461a      	mov	r2, r3
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	695b      	ldr	r3, [r3, #20]
 8008112:	fbb2 f3f3 	udiv	r3, r2, r3
 8008116:	3305      	adds	r3, #5
 8008118:	613b      	str	r3, [r7, #16]
 800811a:	e00e      	b.n	800813a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800811c:	68fa      	ldr	r2, [r7, #12]
 800811e:	697b      	ldr	r3, [r7, #20]
 8008120:	fbb2 f2f3 	udiv	r2, r2, r3
 8008124:	4613      	mov	r3, r2
 8008126:	009b      	lsls	r3, r3, #2
 8008128:	4413      	add	r3, r2
 800812a:	005b      	lsls	r3, r3, #1
 800812c:	461a      	mov	r2, r3
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	695b      	ldr	r3, [r3, #20]
 8008132:	fbb2 f3f3 	udiv	r3, r2, r3
 8008136:	3305      	adds	r3, #5
 8008138:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800813a:	693b      	ldr	r3, [r7, #16]
 800813c:	4a5c      	ldr	r2, [pc, #368]	@ (80082b0 <HAL_I2S_Init+0x270>)
 800813e:	fba2 2303 	umull	r2, r3, r2, r3
 8008142:	08db      	lsrs	r3, r3, #3
 8008144:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	f003 0301 	and.w	r3, r3, #1
 800814c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800814e:	693a      	ldr	r2, [r7, #16]
 8008150:	69bb      	ldr	r3, [r7, #24]
 8008152:	1ad3      	subs	r3, r2, r3
 8008154:	085b      	lsrs	r3, r3, #1
 8008156:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8008158:	69bb      	ldr	r3, [r7, #24]
 800815a:	021b      	lsls	r3, r3, #8
 800815c:	61bb      	str	r3, [r7, #24]
 800815e:	e003      	b.n	8008168 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8008160:	2302      	movs	r3, #2
 8008162:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8008164:	2300      	movs	r3, #0
 8008166:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8008168:	69fb      	ldr	r3, [r7, #28]
 800816a:	2b01      	cmp	r3, #1
 800816c:	d902      	bls.n	8008174 <HAL_I2S_Init+0x134>
 800816e:	69fb      	ldr	r3, [r7, #28]
 8008170:	2bff      	cmp	r3, #255	@ 0xff
 8008172:	d907      	bls.n	8008184 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008178:	f043 0210 	orr.w	r2, r3, #16
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8008180:	2301      	movs	r3, #1
 8008182:	e08f      	b.n	80082a4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	691a      	ldr	r2, [r3, #16]
 8008188:	69bb      	ldr	r3, [r7, #24]
 800818a:	ea42 0103 	orr.w	r1, r2, r3
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	69fa      	ldr	r2, [r7, #28]
 8008194:	430a      	orrs	r2, r1
 8008196:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	69db      	ldr	r3, [r3, #28]
 800819e:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80081a2:	f023 030f 	bic.w	r3, r3, #15
 80081a6:	687a      	ldr	r2, [r7, #4]
 80081a8:	6851      	ldr	r1, [r2, #4]
 80081aa:	687a      	ldr	r2, [r7, #4]
 80081ac:	6892      	ldr	r2, [r2, #8]
 80081ae:	4311      	orrs	r1, r2
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	68d2      	ldr	r2, [r2, #12]
 80081b4:	4311      	orrs	r1, r2
 80081b6:	687a      	ldr	r2, [r7, #4]
 80081b8:	6992      	ldr	r2, [r2, #24]
 80081ba:	430a      	orrs	r2, r1
 80081bc:	431a      	orrs	r2, r3
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80081c6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6a1b      	ldr	r3, [r3, #32]
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	d161      	bne.n	8008294 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	4a38      	ldr	r2, [pc, #224]	@ (80082b4 <HAL_I2S_Init+0x274>)
 80081d4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	4a37      	ldr	r2, [pc, #220]	@ (80082b8 <HAL_I2S_Init+0x278>)
 80081dc:	4293      	cmp	r3, r2
 80081de:	d101      	bne.n	80081e4 <HAL_I2S_Init+0x1a4>
 80081e0:	4b36      	ldr	r3, [pc, #216]	@ (80082bc <HAL_I2S_Init+0x27c>)
 80081e2:	e001      	b.n	80081e8 <HAL_I2S_Init+0x1a8>
 80081e4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80081e8:	69db      	ldr	r3, [r3, #28]
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	6812      	ldr	r2, [r2, #0]
 80081ee:	4932      	ldr	r1, [pc, #200]	@ (80082b8 <HAL_I2S_Init+0x278>)
 80081f0:	428a      	cmp	r2, r1
 80081f2:	d101      	bne.n	80081f8 <HAL_I2S_Init+0x1b8>
 80081f4:	4a31      	ldr	r2, [pc, #196]	@ (80082bc <HAL_I2S_Init+0x27c>)
 80081f6:	e001      	b.n	80081fc <HAL_I2S_Init+0x1bc>
 80081f8:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 80081fc:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8008200:	f023 030f 	bic.w	r3, r3, #15
 8008204:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	4a2b      	ldr	r2, [pc, #172]	@ (80082b8 <HAL_I2S_Init+0x278>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d101      	bne.n	8008214 <HAL_I2S_Init+0x1d4>
 8008210:	4b2a      	ldr	r3, [pc, #168]	@ (80082bc <HAL_I2S_Init+0x27c>)
 8008212:	e001      	b.n	8008218 <HAL_I2S_Init+0x1d8>
 8008214:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008218:	2202      	movs	r2, #2
 800821a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	4a25      	ldr	r2, [pc, #148]	@ (80082b8 <HAL_I2S_Init+0x278>)
 8008222:	4293      	cmp	r3, r2
 8008224:	d101      	bne.n	800822a <HAL_I2S_Init+0x1ea>
 8008226:	4b25      	ldr	r3, [pc, #148]	@ (80082bc <HAL_I2S_Init+0x27c>)
 8008228:	e001      	b.n	800822e <HAL_I2S_Init+0x1ee>
 800822a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800822e:	69db      	ldr	r3, [r3, #28]
 8008230:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800823a:	d003      	beq.n	8008244 <HAL_I2S_Init+0x204>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	685b      	ldr	r3, [r3, #4]
 8008240:	2b00      	cmp	r3, #0
 8008242:	d103      	bne.n	800824c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8008244:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8008248:	613b      	str	r3, [r7, #16]
 800824a:	e001      	b.n	8008250 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800824c:	2300      	movs	r3, #0
 800824e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	689b      	ldr	r3, [r3, #8]
 8008258:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800825a:	4313      	orrs	r3, r2
 800825c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8008264:	4313      	orrs	r3, r2
 8008266:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	699b      	ldr	r3, [r3, #24]
 800826c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800826e:	4313      	orrs	r3, r2
 8008270:	b29a      	uxth	r2, r3
 8008272:	897b      	ldrh	r3, [r7, #10]
 8008274:	4313      	orrs	r3, r2
 8008276:	b29b      	uxth	r3, r3
 8008278:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800827c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a0d      	ldr	r2, [pc, #52]	@ (80082b8 <HAL_I2S_Init+0x278>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d101      	bne.n	800828c <HAL_I2S_Init+0x24c>
 8008288:	4b0c      	ldr	r3, [pc, #48]	@ (80082bc <HAL_I2S_Init+0x27c>)
 800828a:	e001      	b.n	8008290 <HAL_I2S_Init+0x250>
 800828c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008290:	897a      	ldrh	r2, [r7, #10]
 8008292:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	2200      	movs	r2, #0
 8008298:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2201      	movs	r2, #1
 800829e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80082a2:	2300      	movs	r3, #0
}
 80082a4:	4618      	mov	r0, r3
 80082a6:	3720      	adds	r7, #32
 80082a8:	46bd      	mov	sp, r7
 80082aa:	bd80      	pop	{r7, pc}
 80082ac:	080083b7 	.word	0x080083b7
 80082b0:	cccccccd 	.word	0xcccccccd
 80082b4:	080084cd 	.word	0x080084cd
 80082b8:	40003800 	.word	0x40003800
 80082bc:	40003400 	.word	0x40003400

080082c0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80082c0:	b480      	push	{r7}
 80082c2:	b083      	sub	sp, #12
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80082c8:	bf00      	nop
 80082ca:	370c      	adds	r7, #12
 80082cc:	46bd      	mov	sp, r7
 80082ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d2:	4770      	bx	lr

080082d4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
 80082da:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80082dc:	bf00      	nop
 80082de:	370c      	adds	r7, #12
 80082e0:	46bd      	mov	sp, r7
 80082e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082e6:	4770      	bx	lr

080082e8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 80082f0:	bf00      	nop
 80082f2:	370c      	adds	r7, #12
 80082f4:	46bd      	mov	sp, r7
 80082f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fa:	4770      	bx	lr

080082fc <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 80082fc:	b580      	push	{r7, lr}
 80082fe:	b082      	sub	sp, #8
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008308:	881a      	ldrh	r2, [r3, #0]
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008314:	1c9a      	adds	r2, r3, #2
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800831e:	b29b      	uxth	r3, r3
 8008320:	3b01      	subs	r3, #1
 8008322:	b29a      	uxth	r2, r3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800832c:	b29b      	uxth	r3, r3
 800832e:	2b00      	cmp	r3, #0
 8008330:	d10e      	bne.n	8008350 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	685a      	ldr	r2, [r3, #4]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8008340:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	2201      	movs	r2, #1
 8008346:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800834a:	6878      	ldr	r0, [r7, #4]
 800834c:	f7ff ffb8 	bl	80082c0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8008350:	bf00      	nop
 8008352:	3708      	adds	r7, #8
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b082      	sub	sp, #8
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	68da      	ldr	r2, [r3, #12]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800836a:	b292      	uxth	r2, r2
 800836c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008372:	1c9a      	adds	r2, r3, #2
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800837c:	b29b      	uxth	r3, r3
 800837e:	3b01      	subs	r3, #1
 8008380:	b29a      	uxth	r2, r3
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800838a:	b29b      	uxth	r3, r3
 800838c:	2b00      	cmp	r3, #0
 800838e:	d10e      	bne.n	80083ae <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	685a      	ldr	r2, [r3, #4]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800839e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f7ff ff93 	bl	80082d4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80083ae:	bf00      	nop
 80083b0:	3708      	adds	r7, #8
 80083b2:	46bd      	mov	sp, r7
 80083b4:	bd80      	pop	{r7, pc}

080083b6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80083b6:	b580      	push	{r7, lr}
 80083b8:	b086      	sub	sp, #24
 80083ba:	af00      	add	r7, sp, #0
 80083bc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	689b      	ldr	r3, [r3, #8]
 80083c4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80083cc:	b2db      	uxtb	r3, r3
 80083ce:	2b04      	cmp	r3, #4
 80083d0:	d13a      	bne.n	8008448 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80083d2:	697b      	ldr	r3, [r7, #20]
 80083d4:	f003 0301 	and.w	r3, r3, #1
 80083d8:	2b01      	cmp	r3, #1
 80083da:	d109      	bne.n	80083f0 <I2S_IRQHandler+0x3a>
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	685b      	ldr	r3, [r3, #4]
 80083e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083e6:	2b40      	cmp	r3, #64	@ 0x40
 80083e8:	d102      	bne.n	80083f0 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f7ff ffb4 	bl	8008358 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80083f6:	2b40      	cmp	r3, #64	@ 0x40
 80083f8:	d126      	bne.n	8008448 <I2S_IRQHandler+0x92>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	685b      	ldr	r3, [r3, #4]
 8008400:	f003 0320 	and.w	r3, r3, #32
 8008404:	2b20      	cmp	r3, #32
 8008406:	d11f      	bne.n	8008448 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	685a      	ldr	r2, [r3, #4]
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008416:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8008418:	2300      	movs	r3, #0
 800841a:	613b      	str	r3, [r7, #16]
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	613b      	str	r3, [r7, #16]
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	689b      	ldr	r3, [r3, #8]
 800842a:	613b      	str	r3, [r7, #16]
 800842c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	2201      	movs	r2, #1
 8008432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800843a:	f043 0202 	orr.w	r2, r3, #2
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008442:	6878      	ldr	r0, [r7, #4]
 8008444:	f7ff ff50 	bl	80082e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800844e:	b2db      	uxtb	r3, r3
 8008450:	2b03      	cmp	r3, #3
 8008452:	d136      	bne.n	80084c2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8008454:	697b      	ldr	r3, [r7, #20]
 8008456:	f003 0302 	and.w	r3, r3, #2
 800845a:	2b02      	cmp	r3, #2
 800845c:	d109      	bne.n	8008472 <I2S_IRQHandler+0xbc>
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008468:	2b80      	cmp	r3, #128	@ 0x80
 800846a:	d102      	bne.n	8008472 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800846c:	6878      	ldr	r0, [r7, #4]
 800846e:	f7ff ff45 	bl	80082fc <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	f003 0308 	and.w	r3, r3, #8
 8008478:	2b08      	cmp	r3, #8
 800847a:	d122      	bne.n	80084c2 <I2S_IRQHandler+0x10c>
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	685b      	ldr	r3, [r3, #4]
 8008482:	f003 0320 	and.w	r3, r3, #32
 8008486:	2b20      	cmp	r3, #32
 8008488:	d11b      	bne.n	80084c2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	685a      	ldr	r2, [r3, #4]
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8008498:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800849a:	2300      	movs	r3, #0
 800849c:	60fb      	str	r3, [r7, #12]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	689b      	ldr	r3, [r3, #8]
 80084a4:	60fb      	str	r3, [r7, #12]
 80084a6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	2201      	movs	r2, #1
 80084ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80084b4:	f043 0204 	orr.w	r2, r3, #4
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80084bc:	6878      	ldr	r0, [r7, #4]
 80084be:	f7ff ff13 	bl	80082e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80084c2:	bf00      	nop
 80084c4:	3718      	adds	r7, #24
 80084c6:	46bd      	mov	sp, r7
 80084c8:	bd80      	pop	{r7, pc}
	...

080084cc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80084cc:	b580      	push	{r7, lr}
 80084ce:	b088      	sub	sp, #32
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	689b      	ldr	r3, [r3, #8]
 80084da:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	4a92      	ldr	r2, [pc, #584]	@ (800872c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d101      	bne.n	80084ea <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80084e6:	4b92      	ldr	r3, [pc, #584]	@ (8008730 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80084e8:	e001      	b.n	80084ee <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80084ea:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80084ee:	689b      	ldr	r3, [r3, #8]
 80084f0:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	685b      	ldr	r3, [r3, #4]
 80084f8:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	4a8b      	ldr	r2, [pc, #556]	@ (800872c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008500:	4293      	cmp	r3, r2
 8008502:	d101      	bne.n	8008508 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8008504:	4b8a      	ldr	r3, [pc, #552]	@ (8008730 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008506:	e001      	b.n	800850c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8008508:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800850c:	685b      	ldr	r3, [r3, #4]
 800850e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	685b      	ldr	r3, [r3, #4]
 8008514:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008518:	d004      	beq.n	8008524 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	685b      	ldr	r3, [r3, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	f040 8099 	bne.w	8008656 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8008524:	69fb      	ldr	r3, [r7, #28]
 8008526:	f003 0302 	and.w	r3, r3, #2
 800852a:	2b02      	cmp	r3, #2
 800852c:	d107      	bne.n	800853e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800852e:	697b      	ldr	r3, [r7, #20]
 8008530:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008534:	2b00      	cmp	r3, #0
 8008536:	d002      	beq.n	800853e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8008538:	6878      	ldr	r0, [r7, #4]
 800853a:	f000 f925 	bl	8008788 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800853e:	69bb      	ldr	r3, [r7, #24]
 8008540:	f003 0301 	and.w	r3, r3, #1
 8008544:	2b01      	cmp	r3, #1
 8008546:	d107      	bne.n	8008558 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8008548:	693b      	ldr	r3, [r7, #16]
 800854a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800854e:	2b00      	cmp	r3, #0
 8008550:	d002      	beq.n	8008558 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 f9c8 	bl	80088e8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8008558:	69bb      	ldr	r3, [r7, #24]
 800855a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800855e:	2b40      	cmp	r3, #64	@ 0x40
 8008560:	d13a      	bne.n	80085d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	f003 0320 	and.w	r3, r3, #32
 8008568:	2b00      	cmp	r3, #0
 800856a:	d035      	beq.n	80085d8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	4a6e      	ldr	r2, [pc, #440]	@ (800872c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008572:	4293      	cmp	r3, r2
 8008574:	d101      	bne.n	800857a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8008576:	4b6e      	ldr	r3, [pc, #440]	@ (8008730 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008578:	e001      	b.n	800857e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800857a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800857e:	685a      	ldr	r2, [r3, #4]
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	4969      	ldr	r1, [pc, #420]	@ (800872c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008586:	428b      	cmp	r3, r1
 8008588:	d101      	bne.n	800858e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800858a:	4b69      	ldr	r3, [pc, #420]	@ (8008730 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800858c:	e001      	b.n	8008592 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800858e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008592:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008596:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	685a      	ldr	r2, [r3, #4]
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80085a6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80085a8:	2300      	movs	r3, #0
 80085aa:	60fb      	str	r3, [r7, #12]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	68db      	ldr	r3, [r3, #12]
 80085b2:	60fb      	str	r3, [r7, #12]
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	689b      	ldr	r3, [r3, #8]
 80085ba:	60fb      	str	r3, [r7, #12]
 80085bc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	2201      	movs	r2, #1
 80085c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085ca:	f043 0202 	orr.w	r2, r3, #2
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f7ff fe88 	bl	80082e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80085d8:	69fb      	ldr	r3, [r7, #28]
 80085da:	f003 0308 	and.w	r3, r3, #8
 80085de:	2b08      	cmp	r3, #8
 80085e0:	f040 80c3 	bne.w	800876a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80085e4:	697b      	ldr	r3, [r7, #20]
 80085e6:	f003 0320 	and.w	r3, r3, #32
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	f000 80bd 	beq.w	800876a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	685a      	ldr	r2, [r3, #4]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80085fe:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	4a49      	ldr	r2, [pc, #292]	@ (800872c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008606:	4293      	cmp	r3, r2
 8008608:	d101      	bne.n	800860e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800860a:	4b49      	ldr	r3, [pc, #292]	@ (8008730 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800860c:	e001      	b.n	8008612 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800860e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008612:	685a      	ldr	r2, [r3, #4]
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	4944      	ldr	r1, [pc, #272]	@ (800872c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800861a:	428b      	cmp	r3, r1
 800861c:	d101      	bne.n	8008622 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800861e:	4b44      	ldr	r3, [pc, #272]	@ (8008730 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008620:	e001      	b.n	8008626 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8008622:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008626:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800862a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800862c:	2300      	movs	r3, #0
 800862e:	60bb      	str	r3, [r7, #8]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	60bb      	str	r3, [r7, #8]
 8008638:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2201      	movs	r2, #1
 800863e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008646:	f043 0204 	orr.w	r2, r3, #4
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f7ff fe4a 	bl	80082e8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8008654:	e089      	b.n	800876a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8008656:	69bb      	ldr	r3, [r7, #24]
 8008658:	f003 0302 	and.w	r3, r3, #2
 800865c:	2b02      	cmp	r3, #2
 800865e:	d107      	bne.n	8008670 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8008660:	693b      	ldr	r3, [r7, #16]
 8008662:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008666:	2b00      	cmp	r3, #0
 8008668:	d002      	beq.n	8008670 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800866a:	6878      	ldr	r0, [r7, #4]
 800866c:	f000 f8be 	bl	80087ec <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8008670:	69fb      	ldr	r3, [r7, #28]
 8008672:	f003 0301 	and.w	r3, r3, #1
 8008676:	2b01      	cmp	r3, #1
 8008678:	d107      	bne.n	800868a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800867a:	697b      	ldr	r3, [r7, #20]
 800867c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008680:	2b00      	cmp	r3, #0
 8008682:	d002      	beq.n	800868a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f000 f8fd 	bl	8008884 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800868a:	69fb      	ldr	r3, [r7, #28]
 800868c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008690:	2b40      	cmp	r3, #64	@ 0x40
 8008692:	d12f      	bne.n	80086f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8008694:	697b      	ldr	r3, [r7, #20]
 8008696:	f003 0320 	and.w	r3, r3, #32
 800869a:	2b00      	cmp	r3, #0
 800869c:	d02a      	beq.n	80086f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	685a      	ldr	r2, [r3, #4]
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80086ac:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	4a1e      	ldr	r2, [pc, #120]	@ (800872c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80086b4:	4293      	cmp	r3, r2
 80086b6:	d101      	bne.n	80086bc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80086b8:	4b1d      	ldr	r3, [pc, #116]	@ (8008730 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80086ba:	e001      	b.n	80086c0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80086bc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80086c0:	685a      	ldr	r2, [r3, #4]
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	4919      	ldr	r1, [pc, #100]	@ (800872c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80086c8:	428b      	cmp	r3, r1
 80086ca:	d101      	bne.n	80086d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80086cc:	4b18      	ldr	r3, [pc, #96]	@ (8008730 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80086ce:	e001      	b.n	80086d4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80086d0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80086d4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80086d8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2201      	movs	r2, #1
 80086de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80086e6:	f043 0202 	orr.w	r2, r3, #2
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80086ee:	6878      	ldr	r0, [r7, #4]
 80086f0:	f7ff fdfa 	bl	80082e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80086f4:	69bb      	ldr	r3, [r7, #24]
 80086f6:	f003 0308 	and.w	r3, r3, #8
 80086fa:	2b08      	cmp	r3, #8
 80086fc:	d136      	bne.n	800876c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80086fe:	693b      	ldr	r3, [r7, #16]
 8008700:	f003 0320 	and.w	r3, r3, #32
 8008704:	2b00      	cmp	r3, #0
 8008706:	d031      	beq.n	800876c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	4a07      	ldr	r2, [pc, #28]	@ (800872c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800870e:	4293      	cmp	r3, r2
 8008710:	d101      	bne.n	8008716 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8008712:	4b07      	ldr	r3, [pc, #28]	@ (8008730 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008714:	e001      	b.n	800871a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8008716:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800871a:	685a      	ldr	r2, [r3, #4]
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	4902      	ldr	r1, [pc, #8]	@ (800872c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8008722:	428b      	cmp	r3, r1
 8008724:	d106      	bne.n	8008734 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8008726:	4b02      	ldr	r3, [pc, #8]	@ (8008730 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8008728:	e006      	b.n	8008738 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800872a:	bf00      	nop
 800872c:	40003800 	.word	0x40003800
 8008730:	40003400 	.word	0x40003400
 8008734:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008738:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800873c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	685a      	ldr	r2, [r3, #4]
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800874c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	2201      	movs	r2, #1
 8008752:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800875a:	f043 0204 	orr.w	r2, r3, #4
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f7ff fdc0 	bl	80082e8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008768:	e000      	b.n	800876c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800876a:	bf00      	nop
}
 800876c:	bf00      	nop
 800876e:	3720      	adds	r7, #32
 8008770:	46bd      	mov	sp, r7
 8008772:	bd80      	pop	{r7, pc}

08008774 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8008774:	b480      	push	{r7}
 8008776:	b083      	sub	sp, #12
 8008778:	af00      	add	r7, sp, #0
 800877a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800877c:	bf00      	nop
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008794:	1c99      	adds	r1, r3, #2
 8008796:	687a      	ldr	r2, [r7, #4]
 8008798:	6251      	str	r1, [r2, #36]	@ 0x24
 800879a:	881a      	ldrh	r2, [r3, #0]
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087a6:	b29b      	uxth	r3, r3
 80087a8:	3b01      	subs	r3, #1
 80087aa:	b29a      	uxth	r2, r3
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80087b4:	b29b      	uxth	r3, r3
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d113      	bne.n	80087e2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	685a      	ldr	r2, [r3, #4]
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80087c8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80087ce:	b29b      	uxth	r3, r3
 80087d0:	2b00      	cmp	r3, #0
 80087d2:	d106      	bne.n	80087e2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2201      	movs	r2, #1
 80087d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80087dc:	6878      	ldr	r0, [r7, #4]
 80087de:	f7ff ffc9 	bl	8008774 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80087e2:	bf00      	nop
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
	...

080087ec <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b082      	sub	sp, #8
 80087f0:	af00      	add	r7, sp, #0
 80087f2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80087f8:	1c99      	adds	r1, r3, #2
 80087fa:	687a      	ldr	r2, [r7, #4]
 80087fc:	6251      	str	r1, [r2, #36]	@ 0x24
 80087fe:	8819      	ldrh	r1, [r3, #0]
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	681b      	ldr	r3, [r3, #0]
 8008804:	4a1d      	ldr	r2, [pc, #116]	@ (800887c <I2SEx_TxISR_I2SExt+0x90>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d101      	bne.n	800880e <I2SEx_TxISR_I2SExt+0x22>
 800880a:	4b1d      	ldr	r3, [pc, #116]	@ (8008880 <I2SEx_TxISR_I2SExt+0x94>)
 800880c:	e001      	b.n	8008812 <I2SEx_TxISR_I2SExt+0x26>
 800880e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008812:	460a      	mov	r2, r1
 8008814:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800881a:	b29b      	uxth	r3, r3
 800881c:	3b01      	subs	r3, #1
 800881e:	b29a      	uxth	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8008828:	b29b      	uxth	r3, r3
 800882a:	2b00      	cmp	r3, #0
 800882c:	d121      	bne.n	8008872 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	4a12      	ldr	r2, [pc, #72]	@ (800887c <I2SEx_TxISR_I2SExt+0x90>)
 8008834:	4293      	cmp	r3, r2
 8008836:	d101      	bne.n	800883c <I2SEx_TxISR_I2SExt+0x50>
 8008838:	4b11      	ldr	r3, [pc, #68]	@ (8008880 <I2SEx_TxISR_I2SExt+0x94>)
 800883a:	e001      	b.n	8008840 <I2SEx_TxISR_I2SExt+0x54>
 800883c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008840:	685a      	ldr	r2, [r3, #4]
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	490d      	ldr	r1, [pc, #52]	@ (800887c <I2SEx_TxISR_I2SExt+0x90>)
 8008848:	428b      	cmp	r3, r1
 800884a:	d101      	bne.n	8008850 <I2SEx_TxISR_I2SExt+0x64>
 800884c:	4b0c      	ldr	r3, [pc, #48]	@ (8008880 <I2SEx_TxISR_I2SExt+0x94>)
 800884e:	e001      	b.n	8008854 <I2SEx_TxISR_I2SExt+0x68>
 8008850:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008854:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8008858:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800885e:	b29b      	uxth	r3, r3
 8008860:	2b00      	cmp	r3, #0
 8008862:	d106      	bne.n	8008872 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	2201      	movs	r2, #1
 8008868:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800886c:	6878      	ldr	r0, [r7, #4]
 800886e:	f7ff ff81 	bl	8008774 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8008872:	bf00      	nop
 8008874:	3708      	adds	r7, #8
 8008876:	46bd      	mov	sp, r7
 8008878:	bd80      	pop	{r7, pc}
 800887a:	bf00      	nop
 800887c:	40003800 	.word	0x40003800
 8008880:	40003400 	.word	0x40003400

08008884 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b082      	sub	sp, #8
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	68d8      	ldr	r0, [r3, #12]
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008896:	1c99      	adds	r1, r3, #2
 8008898:	687a      	ldr	r2, [r7, #4]
 800889a:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800889c:	b282      	uxth	r2, r0
 800889e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80088a4:	b29b      	uxth	r3, r3
 80088a6:	3b01      	subs	r3, #1
 80088a8:	b29a      	uxth	r2, r3
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80088b2:	b29b      	uxth	r3, r3
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d113      	bne.n	80088e0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	685a      	ldr	r2, [r3, #4]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80088c6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80088cc:	b29b      	uxth	r3, r3
 80088ce:	2b00      	cmp	r3, #0
 80088d0:	d106      	bne.n	80088e0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	2201      	movs	r2, #1
 80088d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80088da:	6878      	ldr	r0, [r7, #4]
 80088dc:	f7ff ff4a 	bl	8008774 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80088e0:	bf00      	nop
 80088e2:	3708      	adds	r7, #8
 80088e4:	46bd      	mov	sp, r7
 80088e6:	bd80      	pop	{r7, pc}

080088e8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80088e8:	b580      	push	{r7, lr}
 80088ea:	b082      	sub	sp, #8
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	4a20      	ldr	r2, [pc, #128]	@ (8008978 <I2SEx_RxISR_I2SExt+0x90>)
 80088f6:	4293      	cmp	r3, r2
 80088f8:	d101      	bne.n	80088fe <I2SEx_RxISR_I2SExt+0x16>
 80088fa:	4b20      	ldr	r3, [pc, #128]	@ (800897c <I2SEx_RxISR_I2SExt+0x94>)
 80088fc:	e001      	b.n	8008902 <I2SEx_RxISR_I2SExt+0x1a>
 80088fe:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008902:	68d8      	ldr	r0, [r3, #12]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008908:	1c99      	adds	r1, r3, #2
 800890a:	687a      	ldr	r2, [r7, #4]
 800890c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800890e:	b282      	uxth	r2, r0
 8008910:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008916:	b29b      	uxth	r3, r3
 8008918:	3b01      	subs	r3, #1
 800891a:	b29a      	uxth	r2, r3
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8008924:	b29b      	uxth	r3, r3
 8008926:	2b00      	cmp	r3, #0
 8008928:	d121      	bne.n	800896e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	4a12      	ldr	r2, [pc, #72]	@ (8008978 <I2SEx_RxISR_I2SExt+0x90>)
 8008930:	4293      	cmp	r3, r2
 8008932:	d101      	bne.n	8008938 <I2SEx_RxISR_I2SExt+0x50>
 8008934:	4b11      	ldr	r3, [pc, #68]	@ (800897c <I2SEx_RxISR_I2SExt+0x94>)
 8008936:	e001      	b.n	800893c <I2SEx_RxISR_I2SExt+0x54>
 8008938:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800893c:	685a      	ldr	r2, [r3, #4]
 800893e:	687b      	ldr	r3, [r7, #4]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	490d      	ldr	r1, [pc, #52]	@ (8008978 <I2SEx_RxISR_I2SExt+0x90>)
 8008944:	428b      	cmp	r3, r1
 8008946:	d101      	bne.n	800894c <I2SEx_RxISR_I2SExt+0x64>
 8008948:	4b0c      	ldr	r3, [pc, #48]	@ (800897c <I2SEx_RxISR_I2SExt+0x94>)
 800894a:	e001      	b.n	8008950 <I2SEx_RxISR_I2SExt+0x68>
 800894c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8008950:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8008954:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800895a:	b29b      	uxth	r3, r3
 800895c:	2b00      	cmp	r3, #0
 800895e:	d106      	bne.n	800896e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8008968:	6878      	ldr	r0, [r7, #4]
 800896a:	f7ff ff03 	bl	8008774 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800896e:	bf00      	nop
 8008970:	3708      	adds	r7, #8
 8008972:	46bd      	mov	sp, r7
 8008974:	bd80      	pop	{r7, pc}
 8008976:	bf00      	nop
 8008978:	40003800 	.word	0x40003800
 800897c:	40003400 	.word	0x40003400

08008980 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008980:	b580      	push	{r7, lr}
 8008982:	b086      	sub	sp, #24
 8008984:	af00      	add	r7, sp, #0
 8008986:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2b00      	cmp	r3, #0
 800898c:	d101      	bne.n	8008992 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800898e:	2301      	movs	r3, #1
 8008990:	e267      	b.n	8008e62 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	f003 0301 	and.w	r3, r3, #1
 800899a:	2b00      	cmp	r3, #0
 800899c:	d075      	beq.n	8008a8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800899e:	4b88      	ldr	r3, [pc, #544]	@ (8008bc0 <HAL_RCC_OscConfig+0x240>)
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	f003 030c 	and.w	r3, r3, #12
 80089a6:	2b04      	cmp	r3, #4
 80089a8:	d00c      	beq.n	80089c4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80089aa:	4b85      	ldr	r3, [pc, #532]	@ (8008bc0 <HAL_RCC_OscConfig+0x240>)
 80089ac:	689b      	ldr	r3, [r3, #8]
 80089ae:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80089b2:	2b08      	cmp	r3, #8
 80089b4:	d112      	bne.n	80089dc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80089b6:	4b82      	ldr	r3, [pc, #520]	@ (8008bc0 <HAL_RCC_OscConfig+0x240>)
 80089b8:	685b      	ldr	r3, [r3, #4]
 80089ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80089be:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80089c2:	d10b      	bne.n	80089dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089c4:	4b7e      	ldr	r3, [pc, #504]	@ (8008bc0 <HAL_RCC_OscConfig+0x240>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80089cc:	2b00      	cmp	r3, #0
 80089ce:	d05b      	beq.n	8008a88 <HAL_RCC_OscConfig+0x108>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d157      	bne.n	8008a88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80089d8:	2301      	movs	r3, #1
 80089da:	e242      	b.n	8008e62 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80089e4:	d106      	bne.n	80089f4 <HAL_RCC_OscConfig+0x74>
 80089e6:	4b76      	ldr	r3, [pc, #472]	@ (8008bc0 <HAL_RCC_OscConfig+0x240>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a75      	ldr	r2, [pc, #468]	@ (8008bc0 <HAL_RCC_OscConfig+0x240>)
 80089ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80089f0:	6013      	str	r3, [r2, #0]
 80089f2:	e01d      	b.n	8008a30 <HAL_RCC_OscConfig+0xb0>
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	685b      	ldr	r3, [r3, #4]
 80089f8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80089fc:	d10c      	bne.n	8008a18 <HAL_RCC_OscConfig+0x98>
 80089fe:	4b70      	ldr	r3, [pc, #448]	@ (8008bc0 <HAL_RCC_OscConfig+0x240>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a6f      	ldr	r2, [pc, #444]	@ (8008bc0 <HAL_RCC_OscConfig+0x240>)
 8008a04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8008a08:	6013      	str	r3, [r2, #0]
 8008a0a:	4b6d      	ldr	r3, [pc, #436]	@ (8008bc0 <HAL_RCC_OscConfig+0x240>)
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	4a6c      	ldr	r2, [pc, #432]	@ (8008bc0 <HAL_RCC_OscConfig+0x240>)
 8008a10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8008a14:	6013      	str	r3, [r2, #0]
 8008a16:	e00b      	b.n	8008a30 <HAL_RCC_OscConfig+0xb0>
 8008a18:	4b69      	ldr	r3, [pc, #420]	@ (8008bc0 <HAL_RCC_OscConfig+0x240>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a68      	ldr	r2, [pc, #416]	@ (8008bc0 <HAL_RCC_OscConfig+0x240>)
 8008a1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8008a22:	6013      	str	r3, [r2, #0]
 8008a24:	4b66      	ldr	r3, [pc, #408]	@ (8008bc0 <HAL_RCC_OscConfig+0x240>)
 8008a26:	681b      	ldr	r3, [r3, #0]
 8008a28:	4a65      	ldr	r2, [pc, #404]	@ (8008bc0 <HAL_RCC_OscConfig+0x240>)
 8008a2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8008a2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	685b      	ldr	r3, [r3, #4]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d013      	beq.n	8008a60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a38:	f7fb fffa 	bl	8004a30 <HAL_GetTick>
 8008a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a3e:	e008      	b.n	8008a52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a40:	f7fb fff6 	bl	8004a30 <HAL_GetTick>
 8008a44:	4602      	mov	r2, r0
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	1ad3      	subs	r3, r2, r3
 8008a4a:	2b64      	cmp	r3, #100	@ 0x64
 8008a4c:	d901      	bls.n	8008a52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8008a4e:	2303      	movs	r3, #3
 8008a50:	e207      	b.n	8008e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a52:	4b5b      	ldr	r3, [pc, #364]	@ (8008bc0 <HAL_RCC_OscConfig+0x240>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d0f0      	beq.n	8008a40 <HAL_RCC_OscConfig+0xc0>
 8008a5e:	e014      	b.n	8008a8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008a60:	f7fb ffe6 	bl	8004a30 <HAL_GetTick>
 8008a64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a66:	e008      	b.n	8008a7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008a68:	f7fb ffe2 	bl	8004a30 <HAL_GetTick>
 8008a6c:	4602      	mov	r2, r0
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	1ad3      	subs	r3, r2, r3
 8008a72:	2b64      	cmp	r3, #100	@ 0x64
 8008a74:	d901      	bls.n	8008a7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008a76:	2303      	movs	r3, #3
 8008a78:	e1f3      	b.n	8008e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a7a:	4b51      	ldr	r3, [pc, #324]	@ (8008bc0 <HAL_RCC_OscConfig+0x240>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d1f0      	bne.n	8008a68 <HAL_RCC_OscConfig+0xe8>
 8008a86:	e000      	b.n	8008a8a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a8a:	687b      	ldr	r3, [r7, #4]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 0302 	and.w	r3, r3, #2
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d063      	beq.n	8008b5e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008a96:	4b4a      	ldr	r3, [pc, #296]	@ (8008bc0 <HAL_RCC_OscConfig+0x240>)
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	f003 030c 	and.w	r3, r3, #12
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d00b      	beq.n	8008aba <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008aa2:	4b47      	ldr	r3, [pc, #284]	@ (8008bc0 <HAL_RCC_OscConfig+0x240>)
 8008aa4:	689b      	ldr	r3, [r3, #8]
 8008aa6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8008aaa:	2b08      	cmp	r3, #8
 8008aac:	d11c      	bne.n	8008ae8 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008aae:	4b44      	ldr	r3, [pc, #272]	@ (8008bc0 <HAL_RCC_OscConfig+0x240>)
 8008ab0:	685b      	ldr	r3, [r3, #4]
 8008ab2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d116      	bne.n	8008ae8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008aba:	4b41      	ldr	r3, [pc, #260]	@ (8008bc0 <HAL_RCC_OscConfig+0x240>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 0302 	and.w	r3, r3, #2
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d005      	beq.n	8008ad2 <HAL_RCC_OscConfig+0x152>
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	68db      	ldr	r3, [r3, #12]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d001      	beq.n	8008ad2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008ace:	2301      	movs	r3, #1
 8008ad0:	e1c7      	b.n	8008e62 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ad2:	4b3b      	ldr	r3, [pc, #236]	@ (8008bc0 <HAL_RCC_OscConfig+0x240>)
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	691b      	ldr	r3, [r3, #16]
 8008ade:	00db      	lsls	r3, r3, #3
 8008ae0:	4937      	ldr	r1, [pc, #220]	@ (8008bc0 <HAL_RCC_OscConfig+0x240>)
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ae6:	e03a      	b.n	8008b5e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	68db      	ldr	r3, [r3, #12]
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d020      	beq.n	8008b32 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008af0:	4b34      	ldr	r3, [pc, #208]	@ (8008bc4 <HAL_RCC_OscConfig+0x244>)
 8008af2:	2201      	movs	r2, #1
 8008af4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008af6:	f7fb ff9b 	bl	8004a30 <HAL_GetTick>
 8008afa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008afc:	e008      	b.n	8008b10 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008afe:	f7fb ff97 	bl	8004a30 <HAL_GetTick>
 8008b02:	4602      	mov	r2, r0
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	1ad3      	subs	r3, r2, r3
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d901      	bls.n	8008b10 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8008b0c:	2303      	movs	r3, #3
 8008b0e:	e1a8      	b.n	8008e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b10:	4b2b      	ldr	r3, [pc, #172]	@ (8008bc0 <HAL_RCC_OscConfig+0x240>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f003 0302 	and.w	r3, r3, #2
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d0f0      	beq.n	8008afe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b1c:	4b28      	ldr	r3, [pc, #160]	@ (8008bc0 <HAL_RCC_OscConfig+0x240>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	691b      	ldr	r3, [r3, #16]
 8008b28:	00db      	lsls	r3, r3, #3
 8008b2a:	4925      	ldr	r1, [pc, #148]	@ (8008bc0 <HAL_RCC_OscConfig+0x240>)
 8008b2c:	4313      	orrs	r3, r2
 8008b2e:	600b      	str	r3, [r1, #0]
 8008b30:	e015      	b.n	8008b5e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b32:	4b24      	ldr	r3, [pc, #144]	@ (8008bc4 <HAL_RCC_OscConfig+0x244>)
 8008b34:	2200      	movs	r2, #0
 8008b36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b38:	f7fb ff7a 	bl	8004a30 <HAL_GetTick>
 8008b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b3e:	e008      	b.n	8008b52 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b40:	f7fb ff76 	bl	8004a30 <HAL_GetTick>
 8008b44:	4602      	mov	r2, r0
 8008b46:	693b      	ldr	r3, [r7, #16]
 8008b48:	1ad3      	subs	r3, r2, r3
 8008b4a:	2b02      	cmp	r3, #2
 8008b4c:	d901      	bls.n	8008b52 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8008b4e:	2303      	movs	r3, #3
 8008b50:	e187      	b.n	8008e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b52:	4b1b      	ldr	r3, [pc, #108]	@ (8008bc0 <HAL_RCC_OscConfig+0x240>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f003 0302 	and.w	r3, r3, #2
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d1f0      	bne.n	8008b40 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 0308 	and.w	r3, r3, #8
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d036      	beq.n	8008bd8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	695b      	ldr	r3, [r3, #20]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d016      	beq.n	8008ba0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b72:	4b15      	ldr	r3, [pc, #84]	@ (8008bc8 <HAL_RCC_OscConfig+0x248>)
 8008b74:	2201      	movs	r2, #1
 8008b76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b78:	f7fb ff5a 	bl	8004a30 <HAL_GetTick>
 8008b7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b7e:	e008      	b.n	8008b92 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008b80:	f7fb ff56 	bl	8004a30 <HAL_GetTick>
 8008b84:	4602      	mov	r2, r0
 8008b86:	693b      	ldr	r3, [r7, #16]
 8008b88:	1ad3      	subs	r3, r2, r3
 8008b8a:	2b02      	cmp	r3, #2
 8008b8c:	d901      	bls.n	8008b92 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008b8e:	2303      	movs	r3, #3
 8008b90:	e167      	b.n	8008e62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b92:	4b0b      	ldr	r3, [pc, #44]	@ (8008bc0 <HAL_RCC_OscConfig+0x240>)
 8008b94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008b96:	f003 0302 	and.w	r3, r3, #2
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	d0f0      	beq.n	8008b80 <HAL_RCC_OscConfig+0x200>
 8008b9e:	e01b      	b.n	8008bd8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ba0:	4b09      	ldr	r3, [pc, #36]	@ (8008bc8 <HAL_RCC_OscConfig+0x248>)
 8008ba2:	2200      	movs	r2, #0
 8008ba4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008ba6:	f7fb ff43 	bl	8004a30 <HAL_GetTick>
 8008baa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008bac:	e00e      	b.n	8008bcc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008bae:	f7fb ff3f 	bl	8004a30 <HAL_GetTick>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d907      	bls.n	8008bcc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	e150      	b.n	8008e62 <HAL_RCC_OscConfig+0x4e2>
 8008bc0:	40023800 	.word	0x40023800
 8008bc4:	42470000 	.word	0x42470000
 8008bc8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008bcc:	4b88      	ldr	r3, [pc, #544]	@ (8008df0 <HAL_RCC_OscConfig+0x470>)
 8008bce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008bd0:	f003 0302 	and.w	r3, r3, #2
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d1ea      	bne.n	8008bae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	f003 0304 	and.w	r3, r3, #4
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	f000 8097 	beq.w	8008d14 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008be6:	2300      	movs	r3, #0
 8008be8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008bea:	4b81      	ldr	r3, [pc, #516]	@ (8008df0 <HAL_RCC_OscConfig+0x470>)
 8008bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008bf2:	2b00      	cmp	r3, #0
 8008bf4:	d10f      	bne.n	8008c16 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008bf6:	2300      	movs	r3, #0
 8008bf8:	60bb      	str	r3, [r7, #8]
 8008bfa:	4b7d      	ldr	r3, [pc, #500]	@ (8008df0 <HAL_RCC_OscConfig+0x470>)
 8008bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008bfe:	4a7c      	ldr	r2, [pc, #496]	@ (8008df0 <HAL_RCC_OscConfig+0x470>)
 8008c00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008c04:	6413      	str	r3, [r2, #64]	@ 0x40
 8008c06:	4b7a      	ldr	r3, [pc, #488]	@ (8008df0 <HAL_RCC_OscConfig+0x470>)
 8008c08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8008c0e:	60bb      	str	r3, [r7, #8]
 8008c10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c12:	2301      	movs	r3, #1
 8008c14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c16:	4b77      	ldr	r3, [pc, #476]	@ (8008df4 <HAL_RCC_OscConfig+0x474>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	d118      	bne.n	8008c54 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008c22:	4b74      	ldr	r3, [pc, #464]	@ (8008df4 <HAL_RCC_OscConfig+0x474>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	4a73      	ldr	r2, [pc, #460]	@ (8008df4 <HAL_RCC_OscConfig+0x474>)
 8008c28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008c2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008c2e:	f7fb feff 	bl	8004a30 <HAL_GetTick>
 8008c32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c34:	e008      	b.n	8008c48 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c36:	f7fb fefb 	bl	8004a30 <HAL_GetTick>
 8008c3a:	4602      	mov	r2, r0
 8008c3c:	693b      	ldr	r3, [r7, #16]
 8008c3e:	1ad3      	subs	r3, r2, r3
 8008c40:	2b02      	cmp	r3, #2
 8008c42:	d901      	bls.n	8008c48 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008c44:	2303      	movs	r3, #3
 8008c46:	e10c      	b.n	8008e62 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c48:	4b6a      	ldr	r3, [pc, #424]	@ (8008df4 <HAL_RCC_OscConfig+0x474>)
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d0f0      	beq.n	8008c36 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	689b      	ldr	r3, [r3, #8]
 8008c58:	2b01      	cmp	r3, #1
 8008c5a:	d106      	bne.n	8008c6a <HAL_RCC_OscConfig+0x2ea>
 8008c5c:	4b64      	ldr	r3, [pc, #400]	@ (8008df0 <HAL_RCC_OscConfig+0x470>)
 8008c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c60:	4a63      	ldr	r2, [pc, #396]	@ (8008df0 <HAL_RCC_OscConfig+0x470>)
 8008c62:	f043 0301 	orr.w	r3, r3, #1
 8008c66:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c68:	e01c      	b.n	8008ca4 <HAL_RCC_OscConfig+0x324>
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	689b      	ldr	r3, [r3, #8]
 8008c6e:	2b05      	cmp	r3, #5
 8008c70:	d10c      	bne.n	8008c8c <HAL_RCC_OscConfig+0x30c>
 8008c72:	4b5f      	ldr	r3, [pc, #380]	@ (8008df0 <HAL_RCC_OscConfig+0x470>)
 8008c74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c76:	4a5e      	ldr	r2, [pc, #376]	@ (8008df0 <HAL_RCC_OscConfig+0x470>)
 8008c78:	f043 0304 	orr.w	r3, r3, #4
 8008c7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c7e:	4b5c      	ldr	r3, [pc, #368]	@ (8008df0 <HAL_RCC_OscConfig+0x470>)
 8008c80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c82:	4a5b      	ldr	r2, [pc, #364]	@ (8008df0 <HAL_RCC_OscConfig+0x470>)
 8008c84:	f043 0301 	orr.w	r3, r3, #1
 8008c88:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c8a:	e00b      	b.n	8008ca4 <HAL_RCC_OscConfig+0x324>
 8008c8c:	4b58      	ldr	r3, [pc, #352]	@ (8008df0 <HAL_RCC_OscConfig+0x470>)
 8008c8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c90:	4a57      	ldr	r2, [pc, #348]	@ (8008df0 <HAL_RCC_OscConfig+0x470>)
 8008c92:	f023 0301 	bic.w	r3, r3, #1
 8008c96:	6713      	str	r3, [r2, #112]	@ 0x70
 8008c98:	4b55      	ldr	r3, [pc, #340]	@ (8008df0 <HAL_RCC_OscConfig+0x470>)
 8008c9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c9c:	4a54      	ldr	r2, [pc, #336]	@ (8008df0 <HAL_RCC_OscConfig+0x470>)
 8008c9e:	f023 0304 	bic.w	r3, r3, #4
 8008ca2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	689b      	ldr	r3, [r3, #8]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	d015      	beq.n	8008cd8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cac:	f7fb fec0 	bl	8004a30 <HAL_GetTick>
 8008cb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cb2:	e00a      	b.n	8008cca <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008cb4:	f7fb febc 	bl	8004a30 <HAL_GetTick>
 8008cb8:	4602      	mov	r2, r0
 8008cba:	693b      	ldr	r3, [r7, #16]
 8008cbc:	1ad3      	subs	r3, r2, r3
 8008cbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008cc2:	4293      	cmp	r3, r2
 8008cc4:	d901      	bls.n	8008cca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008cc6:	2303      	movs	r3, #3
 8008cc8:	e0cb      	b.n	8008e62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cca:	4b49      	ldr	r3, [pc, #292]	@ (8008df0 <HAL_RCC_OscConfig+0x470>)
 8008ccc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cce:	f003 0302 	and.w	r3, r3, #2
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d0ee      	beq.n	8008cb4 <HAL_RCC_OscConfig+0x334>
 8008cd6:	e014      	b.n	8008d02 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008cd8:	f7fb feaa 	bl	8004a30 <HAL_GetTick>
 8008cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008cde:	e00a      	b.n	8008cf6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ce0:	f7fb fea6 	bl	8004a30 <HAL_GetTick>
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	693b      	ldr	r3, [r7, #16]
 8008ce8:	1ad3      	subs	r3, r2, r3
 8008cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d901      	bls.n	8008cf6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8008cf2:	2303      	movs	r3, #3
 8008cf4:	e0b5      	b.n	8008e62 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008cf6:	4b3e      	ldr	r3, [pc, #248]	@ (8008df0 <HAL_RCC_OscConfig+0x470>)
 8008cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008cfa:	f003 0302 	and.w	r3, r3, #2
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d1ee      	bne.n	8008ce0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008d02:	7dfb      	ldrb	r3, [r7, #23]
 8008d04:	2b01      	cmp	r3, #1
 8008d06:	d105      	bne.n	8008d14 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d08:	4b39      	ldr	r3, [pc, #228]	@ (8008df0 <HAL_RCC_OscConfig+0x470>)
 8008d0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d0c:	4a38      	ldr	r2, [pc, #224]	@ (8008df0 <HAL_RCC_OscConfig+0x470>)
 8008d0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008d12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	699b      	ldr	r3, [r3, #24]
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f000 80a1 	beq.w	8008e60 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008d1e:	4b34      	ldr	r3, [pc, #208]	@ (8008df0 <HAL_RCC_OscConfig+0x470>)
 8008d20:	689b      	ldr	r3, [r3, #8]
 8008d22:	f003 030c 	and.w	r3, r3, #12
 8008d26:	2b08      	cmp	r3, #8
 8008d28:	d05c      	beq.n	8008de4 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	699b      	ldr	r3, [r3, #24]
 8008d2e:	2b02      	cmp	r3, #2
 8008d30:	d141      	bne.n	8008db6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d32:	4b31      	ldr	r3, [pc, #196]	@ (8008df8 <HAL_RCC_OscConfig+0x478>)
 8008d34:	2200      	movs	r2, #0
 8008d36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d38:	f7fb fe7a 	bl	8004a30 <HAL_GetTick>
 8008d3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d3e:	e008      	b.n	8008d52 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d40:	f7fb fe76 	bl	8004a30 <HAL_GetTick>
 8008d44:	4602      	mov	r2, r0
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	1ad3      	subs	r3, r2, r3
 8008d4a:	2b02      	cmp	r3, #2
 8008d4c:	d901      	bls.n	8008d52 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e087      	b.n	8008e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d52:	4b27      	ldr	r3, [pc, #156]	@ (8008df0 <HAL_RCC_OscConfig+0x470>)
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d1f0      	bne.n	8008d40 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	69da      	ldr	r2, [r3, #28]
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	6a1b      	ldr	r3, [r3, #32]
 8008d66:	431a      	orrs	r2, r3
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008d6c:	019b      	lsls	r3, r3, #6
 8008d6e:	431a      	orrs	r2, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008d74:	085b      	lsrs	r3, r3, #1
 8008d76:	3b01      	subs	r3, #1
 8008d78:	041b      	lsls	r3, r3, #16
 8008d7a:	431a      	orrs	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008d80:	061b      	lsls	r3, r3, #24
 8008d82:	491b      	ldr	r1, [pc, #108]	@ (8008df0 <HAL_RCC_OscConfig+0x470>)
 8008d84:	4313      	orrs	r3, r2
 8008d86:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d88:	4b1b      	ldr	r3, [pc, #108]	@ (8008df8 <HAL_RCC_OscConfig+0x478>)
 8008d8a:	2201      	movs	r2, #1
 8008d8c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008d8e:	f7fb fe4f 	bl	8004a30 <HAL_GetTick>
 8008d92:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d94:	e008      	b.n	8008da8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d96:	f7fb fe4b 	bl	8004a30 <HAL_GetTick>
 8008d9a:	4602      	mov	r2, r0
 8008d9c:	693b      	ldr	r3, [r7, #16]
 8008d9e:	1ad3      	subs	r3, r2, r3
 8008da0:	2b02      	cmp	r3, #2
 8008da2:	d901      	bls.n	8008da8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008da4:	2303      	movs	r3, #3
 8008da6:	e05c      	b.n	8008e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008da8:	4b11      	ldr	r3, [pc, #68]	@ (8008df0 <HAL_RCC_OscConfig+0x470>)
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d0f0      	beq.n	8008d96 <HAL_RCC_OscConfig+0x416>
 8008db4:	e054      	b.n	8008e60 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008db6:	4b10      	ldr	r3, [pc, #64]	@ (8008df8 <HAL_RCC_OscConfig+0x478>)
 8008db8:	2200      	movs	r2, #0
 8008dba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008dbc:	f7fb fe38 	bl	8004a30 <HAL_GetTick>
 8008dc0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dc2:	e008      	b.n	8008dd6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008dc4:	f7fb fe34 	bl	8004a30 <HAL_GetTick>
 8008dc8:	4602      	mov	r2, r0
 8008dca:	693b      	ldr	r3, [r7, #16]
 8008dcc:	1ad3      	subs	r3, r2, r3
 8008dce:	2b02      	cmp	r3, #2
 8008dd0:	d901      	bls.n	8008dd6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008dd2:	2303      	movs	r3, #3
 8008dd4:	e045      	b.n	8008e62 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dd6:	4b06      	ldr	r3, [pc, #24]	@ (8008df0 <HAL_RCC_OscConfig+0x470>)
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d1f0      	bne.n	8008dc4 <HAL_RCC_OscConfig+0x444>
 8008de2:	e03d      	b.n	8008e60 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	699b      	ldr	r3, [r3, #24]
 8008de8:	2b01      	cmp	r3, #1
 8008dea:	d107      	bne.n	8008dfc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008dec:	2301      	movs	r3, #1
 8008dee:	e038      	b.n	8008e62 <HAL_RCC_OscConfig+0x4e2>
 8008df0:	40023800 	.word	0x40023800
 8008df4:	40007000 	.word	0x40007000
 8008df8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008dfc:	4b1b      	ldr	r3, [pc, #108]	@ (8008e6c <HAL_RCC_OscConfig+0x4ec>)
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	699b      	ldr	r3, [r3, #24]
 8008e06:	2b01      	cmp	r3, #1
 8008e08:	d028      	beq.n	8008e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e14:	429a      	cmp	r2, r3
 8008e16:	d121      	bne.n	8008e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e22:	429a      	cmp	r2, r3
 8008e24:	d11a      	bne.n	8008e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008e26:	68fa      	ldr	r2, [r7, #12]
 8008e28:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8008e2c:	4013      	ands	r3, r2
 8008e2e:	687a      	ldr	r2, [r7, #4]
 8008e30:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8008e32:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008e34:	4293      	cmp	r3, r2
 8008e36:	d111      	bne.n	8008e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e42:	085b      	lsrs	r3, r3, #1
 8008e44:	3b01      	subs	r3, #1
 8008e46:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008e48:	429a      	cmp	r2, r3
 8008e4a:	d107      	bne.n	8008e5c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008e56:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008e58:	429a      	cmp	r2, r3
 8008e5a:	d001      	beq.n	8008e60 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	e000      	b.n	8008e62 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008e60:	2300      	movs	r3, #0
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3718      	adds	r7, #24
 8008e66:	46bd      	mov	sp, r7
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	bf00      	nop
 8008e6c:	40023800 	.word	0x40023800

08008e70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
 8008e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d101      	bne.n	8008e84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	e0cc      	b.n	800901e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008e84:	4b68      	ldr	r3, [pc, #416]	@ (8009028 <HAL_RCC_ClockConfig+0x1b8>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f003 0307 	and.w	r3, r3, #7
 8008e8c:	683a      	ldr	r2, [r7, #0]
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d90c      	bls.n	8008eac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008e92:	4b65      	ldr	r3, [pc, #404]	@ (8009028 <HAL_RCC_ClockConfig+0x1b8>)
 8008e94:	683a      	ldr	r2, [r7, #0]
 8008e96:	b2d2      	uxtb	r2, r2
 8008e98:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e9a:	4b63      	ldr	r3, [pc, #396]	@ (8009028 <HAL_RCC_ClockConfig+0x1b8>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f003 0307 	and.w	r3, r3, #7
 8008ea2:	683a      	ldr	r2, [r7, #0]
 8008ea4:	429a      	cmp	r2, r3
 8008ea6:	d001      	beq.n	8008eac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008ea8:	2301      	movs	r3, #1
 8008eaa:	e0b8      	b.n	800901e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f003 0302 	and.w	r3, r3, #2
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d020      	beq.n	8008efa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	f003 0304 	and.w	r3, r3, #4
 8008ec0:	2b00      	cmp	r3, #0
 8008ec2:	d005      	beq.n	8008ed0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ec4:	4b59      	ldr	r3, [pc, #356]	@ (800902c <HAL_RCC_ClockConfig+0x1bc>)
 8008ec6:	689b      	ldr	r3, [r3, #8]
 8008ec8:	4a58      	ldr	r2, [pc, #352]	@ (800902c <HAL_RCC_ClockConfig+0x1bc>)
 8008eca:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8008ece:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	681b      	ldr	r3, [r3, #0]
 8008ed4:	f003 0308 	and.w	r3, r3, #8
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d005      	beq.n	8008ee8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008edc:	4b53      	ldr	r3, [pc, #332]	@ (800902c <HAL_RCC_ClockConfig+0x1bc>)
 8008ede:	689b      	ldr	r3, [r3, #8]
 8008ee0:	4a52      	ldr	r2, [pc, #328]	@ (800902c <HAL_RCC_ClockConfig+0x1bc>)
 8008ee2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008ee6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ee8:	4b50      	ldr	r3, [pc, #320]	@ (800902c <HAL_RCC_ClockConfig+0x1bc>)
 8008eea:	689b      	ldr	r3, [r3, #8]
 8008eec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	689b      	ldr	r3, [r3, #8]
 8008ef4:	494d      	ldr	r1, [pc, #308]	@ (800902c <HAL_RCC_ClockConfig+0x1bc>)
 8008ef6:	4313      	orrs	r3, r2
 8008ef8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f003 0301 	and.w	r3, r3, #1
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d044      	beq.n	8008f90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	685b      	ldr	r3, [r3, #4]
 8008f0a:	2b01      	cmp	r3, #1
 8008f0c:	d107      	bne.n	8008f1e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008f0e:	4b47      	ldr	r3, [pc, #284]	@ (800902c <HAL_RCC_ClockConfig+0x1bc>)
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d119      	bne.n	8008f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e07f      	b.n	800901e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d003      	beq.n	8008f2e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008f2a:	2b03      	cmp	r3, #3
 8008f2c:	d107      	bne.n	8008f3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008f2e:	4b3f      	ldr	r3, [pc, #252]	@ (800902c <HAL_RCC_ClockConfig+0x1bc>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d109      	bne.n	8008f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f3a:	2301      	movs	r3, #1
 8008f3c:	e06f      	b.n	800901e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008f3e:	4b3b      	ldr	r3, [pc, #236]	@ (800902c <HAL_RCC_ClockConfig+0x1bc>)
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	f003 0302 	and.w	r3, r3, #2
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d101      	bne.n	8008f4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e067      	b.n	800901e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008f4e:	4b37      	ldr	r3, [pc, #220]	@ (800902c <HAL_RCC_ClockConfig+0x1bc>)
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	f023 0203 	bic.w	r2, r3, #3
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	4934      	ldr	r1, [pc, #208]	@ (800902c <HAL_RCC_ClockConfig+0x1bc>)
 8008f5c:	4313      	orrs	r3, r2
 8008f5e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008f60:	f7fb fd66 	bl	8004a30 <HAL_GetTick>
 8008f64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f66:	e00a      	b.n	8008f7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008f68:	f7fb fd62 	bl	8004a30 <HAL_GetTick>
 8008f6c:	4602      	mov	r2, r0
 8008f6e:	68fb      	ldr	r3, [r7, #12]
 8008f70:	1ad3      	subs	r3, r2, r3
 8008f72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d901      	bls.n	8008f7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008f7a:	2303      	movs	r3, #3
 8008f7c:	e04f      	b.n	800901e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008f7e:	4b2b      	ldr	r3, [pc, #172]	@ (800902c <HAL_RCC_ClockConfig+0x1bc>)
 8008f80:	689b      	ldr	r3, [r3, #8]
 8008f82:	f003 020c 	and.w	r2, r3, #12
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	685b      	ldr	r3, [r3, #4]
 8008f8a:	009b      	lsls	r3, r3, #2
 8008f8c:	429a      	cmp	r2, r3
 8008f8e:	d1eb      	bne.n	8008f68 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008f90:	4b25      	ldr	r3, [pc, #148]	@ (8009028 <HAL_RCC_ClockConfig+0x1b8>)
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f003 0307 	and.w	r3, r3, #7
 8008f98:	683a      	ldr	r2, [r7, #0]
 8008f9a:	429a      	cmp	r2, r3
 8008f9c:	d20c      	bcs.n	8008fb8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008f9e:	4b22      	ldr	r3, [pc, #136]	@ (8009028 <HAL_RCC_ClockConfig+0x1b8>)
 8008fa0:	683a      	ldr	r2, [r7, #0]
 8008fa2:	b2d2      	uxtb	r2, r2
 8008fa4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008fa6:	4b20      	ldr	r3, [pc, #128]	@ (8009028 <HAL_RCC_ClockConfig+0x1b8>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	f003 0307 	and.w	r3, r3, #7
 8008fae:	683a      	ldr	r2, [r7, #0]
 8008fb0:	429a      	cmp	r2, r3
 8008fb2:	d001      	beq.n	8008fb8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e032      	b.n	800901e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 0304 	and.w	r3, r3, #4
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d008      	beq.n	8008fd6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008fc4:	4b19      	ldr	r3, [pc, #100]	@ (800902c <HAL_RCC_ClockConfig+0x1bc>)
 8008fc6:	689b      	ldr	r3, [r3, #8]
 8008fc8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	4916      	ldr	r1, [pc, #88]	@ (800902c <HAL_RCC_ClockConfig+0x1bc>)
 8008fd2:	4313      	orrs	r3, r2
 8008fd4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	681b      	ldr	r3, [r3, #0]
 8008fda:	f003 0308 	and.w	r3, r3, #8
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d009      	beq.n	8008ff6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008fe2:	4b12      	ldr	r3, [pc, #72]	@ (800902c <HAL_RCC_ClockConfig+0x1bc>)
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	691b      	ldr	r3, [r3, #16]
 8008fee:	00db      	lsls	r3, r3, #3
 8008ff0:	490e      	ldr	r1, [pc, #56]	@ (800902c <HAL_RCC_ClockConfig+0x1bc>)
 8008ff2:	4313      	orrs	r3, r2
 8008ff4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008ff6:	f000 f821 	bl	800903c <HAL_RCC_GetSysClockFreq>
 8008ffa:	4602      	mov	r2, r0
 8008ffc:	4b0b      	ldr	r3, [pc, #44]	@ (800902c <HAL_RCC_ClockConfig+0x1bc>)
 8008ffe:	689b      	ldr	r3, [r3, #8]
 8009000:	091b      	lsrs	r3, r3, #4
 8009002:	f003 030f 	and.w	r3, r3, #15
 8009006:	490a      	ldr	r1, [pc, #40]	@ (8009030 <HAL_RCC_ClockConfig+0x1c0>)
 8009008:	5ccb      	ldrb	r3, [r1, r3]
 800900a:	fa22 f303 	lsr.w	r3, r2, r3
 800900e:	4a09      	ldr	r2, [pc, #36]	@ (8009034 <HAL_RCC_ClockConfig+0x1c4>)
 8009010:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8009012:	4b09      	ldr	r3, [pc, #36]	@ (8009038 <HAL_RCC_ClockConfig+0x1c8>)
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	4618      	mov	r0, r3
 8009018:	f7fb fcc6 	bl	80049a8 <HAL_InitTick>

  return HAL_OK;
 800901c:	2300      	movs	r3, #0
}
 800901e:	4618      	mov	r0, r3
 8009020:	3710      	adds	r7, #16
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	40023c00 	.word	0x40023c00
 800902c:	40023800 	.word	0x40023800
 8009030:	0800d2c8 	.word	0x0800d2c8
 8009034:	20000000 	.word	0x20000000
 8009038:	20000004 	.word	0x20000004

0800903c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800903c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009040:	b094      	sub	sp, #80	@ 0x50
 8009042:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8009044:	2300      	movs	r3, #0
 8009046:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8009048:	2300      	movs	r3, #0
 800904a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 800904c:	2300      	movs	r3, #0
 800904e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8009050:	2300      	movs	r3, #0
 8009052:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009054:	4b79      	ldr	r3, [pc, #484]	@ (800923c <HAL_RCC_GetSysClockFreq+0x200>)
 8009056:	689b      	ldr	r3, [r3, #8]
 8009058:	f003 030c 	and.w	r3, r3, #12
 800905c:	2b08      	cmp	r3, #8
 800905e:	d00d      	beq.n	800907c <HAL_RCC_GetSysClockFreq+0x40>
 8009060:	2b08      	cmp	r3, #8
 8009062:	f200 80e1 	bhi.w	8009228 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009066:	2b00      	cmp	r3, #0
 8009068:	d002      	beq.n	8009070 <HAL_RCC_GetSysClockFreq+0x34>
 800906a:	2b04      	cmp	r3, #4
 800906c:	d003      	beq.n	8009076 <HAL_RCC_GetSysClockFreq+0x3a>
 800906e:	e0db      	b.n	8009228 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009070:	4b73      	ldr	r3, [pc, #460]	@ (8009240 <HAL_RCC_GetSysClockFreq+0x204>)
 8009072:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009074:	e0db      	b.n	800922e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009076:	4b73      	ldr	r3, [pc, #460]	@ (8009244 <HAL_RCC_GetSysClockFreq+0x208>)
 8009078:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800907a:	e0d8      	b.n	800922e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800907c:	4b6f      	ldr	r3, [pc, #444]	@ (800923c <HAL_RCC_GetSysClockFreq+0x200>)
 800907e:	685b      	ldr	r3, [r3, #4]
 8009080:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009084:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8009086:	4b6d      	ldr	r3, [pc, #436]	@ (800923c <HAL_RCC_GetSysClockFreq+0x200>)
 8009088:	685b      	ldr	r3, [r3, #4]
 800908a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800908e:	2b00      	cmp	r3, #0
 8009090:	d063      	beq.n	800915a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009092:	4b6a      	ldr	r3, [pc, #424]	@ (800923c <HAL_RCC_GetSysClockFreq+0x200>)
 8009094:	685b      	ldr	r3, [r3, #4]
 8009096:	099b      	lsrs	r3, r3, #6
 8009098:	2200      	movs	r2, #0
 800909a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800909c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800909e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80090a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80090a4:	633b      	str	r3, [r7, #48]	@ 0x30
 80090a6:	2300      	movs	r3, #0
 80090a8:	637b      	str	r3, [r7, #52]	@ 0x34
 80090aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80090ae:	4622      	mov	r2, r4
 80090b0:	462b      	mov	r3, r5
 80090b2:	f04f 0000 	mov.w	r0, #0
 80090b6:	f04f 0100 	mov.w	r1, #0
 80090ba:	0159      	lsls	r1, r3, #5
 80090bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80090c0:	0150      	lsls	r0, r2, #5
 80090c2:	4602      	mov	r2, r0
 80090c4:	460b      	mov	r3, r1
 80090c6:	4621      	mov	r1, r4
 80090c8:	1a51      	subs	r1, r2, r1
 80090ca:	6139      	str	r1, [r7, #16]
 80090cc:	4629      	mov	r1, r5
 80090ce:	eb63 0301 	sbc.w	r3, r3, r1
 80090d2:	617b      	str	r3, [r7, #20]
 80090d4:	f04f 0200 	mov.w	r2, #0
 80090d8:	f04f 0300 	mov.w	r3, #0
 80090dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80090e0:	4659      	mov	r1, fp
 80090e2:	018b      	lsls	r3, r1, #6
 80090e4:	4651      	mov	r1, sl
 80090e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80090ea:	4651      	mov	r1, sl
 80090ec:	018a      	lsls	r2, r1, #6
 80090ee:	4651      	mov	r1, sl
 80090f0:	ebb2 0801 	subs.w	r8, r2, r1
 80090f4:	4659      	mov	r1, fp
 80090f6:	eb63 0901 	sbc.w	r9, r3, r1
 80090fa:	f04f 0200 	mov.w	r2, #0
 80090fe:	f04f 0300 	mov.w	r3, #0
 8009102:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009106:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800910a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800910e:	4690      	mov	r8, r2
 8009110:	4699      	mov	r9, r3
 8009112:	4623      	mov	r3, r4
 8009114:	eb18 0303 	adds.w	r3, r8, r3
 8009118:	60bb      	str	r3, [r7, #8]
 800911a:	462b      	mov	r3, r5
 800911c:	eb49 0303 	adc.w	r3, r9, r3
 8009120:	60fb      	str	r3, [r7, #12]
 8009122:	f04f 0200 	mov.w	r2, #0
 8009126:	f04f 0300 	mov.w	r3, #0
 800912a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800912e:	4629      	mov	r1, r5
 8009130:	024b      	lsls	r3, r1, #9
 8009132:	4621      	mov	r1, r4
 8009134:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009138:	4621      	mov	r1, r4
 800913a:	024a      	lsls	r2, r1, #9
 800913c:	4610      	mov	r0, r2
 800913e:	4619      	mov	r1, r3
 8009140:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009142:	2200      	movs	r2, #0
 8009144:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009146:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009148:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800914c:	f7f7 f8d6 	bl	80002fc <__aeabi_uldivmod>
 8009150:	4602      	mov	r2, r0
 8009152:	460b      	mov	r3, r1
 8009154:	4613      	mov	r3, r2
 8009156:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009158:	e058      	b.n	800920c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800915a:	4b38      	ldr	r3, [pc, #224]	@ (800923c <HAL_RCC_GetSysClockFreq+0x200>)
 800915c:	685b      	ldr	r3, [r3, #4]
 800915e:	099b      	lsrs	r3, r3, #6
 8009160:	2200      	movs	r2, #0
 8009162:	4618      	mov	r0, r3
 8009164:	4611      	mov	r1, r2
 8009166:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800916a:	623b      	str	r3, [r7, #32]
 800916c:	2300      	movs	r3, #0
 800916e:	627b      	str	r3, [r7, #36]	@ 0x24
 8009170:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009174:	4642      	mov	r2, r8
 8009176:	464b      	mov	r3, r9
 8009178:	f04f 0000 	mov.w	r0, #0
 800917c:	f04f 0100 	mov.w	r1, #0
 8009180:	0159      	lsls	r1, r3, #5
 8009182:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009186:	0150      	lsls	r0, r2, #5
 8009188:	4602      	mov	r2, r0
 800918a:	460b      	mov	r3, r1
 800918c:	4641      	mov	r1, r8
 800918e:	ebb2 0a01 	subs.w	sl, r2, r1
 8009192:	4649      	mov	r1, r9
 8009194:	eb63 0b01 	sbc.w	fp, r3, r1
 8009198:	f04f 0200 	mov.w	r2, #0
 800919c:	f04f 0300 	mov.w	r3, #0
 80091a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80091a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80091a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80091ac:	ebb2 040a 	subs.w	r4, r2, sl
 80091b0:	eb63 050b 	sbc.w	r5, r3, fp
 80091b4:	f04f 0200 	mov.w	r2, #0
 80091b8:	f04f 0300 	mov.w	r3, #0
 80091bc:	00eb      	lsls	r3, r5, #3
 80091be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80091c2:	00e2      	lsls	r2, r4, #3
 80091c4:	4614      	mov	r4, r2
 80091c6:	461d      	mov	r5, r3
 80091c8:	4643      	mov	r3, r8
 80091ca:	18e3      	adds	r3, r4, r3
 80091cc:	603b      	str	r3, [r7, #0]
 80091ce:	464b      	mov	r3, r9
 80091d0:	eb45 0303 	adc.w	r3, r5, r3
 80091d4:	607b      	str	r3, [r7, #4]
 80091d6:	f04f 0200 	mov.w	r2, #0
 80091da:	f04f 0300 	mov.w	r3, #0
 80091de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80091e2:	4629      	mov	r1, r5
 80091e4:	028b      	lsls	r3, r1, #10
 80091e6:	4621      	mov	r1, r4
 80091e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80091ec:	4621      	mov	r1, r4
 80091ee:	028a      	lsls	r2, r1, #10
 80091f0:	4610      	mov	r0, r2
 80091f2:	4619      	mov	r1, r3
 80091f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091f6:	2200      	movs	r2, #0
 80091f8:	61bb      	str	r3, [r7, #24]
 80091fa:	61fa      	str	r2, [r7, #28]
 80091fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009200:	f7f7 f87c 	bl	80002fc <__aeabi_uldivmod>
 8009204:	4602      	mov	r2, r0
 8009206:	460b      	mov	r3, r1
 8009208:	4613      	mov	r3, r2
 800920a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800920c:	4b0b      	ldr	r3, [pc, #44]	@ (800923c <HAL_RCC_GetSysClockFreq+0x200>)
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	0c1b      	lsrs	r3, r3, #16
 8009212:	f003 0303 	and.w	r3, r3, #3
 8009216:	3301      	adds	r3, #1
 8009218:	005b      	lsls	r3, r3, #1
 800921a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800921c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800921e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009220:	fbb2 f3f3 	udiv	r3, r2, r3
 8009224:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8009226:	e002      	b.n	800922e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009228:	4b05      	ldr	r3, [pc, #20]	@ (8009240 <HAL_RCC_GetSysClockFreq+0x204>)
 800922a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800922c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800922e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8009230:	4618      	mov	r0, r3
 8009232:	3750      	adds	r7, #80	@ 0x50
 8009234:	46bd      	mov	sp, r7
 8009236:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800923a:	bf00      	nop
 800923c:	40023800 	.word	0x40023800
 8009240:	00f42400 	.word	0x00f42400
 8009244:	007a1200 	.word	0x007a1200

08009248 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b086      	sub	sp, #24
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009250:	2300      	movs	r3, #0
 8009252:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8009254:	2300      	movs	r3, #0
 8009256:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	f003 0301 	and.w	r3, r3, #1
 8009260:	2b00      	cmp	r3, #0
 8009262:	d105      	bne.n	8009270 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	681b      	ldr	r3, [r3, #0]
 8009268:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800926c:	2b00      	cmp	r3, #0
 800926e:	d035      	beq.n	80092dc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009270:	4b62      	ldr	r3, [pc, #392]	@ (80093fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8009272:	2200      	movs	r2, #0
 8009274:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8009276:	f7fb fbdb 	bl	8004a30 <HAL_GetTick>
 800927a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800927c:	e008      	b.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800927e:	f7fb fbd7 	bl	8004a30 <HAL_GetTick>
 8009282:	4602      	mov	r2, r0
 8009284:	697b      	ldr	r3, [r7, #20]
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	2b02      	cmp	r3, #2
 800928a:	d901      	bls.n	8009290 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800928c:	2303      	movs	r3, #3
 800928e:	e0b0      	b.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009290:	4b5b      	ldr	r3, [pc, #364]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8009298:	2b00      	cmp	r3, #0
 800929a:	d1f0      	bne.n	800927e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	685b      	ldr	r3, [r3, #4]
 80092a0:	019a      	lsls	r2, r3, #6
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	689b      	ldr	r3, [r3, #8]
 80092a6:	071b      	lsls	r3, r3, #28
 80092a8:	4955      	ldr	r1, [pc, #340]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80092aa:	4313      	orrs	r3, r2
 80092ac:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80092b0:	4b52      	ldr	r3, [pc, #328]	@ (80093fc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80092b2:	2201      	movs	r2, #1
 80092b4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80092b6:	f7fb fbbb 	bl	8004a30 <HAL_GetTick>
 80092ba:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80092bc:	e008      	b.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80092be:	f7fb fbb7 	bl	8004a30 <HAL_GetTick>
 80092c2:	4602      	mov	r2, r0
 80092c4:	697b      	ldr	r3, [r7, #20]
 80092c6:	1ad3      	subs	r3, r2, r3
 80092c8:	2b02      	cmp	r3, #2
 80092ca:	d901      	bls.n	80092d0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80092cc:	2303      	movs	r3, #3
 80092ce:	e090      	b.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80092d0:	4b4b      	ldr	r3, [pc, #300]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d0f0      	beq.n	80092be <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 0302 	and.w	r3, r3, #2
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	f000 8083 	beq.w	80093f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80092ea:	2300      	movs	r3, #0
 80092ec:	60fb      	str	r3, [r7, #12]
 80092ee:	4b44      	ldr	r3, [pc, #272]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80092f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092f2:	4a43      	ldr	r2, [pc, #268]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80092f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80092f8:	6413      	str	r3, [r2, #64]	@ 0x40
 80092fa:	4b41      	ldr	r3, [pc, #260]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80092fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80092fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8009302:	60fb      	str	r3, [r7, #12]
 8009304:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8009306:	4b3f      	ldr	r3, [pc, #252]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a3e      	ldr	r2, [pc, #248]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800930c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009310:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009312:	f7fb fb8d 	bl	8004a30 <HAL_GetTick>
 8009316:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8009318:	e008      	b.n	800932c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800931a:	f7fb fb89 	bl	8004a30 <HAL_GetTick>
 800931e:	4602      	mov	r2, r0
 8009320:	697b      	ldr	r3, [r7, #20]
 8009322:	1ad3      	subs	r3, r2, r3
 8009324:	2b02      	cmp	r3, #2
 8009326:	d901      	bls.n	800932c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8009328:	2303      	movs	r3, #3
 800932a:	e062      	b.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800932c:	4b35      	ldr	r3, [pc, #212]	@ (8009404 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009334:	2b00      	cmp	r3, #0
 8009336:	d0f0      	beq.n	800931a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009338:	4b31      	ldr	r3, [pc, #196]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800933a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800933c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009340:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009342:	693b      	ldr	r3, [r7, #16]
 8009344:	2b00      	cmp	r3, #0
 8009346:	d02f      	beq.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8009350:	693a      	ldr	r2, [r7, #16]
 8009352:	429a      	cmp	r2, r3
 8009354:	d028      	beq.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009356:	4b2a      	ldr	r3, [pc, #168]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009358:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800935a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800935e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009360:	4b29      	ldr	r3, [pc, #164]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009362:	2201      	movs	r2, #1
 8009364:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009366:	4b28      	ldr	r3, [pc, #160]	@ (8009408 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8009368:	2200      	movs	r2, #0
 800936a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800936c:	4a24      	ldr	r2, [pc, #144]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800936e:	693b      	ldr	r3, [r7, #16]
 8009370:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009372:	4b23      	ldr	r3, [pc, #140]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8009374:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009376:	f003 0301 	and.w	r3, r3, #1
 800937a:	2b01      	cmp	r3, #1
 800937c:	d114      	bne.n	80093a8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800937e:	f7fb fb57 	bl	8004a30 <HAL_GetTick>
 8009382:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009384:	e00a      	b.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009386:	f7fb fb53 	bl	8004a30 <HAL_GetTick>
 800938a:	4602      	mov	r2, r0
 800938c:	697b      	ldr	r3, [r7, #20]
 800938e:	1ad3      	subs	r3, r2, r3
 8009390:	f241 3288 	movw	r2, #5000	@ 0x1388
 8009394:	4293      	cmp	r3, r2
 8009396:	d901      	bls.n	800939c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8009398:	2303      	movs	r3, #3
 800939a:	e02a      	b.n	80093f2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800939c:	4b18      	ldr	r3, [pc, #96]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800939e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80093a0:	f003 0302 	and.w	r3, r3, #2
 80093a4:	2b00      	cmp	r3, #0
 80093a6:	d0ee      	beq.n	8009386 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	68db      	ldr	r3, [r3, #12]
 80093ac:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80093b0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80093b4:	d10d      	bne.n	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80093b6:	4b12      	ldr	r3, [pc, #72]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80093b8:	689b      	ldr	r3, [r3, #8]
 80093ba:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	68db      	ldr	r3, [r3, #12]
 80093c2:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80093c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80093ca:	490d      	ldr	r1, [pc, #52]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80093cc:	4313      	orrs	r3, r2
 80093ce:	608b      	str	r3, [r1, #8]
 80093d0:	e005      	b.n	80093de <HAL_RCCEx_PeriphCLKConfig+0x196>
 80093d2:	4b0b      	ldr	r3, [pc, #44]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80093d4:	689b      	ldr	r3, [r3, #8]
 80093d6:	4a0a      	ldr	r2, [pc, #40]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80093d8:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80093dc:	6093      	str	r3, [r2, #8]
 80093de:	4b08      	ldr	r3, [pc, #32]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80093e0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	68db      	ldr	r3, [r3, #12]
 80093e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093ea:	4905      	ldr	r1, [pc, #20]	@ (8009400 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80093ec:	4313      	orrs	r3, r2
 80093ee:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80093f0:	2300      	movs	r3, #0
}
 80093f2:	4618      	mov	r0, r3
 80093f4:	3718      	adds	r7, #24
 80093f6:	46bd      	mov	sp, r7
 80093f8:	bd80      	pop	{r7, pc}
 80093fa:	bf00      	nop
 80093fc:	42470068 	.word	0x42470068
 8009400:	40023800 	.word	0x40023800
 8009404:	40007000 	.word	0x40007000
 8009408:	42470e40 	.word	0x42470e40

0800940c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800940c:	b480      	push	{r7}
 800940e:	b087      	sub	sp, #28
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8009414:	2300      	movs	r3, #0
 8009416:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8009418:	2300      	movs	r3, #0
 800941a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800941c:	2300      	movs	r3, #0
 800941e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8009420:	2300      	movs	r3, #0
 8009422:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2b01      	cmp	r3, #1
 8009428:	d13f      	bne.n	80094aa <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800942a:	4b24      	ldr	r3, [pc, #144]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800942c:	689b      	ldr	r3, [r3, #8]
 800942e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009432:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	2b00      	cmp	r3, #0
 8009438:	d006      	beq.n	8009448 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800943a:	68fb      	ldr	r3, [r7, #12]
 800943c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8009440:	d12f      	bne.n	80094a2 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8009442:	4b1f      	ldr	r3, [pc, #124]	@ (80094c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8009444:	617b      	str	r3, [r7, #20]
          break;
 8009446:	e02f      	b.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8009448:	4b1c      	ldr	r3, [pc, #112]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800944a:	685b      	ldr	r3, [r3, #4]
 800944c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8009450:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8009454:	d108      	bne.n	8009468 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009456:	4b19      	ldr	r3, [pc, #100]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8009458:	685b      	ldr	r3, [r3, #4]
 800945a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800945e:	4a19      	ldr	r2, [pc, #100]	@ (80094c4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8009460:	fbb2 f3f3 	udiv	r3, r2, r3
 8009464:	613b      	str	r3, [r7, #16]
 8009466:	e007      	b.n	8009478 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8009468:	4b14      	ldr	r3, [pc, #80]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800946a:	685b      	ldr	r3, [r3, #4]
 800946c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8009470:	4a15      	ldr	r2, [pc, #84]	@ (80094c8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 8009472:	fbb2 f3f3 	udiv	r3, r2, r3
 8009476:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8009478:	4b10      	ldr	r3, [pc, #64]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800947a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800947e:	099b      	lsrs	r3, r3, #6
 8009480:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	fb02 f303 	mul.w	r3, r2, r3
 800948a:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800948c:	4b0b      	ldr	r3, [pc, #44]	@ (80094bc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 800948e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8009492:	0f1b      	lsrs	r3, r3, #28
 8009494:	f003 0307 	and.w	r3, r3, #7
 8009498:	68ba      	ldr	r2, [r7, #8]
 800949a:	fbb2 f3f3 	udiv	r3, r2, r3
 800949e:	617b      	str	r3, [r7, #20]
          break;
 80094a0:	e002      	b.n	80094a8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 80094a2:	2300      	movs	r3, #0
 80094a4:	617b      	str	r3, [r7, #20]
          break;
 80094a6:	bf00      	nop
        }
      }
      break;
 80094a8:	e000      	b.n	80094ac <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 80094aa:	bf00      	nop
    }
  }
  return frequency;
 80094ac:	697b      	ldr	r3, [r7, #20]
}
 80094ae:	4618      	mov	r0, r3
 80094b0:	371c      	adds	r7, #28
 80094b2:	46bd      	mov	sp, r7
 80094b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b8:	4770      	bx	lr
 80094ba:	bf00      	nop
 80094bc:	40023800 	.word	0x40023800
 80094c0:	00bb8000 	.word	0x00bb8000
 80094c4:	007a1200 	.word	0x007a1200
 80094c8:	00f42400 	.word	0x00f42400

080094cc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80094cc:	b580      	push	{r7, lr}
 80094ce:	b082      	sub	sp, #8
 80094d0:	af00      	add	r7, sp, #0
 80094d2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d101      	bne.n	80094de <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80094da:	2301      	movs	r3, #1
 80094dc:	e07b      	b.n	80095d6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d108      	bne.n	80094f8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	685b      	ldr	r3, [r3, #4]
 80094ea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80094ee:	d009      	beq.n	8009504 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	61da      	str	r2, [r3, #28]
 80094f6:	e005      	b.n	8009504 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	2200      	movs	r2, #0
 80094fc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	2200      	movs	r2, #0
 8009502:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	2200      	movs	r2, #0
 8009508:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8009510:	b2db      	uxtb	r3, r3
 8009512:	2b00      	cmp	r3, #0
 8009514:	d106      	bne.n	8009524 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2200      	movs	r2, #0
 800951a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800951e:	6878      	ldr	r0, [r7, #4]
 8009520:	f7fb f922 	bl	8004768 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2202      	movs	r2, #2
 8009528:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800953a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	685b      	ldr	r3, [r3, #4]
 8009540:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	689b      	ldr	r3, [r3, #8]
 8009548:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800954c:	431a      	orrs	r2, r3
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	68db      	ldr	r3, [r3, #12]
 8009552:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8009556:	431a      	orrs	r2, r3
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	691b      	ldr	r3, [r3, #16]
 800955c:	f003 0302 	and.w	r3, r3, #2
 8009560:	431a      	orrs	r2, r3
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	695b      	ldr	r3, [r3, #20]
 8009566:	f003 0301 	and.w	r3, r3, #1
 800956a:	431a      	orrs	r2, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	699b      	ldr	r3, [r3, #24]
 8009570:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8009574:	431a      	orrs	r2, r3
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	69db      	ldr	r3, [r3, #28]
 800957a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800957e:	431a      	orrs	r2, r3
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6a1b      	ldr	r3, [r3, #32]
 8009584:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8009588:	ea42 0103 	orr.w	r1, r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009590:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	681b      	ldr	r3, [r3, #0]
 8009598:	430a      	orrs	r2, r1
 800959a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	699b      	ldr	r3, [r3, #24]
 80095a0:	0c1b      	lsrs	r3, r3, #16
 80095a2:	f003 0104 	and.w	r1, r3, #4
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095aa:	f003 0210 	and.w	r2, r3, #16
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	430a      	orrs	r2, r1
 80095b4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	69da      	ldr	r2, [r3, #28]
 80095bc:	687b      	ldr	r3, [r7, #4]
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80095c4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	2200      	movs	r2, #0
 80095ca:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	2201      	movs	r2, #1
 80095d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80095d4:	2300      	movs	r3, #0
}
 80095d6:	4618      	mov	r0, r3
 80095d8:	3708      	adds	r7, #8
 80095da:	46bd      	mov	sp, r7
 80095dc:	bd80      	pop	{r7, pc}

080095de <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80095de:	b084      	sub	sp, #16
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b084      	sub	sp, #16
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	f107 001c 	add.w	r0, r7, #28
 80095ec:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80095f0:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80095f4:	2b01      	cmp	r3, #1
 80095f6:	d123      	bne.n	8009640 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80095fc:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	68db      	ldr	r3, [r3, #12]
 8009608:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800960c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8009610:	687a      	ldr	r2, [r7, #4]
 8009612:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	68db      	ldr	r3, [r3, #12]
 8009618:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8009620:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009624:	2b01      	cmp	r3, #1
 8009626:	d105      	bne.n	8009634 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	68db      	ldr	r3, [r3, #12]
 800962c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8009634:	6878      	ldr	r0, [r7, #4]
 8009636:	f000 f9dc 	bl	80099f2 <USB_CoreReset>
 800963a:	4603      	mov	r3, r0
 800963c:	73fb      	strb	r3, [r7, #15]
 800963e:	e01b      	b.n	8009678 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	68db      	ldr	r3, [r3, #12]
 8009644:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 f9d0 	bl	80099f2 <USB_CoreReset>
 8009652:	4603      	mov	r3, r0
 8009654:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8009656:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 800965a:	2b00      	cmp	r3, #0
 800965c:	d106      	bne.n	800966c <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009662:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	639a      	str	r2, [r3, #56]	@ 0x38
 800966a:	e005      	b.n	8009678 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009670:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8009678:	7fbb      	ldrb	r3, [r7, #30]
 800967a:	2b01      	cmp	r3, #1
 800967c:	d10b      	bne.n	8009696 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	689b      	ldr	r3, [r3, #8]
 8009682:	f043 0206 	orr.w	r2, r3, #6
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	689b      	ldr	r3, [r3, #8]
 800968e:	f043 0220 	orr.w	r2, r3, #32
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8009696:	7bfb      	ldrb	r3, [r7, #15]
}
 8009698:	4618      	mov	r0, r3
 800969a:	3710      	adds	r7, #16
 800969c:	46bd      	mov	sp, r7
 800969e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80096a2:	b004      	add	sp, #16
 80096a4:	4770      	bx	lr

080096a6 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80096a6:	b480      	push	{r7}
 80096a8:	b083      	sub	sp, #12
 80096aa:	af00      	add	r7, sp, #0
 80096ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	689b      	ldr	r3, [r3, #8]
 80096b2:	f043 0201 	orr.w	r2, r3, #1
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80096ba:	2300      	movs	r3, #0
}
 80096bc:	4618      	mov	r0, r3
 80096be:	370c      	adds	r7, #12
 80096c0:	46bd      	mov	sp, r7
 80096c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096c6:	4770      	bx	lr

080096c8 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80096c8:	b480      	push	{r7}
 80096ca:	b083      	sub	sp, #12
 80096cc:	af00      	add	r7, sp, #0
 80096ce:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	689b      	ldr	r3, [r3, #8]
 80096d4:	f023 0201 	bic.w	r2, r3, #1
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	370c      	adds	r7, #12
 80096e2:	46bd      	mov	sp, r7
 80096e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096e8:	4770      	bx	lr

080096ea <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80096ea:	b580      	push	{r7, lr}
 80096ec:	b084      	sub	sp, #16
 80096ee:	af00      	add	r7, sp, #0
 80096f0:	6078      	str	r0, [r7, #4]
 80096f2:	460b      	mov	r3, r1
 80096f4:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80096f6:	2300      	movs	r3, #0
 80096f8:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	68db      	ldr	r3, [r3, #12]
 80096fe:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8009706:	78fb      	ldrb	r3, [r7, #3]
 8009708:	2b01      	cmp	r3, #1
 800970a:	d115      	bne.n	8009738 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8009718:	200a      	movs	r0, #10
 800971a:	f7fb f995 	bl	8004a48 <HAL_Delay>
      ms += 10U;
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	330a      	adds	r3, #10
 8009722:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009724:	6878      	ldr	r0, [r7, #4]
 8009726:	f000 f956 	bl	80099d6 <USB_GetMode>
 800972a:	4603      	mov	r3, r0
 800972c:	2b01      	cmp	r3, #1
 800972e:	d01e      	beq.n	800976e <USB_SetCurrentMode+0x84>
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	2bc7      	cmp	r3, #199	@ 0xc7
 8009734:	d9f0      	bls.n	8009718 <USB_SetCurrentMode+0x2e>
 8009736:	e01a      	b.n	800976e <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8009738:	78fb      	ldrb	r3, [r7, #3]
 800973a:	2b00      	cmp	r3, #0
 800973c:	d115      	bne.n	800976a <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	68db      	ldr	r3, [r3, #12]
 8009742:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800974a:	200a      	movs	r0, #10
 800974c:	f7fb f97c 	bl	8004a48 <HAL_Delay>
      ms += 10U;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	330a      	adds	r3, #10
 8009754:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8009756:	6878      	ldr	r0, [r7, #4]
 8009758:	f000 f93d 	bl	80099d6 <USB_GetMode>
 800975c:	4603      	mov	r3, r0
 800975e:	2b00      	cmp	r3, #0
 8009760:	d005      	beq.n	800976e <USB_SetCurrentMode+0x84>
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	2bc7      	cmp	r3, #199	@ 0xc7
 8009766:	d9f0      	bls.n	800974a <USB_SetCurrentMode+0x60>
 8009768:	e001      	b.n	800976e <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800976a:	2301      	movs	r3, #1
 800976c:	e005      	b.n	800977a <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	2bc8      	cmp	r3, #200	@ 0xc8
 8009772:	d101      	bne.n	8009778 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8009774:	2301      	movs	r3, #1
 8009776:	e000      	b.n	800977a <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8009778:	2300      	movs	r3, #0
}
 800977a:	4618      	mov	r0, r3
 800977c:	3710      	adds	r7, #16
 800977e:	46bd      	mov	sp, r7
 8009780:	bd80      	pop	{r7, pc}

08009782 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8009782:	b480      	push	{r7}
 8009784:	b085      	sub	sp, #20
 8009786:	af00      	add	r7, sp, #0
 8009788:	6078      	str	r0, [r7, #4]
 800978a:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800978c:	2300      	movs	r3, #0
 800978e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009790:	68fb      	ldr	r3, [r7, #12]
 8009792:	3301      	adds	r3, #1
 8009794:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009796:	68fb      	ldr	r3, [r7, #12]
 8009798:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800979c:	d901      	bls.n	80097a2 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800979e:	2303      	movs	r3, #3
 80097a0:	e01b      	b.n	80097da <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	691b      	ldr	r3, [r3, #16]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	daf2      	bge.n	8009790 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80097aa:	2300      	movs	r3, #0
 80097ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	019b      	lsls	r3, r3, #6
 80097b2:	f043 0220 	orr.w	r2, r3, #32
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	3301      	adds	r3, #1
 80097be:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80097c6:	d901      	bls.n	80097cc <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80097c8:	2303      	movs	r3, #3
 80097ca:	e006      	b.n	80097da <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	f003 0320 	and.w	r3, r3, #32
 80097d4:	2b20      	cmp	r3, #32
 80097d6:	d0f0      	beq.n	80097ba <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80097d8:	2300      	movs	r3, #0
}
 80097da:	4618      	mov	r0, r3
 80097dc:	3714      	adds	r7, #20
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr

080097e6 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80097e6:	b480      	push	{r7}
 80097e8:	b085      	sub	sp, #20
 80097ea:	af00      	add	r7, sp, #0
 80097ec:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80097ee:	2300      	movs	r3, #0
 80097f0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80097f2:	68fb      	ldr	r3, [r7, #12]
 80097f4:	3301      	adds	r3, #1
 80097f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80097fe:	d901      	bls.n	8009804 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8009800:	2303      	movs	r3, #3
 8009802:	e018      	b.n	8009836 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	691b      	ldr	r3, [r3, #16]
 8009808:	2b00      	cmp	r3, #0
 800980a:	daf2      	bge.n	80097f2 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800980c:	2300      	movs	r3, #0
 800980e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2210      	movs	r2, #16
 8009814:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	3301      	adds	r3, #1
 800981a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009822:	d901      	bls.n	8009828 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009824:	2303      	movs	r3, #3
 8009826:	e006      	b.n	8009836 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	691b      	ldr	r3, [r3, #16]
 800982c:	f003 0310 	and.w	r3, r3, #16
 8009830:	2b10      	cmp	r3, #16
 8009832:	d0f0      	beq.n	8009816 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009834:	2300      	movs	r3, #0
}
 8009836:	4618      	mov	r0, r3
 8009838:	3714      	adds	r7, #20
 800983a:	46bd      	mov	sp, r7
 800983c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009840:	4770      	bx	lr

08009842 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009842:	b480      	push	{r7}
 8009844:	b089      	sub	sp, #36	@ 0x24
 8009846:	af00      	add	r7, sp, #0
 8009848:	60f8      	str	r0, [r7, #12]
 800984a:	60b9      	str	r1, [r7, #8]
 800984c:	4611      	mov	r1, r2
 800984e:	461a      	mov	r2, r3
 8009850:	460b      	mov	r3, r1
 8009852:	71fb      	strb	r3, [r7, #7]
 8009854:	4613      	mov	r3, r2
 8009856:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009858:	68fb      	ldr	r3, [r7, #12]
 800985a:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800985c:	68bb      	ldr	r3, [r7, #8]
 800985e:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009860:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009864:	2b00      	cmp	r3, #0
 8009866:	d123      	bne.n	80098b0 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009868:	88bb      	ldrh	r3, [r7, #4]
 800986a:	3303      	adds	r3, #3
 800986c:	089b      	lsrs	r3, r3, #2
 800986e:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009870:	2300      	movs	r3, #0
 8009872:	61bb      	str	r3, [r7, #24]
 8009874:	e018      	b.n	80098a8 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009876:	79fb      	ldrb	r3, [r7, #7]
 8009878:	031a      	lsls	r2, r3, #12
 800987a:	697b      	ldr	r3, [r7, #20]
 800987c:	4413      	add	r3, r2
 800987e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009882:	461a      	mov	r2, r3
 8009884:	69fb      	ldr	r3, [r7, #28]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	6013      	str	r3, [r2, #0]
      pSrc++;
 800988a:	69fb      	ldr	r3, [r7, #28]
 800988c:	3301      	adds	r3, #1
 800988e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	3301      	adds	r3, #1
 8009894:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	3301      	adds	r3, #1
 800989a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800989c:	69fb      	ldr	r3, [r7, #28]
 800989e:	3301      	adds	r3, #1
 80098a0:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80098a2:	69bb      	ldr	r3, [r7, #24]
 80098a4:	3301      	adds	r3, #1
 80098a6:	61bb      	str	r3, [r7, #24]
 80098a8:	69ba      	ldr	r2, [r7, #24]
 80098aa:	693b      	ldr	r3, [r7, #16]
 80098ac:	429a      	cmp	r2, r3
 80098ae:	d3e2      	bcc.n	8009876 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80098b0:	2300      	movs	r3, #0
}
 80098b2:	4618      	mov	r0, r3
 80098b4:	3724      	adds	r7, #36	@ 0x24
 80098b6:	46bd      	mov	sp, r7
 80098b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098bc:	4770      	bx	lr

080098be <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80098be:	b480      	push	{r7}
 80098c0:	b08b      	sub	sp, #44	@ 0x2c
 80098c2:	af00      	add	r7, sp, #0
 80098c4:	60f8      	str	r0, [r7, #12]
 80098c6:	60b9      	str	r1, [r7, #8]
 80098c8:	4613      	mov	r3, r2
 80098ca:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80098d0:	68bb      	ldr	r3, [r7, #8]
 80098d2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80098d4:	88fb      	ldrh	r3, [r7, #6]
 80098d6:	089b      	lsrs	r3, r3, #2
 80098d8:	b29b      	uxth	r3, r3
 80098da:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80098dc:	88fb      	ldrh	r3, [r7, #6]
 80098de:	f003 0303 	and.w	r3, r3, #3
 80098e2:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80098e4:	2300      	movs	r3, #0
 80098e6:	623b      	str	r3, [r7, #32]
 80098e8:	e014      	b.n	8009914 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80098ea:	69bb      	ldr	r3, [r7, #24]
 80098ec:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80098f0:	681a      	ldr	r2, [r3, #0]
 80098f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f4:	601a      	str	r2, [r3, #0]
    pDest++;
 80098f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098f8:	3301      	adds	r3, #1
 80098fa:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80098fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80098fe:	3301      	adds	r3, #1
 8009900:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009902:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009904:	3301      	adds	r3, #1
 8009906:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009908:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800990a:	3301      	adds	r3, #1
 800990c:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 800990e:	6a3b      	ldr	r3, [r7, #32]
 8009910:	3301      	adds	r3, #1
 8009912:	623b      	str	r3, [r7, #32]
 8009914:	6a3a      	ldr	r2, [r7, #32]
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	429a      	cmp	r2, r3
 800991a:	d3e6      	bcc.n	80098ea <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800991c:	8bfb      	ldrh	r3, [r7, #30]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d01e      	beq.n	8009960 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009922:	2300      	movs	r3, #0
 8009924:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009926:	69bb      	ldr	r3, [r7, #24]
 8009928:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800992c:	461a      	mov	r2, r3
 800992e:	f107 0310 	add.w	r3, r7, #16
 8009932:	6812      	ldr	r2, [r2, #0]
 8009934:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009936:	693a      	ldr	r2, [r7, #16]
 8009938:	6a3b      	ldr	r3, [r7, #32]
 800993a:	b2db      	uxtb	r3, r3
 800993c:	00db      	lsls	r3, r3, #3
 800993e:	fa22 f303 	lsr.w	r3, r2, r3
 8009942:	b2da      	uxtb	r2, r3
 8009944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009946:	701a      	strb	r2, [r3, #0]
      i++;
 8009948:	6a3b      	ldr	r3, [r7, #32]
 800994a:	3301      	adds	r3, #1
 800994c:	623b      	str	r3, [r7, #32]
      pDest++;
 800994e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009950:	3301      	adds	r3, #1
 8009952:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009954:	8bfb      	ldrh	r3, [r7, #30]
 8009956:	3b01      	subs	r3, #1
 8009958:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800995a:	8bfb      	ldrh	r3, [r7, #30]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d1ea      	bne.n	8009936 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009960:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009962:	4618      	mov	r0, r3
 8009964:	372c      	adds	r7, #44	@ 0x2c
 8009966:	46bd      	mov	sp, r7
 8009968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800996c:	4770      	bx	lr

0800996e <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 800996e:	b480      	push	{r7}
 8009970:	b085      	sub	sp, #20
 8009972:	af00      	add	r7, sp, #0
 8009974:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009976:	687b      	ldr	r3, [r7, #4]
 8009978:	695b      	ldr	r3, [r3, #20]
 800997a:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	699b      	ldr	r3, [r3, #24]
 8009980:	68fa      	ldr	r2, [r7, #12]
 8009982:	4013      	ands	r3, r2
 8009984:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009986:	68fb      	ldr	r3, [r7, #12]
}
 8009988:	4618      	mov	r0, r3
 800998a:	3714      	adds	r7, #20
 800998c:	46bd      	mov	sp, r7
 800998e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009992:	4770      	bx	lr

08009994 <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8009994:	b480      	push	{r7}
 8009996:	b085      	sub	sp, #20
 8009998:	af00      	add	r7, sp, #0
 800999a:	6078      	str	r0, [r7, #4]
 800999c:	460b      	mov	r3, r1
 800999e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 80099a4:	78fb      	ldrb	r3, [r7, #3]
 80099a6:	015a      	lsls	r2, r3, #5
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	4413      	add	r3, r2
 80099ac:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099b0:	689b      	ldr	r3, [r3, #8]
 80099b2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80099b4:	78fb      	ldrb	r3, [r7, #3]
 80099b6:	015a      	lsls	r2, r3, #5
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	4413      	add	r3, r2
 80099bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80099c0:	68db      	ldr	r3, [r3, #12]
 80099c2:	68ba      	ldr	r2, [r7, #8]
 80099c4:	4013      	ands	r3, r2
 80099c6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80099c8:	68bb      	ldr	r3, [r7, #8]
}
 80099ca:	4618      	mov	r0, r3
 80099cc:	3714      	adds	r7, #20
 80099ce:	46bd      	mov	sp, r7
 80099d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d4:	4770      	bx	lr

080099d6 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80099d6:	b480      	push	{r7}
 80099d8:	b083      	sub	sp, #12
 80099da:	af00      	add	r7, sp, #0
 80099dc:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	695b      	ldr	r3, [r3, #20]
 80099e2:	f003 0301 	and.w	r3, r3, #1
}
 80099e6:	4618      	mov	r0, r3
 80099e8:	370c      	adds	r7, #12
 80099ea:	46bd      	mov	sp, r7
 80099ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f0:	4770      	bx	lr

080099f2 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80099f2:	b480      	push	{r7}
 80099f4:	b085      	sub	sp, #20
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80099fa:	2300      	movs	r3, #0
 80099fc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	3301      	adds	r3, #1
 8009a02:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a0a:	d901      	bls.n	8009a10 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8009a0c:	2303      	movs	r3, #3
 8009a0e:	e01b      	b.n	8009a48 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	691b      	ldr	r3, [r3, #16]
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	daf2      	bge.n	80099fe <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	691b      	ldr	r3, [r3, #16]
 8009a20:	f043 0201 	orr.w	r2, r3, #1
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	3301      	adds	r3, #1
 8009a2c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009a34:	d901      	bls.n	8009a3a <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8009a36:	2303      	movs	r3, #3
 8009a38:	e006      	b.n	8009a48 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8009a3a:	687b      	ldr	r3, [r7, #4]
 8009a3c:	691b      	ldr	r3, [r3, #16]
 8009a3e:	f003 0301 	and.w	r3, r3, #1
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d0f0      	beq.n	8009a28 <USB_CoreReset+0x36>

  return HAL_OK;
 8009a46:	2300      	movs	r3, #0
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	3714      	adds	r7, #20
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8009a54:	b084      	sub	sp, #16
 8009a56:	b580      	push	{r7, lr}
 8009a58:	b086      	sub	sp, #24
 8009a5a:	af00      	add	r7, sp, #0
 8009a5c:	6078      	str	r0, [r7, #4]
 8009a5e:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8009a62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8009a66:	2300      	movs	r3, #0
 8009a68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8009a6e:	68fb      	ldr	r3, [r7, #12]
 8009a70:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009a74:	461a      	mov	r2, r3
 8009a76:	2300      	movs	r3, #0
 8009a78:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a7e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a8a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009a96:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	68db      	ldr	r3, [r3, #12]
 8009aa2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d119      	bne.n	8009ade <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8009aaa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009aae:	2b01      	cmp	r3, #1
 8009ab0:	d10a      	bne.n	8009ac8 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	68fa      	ldr	r2, [r7, #12]
 8009abc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009ac0:	f043 0304 	orr.w	r3, r3, #4
 8009ac4:	6013      	str	r3, [r2, #0]
 8009ac6:	e014      	b.n	8009af2 <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	68fa      	ldr	r2, [r7, #12]
 8009ad2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009ad6:	f023 0304 	bic.w	r3, r3, #4
 8009ada:	6013      	str	r3, [r2, #0]
 8009adc:	e009      	b.n	8009af2 <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	68fa      	ldr	r2, [r7, #12]
 8009ae8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009aec:	f023 0304 	bic.w	r3, r3, #4
 8009af0:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8009af2:	2110      	movs	r1, #16
 8009af4:	6878      	ldr	r0, [r7, #4]
 8009af6:	f7ff fe44 	bl	8009782 <USB_FlushTxFifo>
 8009afa:	4603      	mov	r3, r0
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d001      	beq.n	8009b04 <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8009b00:	2301      	movs	r3, #1
 8009b02:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8009b04:	6878      	ldr	r0, [r7, #4]
 8009b06:	f7ff fe6e 	bl	80097e6 <USB_FlushRxFifo>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d001      	beq.n	8009b14 <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8009b10:	2301      	movs	r3, #1
 8009b12:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8009b14:	2300      	movs	r3, #0
 8009b16:	613b      	str	r3, [r7, #16]
 8009b18:	e015      	b.n	8009b46 <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8009b1a:	693b      	ldr	r3, [r7, #16]
 8009b1c:	015a      	lsls	r2, r3, #5
 8009b1e:	68fb      	ldr	r3, [r7, #12]
 8009b20:	4413      	add	r3, r2
 8009b22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b26:	461a      	mov	r2, r3
 8009b28:	f04f 33ff 	mov.w	r3, #4294967295
 8009b2c:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8009b2e:	693b      	ldr	r3, [r7, #16]
 8009b30:	015a      	lsls	r2, r3, #5
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	4413      	add	r3, r2
 8009b36:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009b3a:	461a      	mov	r2, r3
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8009b40:	693b      	ldr	r3, [r7, #16]
 8009b42:	3301      	adds	r3, #1
 8009b44:	613b      	str	r3, [r7, #16]
 8009b46:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8009b4a:	461a      	mov	r2, r3
 8009b4c:	693b      	ldr	r3, [r7, #16]
 8009b4e:	4293      	cmp	r3, r2
 8009b50:	d3e3      	bcc.n	8009b1a <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	2200      	movs	r2, #0
 8009b56:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b5e:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	4a18      	ldr	r2, [pc, #96]	@ (8009bc4 <USB_HostInit+0x170>)
 8009b64:	4293      	cmp	r3, r2
 8009b66:	d10b      	bne.n	8009b80 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b6e:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	4a15      	ldr	r2, [pc, #84]	@ (8009bc8 <USB_HostInit+0x174>)
 8009b74:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	4a14      	ldr	r2, [pc, #80]	@ (8009bcc <USB_HostInit+0x178>)
 8009b7a:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8009b7e:	e009      	b.n	8009b94 <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2280      	movs	r2, #128	@ 0x80
 8009b84:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	4a11      	ldr	r2, [pc, #68]	@ (8009bd0 <USB_HostInit+0x17c>)
 8009b8a:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	4a11      	ldr	r2, [pc, #68]	@ (8009bd4 <USB_HostInit+0x180>)
 8009b90:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8009b94:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009b98:	2b00      	cmp	r3, #0
 8009b9a:	d105      	bne.n	8009ba8 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	699b      	ldr	r3, [r3, #24]
 8009ba0:	f043 0210 	orr.w	r2, r3, #16
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	699a      	ldr	r2, [r3, #24]
 8009bac:	4b0a      	ldr	r3, [pc, #40]	@ (8009bd8 <USB_HostInit+0x184>)
 8009bae:	4313      	orrs	r3, r2
 8009bb0:	687a      	ldr	r2, [r7, #4]
 8009bb2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8009bb4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bb6:	4618      	mov	r0, r3
 8009bb8:	3718      	adds	r7, #24
 8009bba:	46bd      	mov	sp, r7
 8009bbc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8009bc0:	b004      	add	sp, #16
 8009bc2:	4770      	bx	lr
 8009bc4:	40040000 	.word	0x40040000
 8009bc8:	01000200 	.word	0x01000200
 8009bcc:	00e00300 	.word	0x00e00300
 8009bd0:	00600080 	.word	0x00600080
 8009bd4:	004000e0 	.word	0x004000e0
 8009bd8:	a3200008 	.word	0xa3200008

08009bdc <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8009bdc:	b480      	push	{r7}
 8009bde:	b085      	sub	sp, #20
 8009be0:	af00      	add	r7, sp, #0
 8009be2:	6078      	str	r0, [r7, #4]
 8009be4:	460b      	mov	r3, r1
 8009be6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	68fa      	ldr	r2, [r7, #12]
 8009bf6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8009bfa:	f023 0303 	bic.w	r3, r3, #3
 8009bfe:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009c06:	681a      	ldr	r2, [r3, #0]
 8009c08:	78fb      	ldrb	r3, [r7, #3]
 8009c0a:	f003 0303 	and.w	r3, r3, #3
 8009c0e:	68f9      	ldr	r1, [r7, #12]
 8009c10:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009c14:	4313      	orrs	r3, r2
 8009c16:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8009c18:	78fb      	ldrb	r3, [r7, #3]
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d107      	bne.n	8009c2e <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009c24:	461a      	mov	r2, r3
 8009c26:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8009c2a:	6053      	str	r3, [r2, #4]
 8009c2c:	e00c      	b.n	8009c48 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8009c2e:	78fb      	ldrb	r3, [r7, #3]
 8009c30:	2b02      	cmp	r3, #2
 8009c32:	d107      	bne.n	8009c44 <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009c3a:	461a      	mov	r2, r3
 8009c3c:	f241 7370 	movw	r3, #6000	@ 0x1770
 8009c40:	6053      	str	r3, [r2, #4]
 8009c42:	e001      	b.n	8009c48 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 8009c44:	2301      	movs	r3, #1
 8009c46:	e000      	b.n	8009c4a <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8009c48:	2300      	movs	r3, #0
}
 8009c4a:	4618      	mov	r0, r3
 8009c4c:	3714      	adds	r7, #20
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr

08009c56 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 8009c56:	b580      	push	{r7, lr}
 8009c58:	b084      	sub	sp, #16
 8009c5a:	af00      	add	r7, sp, #0
 8009c5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 8009c62:	2300      	movs	r3, #0
 8009c64:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009c70:	68bb      	ldr	r3, [r7, #8]
 8009c72:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009c76:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	68fa      	ldr	r2, [r7, #12]
 8009c7c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009c80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009c84:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 8009c86:	2064      	movs	r0, #100	@ 0x64
 8009c88:	f7fa fede 	bl	8004a48 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	68fa      	ldr	r2, [r7, #12]
 8009c90:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009c94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009c98:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8009c9a:	200a      	movs	r0, #10
 8009c9c:	f7fa fed4 	bl	8004a48 <HAL_Delay>

  return HAL_OK;
 8009ca0:	2300      	movs	r3, #0
}
 8009ca2:	4618      	mov	r0, r3
 8009ca4:	3710      	adds	r7, #16
 8009ca6:	46bd      	mov	sp, r7
 8009ca8:	bd80      	pop	{r7, pc}

08009caa <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8009caa:	b480      	push	{r7}
 8009cac:	b085      	sub	sp, #20
 8009cae:	af00      	add	r7, sp, #0
 8009cb0:	6078      	str	r0, [r7, #4]
 8009cb2:	460b      	mov	r3, r1
 8009cb4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009cba:	2300      	movs	r3, #0
 8009cbc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8009cc8:	68bb      	ldr	r3, [r7, #8]
 8009cca:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8009cce:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d109      	bne.n	8009cee <USB_DriveVbus+0x44>
 8009cda:	78fb      	ldrb	r3, [r7, #3]
 8009cdc:	2b01      	cmp	r3, #1
 8009cde:	d106      	bne.n	8009cee <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8009ce0:	68bb      	ldr	r3, [r7, #8]
 8009ce2:	68fa      	ldr	r2, [r7, #12]
 8009ce4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009ce8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009cec:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8009cf4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009cf8:	d109      	bne.n	8009d0e <USB_DriveVbus+0x64>
 8009cfa:	78fb      	ldrb	r3, [r7, #3]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d106      	bne.n	8009d0e <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8009d00:	68bb      	ldr	r3, [r7, #8]
 8009d02:	68fa      	ldr	r2, [r7, #12]
 8009d04:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8009d08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009d0c:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8009d0e:	2300      	movs	r3, #0
}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3714      	adds	r7, #20
 8009d14:	46bd      	mov	sp, r7
 8009d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d1a:	4770      	bx	lr

08009d1c <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8009d1c:	b480      	push	{r7}
 8009d1e:	b085      	sub	sp, #20
 8009d20:	af00      	add	r7, sp, #0
 8009d22:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8009d28:	2300      	movs	r3, #0
 8009d2a:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	0c5b      	lsrs	r3, r3, #17
 8009d3a:	f003 0303 	and.w	r3, r3, #3
}
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3714      	adds	r7, #20
 8009d42:	46bd      	mov	sp, r7
 8009d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d48:	4770      	bx	lr

08009d4a <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8009d4a:	b480      	push	{r7}
 8009d4c:	b085      	sub	sp, #20
 8009d4e:	af00      	add	r7, sp, #0
 8009d50:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d52:	687b      	ldr	r3, [r7, #4]
 8009d54:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009d5c:	689b      	ldr	r3, [r3, #8]
 8009d5e:	b29b      	uxth	r3, r3
}
 8009d60:	4618      	mov	r0, r3
 8009d62:	3714      	adds	r7, #20
 8009d64:	46bd      	mov	sp, r7
 8009d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d6a:	4770      	bx	lr

08009d6c <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8009d6c:	b580      	push	{r7, lr}
 8009d6e:	b088      	sub	sp, #32
 8009d70:	af00      	add	r7, sp, #0
 8009d72:	6078      	str	r0, [r7, #4]
 8009d74:	4608      	mov	r0, r1
 8009d76:	4611      	mov	r1, r2
 8009d78:	461a      	mov	r2, r3
 8009d7a:	4603      	mov	r3, r0
 8009d7c:	70fb      	strb	r3, [r7, #3]
 8009d7e:	460b      	mov	r3, r1
 8009d80:	70bb      	strb	r3, [r7, #2]
 8009d82:	4613      	mov	r3, r2
 8009d84:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8009d86:	2300      	movs	r3, #0
 8009d88:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8009d8e:	78fb      	ldrb	r3, [r7, #3]
 8009d90:	015a      	lsls	r2, r3, #5
 8009d92:	693b      	ldr	r3, [r7, #16]
 8009d94:	4413      	add	r3, r2
 8009d96:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009d9a:	461a      	mov	r2, r3
 8009d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8009da0:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8009da2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009da6:	2b03      	cmp	r3, #3
 8009da8:	d87c      	bhi.n	8009ea4 <USB_HC_Init+0x138>
 8009daa:	a201      	add	r2, pc, #4	@ (adr r2, 8009db0 <USB_HC_Init+0x44>)
 8009dac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009db0:	08009dc1 	.word	0x08009dc1
 8009db4:	08009e67 	.word	0x08009e67
 8009db8:	08009dc1 	.word	0x08009dc1
 8009dbc:	08009e29 	.word	0x08009e29
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009dc0:	78fb      	ldrb	r3, [r7, #3]
 8009dc2:	015a      	lsls	r2, r3, #5
 8009dc4:	693b      	ldr	r3, [r7, #16]
 8009dc6:	4413      	add	r3, r2
 8009dc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009dcc:	461a      	mov	r2, r3
 8009dce:	f240 439d 	movw	r3, #1181	@ 0x49d
 8009dd2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8009dd4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	da10      	bge.n	8009dfe <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009ddc:	78fb      	ldrb	r3, [r7, #3]
 8009dde:	015a      	lsls	r2, r3, #5
 8009de0:	693b      	ldr	r3, [r7, #16]
 8009de2:	4413      	add	r3, r2
 8009de4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009de8:	68db      	ldr	r3, [r3, #12]
 8009dea:	78fa      	ldrb	r2, [r7, #3]
 8009dec:	0151      	lsls	r1, r2, #5
 8009dee:	693a      	ldr	r2, [r7, #16]
 8009df0:	440a      	add	r2, r1
 8009df2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009df6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009dfa:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8009dfc:	e055      	b.n	8009eaa <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	4a6f      	ldr	r2, [pc, #444]	@ (8009fc0 <USB_HC_Init+0x254>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d151      	bne.n	8009eaa <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8009e06:	78fb      	ldrb	r3, [r7, #3]
 8009e08:	015a      	lsls	r2, r3, #5
 8009e0a:	693b      	ldr	r3, [r7, #16]
 8009e0c:	4413      	add	r3, r2
 8009e0e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e12:	68db      	ldr	r3, [r3, #12]
 8009e14:	78fa      	ldrb	r2, [r7, #3]
 8009e16:	0151      	lsls	r1, r2, #5
 8009e18:	693a      	ldr	r2, [r7, #16]
 8009e1a:	440a      	add	r2, r1
 8009e1c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009e20:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009e24:	60d3      	str	r3, [r2, #12]
      break;
 8009e26:	e040      	b.n	8009eaa <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009e28:	78fb      	ldrb	r3, [r7, #3]
 8009e2a:	015a      	lsls	r2, r3, #5
 8009e2c:	693b      	ldr	r3, [r7, #16]
 8009e2e:	4413      	add	r3, r2
 8009e30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e34:	461a      	mov	r2, r3
 8009e36:	f240 639d 	movw	r3, #1693	@ 0x69d
 8009e3a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009e3c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	da34      	bge.n	8009eae <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8009e44:	78fb      	ldrb	r3, [r7, #3]
 8009e46:	015a      	lsls	r2, r3, #5
 8009e48:	693b      	ldr	r3, [r7, #16]
 8009e4a:	4413      	add	r3, r2
 8009e4c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e50:	68db      	ldr	r3, [r3, #12]
 8009e52:	78fa      	ldrb	r2, [r7, #3]
 8009e54:	0151      	lsls	r1, r2, #5
 8009e56:	693a      	ldr	r2, [r7, #16]
 8009e58:	440a      	add	r2, r1
 8009e5a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009e5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e62:	60d3      	str	r3, [r2, #12]
      }

      break;
 8009e64:	e023      	b.n	8009eae <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8009e66:	78fb      	ldrb	r3, [r7, #3]
 8009e68:	015a      	lsls	r2, r3, #5
 8009e6a:	693b      	ldr	r3, [r7, #16]
 8009e6c:	4413      	add	r3, r2
 8009e6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e72:	461a      	mov	r2, r3
 8009e74:	f240 2325 	movw	r3, #549	@ 0x225
 8009e78:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8009e7a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	da17      	bge.n	8009eb2 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8009e82:	78fb      	ldrb	r3, [r7, #3]
 8009e84:	015a      	lsls	r2, r3, #5
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	4413      	add	r3, r2
 8009e8a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009e8e:	68db      	ldr	r3, [r3, #12]
 8009e90:	78fa      	ldrb	r2, [r7, #3]
 8009e92:	0151      	lsls	r1, r2, #5
 8009e94:	693a      	ldr	r2, [r7, #16]
 8009e96:	440a      	add	r2, r1
 8009e98:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009e9c:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8009ea0:	60d3      	str	r3, [r2, #12]
      }
      break;
 8009ea2:	e006      	b.n	8009eb2 <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 8009ea4:	2301      	movs	r3, #1
 8009ea6:	77fb      	strb	r3, [r7, #31]
      break;
 8009ea8:	e004      	b.n	8009eb4 <USB_HC_Init+0x148>
      break;
 8009eaa:	bf00      	nop
 8009eac:	e002      	b.n	8009eb4 <USB_HC_Init+0x148>
      break;
 8009eae:	bf00      	nop
 8009eb0:	e000      	b.n	8009eb4 <USB_HC_Init+0x148>
      break;
 8009eb2:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8009eb4:	78fb      	ldrb	r3, [r7, #3]
 8009eb6:	015a      	lsls	r2, r3, #5
 8009eb8:	693b      	ldr	r3, [r7, #16]
 8009eba:	4413      	add	r3, r2
 8009ebc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ec0:	461a      	mov	r2, r3
 8009ec2:	2300      	movs	r3, #0
 8009ec4:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8009ec6:	78fb      	ldrb	r3, [r7, #3]
 8009ec8:	015a      	lsls	r2, r3, #5
 8009eca:	693b      	ldr	r3, [r7, #16]
 8009ecc:	4413      	add	r3, r2
 8009ece:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009ed2:	68db      	ldr	r3, [r3, #12]
 8009ed4:	78fa      	ldrb	r2, [r7, #3]
 8009ed6:	0151      	lsls	r1, r2, #5
 8009ed8:	693a      	ldr	r2, [r7, #16]
 8009eda:	440a      	add	r2, r1
 8009edc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009ee0:	f043 0302 	orr.w	r3, r3, #2
 8009ee4:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8009ee6:	693b      	ldr	r3, [r7, #16]
 8009ee8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8009eec:	699a      	ldr	r2, [r3, #24]
 8009eee:	78fb      	ldrb	r3, [r7, #3]
 8009ef0:	f003 030f 	and.w	r3, r3, #15
 8009ef4:	2101      	movs	r1, #1
 8009ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8009efa:	6939      	ldr	r1, [r7, #16]
 8009efc:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8009f00:	4313      	orrs	r3, r2
 8009f02:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	699b      	ldr	r3, [r3, #24]
 8009f08:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8009f10:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	da03      	bge.n	8009f20 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8009f18:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8009f1c:	61bb      	str	r3, [r7, #24]
 8009f1e:	e001      	b.n	8009f24 <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8009f20:	2300      	movs	r3, #0
 8009f22:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8009f24:	6878      	ldr	r0, [r7, #4]
 8009f26:	f7ff fef9 	bl	8009d1c <USB_GetHostSpeed>
 8009f2a:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8009f2c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009f30:	2b02      	cmp	r3, #2
 8009f32:	d106      	bne.n	8009f42 <USB_HC_Init+0x1d6>
 8009f34:	68fb      	ldr	r3, [r7, #12]
 8009f36:	2b02      	cmp	r3, #2
 8009f38:	d003      	beq.n	8009f42 <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8009f3a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8009f3e:	617b      	str	r3, [r7, #20]
 8009f40:	e001      	b.n	8009f46 <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8009f42:	2300      	movs	r3, #0
 8009f44:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009f46:	787b      	ldrb	r3, [r7, #1]
 8009f48:	059b      	lsls	r3, r3, #22
 8009f4a:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009f4e:	78bb      	ldrb	r3, [r7, #2]
 8009f50:	02db      	lsls	r3, r3, #11
 8009f52:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009f56:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009f58:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009f5c:	049b      	lsls	r3, r3, #18
 8009f5e:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8009f62:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 8009f64:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8009f66:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8009f6a:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009f6c:	69bb      	ldr	r3, [r7, #24]
 8009f6e:	431a      	orrs	r2, r3
 8009f70:	697b      	ldr	r3, [r7, #20]
 8009f72:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009f74:	78fa      	ldrb	r2, [r7, #3]
 8009f76:	0151      	lsls	r1, r2, #5
 8009f78:	693a      	ldr	r2, [r7, #16]
 8009f7a:	440a      	add	r2, r1
 8009f7c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8009f80:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8009f84:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8009f86:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009f8a:	2b03      	cmp	r3, #3
 8009f8c:	d003      	beq.n	8009f96 <USB_HC_Init+0x22a>
 8009f8e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8009f92:	2b01      	cmp	r3, #1
 8009f94:	d10f      	bne.n	8009fb6 <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8009f96:	78fb      	ldrb	r3, [r7, #3]
 8009f98:	015a      	lsls	r2, r3, #5
 8009f9a:	693b      	ldr	r3, [r7, #16]
 8009f9c:	4413      	add	r3, r2
 8009f9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	78fa      	ldrb	r2, [r7, #3]
 8009fa6:	0151      	lsls	r1, r2, #5
 8009fa8:	693a      	ldr	r2, [r7, #16]
 8009faa:	440a      	add	r2, r1
 8009fac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8009fb0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009fb4:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8009fb6:	7ffb      	ldrb	r3, [r7, #31]
}
 8009fb8:	4618      	mov	r0, r3
 8009fba:	3720      	adds	r7, #32
 8009fbc:	46bd      	mov	sp, r7
 8009fbe:	bd80      	pop	{r7, pc}
 8009fc0:	40040000 	.word	0x40040000

08009fc4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8009fc4:	b580      	push	{r7, lr}
 8009fc6:	b08c      	sub	sp, #48	@ 0x30
 8009fc8:	af02      	add	r7, sp, #8
 8009fca:	60f8      	str	r0, [r7, #12]
 8009fcc:	60b9      	str	r1, [r7, #8]
 8009fce:	4613      	mov	r3, r2
 8009fd0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009fd2:	68fb      	ldr	r3, [r7, #12]
 8009fd4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	785b      	ldrb	r3, [r3, #1]
 8009fda:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8009fdc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8009fe0:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8009fe2:	68fb      	ldr	r3, [r7, #12]
 8009fe4:	4a5d      	ldr	r2, [pc, #372]	@ (800a15c <USB_HC_StartXfer+0x198>)
 8009fe6:	4293      	cmp	r3, r2
 8009fe8:	d12f      	bne.n	800a04a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8009fea:	79fb      	ldrb	r3, [r7, #7]
 8009fec:	2b01      	cmp	r3, #1
 8009fee:	d11c      	bne.n	800a02a <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8009ff0:	68bb      	ldr	r3, [r7, #8]
 8009ff2:	7c9b      	ldrb	r3, [r3, #18]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d003      	beq.n	800a000 <USB_HC_StartXfer+0x3c>
 8009ff8:	68bb      	ldr	r3, [r7, #8]
 8009ffa:	7c9b      	ldrb	r3, [r3, #18]
 8009ffc:	2b02      	cmp	r3, #2
 8009ffe:	d124      	bne.n	800a04a <USB_HC_StartXfer+0x86>
 800a000:	68bb      	ldr	r3, [r7, #8]
 800a002:	799b      	ldrb	r3, [r3, #6]
 800a004:	2b00      	cmp	r3, #0
 800a006:	d120      	bne.n	800a04a <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800a008:	69fb      	ldr	r3, [r7, #28]
 800a00a:	015a      	lsls	r2, r3, #5
 800a00c:	6a3b      	ldr	r3, [r7, #32]
 800a00e:	4413      	add	r3, r2
 800a010:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a014:	68db      	ldr	r3, [r3, #12]
 800a016:	69fa      	ldr	r2, [r7, #28]
 800a018:	0151      	lsls	r1, r2, #5
 800a01a:	6a3a      	ldr	r2, [r7, #32]
 800a01c:	440a      	add	r2, r1
 800a01e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a022:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a026:	60d3      	str	r3, [r2, #12]
 800a028:	e00f      	b.n	800a04a <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 800a02a:	68bb      	ldr	r3, [r7, #8]
 800a02c:	791b      	ldrb	r3, [r3, #4]
 800a02e:	2b00      	cmp	r3, #0
 800a030:	d10b      	bne.n	800a04a <USB_HC_StartXfer+0x86>
 800a032:	68bb      	ldr	r3, [r7, #8]
 800a034:	795b      	ldrb	r3, [r3, #5]
 800a036:	2b01      	cmp	r3, #1
 800a038:	d107      	bne.n	800a04a <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 800a03a:	68bb      	ldr	r3, [r7, #8]
 800a03c:	785b      	ldrb	r3, [r3, #1]
 800a03e:	4619      	mov	r1, r3
 800a040:	68f8      	ldr	r0, [r7, #12]
 800a042:	f000 fb6b 	bl	800a71c <USB_DoPing>
        return HAL_OK;
 800a046:	2300      	movs	r3, #0
 800a048:	e232      	b.n	800a4b0 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 800a04a:	68bb      	ldr	r3, [r7, #8]
 800a04c:	799b      	ldrb	r3, [r3, #6]
 800a04e:	2b01      	cmp	r3, #1
 800a050:	d158      	bne.n	800a104 <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 800a052:	2301      	movs	r3, #1
 800a054:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 800a056:	68bb      	ldr	r3, [r7, #8]
 800a058:	78db      	ldrb	r3, [r3, #3]
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d007      	beq.n	800a06e <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a05e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a060:	68ba      	ldr	r2, [r7, #8]
 800a062:	8a92      	ldrh	r2, [r2, #20]
 800a064:	fb03 f202 	mul.w	r2, r3, r2
 800a068:	68bb      	ldr	r3, [r7, #8]
 800a06a:	61da      	str	r2, [r3, #28]
 800a06c:	e07c      	b.n	800a168 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 800a06e:	68bb      	ldr	r3, [r7, #8]
 800a070:	7c9b      	ldrb	r3, [r3, #18]
 800a072:	2b01      	cmp	r3, #1
 800a074:	d130      	bne.n	800a0d8 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 800a076:	68bb      	ldr	r3, [r7, #8]
 800a078:	6a1b      	ldr	r3, [r3, #32]
 800a07a:	2bbc      	cmp	r3, #188	@ 0xbc
 800a07c:	d918      	bls.n	800a0b0 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 800a07e:	68bb      	ldr	r3, [r7, #8]
 800a080:	8a9b      	ldrh	r3, [r3, #20]
 800a082:	461a      	mov	r2, r3
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	69da      	ldr	r2, [r3, #28]
 800a08c:	68bb      	ldr	r3, [r7, #8]
 800a08e:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 800a090:	68bb      	ldr	r3, [r7, #8]
 800a092:	68db      	ldr	r3, [r3, #12]
 800a094:	2b01      	cmp	r3, #1
 800a096:	d003      	beq.n	800a0a0 <USB_HC_StartXfer+0xdc>
 800a098:	68bb      	ldr	r3, [r7, #8]
 800a09a:	68db      	ldr	r3, [r3, #12]
 800a09c:	2b02      	cmp	r3, #2
 800a09e:	d103      	bne.n	800a0a8 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 800a0a0:	68bb      	ldr	r3, [r7, #8]
 800a0a2:	2202      	movs	r2, #2
 800a0a4:	60da      	str	r2, [r3, #12]
 800a0a6:	e05f      	b.n	800a168 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 800a0a8:	68bb      	ldr	r3, [r7, #8]
 800a0aa:	2201      	movs	r2, #1
 800a0ac:	60da      	str	r2, [r3, #12]
 800a0ae:	e05b      	b.n	800a168 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a0b0:	68bb      	ldr	r3, [r7, #8]
 800a0b2:	6a1a      	ldr	r2, [r3, #32]
 800a0b4:	68bb      	ldr	r3, [r7, #8]
 800a0b6:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	68db      	ldr	r3, [r3, #12]
 800a0bc:	2b01      	cmp	r3, #1
 800a0be:	d007      	beq.n	800a0d0 <USB_HC_StartXfer+0x10c>
 800a0c0:	68bb      	ldr	r3, [r7, #8]
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	2b02      	cmp	r3, #2
 800a0c6:	d003      	beq.n	800a0d0 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 800a0c8:	68bb      	ldr	r3, [r7, #8]
 800a0ca:	2204      	movs	r2, #4
 800a0cc:	60da      	str	r2, [r3, #12]
 800a0ce:	e04b      	b.n	800a168 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 800a0d0:	68bb      	ldr	r3, [r7, #8]
 800a0d2:	2203      	movs	r2, #3
 800a0d4:	60da      	str	r2, [r3, #12]
 800a0d6:	e047      	b.n	800a168 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 800a0d8:	79fb      	ldrb	r3, [r7, #7]
 800a0da:	2b01      	cmp	r3, #1
 800a0dc:	d10d      	bne.n	800a0fa <USB_HC_StartXfer+0x136>
 800a0de:	68bb      	ldr	r3, [r7, #8]
 800a0e0:	6a1b      	ldr	r3, [r3, #32]
 800a0e2:	68ba      	ldr	r2, [r7, #8]
 800a0e4:	8a92      	ldrh	r2, [r2, #20]
 800a0e6:	4293      	cmp	r3, r2
 800a0e8:	d907      	bls.n	800a0fa <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a0ea:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a0ec:	68ba      	ldr	r2, [r7, #8]
 800a0ee:	8a92      	ldrh	r2, [r2, #20]
 800a0f0:	fb03 f202 	mul.w	r2, r3, r2
 800a0f4:	68bb      	ldr	r3, [r7, #8]
 800a0f6:	61da      	str	r2, [r3, #28]
 800a0f8:	e036      	b.n	800a168 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 800a0fa:	68bb      	ldr	r3, [r7, #8]
 800a0fc:	6a1a      	ldr	r2, [r3, #32]
 800a0fe:	68bb      	ldr	r3, [r7, #8]
 800a100:	61da      	str	r2, [r3, #28]
 800a102:	e031      	b.n	800a168 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800a104:	68bb      	ldr	r3, [r7, #8]
 800a106:	6a1b      	ldr	r3, [r3, #32]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d018      	beq.n	800a13e <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 800a10c:	68bb      	ldr	r3, [r7, #8]
 800a10e:	6a1b      	ldr	r3, [r3, #32]
 800a110:	68ba      	ldr	r2, [r7, #8]
 800a112:	8a92      	ldrh	r2, [r2, #20]
 800a114:	4413      	add	r3, r2
 800a116:	3b01      	subs	r3, #1
 800a118:	68ba      	ldr	r2, [r7, #8]
 800a11a:	8a92      	ldrh	r2, [r2, #20]
 800a11c:	fbb3 f3f2 	udiv	r3, r3, r2
 800a120:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800a122:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800a124:	8b7b      	ldrh	r3, [r7, #26]
 800a126:	429a      	cmp	r2, r3
 800a128:	d90b      	bls.n	800a142 <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 800a12a:	8b7b      	ldrh	r3, [r7, #26]
 800a12c:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a12e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a130:	68ba      	ldr	r2, [r7, #8]
 800a132:	8a92      	ldrh	r2, [r2, #20]
 800a134:	fb03 f202 	mul.w	r2, r3, r2
 800a138:	68bb      	ldr	r3, [r7, #8]
 800a13a:	61da      	str	r2, [r3, #28]
 800a13c:	e001      	b.n	800a142 <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 800a13e:	2301      	movs	r3, #1
 800a140:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 800a142:	68bb      	ldr	r3, [r7, #8]
 800a144:	78db      	ldrb	r3, [r3, #3]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00a      	beq.n	800a160 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 800a14a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a14c:	68ba      	ldr	r2, [r7, #8]
 800a14e:	8a92      	ldrh	r2, [r2, #20]
 800a150:	fb03 f202 	mul.w	r2, r3, r2
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	61da      	str	r2, [r3, #28]
 800a158:	e006      	b.n	800a168 <USB_HC_StartXfer+0x1a4>
 800a15a:	bf00      	nop
 800a15c:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 800a160:	68bb      	ldr	r3, [r7, #8]
 800a162:	6a1a      	ldr	r2, [r3, #32]
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a168:	68bb      	ldr	r3, [r7, #8]
 800a16a:	69db      	ldr	r3, [r3, #28]
 800a16c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a170:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800a172:	04d9      	lsls	r1, r3, #19
 800a174:	4ba3      	ldr	r3, [pc, #652]	@ (800a404 <USB_HC_StartXfer+0x440>)
 800a176:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a178:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	7d9b      	ldrb	r3, [r3, #22]
 800a17e:	075b      	lsls	r3, r3, #29
 800a180:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a184:	69f9      	ldr	r1, [r7, #28]
 800a186:	0148      	lsls	r0, r1, #5
 800a188:	6a39      	ldr	r1, [r7, #32]
 800a18a:	4401      	add	r1, r0
 800a18c:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a190:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800a192:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 800a194:	79fb      	ldrb	r3, [r7, #7]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d009      	beq.n	800a1ae <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800a19a:	68bb      	ldr	r3, [r7, #8]
 800a19c:	6999      	ldr	r1, [r3, #24]
 800a19e:	69fb      	ldr	r3, [r7, #28]
 800a1a0:	015a      	lsls	r2, r3, #5
 800a1a2:	6a3b      	ldr	r3, [r7, #32]
 800a1a4:	4413      	add	r3, r2
 800a1a6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1aa:	460a      	mov	r2, r1
 800a1ac:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800a1ae:	6a3b      	ldr	r3, [r7, #32]
 800a1b0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a1b4:	689b      	ldr	r3, [r3, #8]
 800a1b6:	f003 0301 	and.w	r3, r3, #1
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	bf0c      	ite	eq
 800a1be:	2301      	moveq	r3, #1
 800a1c0:	2300      	movne	r3, #0
 800a1c2:	b2db      	uxtb	r3, r3
 800a1c4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800a1c6:	69fb      	ldr	r3, [r7, #28]
 800a1c8:	015a      	lsls	r2, r3, #5
 800a1ca:	6a3b      	ldr	r3, [r7, #32]
 800a1cc:	4413      	add	r3, r2
 800a1ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	69fa      	ldr	r2, [r7, #28]
 800a1d6:	0151      	lsls	r1, r2, #5
 800a1d8:	6a3a      	ldr	r2, [r7, #32]
 800a1da:	440a      	add	r2, r1
 800a1dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a1e0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800a1e4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800a1e6:	69fb      	ldr	r3, [r7, #28]
 800a1e8:	015a      	lsls	r2, r3, #5
 800a1ea:	6a3b      	ldr	r3, [r7, #32]
 800a1ec:	4413      	add	r3, r2
 800a1ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a1f2:	681a      	ldr	r2, [r3, #0]
 800a1f4:	7e7b      	ldrb	r3, [r7, #25]
 800a1f6:	075b      	lsls	r3, r3, #29
 800a1f8:	69f9      	ldr	r1, [r7, #28]
 800a1fa:	0148      	lsls	r0, r1, #5
 800a1fc:	6a39      	ldr	r1, [r7, #32]
 800a1fe:	4401      	add	r1, r0
 800a200:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800a204:	4313      	orrs	r3, r2
 800a206:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	799b      	ldrb	r3, [r3, #6]
 800a20c:	2b01      	cmp	r3, #1
 800a20e:	f040 80c3 	bne.w	800a398 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	7c5b      	ldrb	r3, [r3, #17]
 800a216:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a218:	68ba      	ldr	r2, [r7, #8]
 800a21a:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a21c:	4313      	orrs	r3, r2
 800a21e:	69fa      	ldr	r2, [r7, #28]
 800a220:	0151      	lsls	r1, r2, #5
 800a222:	6a3a      	ldr	r2, [r7, #32]
 800a224:	440a      	add	r2, r1
 800a226:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 800a22a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800a22e:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 800a230:	69fb      	ldr	r3, [r7, #28]
 800a232:	015a      	lsls	r2, r3, #5
 800a234:	6a3b      	ldr	r3, [r7, #32]
 800a236:	4413      	add	r3, r2
 800a238:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a23c:	68db      	ldr	r3, [r3, #12]
 800a23e:	69fa      	ldr	r2, [r7, #28]
 800a240:	0151      	lsls	r1, r2, #5
 800a242:	6a3a      	ldr	r2, [r7, #32]
 800a244:	440a      	add	r2, r1
 800a246:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a24a:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a24e:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	79db      	ldrb	r3, [r3, #7]
 800a254:	2b01      	cmp	r3, #1
 800a256:	d123      	bne.n	800a2a0 <USB_HC_StartXfer+0x2dc>
 800a258:	68bb      	ldr	r3, [r7, #8]
 800a25a:	78db      	ldrb	r3, [r3, #3]
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d11f      	bne.n	800a2a0 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800a260:	69fb      	ldr	r3, [r7, #28]
 800a262:	015a      	lsls	r2, r3, #5
 800a264:	6a3b      	ldr	r3, [r7, #32]
 800a266:	4413      	add	r3, r2
 800a268:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a26c:	685b      	ldr	r3, [r3, #4]
 800a26e:	69fa      	ldr	r2, [r7, #28]
 800a270:	0151      	lsls	r1, r2, #5
 800a272:	6a3a      	ldr	r2, [r7, #32]
 800a274:	440a      	add	r2, r1
 800a276:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a27a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a27e:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800a280:	69fb      	ldr	r3, [r7, #28]
 800a282:	015a      	lsls	r2, r3, #5
 800a284:	6a3b      	ldr	r3, [r7, #32]
 800a286:	4413      	add	r3, r2
 800a288:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a28c:	68db      	ldr	r3, [r3, #12]
 800a28e:	69fa      	ldr	r2, [r7, #28]
 800a290:	0151      	lsls	r1, r2, #5
 800a292:	6a3a      	ldr	r2, [r7, #32]
 800a294:	440a      	add	r2, r1
 800a296:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a29a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a29e:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800a2a0:	68bb      	ldr	r3, [r7, #8]
 800a2a2:	7c9b      	ldrb	r3, [r3, #18]
 800a2a4:	2b01      	cmp	r3, #1
 800a2a6:	d003      	beq.n	800a2b0 <USB_HC_StartXfer+0x2ec>
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	7c9b      	ldrb	r3, [r3, #18]
 800a2ac:	2b03      	cmp	r3, #3
 800a2ae:	d117      	bne.n	800a2e0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800a2b0:	68bb      	ldr	r3, [r7, #8]
 800a2b2:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800a2b4:	2b01      	cmp	r3, #1
 800a2b6:	d113      	bne.n	800a2e0 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	78db      	ldrb	r3, [r3, #3]
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d10f      	bne.n	800a2e0 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800a2c0:	69fb      	ldr	r3, [r7, #28]
 800a2c2:	015a      	lsls	r2, r3, #5
 800a2c4:	6a3b      	ldr	r3, [r7, #32]
 800a2c6:	4413      	add	r3, r2
 800a2c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a2cc:	685b      	ldr	r3, [r3, #4]
 800a2ce:	69fa      	ldr	r2, [r7, #28]
 800a2d0:	0151      	lsls	r1, r2, #5
 800a2d2:	6a3a      	ldr	r2, [r7, #32]
 800a2d4:	440a      	add	r2, r1
 800a2d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a2da:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a2de:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 800a2e0:	68bb      	ldr	r3, [r7, #8]
 800a2e2:	7c9b      	ldrb	r3, [r3, #18]
 800a2e4:	2b01      	cmp	r3, #1
 800a2e6:	d162      	bne.n	800a3ae <USB_HC_StartXfer+0x3ea>
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	78db      	ldrb	r3, [r3, #3]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d15e      	bne.n	800a3ae <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 800a2f0:	68bb      	ldr	r3, [r7, #8]
 800a2f2:	68db      	ldr	r3, [r3, #12]
 800a2f4:	3b01      	subs	r3, #1
 800a2f6:	2b03      	cmp	r3, #3
 800a2f8:	d858      	bhi.n	800a3ac <USB_HC_StartXfer+0x3e8>
 800a2fa:	a201      	add	r2, pc, #4	@ (adr r2, 800a300 <USB_HC_StartXfer+0x33c>)
 800a2fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a300:	0800a311 	.word	0x0800a311
 800a304:	0800a333 	.word	0x0800a333
 800a308:	0800a355 	.word	0x0800a355
 800a30c:	0800a377 	.word	0x0800a377
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 800a310:	69fb      	ldr	r3, [r7, #28]
 800a312:	015a      	lsls	r2, r3, #5
 800a314:	6a3b      	ldr	r3, [r7, #32]
 800a316:	4413      	add	r3, r2
 800a318:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	69fa      	ldr	r2, [r7, #28]
 800a320:	0151      	lsls	r1, r2, #5
 800a322:	6a3a      	ldr	r2, [r7, #32]
 800a324:	440a      	add	r2, r1
 800a326:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a32a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a32e:	6053      	str	r3, [r2, #4]
          break;
 800a330:	e03d      	b.n	800a3ae <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800a332:	69fb      	ldr	r3, [r7, #28]
 800a334:	015a      	lsls	r2, r3, #5
 800a336:	6a3b      	ldr	r3, [r7, #32]
 800a338:	4413      	add	r3, r2
 800a33a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a33e:	685b      	ldr	r3, [r3, #4]
 800a340:	69fa      	ldr	r2, [r7, #28]
 800a342:	0151      	lsls	r1, r2, #5
 800a344:	6a3a      	ldr	r2, [r7, #32]
 800a346:	440a      	add	r2, r1
 800a348:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a34c:	f043 030e 	orr.w	r3, r3, #14
 800a350:	6053      	str	r3, [r2, #4]
          break;
 800a352:	e02c      	b.n	800a3ae <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 800a354:	69fb      	ldr	r3, [r7, #28]
 800a356:	015a      	lsls	r2, r3, #5
 800a358:	6a3b      	ldr	r3, [r7, #32]
 800a35a:	4413      	add	r3, r2
 800a35c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a360:	685b      	ldr	r3, [r3, #4]
 800a362:	69fa      	ldr	r2, [r7, #28]
 800a364:	0151      	lsls	r1, r2, #5
 800a366:	6a3a      	ldr	r2, [r7, #32]
 800a368:	440a      	add	r2, r1
 800a36a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a36e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a372:	6053      	str	r3, [r2, #4]
          break;
 800a374:	e01b      	b.n	800a3ae <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 800a376:	69fb      	ldr	r3, [r7, #28]
 800a378:	015a      	lsls	r2, r3, #5
 800a37a:	6a3b      	ldr	r3, [r7, #32]
 800a37c:	4413      	add	r3, r2
 800a37e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a382:	685b      	ldr	r3, [r3, #4]
 800a384:	69fa      	ldr	r2, [r7, #28]
 800a386:	0151      	lsls	r1, r2, #5
 800a388:	6a3a      	ldr	r2, [r7, #32]
 800a38a:	440a      	add	r2, r1
 800a38c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a390:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800a394:	6053      	str	r3, [r2, #4]
          break;
 800a396:	e00a      	b.n	800a3ae <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800a398:	69fb      	ldr	r3, [r7, #28]
 800a39a:	015a      	lsls	r2, r3, #5
 800a39c:	6a3b      	ldr	r3, [r7, #32]
 800a39e:	4413      	add	r3, r2
 800a3a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a3a4:	461a      	mov	r2, r3
 800a3a6:	2300      	movs	r3, #0
 800a3a8:	6053      	str	r3, [r2, #4]
 800a3aa:	e000      	b.n	800a3ae <USB_HC_StartXfer+0x3ea>
          break;
 800a3ac:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 800a3ae:	69fb      	ldr	r3, [r7, #28]
 800a3b0:	015a      	lsls	r2, r3, #5
 800a3b2:	6a3b      	ldr	r3, [r7, #32]
 800a3b4:	4413      	add	r3, r2
 800a3b6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a3be:	693b      	ldr	r3, [r7, #16]
 800a3c0:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a3c4:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	78db      	ldrb	r3, [r3, #3]
 800a3ca:	2b00      	cmp	r3, #0
 800a3cc:	d004      	beq.n	800a3d8 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 800a3ce:	693b      	ldr	r3, [r7, #16]
 800a3d0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800a3d4:	613b      	str	r3, [r7, #16]
 800a3d6:	e003      	b.n	800a3e0 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 800a3d8:	693b      	ldr	r3, [r7, #16]
 800a3da:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a3de:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a3e0:	693b      	ldr	r3, [r7, #16]
 800a3e2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a3e6:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 800a3e8:	69fb      	ldr	r3, [r7, #28]
 800a3ea:	015a      	lsls	r2, r3, #5
 800a3ec:	6a3b      	ldr	r3, [r7, #32]
 800a3ee:	4413      	add	r3, r2
 800a3f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a3f4:	461a      	mov	r2, r3
 800a3f6:	693b      	ldr	r3, [r7, #16]
 800a3f8:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 800a3fa:	79fb      	ldrb	r3, [r7, #7]
 800a3fc:	2b00      	cmp	r3, #0
 800a3fe:	d003      	beq.n	800a408 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 800a400:	2300      	movs	r3, #0
 800a402:	e055      	b.n	800a4b0 <USB_HC_StartXfer+0x4ec>
 800a404:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 800a408:	68bb      	ldr	r3, [r7, #8]
 800a40a:	78db      	ldrb	r3, [r3, #3]
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d14e      	bne.n	800a4ae <USB_HC_StartXfer+0x4ea>
 800a410:	68bb      	ldr	r3, [r7, #8]
 800a412:	6a1b      	ldr	r3, [r3, #32]
 800a414:	2b00      	cmp	r3, #0
 800a416:	d04a      	beq.n	800a4ae <USB_HC_StartXfer+0x4ea>
 800a418:	68bb      	ldr	r3, [r7, #8]
 800a41a:	79db      	ldrb	r3, [r3, #7]
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d146      	bne.n	800a4ae <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 800a420:	68bb      	ldr	r3, [r7, #8]
 800a422:	7c9b      	ldrb	r3, [r3, #18]
 800a424:	2b03      	cmp	r3, #3
 800a426:	d831      	bhi.n	800a48c <USB_HC_StartXfer+0x4c8>
 800a428:	a201      	add	r2, pc, #4	@ (adr r2, 800a430 <USB_HC_StartXfer+0x46c>)
 800a42a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a42e:	bf00      	nop
 800a430:	0800a441 	.word	0x0800a441
 800a434:	0800a465 	.word	0x0800a465
 800a438:	0800a441 	.word	0x0800a441
 800a43c:	0800a465 	.word	0x0800a465
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a440:	68bb      	ldr	r3, [r7, #8]
 800a442:	6a1b      	ldr	r3, [r3, #32]
 800a444:	3303      	adds	r3, #3
 800a446:	089b      	lsrs	r3, r3, #2
 800a448:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800a44a:	8afa      	ldrh	r2, [r7, #22]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a450:	b29b      	uxth	r3, r3
 800a452:	429a      	cmp	r2, r3
 800a454:	d91c      	bls.n	800a490 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 800a456:	68fb      	ldr	r3, [r7, #12]
 800a458:	699b      	ldr	r3, [r3, #24]
 800a45a:	f043 0220 	orr.w	r2, r3, #32
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	619a      	str	r2, [r3, #24]
        }
        break;
 800a462:	e015      	b.n	800a490 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800a464:	68bb      	ldr	r3, [r7, #8]
 800a466:	6a1b      	ldr	r3, [r3, #32]
 800a468:	3303      	adds	r3, #3
 800a46a:	089b      	lsrs	r3, r3, #2
 800a46c:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800a46e:	8afa      	ldrh	r2, [r7, #22]
 800a470:	6a3b      	ldr	r3, [r7, #32]
 800a472:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a476:	691b      	ldr	r3, [r3, #16]
 800a478:	b29b      	uxth	r3, r3
 800a47a:	429a      	cmp	r2, r3
 800a47c:	d90a      	bls.n	800a494 <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	699b      	ldr	r3, [r3, #24]
 800a482:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 800a486:	68fb      	ldr	r3, [r7, #12]
 800a488:	619a      	str	r2, [r3, #24]
        }
        break;
 800a48a:	e003      	b.n	800a494 <USB_HC_StartXfer+0x4d0>

      default:
        break;
 800a48c:	bf00      	nop
 800a48e:	e002      	b.n	800a496 <USB_HC_StartXfer+0x4d2>
        break;
 800a490:	bf00      	nop
 800a492:	e000      	b.n	800a496 <USB_HC_StartXfer+0x4d2>
        break;
 800a494:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 800a496:	68bb      	ldr	r3, [r7, #8]
 800a498:	6999      	ldr	r1, [r3, #24]
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	785a      	ldrb	r2, [r3, #1]
 800a49e:	68bb      	ldr	r3, [r7, #8]
 800a4a0:	6a1b      	ldr	r3, [r3, #32]
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	2000      	movs	r0, #0
 800a4a6:	9000      	str	r0, [sp, #0]
 800a4a8:	68f8      	ldr	r0, [r7, #12]
 800a4aa:	f7ff f9ca 	bl	8009842 <USB_WritePacket>
  }

  return HAL_OK;
 800a4ae:	2300      	movs	r3, #0
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3728      	adds	r7, #40	@ 0x28
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}

0800a4b8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800a4b8:	b480      	push	{r7}
 800a4ba:	b085      	sub	sp, #20
 800a4bc:	af00      	add	r7, sp, #0
 800a4be:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a4ca:	695b      	ldr	r3, [r3, #20]
 800a4cc:	b29b      	uxth	r3, r3
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3714      	adds	r7, #20
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr

0800a4da <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800a4da:	b480      	push	{r7}
 800a4dc:	b089      	sub	sp, #36	@ 0x24
 800a4de:	af00      	add	r7, sp, #0
 800a4e0:	6078      	str	r0, [r7, #4]
 800a4e2:	460b      	mov	r3, r1
 800a4e4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800a4ea:	78fb      	ldrb	r3, [r7, #3]
 800a4ec:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800a4ee:	2300      	movs	r3, #0
 800a4f0:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 800a4f2:	69bb      	ldr	r3, [r7, #24]
 800a4f4:	015a      	lsls	r2, r3, #5
 800a4f6:	69fb      	ldr	r3, [r7, #28]
 800a4f8:	4413      	add	r3, r2
 800a4fa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	0c9b      	lsrs	r3, r3, #18
 800a502:	f003 0303 	and.w	r3, r3, #3
 800a506:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 800a508:	69bb      	ldr	r3, [r7, #24]
 800a50a:	015a      	lsls	r2, r3, #5
 800a50c:	69fb      	ldr	r3, [r7, #28]
 800a50e:	4413      	add	r3, r2
 800a510:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	0fdb      	lsrs	r3, r3, #31
 800a518:	f003 0301 	and.w	r3, r3, #1
 800a51c:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 800a51e:	69bb      	ldr	r3, [r7, #24]
 800a520:	015a      	lsls	r2, r3, #5
 800a522:	69fb      	ldr	r3, [r7, #28]
 800a524:	4413      	add	r3, r2
 800a526:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a52a:	685b      	ldr	r3, [r3, #4]
 800a52c:	0fdb      	lsrs	r3, r3, #31
 800a52e:	f003 0301 	and.w	r3, r3, #1
 800a532:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 800a534:	687b      	ldr	r3, [r7, #4]
 800a536:	689b      	ldr	r3, [r3, #8]
 800a538:	f003 0320 	and.w	r3, r3, #32
 800a53c:	2b20      	cmp	r3, #32
 800a53e:	d10d      	bne.n	800a55c <USB_HC_Halt+0x82>
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d10a      	bne.n	800a55c <USB_HC_Halt+0x82>
 800a546:	693b      	ldr	r3, [r7, #16]
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d005      	beq.n	800a558 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 800a54c:	697b      	ldr	r3, [r7, #20]
 800a54e:	2b01      	cmp	r3, #1
 800a550:	d002      	beq.n	800a558 <USB_HC_Halt+0x7e>
 800a552:	697b      	ldr	r3, [r7, #20]
 800a554:	2b03      	cmp	r3, #3
 800a556:	d101      	bne.n	800a55c <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 800a558:	2300      	movs	r3, #0
 800a55a:	e0d8      	b.n	800a70e <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 800a55c:	697b      	ldr	r3, [r7, #20]
 800a55e:	2b00      	cmp	r3, #0
 800a560:	d002      	beq.n	800a568 <USB_HC_Halt+0x8e>
 800a562:	697b      	ldr	r3, [r7, #20]
 800a564:	2b02      	cmp	r3, #2
 800a566:	d173      	bne.n	800a650 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	015a      	lsls	r2, r3, #5
 800a56c:	69fb      	ldr	r3, [r7, #28]
 800a56e:	4413      	add	r3, r2
 800a570:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	69ba      	ldr	r2, [r7, #24]
 800a578:	0151      	lsls	r1, r2, #5
 800a57a:	69fa      	ldr	r2, [r7, #28]
 800a57c:	440a      	add	r2, r1
 800a57e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a582:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a586:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	689b      	ldr	r3, [r3, #8]
 800a58c:	f003 0320 	and.w	r3, r3, #32
 800a590:	2b00      	cmp	r3, #0
 800a592:	d14a      	bne.n	800a62a <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a598:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d133      	bne.n	800a608 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a5a0:	69bb      	ldr	r3, [r7, #24]
 800a5a2:	015a      	lsls	r2, r3, #5
 800a5a4:	69fb      	ldr	r3, [r7, #28]
 800a5a6:	4413      	add	r3, r2
 800a5a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	69ba      	ldr	r2, [r7, #24]
 800a5b0:	0151      	lsls	r1, r2, #5
 800a5b2:	69fa      	ldr	r2, [r7, #28]
 800a5b4:	440a      	add	r2, r1
 800a5b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a5ba:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a5be:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a5c0:	69bb      	ldr	r3, [r7, #24]
 800a5c2:	015a      	lsls	r2, r3, #5
 800a5c4:	69fb      	ldr	r3, [r7, #28]
 800a5c6:	4413      	add	r3, r2
 800a5c8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	69ba      	ldr	r2, [r7, #24]
 800a5d0:	0151      	lsls	r1, r2, #5
 800a5d2:	69fa      	ldr	r2, [r7, #28]
 800a5d4:	440a      	add	r2, r1
 800a5d6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a5da:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a5de:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	3301      	adds	r3, #1
 800a5e4:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 800a5e6:	68bb      	ldr	r3, [r7, #8]
 800a5e8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a5ec:	d82e      	bhi.n	800a64c <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a5ee:	69bb      	ldr	r3, [r7, #24]
 800a5f0:	015a      	lsls	r2, r3, #5
 800a5f2:	69fb      	ldr	r3, [r7, #28]
 800a5f4:	4413      	add	r3, r2
 800a5f6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a600:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a604:	d0ec      	beq.n	800a5e0 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a606:	e081      	b.n	800a70c <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a608:	69bb      	ldr	r3, [r7, #24]
 800a60a:	015a      	lsls	r2, r3, #5
 800a60c:	69fb      	ldr	r3, [r7, #28]
 800a60e:	4413      	add	r3, r2
 800a610:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a614:	681b      	ldr	r3, [r3, #0]
 800a616:	69ba      	ldr	r2, [r7, #24]
 800a618:	0151      	lsls	r1, r2, #5
 800a61a:	69fa      	ldr	r2, [r7, #28]
 800a61c:	440a      	add	r2, r1
 800a61e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a622:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a626:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a628:	e070      	b.n	800a70c <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a62a:	69bb      	ldr	r3, [r7, #24]
 800a62c:	015a      	lsls	r2, r3, #5
 800a62e:	69fb      	ldr	r3, [r7, #28]
 800a630:	4413      	add	r3, r2
 800a632:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	69ba      	ldr	r2, [r7, #24]
 800a63a:	0151      	lsls	r1, r2, #5
 800a63c:	69fa      	ldr	r2, [r7, #28]
 800a63e:	440a      	add	r2, r1
 800a640:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a644:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a648:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a64a:	e05f      	b.n	800a70c <USB_HC_Halt+0x232>
            break;
 800a64c:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 800a64e:	e05d      	b.n	800a70c <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 800a650:	69bb      	ldr	r3, [r7, #24]
 800a652:	015a      	lsls	r2, r3, #5
 800a654:	69fb      	ldr	r3, [r7, #28]
 800a656:	4413      	add	r3, r2
 800a658:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	69ba      	ldr	r2, [r7, #24]
 800a660:	0151      	lsls	r1, r2, #5
 800a662:	69fa      	ldr	r2, [r7, #28]
 800a664:	440a      	add	r2, r1
 800a666:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a66a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a66e:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 800a670:	69fb      	ldr	r3, [r7, #28]
 800a672:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a676:	691b      	ldr	r3, [r3, #16]
 800a678:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d133      	bne.n	800a6e8 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800a680:	69bb      	ldr	r3, [r7, #24]
 800a682:	015a      	lsls	r2, r3, #5
 800a684:	69fb      	ldr	r3, [r7, #28]
 800a686:	4413      	add	r3, r2
 800a688:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a68c:	681b      	ldr	r3, [r3, #0]
 800a68e:	69ba      	ldr	r2, [r7, #24]
 800a690:	0151      	lsls	r1, r2, #5
 800a692:	69fa      	ldr	r2, [r7, #28]
 800a694:	440a      	add	r2, r1
 800a696:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a69a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a69e:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a6a0:	69bb      	ldr	r3, [r7, #24]
 800a6a2:	015a      	lsls	r2, r3, #5
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	4413      	add	r3, r2
 800a6a8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	69ba      	ldr	r2, [r7, #24]
 800a6b0:	0151      	lsls	r1, r2, #5
 800a6b2:	69fa      	ldr	r2, [r7, #28]
 800a6b4:	440a      	add	r2, r1
 800a6b6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a6ba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a6be:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 800a6c0:	68bb      	ldr	r3, [r7, #8]
 800a6c2:	3301      	adds	r3, #1
 800a6c4:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 800a6c6:	68bb      	ldr	r3, [r7, #8]
 800a6c8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a6cc:	d81d      	bhi.n	800a70a <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	015a      	lsls	r2, r3, #5
 800a6d2:	69fb      	ldr	r3, [r7, #28]
 800a6d4:	4413      	add	r3, r2
 800a6d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a6e0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a6e4:	d0ec      	beq.n	800a6c0 <USB_HC_Halt+0x1e6>
 800a6e6:	e011      	b.n	800a70c <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800a6e8:	69bb      	ldr	r3, [r7, #24]
 800a6ea:	015a      	lsls	r2, r3, #5
 800a6ec:	69fb      	ldr	r3, [r7, #28]
 800a6ee:	4413      	add	r3, r2
 800a6f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	69ba      	ldr	r2, [r7, #24]
 800a6f8:	0151      	lsls	r1, r2, #5
 800a6fa:	69fa      	ldr	r2, [r7, #28]
 800a6fc:	440a      	add	r2, r1
 800a6fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a702:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a706:	6013      	str	r3, [r2, #0]
 800a708:	e000      	b.n	800a70c <USB_HC_Halt+0x232>
          break;
 800a70a:	bf00      	nop
    }
  }

  return HAL_OK;
 800a70c:	2300      	movs	r3, #0
}
 800a70e:	4618      	mov	r0, r3
 800a710:	3724      	adds	r7, #36	@ 0x24
 800a712:	46bd      	mov	sp, r7
 800a714:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a718:	4770      	bx	lr
	...

0800a71c <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 800a71c:	b480      	push	{r7}
 800a71e:	b087      	sub	sp, #28
 800a720:	af00      	add	r7, sp, #0
 800a722:	6078      	str	r0, [r7, #4]
 800a724:	460b      	mov	r3, r1
 800a726:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 800a72c:	78fb      	ldrb	r3, [r7, #3]
 800a72e:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 800a730:	2301      	movs	r3, #1
 800a732:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	04da      	lsls	r2, r3, #19
 800a738:	4b15      	ldr	r3, [pc, #84]	@ (800a790 <USB_DoPing+0x74>)
 800a73a:	4013      	ands	r3, r2
 800a73c:	693a      	ldr	r2, [r7, #16]
 800a73e:	0151      	lsls	r1, r2, #5
 800a740:	697a      	ldr	r2, [r7, #20]
 800a742:	440a      	add	r2, r1
 800a744:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800a748:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a74c:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 800a74e:	693b      	ldr	r3, [r7, #16]
 800a750:	015a      	lsls	r2, r3, #5
 800a752:	697b      	ldr	r3, [r7, #20]
 800a754:	4413      	add	r3, r2
 800a756:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800a75e:	68bb      	ldr	r3, [r7, #8]
 800a760:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800a764:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800a766:	68bb      	ldr	r3, [r7, #8]
 800a768:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a76c:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	015a      	lsls	r2, r3, #5
 800a772:	697b      	ldr	r3, [r7, #20]
 800a774:	4413      	add	r3, r2
 800a776:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a77a:	461a      	mov	r2, r3
 800a77c:	68bb      	ldr	r3, [r7, #8]
 800a77e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 800a780:	2300      	movs	r3, #0
}
 800a782:	4618      	mov	r0, r3
 800a784:	371c      	adds	r7, #28
 800a786:	46bd      	mov	sp, r7
 800a788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a78c:	4770      	bx	lr
 800a78e:	bf00      	nop
 800a790:	1ff80000 	.word	0x1ff80000

0800a794 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800a794:	b580      	push	{r7, lr}
 800a796:	b088      	sub	sp, #32
 800a798:	af00      	add	r7, sp, #0
 800a79a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 800a79c:	2300      	movs	r3, #0
 800a79e:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800a7a4:	2300      	movs	r3, #0
 800a7a6:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 800a7a8:	6878      	ldr	r0, [r7, #4]
 800a7aa:	f7fe ff8d 	bl	80096c8 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800a7ae:	2110      	movs	r1, #16
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f7fe ffe6 	bl	8009782 <USB_FlushTxFifo>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d001      	beq.n	800a7c0 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 800a7bc:	2301      	movs	r3, #1
 800a7be:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800a7c0:	6878      	ldr	r0, [r7, #4]
 800a7c2:	f7ff f810 	bl	80097e6 <USB_FlushRxFifo>
 800a7c6:	4603      	mov	r3, r0
 800a7c8:	2b00      	cmp	r3, #0
 800a7ca:	d001      	beq.n	800a7d0 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	61bb      	str	r3, [r7, #24]
 800a7d4:	e01f      	b.n	800a816 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 800a7d6:	69bb      	ldr	r3, [r7, #24]
 800a7d8:	015a      	lsls	r2, r3, #5
 800a7da:	697b      	ldr	r3, [r7, #20]
 800a7dc:	4413      	add	r3, r2
 800a7de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a7e2:	681b      	ldr	r3, [r3, #0]
 800a7e4:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 800a7e6:	693b      	ldr	r3, [r7, #16]
 800a7e8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a7ec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a7f4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a7f6:	693b      	ldr	r3, [r7, #16]
 800a7f8:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a7fc:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a7fe:	69bb      	ldr	r3, [r7, #24]
 800a800:	015a      	lsls	r2, r3, #5
 800a802:	697b      	ldr	r3, [r7, #20]
 800a804:	4413      	add	r3, r2
 800a806:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a80a:	461a      	mov	r2, r3
 800a80c:	693b      	ldr	r3, [r7, #16]
 800a80e:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800a810:	69bb      	ldr	r3, [r7, #24]
 800a812:	3301      	adds	r3, #1
 800a814:	61bb      	str	r3, [r7, #24]
 800a816:	69bb      	ldr	r3, [r7, #24]
 800a818:	2b0f      	cmp	r3, #15
 800a81a:	d9dc      	bls.n	800a7d6 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800a81c:	2300      	movs	r3, #0
 800a81e:	61bb      	str	r3, [r7, #24]
 800a820:	e034      	b.n	800a88c <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800a822:	69bb      	ldr	r3, [r7, #24]
 800a824:	015a      	lsls	r2, r3, #5
 800a826:	697b      	ldr	r3, [r7, #20]
 800a828:	4413      	add	r3, r2
 800a82a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800a832:	693b      	ldr	r3, [r7, #16]
 800a834:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800a838:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 800a83a:	693b      	ldr	r3, [r7, #16]
 800a83c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800a840:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800a842:	693b      	ldr	r3, [r7, #16]
 800a844:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800a848:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800a84a:	69bb      	ldr	r3, [r7, #24]
 800a84c:	015a      	lsls	r2, r3, #5
 800a84e:	697b      	ldr	r3, [r7, #20]
 800a850:	4413      	add	r3, r2
 800a852:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a856:	461a      	mov	r2, r3
 800a858:	693b      	ldr	r3, [r7, #16]
 800a85a:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	3301      	adds	r3, #1
 800a860:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800a868:	d80c      	bhi.n	800a884 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 800a86a:	69bb      	ldr	r3, [r7, #24]
 800a86c:	015a      	lsls	r2, r3, #5
 800a86e:	697b      	ldr	r3, [r7, #20]
 800a870:	4413      	add	r3, r2
 800a872:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800a87c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800a880:	d0ec      	beq.n	800a85c <USB_StopHost+0xc8>
 800a882:	e000      	b.n	800a886 <USB_StopHost+0xf2>
        break;
 800a884:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800a886:	69bb      	ldr	r3, [r7, #24]
 800a888:	3301      	adds	r3, #1
 800a88a:	61bb      	str	r3, [r7, #24]
 800a88c:	69bb      	ldr	r3, [r7, #24]
 800a88e:	2b0f      	cmp	r3, #15
 800a890:	d9c7      	bls.n	800a822 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800a892:	697b      	ldr	r3, [r7, #20]
 800a894:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800a898:	461a      	mov	r2, r3
 800a89a:	f04f 33ff 	mov.w	r3, #4294967295
 800a89e:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a8a6:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 800a8a8:	6878      	ldr	r0, [r7, #4]
 800a8aa:	f7fe fefc 	bl	80096a6 <USB_EnableGlobalInt>

  return ret;
 800a8ae:	7ffb      	ldrb	r3, [r7, #31]
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3720      	adds	r7, #32
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 800a8b8:	b590      	push	{r4, r7, lr}
 800a8ba:	b089      	sub	sp, #36	@ 0x24
 800a8bc:	af04      	add	r7, sp, #16
 800a8be:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 800a8c0:	2301      	movs	r3, #1
 800a8c2:	2202      	movs	r2, #2
 800a8c4:	2102      	movs	r1, #2
 800a8c6:	6878      	ldr	r0, [r7, #4]
 800a8c8:	f000 fc85 	bl	800b1d6 <USBH_FindInterface>
 800a8cc:	4603      	mov	r3, r0
 800a8ce:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a8d0:	7bfb      	ldrb	r3, [r7, #15]
 800a8d2:	2bff      	cmp	r3, #255	@ 0xff
 800a8d4:	d002      	beq.n	800a8dc <USBH_CDC_InterfaceInit+0x24>
 800a8d6:	7bfb      	ldrb	r3, [r7, #15]
 800a8d8:	2b01      	cmp	r3, #1
 800a8da:	d901      	bls.n	800a8e0 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a8dc:	2302      	movs	r3, #2
 800a8de:	e13d      	b.n	800ab5c <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800a8e0:	7bfb      	ldrb	r3, [r7, #15]
 800a8e2:	4619      	mov	r1, r3
 800a8e4:	6878      	ldr	r0, [r7, #4]
 800a8e6:	f000 fc5a 	bl	800b19e <USBH_SelectInterface>
 800a8ea:	4603      	mov	r3, r0
 800a8ec:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800a8ee:	7bbb      	ldrb	r3, [r7, #14]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d001      	beq.n	800a8f8 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800a8f4:	2302      	movs	r3, #2
 800a8f6:	e131      	b.n	800ab5c <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 800a8fe:	2050      	movs	r0, #80	@ 0x50
 800a900:	f002 fb64 	bl	800cfcc <malloc>
 800a904:	4603      	mov	r3, r0
 800a906:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800a90e:	69db      	ldr	r3, [r3, #28]
 800a910:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800a912:	68bb      	ldr	r3, [r7, #8]
 800a914:	2b00      	cmp	r3, #0
 800a916:	d101      	bne.n	800a91c <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 800a918:	2302      	movs	r3, #2
 800a91a:	e11f      	b.n	800ab5c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800a91c:	2250      	movs	r2, #80	@ 0x50
 800a91e:	2100      	movs	r1, #0
 800a920:	68b8      	ldr	r0, [r7, #8]
 800a922:	f002 fc11 	bl	800d148 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a926:	7bfb      	ldrb	r3, [r7, #15]
 800a928:	687a      	ldr	r2, [r7, #4]
 800a92a:	211a      	movs	r1, #26
 800a92c:	fb01 f303 	mul.w	r3, r1, r3
 800a930:	4413      	add	r3, r2
 800a932:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a936:	781b      	ldrb	r3, [r3, #0]
 800a938:	b25b      	sxtb	r3, r3
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	da15      	bge.n	800a96a <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a93e:	7bfb      	ldrb	r3, [r7, #15]
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	211a      	movs	r1, #26
 800a944:	fb01 f303 	mul.w	r3, r1, r3
 800a948:	4413      	add	r3, r2
 800a94a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a94e:	781a      	ldrb	r2, [r3, #0]
 800a950:	68bb      	ldr	r3, [r7, #8]
 800a952:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800a954:	7bfb      	ldrb	r3, [r7, #15]
 800a956:	687a      	ldr	r2, [r7, #4]
 800a958:	211a      	movs	r1, #26
 800a95a:	fb01 f303 	mul.w	r3, r1, r3
 800a95e:	4413      	add	r3, r2
 800a960:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800a964:	881a      	ldrh	r2, [r3, #0]
 800a966:	68bb      	ldr	r3, [r7, #8]
 800a968:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 800a96a:	68bb      	ldr	r3, [r7, #8]
 800a96c:	785b      	ldrb	r3, [r3, #1]
 800a96e:	4619      	mov	r1, r3
 800a970:	6878      	ldr	r0, [r7, #4]
 800a972:	f001 ffbe 	bl	800c8f2 <USBH_AllocPipe>
 800a976:	4603      	mov	r3, r0
 800a978:	461a      	mov	r2, r3
 800a97a:	68bb      	ldr	r3, [r7, #8]
 800a97c:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 800a97e:	68bb      	ldr	r3, [r7, #8]
 800a980:	7819      	ldrb	r1, [r3, #0]
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	7858      	ldrb	r0, [r3, #1]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a992:	68ba      	ldr	r2, [r7, #8]
 800a994:	8952      	ldrh	r2, [r2, #10]
 800a996:	9202      	str	r2, [sp, #8]
 800a998:	2203      	movs	r2, #3
 800a99a:	9201      	str	r2, [sp, #4]
 800a99c:	9300      	str	r3, [sp, #0]
 800a99e:	4623      	mov	r3, r4
 800a9a0:	4602      	mov	r2, r0
 800a9a2:	6878      	ldr	r0, [r7, #4]
 800a9a4:	f001 ff76 	bl	800c894 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 800a9a8:	68bb      	ldr	r3, [r7, #8]
 800a9aa:	781b      	ldrb	r3, [r3, #0]
 800a9ac:	2200      	movs	r2, #0
 800a9ae:	4619      	mov	r1, r3
 800a9b0:	6878      	ldr	r0, [r7, #4]
 800a9b2:	f002 fa85 	bl	800cec0 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800a9b6:	2300      	movs	r3, #0
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	210a      	movs	r1, #10
 800a9bc:	6878      	ldr	r0, [r7, #4]
 800a9be:	f000 fc0a 	bl	800b1d6 <USBH_FindInterface>
 800a9c2:	4603      	mov	r3, r0
 800a9c4:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800a9c6:	7bfb      	ldrb	r3, [r7, #15]
 800a9c8:	2bff      	cmp	r3, #255	@ 0xff
 800a9ca:	d002      	beq.n	800a9d2 <USBH_CDC_InterfaceInit+0x11a>
 800a9cc:	7bfb      	ldrb	r3, [r7, #15]
 800a9ce:	2b01      	cmp	r3, #1
 800a9d0:	d901      	bls.n	800a9d6 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800a9d2:	2302      	movs	r3, #2
 800a9d4:	e0c2      	b.n	800ab5c <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800a9d6:	7bfb      	ldrb	r3, [r7, #15]
 800a9d8:	687a      	ldr	r2, [r7, #4]
 800a9da:	211a      	movs	r1, #26
 800a9dc:	fb01 f303 	mul.w	r3, r1, r3
 800a9e0:	4413      	add	r3, r2
 800a9e2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a9e6:	781b      	ldrb	r3, [r3, #0]
 800a9e8:	b25b      	sxtb	r3, r3
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	da16      	bge.n	800aa1c <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800a9ee:	7bfb      	ldrb	r3, [r7, #15]
 800a9f0:	687a      	ldr	r2, [r7, #4]
 800a9f2:	211a      	movs	r1, #26
 800a9f4:	fb01 f303 	mul.w	r3, r1, r3
 800a9f8:	4413      	add	r3, r2
 800a9fa:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800a9fe:	781a      	ldrb	r2, [r3, #0]
 800aa00:	68bb      	ldr	r3, [r7, #8]
 800aa02:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800aa04:	7bfb      	ldrb	r3, [r7, #15]
 800aa06:	687a      	ldr	r2, [r7, #4]
 800aa08:	211a      	movs	r1, #26
 800aa0a:	fb01 f303 	mul.w	r3, r1, r3
 800aa0e:	4413      	add	r3, r2
 800aa10:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800aa14:	881a      	ldrh	r2, [r3, #0]
 800aa16:	68bb      	ldr	r3, [r7, #8]
 800aa18:	835a      	strh	r2, [r3, #26]
 800aa1a:	e015      	b.n	800aa48 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800aa1c:	7bfb      	ldrb	r3, [r7, #15]
 800aa1e:	687a      	ldr	r2, [r7, #4]
 800aa20:	211a      	movs	r1, #26
 800aa22:	fb01 f303 	mul.w	r3, r1, r3
 800aa26:	4413      	add	r3, r2
 800aa28:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800aa2c:	781a      	ldrb	r2, [r3, #0]
 800aa2e:	68bb      	ldr	r3, [r7, #8]
 800aa30:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800aa32:	7bfb      	ldrb	r3, [r7, #15]
 800aa34:	687a      	ldr	r2, [r7, #4]
 800aa36:	211a      	movs	r1, #26
 800aa38:	fb01 f303 	mul.w	r3, r1, r3
 800aa3c:	4413      	add	r3, r2
 800aa3e:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800aa42:	881a      	ldrh	r2, [r3, #0]
 800aa44:	68bb      	ldr	r3, [r7, #8]
 800aa46:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 800aa48:	7bfb      	ldrb	r3, [r7, #15]
 800aa4a:	687a      	ldr	r2, [r7, #4]
 800aa4c:	211a      	movs	r1, #26
 800aa4e:	fb01 f303 	mul.w	r3, r1, r3
 800aa52:	4413      	add	r3, r2
 800aa54:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800aa58:	781b      	ldrb	r3, [r3, #0]
 800aa5a:	b25b      	sxtb	r3, r3
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	da16      	bge.n	800aa8e <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800aa60:	7bfb      	ldrb	r3, [r7, #15]
 800aa62:	687a      	ldr	r2, [r7, #4]
 800aa64:	211a      	movs	r1, #26
 800aa66:	fb01 f303 	mul.w	r3, r1, r3
 800aa6a:	4413      	add	r3, r2
 800aa6c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800aa70:	781a      	ldrb	r2, [r3, #0]
 800aa72:	68bb      	ldr	r3, [r7, #8]
 800aa74:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800aa76:	7bfb      	ldrb	r3, [r7, #15]
 800aa78:	687a      	ldr	r2, [r7, #4]
 800aa7a:	211a      	movs	r1, #26
 800aa7c:	fb01 f303 	mul.w	r3, r1, r3
 800aa80:	4413      	add	r3, r2
 800aa82:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800aa86:	881a      	ldrh	r2, [r3, #0]
 800aa88:	68bb      	ldr	r3, [r7, #8]
 800aa8a:	835a      	strh	r2, [r3, #26]
 800aa8c:	e015      	b.n	800aaba <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800aa8e:	7bfb      	ldrb	r3, [r7, #15]
 800aa90:	687a      	ldr	r2, [r7, #4]
 800aa92:	211a      	movs	r1, #26
 800aa94:	fb01 f303 	mul.w	r3, r1, r3
 800aa98:	4413      	add	r3, r2
 800aa9a:	f203 3356 	addw	r3, r3, #854	@ 0x356
 800aa9e:	781a      	ldrb	r2, [r3, #0]
 800aaa0:	68bb      	ldr	r3, [r7, #8]
 800aaa2:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800aaa4:	7bfb      	ldrb	r3, [r7, #15]
 800aaa6:	687a      	ldr	r2, [r7, #4]
 800aaa8:	211a      	movs	r1, #26
 800aaaa:	fb01 f303 	mul.w	r3, r1, r3
 800aaae:	4413      	add	r3, r2
 800aab0:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800aab4:	881a      	ldrh	r2, [r3, #0]
 800aab6:	68bb      	ldr	r3, [r7, #8]
 800aab8:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 800aaba:	68bb      	ldr	r3, [r7, #8]
 800aabc:	7b9b      	ldrb	r3, [r3, #14]
 800aabe:	4619      	mov	r1, r3
 800aac0:	6878      	ldr	r0, [r7, #4]
 800aac2:	f001 ff16 	bl	800c8f2 <USBH_AllocPipe>
 800aac6:	4603      	mov	r3, r0
 800aac8:	461a      	mov	r2, r3
 800aaca:	68bb      	ldr	r3, [r7, #8]
 800aacc:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 800aace:	68bb      	ldr	r3, [r7, #8]
 800aad0:	7bdb      	ldrb	r3, [r3, #15]
 800aad2:	4619      	mov	r1, r3
 800aad4:	6878      	ldr	r0, [r7, #4]
 800aad6:	f001 ff0c 	bl	800c8f2 <USBH_AllocPipe>
 800aada:	4603      	mov	r3, r0
 800aadc:	461a      	mov	r2, r3
 800aade:	68bb      	ldr	r3, [r7, #8]
 800aae0:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800aae2:	68bb      	ldr	r3, [r7, #8]
 800aae4:	7b59      	ldrb	r1, [r3, #13]
 800aae6:	68bb      	ldr	r3, [r7, #8]
 800aae8:	7b98      	ldrb	r0, [r3, #14]
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800aaf0:	687b      	ldr	r3, [r7, #4]
 800aaf2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800aaf6:	68ba      	ldr	r2, [r7, #8]
 800aaf8:	8b12      	ldrh	r2, [r2, #24]
 800aafa:	9202      	str	r2, [sp, #8]
 800aafc:	2202      	movs	r2, #2
 800aafe:	9201      	str	r2, [sp, #4]
 800ab00:	9300      	str	r3, [sp, #0]
 800ab02:	4623      	mov	r3, r4
 800ab04:	4602      	mov	r2, r0
 800ab06:	6878      	ldr	r0, [r7, #4]
 800ab08:	f001 fec4 	bl	800c894 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800ab0c:	68bb      	ldr	r3, [r7, #8]
 800ab0e:	7b19      	ldrb	r1, [r3, #12]
 800ab10:	68bb      	ldr	r3, [r7, #8]
 800ab12:	7bd8      	ldrb	r0, [r3, #15]
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800ab20:	68ba      	ldr	r2, [r7, #8]
 800ab22:	8b52      	ldrh	r2, [r2, #26]
 800ab24:	9202      	str	r2, [sp, #8]
 800ab26:	2202      	movs	r2, #2
 800ab28:	9201      	str	r2, [sp, #4]
 800ab2a:	9300      	str	r3, [sp, #0]
 800ab2c:	4623      	mov	r3, r4
 800ab2e:	4602      	mov	r2, r0
 800ab30:	6878      	ldr	r0, [r7, #4]
 800ab32:	f001 feaf 	bl	800c894 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800ab36:	68bb      	ldr	r3, [r7, #8]
 800ab38:	2200      	movs	r2, #0
 800ab3a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800ab3e:	68bb      	ldr	r3, [r7, #8]
 800ab40:	7b5b      	ldrb	r3, [r3, #13]
 800ab42:	2200      	movs	r2, #0
 800ab44:	4619      	mov	r1, r3
 800ab46:	6878      	ldr	r0, [r7, #4]
 800ab48:	f002 f9ba 	bl	800cec0 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800ab4c:	68bb      	ldr	r3, [r7, #8]
 800ab4e:	7b1b      	ldrb	r3, [r3, #12]
 800ab50:	2200      	movs	r2, #0
 800ab52:	4619      	mov	r1, r3
 800ab54:	6878      	ldr	r0, [r7, #4]
 800ab56:	f002 f9b3 	bl	800cec0 <USBH_LL_SetToggle>

  return USBH_OK;
 800ab5a:	2300      	movs	r3, #0
}
 800ab5c:	4618      	mov	r0, r3
 800ab5e:	3714      	adds	r7, #20
 800ab60:	46bd      	mov	sp, r7
 800ab62:	bd90      	pop	{r4, r7, pc}

0800ab64 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800ab64:	b580      	push	{r7, lr}
 800ab66:	b084      	sub	sp, #16
 800ab68:	af00      	add	r7, sp, #0
 800ab6a:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ab72:	69db      	ldr	r3, [r3, #28]
 800ab74:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	781b      	ldrb	r3, [r3, #0]
 800ab7a:	2b00      	cmp	r3, #0
 800ab7c:	d00e      	beq.n	800ab9c <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	781b      	ldrb	r3, [r3, #0]
 800ab82:	4619      	mov	r1, r3
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f001 fea4 	bl	800c8d2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	4619      	mov	r1, r3
 800ab90:	6878      	ldr	r0, [r7, #4]
 800ab92:	f001 fecf 	bl	800c934 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800ab96:	68fb      	ldr	r3, [r7, #12]
 800ab98:	2200      	movs	r2, #0
 800ab9a:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 800ab9c:	68fb      	ldr	r3, [r7, #12]
 800ab9e:	7b1b      	ldrb	r3, [r3, #12]
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d00e      	beq.n	800abc2 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	7b1b      	ldrb	r3, [r3, #12]
 800aba8:	4619      	mov	r1, r3
 800abaa:	6878      	ldr	r0, [r7, #4]
 800abac:	f001 fe91 	bl	800c8d2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	7b1b      	ldrb	r3, [r3, #12]
 800abb4:	4619      	mov	r1, r3
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f001 febc 	bl	800c934 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2200      	movs	r2, #0
 800abc0:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	7b5b      	ldrb	r3, [r3, #13]
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d00e      	beq.n	800abe8 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 800abca:	68fb      	ldr	r3, [r7, #12]
 800abcc:	7b5b      	ldrb	r3, [r3, #13]
 800abce:	4619      	mov	r1, r3
 800abd0:	6878      	ldr	r0, [r7, #4]
 800abd2:	f001 fe7e 	bl	800c8d2 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	7b5b      	ldrb	r3, [r3, #13]
 800abda:	4619      	mov	r1, r3
 800abdc:	6878      	ldr	r0, [r7, #4]
 800abde:	f001 fea9 	bl	800c934 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800abe2:	68fb      	ldr	r3, [r7, #12]
 800abe4:	2200      	movs	r2, #0
 800abe6:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800abee:	69db      	ldr	r3, [r3, #28]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d00b      	beq.n	800ac0c <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800abfa:	69db      	ldr	r3, [r3, #28]
 800abfc:	4618      	mov	r0, r3
 800abfe:	f002 f9ed 	bl	800cfdc <free>
    phost->pActiveClass->pData = 0U;
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac08:	2200      	movs	r2, #0
 800ac0a:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800ac0c:	2300      	movs	r3, #0
}
 800ac0e:	4618      	mov	r0, r3
 800ac10:	3710      	adds	r7, #16
 800ac12:	46bd      	mov	sp, r7
 800ac14:	bd80      	pop	{r7, pc}

0800ac16 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800ac16:	b580      	push	{r7, lr}
 800ac18:	b084      	sub	sp, #16
 800ac1a:	af00      	add	r7, sp, #0
 800ac1c:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac24:	69db      	ldr	r3, [r3, #28]
 800ac26:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 800ac28:	68fb      	ldr	r3, [r7, #12]
 800ac2a:	3340      	adds	r3, #64	@ 0x40
 800ac2c:	4619      	mov	r1, r3
 800ac2e:	6878      	ldr	r0, [r7, #4]
 800ac30:	f000 f8b1 	bl	800ad96 <GetLineCoding>
 800ac34:	4603      	mov	r3, r0
 800ac36:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 800ac38:	7afb      	ldrb	r3, [r7, #11]
 800ac3a:	2b00      	cmp	r3, #0
 800ac3c:	d105      	bne.n	800ac4a <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800ac44:	2102      	movs	r1, #2
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 800ac4a:	7afb      	ldrb	r3, [r7, #11]
}
 800ac4c:	4618      	mov	r0, r3
 800ac4e:	3710      	adds	r7, #16
 800ac50:	46bd      	mov	sp, r7
 800ac52:	bd80      	pop	{r7, pc}

0800ac54 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800ac54:	b580      	push	{r7, lr}
 800ac56:	b084      	sub	sp, #16
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800ac5c:	2301      	movs	r3, #1
 800ac5e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 800ac60:	2300      	movs	r3, #0
 800ac62:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ac64:	687b      	ldr	r3, [r7, #4]
 800ac66:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ac6a:	69db      	ldr	r3, [r3, #28]
 800ac6c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800ac6e:	68bb      	ldr	r3, [r7, #8]
 800ac70:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800ac74:	2b04      	cmp	r3, #4
 800ac76:	d877      	bhi.n	800ad68 <USBH_CDC_Process+0x114>
 800ac78:	a201      	add	r2, pc, #4	@ (adr r2, 800ac80 <USBH_CDC_Process+0x2c>)
 800ac7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac7e:	bf00      	nop
 800ac80:	0800ac95 	.word	0x0800ac95
 800ac84:	0800ac9b 	.word	0x0800ac9b
 800ac88:	0800accb 	.word	0x0800accb
 800ac8c:	0800ad3f 	.word	0x0800ad3f
 800ac90:	0800ad4d 	.word	0x0800ad4d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800ac94:	2300      	movs	r3, #0
 800ac96:	73fb      	strb	r3, [r7, #15]
      break;
 800ac98:	e06d      	b.n	800ad76 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 800ac9a:	68bb      	ldr	r3, [r7, #8]
 800ac9c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ac9e:	4619      	mov	r1, r3
 800aca0:	6878      	ldr	r0, [r7, #4]
 800aca2:	f000 f897 	bl	800add4 <SetLineCoding>
 800aca6:	4603      	mov	r3, r0
 800aca8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800acaa:	7bbb      	ldrb	r3, [r7, #14]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d104      	bne.n	800acba <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 800acb0:	68bb      	ldr	r3, [r7, #8]
 800acb2:	2202      	movs	r2, #2
 800acb4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800acb8:	e058      	b.n	800ad6c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 800acba:	7bbb      	ldrb	r3, [r7, #14]
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d055      	beq.n	800ad6c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 800acc0:	68bb      	ldr	r3, [r7, #8]
 800acc2:	2204      	movs	r2, #4
 800acc4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800acc8:	e050      	b.n	800ad6c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 800acca:	68bb      	ldr	r3, [r7, #8]
 800accc:	3340      	adds	r3, #64	@ 0x40
 800acce:	4619      	mov	r1, r3
 800acd0:	6878      	ldr	r0, [r7, #4]
 800acd2:	f000 f860 	bl	800ad96 <GetLineCoding>
 800acd6:	4603      	mov	r3, r0
 800acd8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800acda:	7bbb      	ldrb	r3, [r7, #14]
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d126      	bne.n	800ad2e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	2200      	movs	r2, #0
 800ace4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ace8:	68bb      	ldr	r3, [r7, #8]
 800acea:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 800acee:	68bb      	ldr	r3, [r7, #8]
 800acf0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800acf2:	791b      	ldrb	r3, [r3, #4]
 800acf4:	429a      	cmp	r2, r3
 800acf6:	d13b      	bne.n	800ad70 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800acf8:	68bb      	ldr	r3, [r7, #8]
 800acfa:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 800acfe:	68bb      	ldr	r3, [r7, #8]
 800ad00:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad02:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800ad04:	429a      	cmp	r2, r3
 800ad06:	d133      	bne.n	800ad70 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ad08:	68bb      	ldr	r3, [r7, #8]
 800ad0a:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 800ad0e:	68bb      	ldr	r3, [r7, #8]
 800ad10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad12:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800ad14:	429a      	cmp	r2, r3
 800ad16:	d12b      	bne.n	800ad70 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 800ad18:	68bb      	ldr	r3, [r7, #8]
 800ad1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800ad1c:	68bb      	ldr	r3, [r7, #8]
 800ad1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ad20:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800ad22:	429a      	cmp	r2, r3
 800ad24:	d124      	bne.n	800ad70 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800ad26:	6878      	ldr	r0, [r7, #4]
 800ad28:	f000 f958 	bl	800afdc <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800ad2c:	e020      	b.n	800ad70 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800ad2e:	7bbb      	ldrb	r3, [r7, #14]
 800ad30:	2b01      	cmp	r3, #1
 800ad32:	d01d      	beq.n	800ad70 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800ad34:	68bb      	ldr	r3, [r7, #8]
 800ad36:	2204      	movs	r2, #4
 800ad38:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 800ad3c:	e018      	b.n	800ad70 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800ad3e:	6878      	ldr	r0, [r7, #4]
 800ad40:	f000 f867 	bl	800ae12 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800ad44:	6878      	ldr	r0, [r7, #4]
 800ad46:	f000 f8da 	bl	800aefe <CDC_ProcessReception>
      break;
 800ad4a:	e014      	b.n	800ad76 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800ad4c:	2100      	movs	r1, #0
 800ad4e:	6878      	ldr	r0, [r7, #4]
 800ad50:	f001 f81a 	bl	800bd88 <USBH_ClrFeature>
 800ad54:	4603      	mov	r3, r0
 800ad56:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800ad58:	7bbb      	ldrb	r3, [r7, #14]
 800ad5a:	2b00      	cmp	r3, #0
 800ad5c:	d10a      	bne.n	800ad74 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800ad5e:	68bb      	ldr	r3, [r7, #8]
 800ad60:	2200      	movs	r2, #0
 800ad62:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800ad66:	e005      	b.n	800ad74 <USBH_CDC_Process+0x120>

    default:
      break;
 800ad68:	bf00      	nop
 800ad6a:	e004      	b.n	800ad76 <USBH_CDC_Process+0x122>
      break;
 800ad6c:	bf00      	nop
 800ad6e:	e002      	b.n	800ad76 <USBH_CDC_Process+0x122>
      break;
 800ad70:	bf00      	nop
 800ad72:	e000      	b.n	800ad76 <USBH_CDC_Process+0x122>
      break;
 800ad74:	bf00      	nop

  }

  return status;
 800ad76:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad78:	4618      	mov	r0, r3
 800ad7a:	3710      	adds	r7, #16
 800ad7c:	46bd      	mov	sp, r7
 800ad7e:	bd80      	pop	{r7, pc}

0800ad80 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 800ad80:	b480      	push	{r7}
 800ad82:	b083      	sub	sp, #12
 800ad84:	af00      	add	r7, sp, #0
 800ad86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 800ad88:	2300      	movs	r3, #0
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	370c      	adds	r7, #12
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad94:	4770      	bx	lr

0800ad96 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800ad96:	b580      	push	{r7, lr}
 800ad98:	b082      	sub	sp, #8
 800ad9a:	af00      	add	r7, sp, #0
 800ad9c:	6078      	str	r0, [r7, #4]
 800ad9e:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	22a1      	movs	r2, #161	@ 0xa1
 800ada4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	2221      	movs	r2, #33	@ 0x21
 800adaa:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2200      	movs	r2, #0
 800adb0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	2200      	movs	r2, #0
 800adb6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	2207      	movs	r2, #7
 800adbc:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800adbe:	683b      	ldr	r3, [r7, #0]
 800adc0:	2207      	movs	r2, #7
 800adc2:	4619      	mov	r1, r3
 800adc4:	6878      	ldr	r0, [r7, #4]
 800adc6:	f001 fb14 	bl	800c3f2 <USBH_CtlReq>
 800adca:	4603      	mov	r3, r0
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3708      	adds	r7, #8
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b082      	sub	sp, #8
 800add8:	af00      	add	r7, sp, #0
 800adda:	6078      	str	r0, [r7, #4]
 800addc:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	2221      	movs	r2, #33	@ 0x21
 800ade2:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	2220      	movs	r2, #32
 800ade8:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	2200      	movs	r2, #0
 800adee:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	2200      	movs	r2, #0
 800adf4:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800adf6:	687b      	ldr	r3, [r7, #4]
 800adf8:	2207      	movs	r2, #7
 800adfa:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	2207      	movs	r2, #7
 800ae00:	4619      	mov	r1, r3
 800ae02:	6878      	ldr	r0, [r7, #4]
 800ae04:	f001 faf5 	bl	800c3f2 <USBH_CtlReq>
 800ae08:	4603      	mov	r3, r0
}
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	3708      	adds	r7, #8
 800ae0e:	46bd      	mov	sp, r7
 800ae10:	bd80      	pop	{r7, pc}

0800ae12 <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800ae12:	b580      	push	{r7, lr}
 800ae14:	b086      	sub	sp, #24
 800ae16:	af02      	add	r7, sp, #8
 800ae18:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800ae1a:	687b      	ldr	r3, [r7, #4]
 800ae1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ae20:	69db      	ldr	r3, [r3, #28]
 800ae22:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800ae24:	2300      	movs	r3, #0
 800ae26:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 800ae28:	68fb      	ldr	r3, [r7, #12]
 800ae2a:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 800ae2e:	2b01      	cmp	r3, #1
 800ae30:	d002      	beq.n	800ae38 <CDC_ProcessTransmission+0x26>
 800ae32:	2b02      	cmp	r3, #2
 800ae34:	d023      	beq.n	800ae7e <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800ae36:	e05e      	b.n	800aef6 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ae38:	68fb      	ldr	r3, [r7, #12]
 800ae3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae3c:	68fa      	ldr	r2, [r7, #12]
 800ae3e:	8b12      	ldrh	r2, [r2, #24]
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d90b      	bls.n	800ae5c <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	69d9      	ldr	r1, [r3, #28]
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	8b1a      	ldrh	r2, [r3, #24]
 800ae4c:	68fb      	ldr	r3, [r7, #12]
 800ae4e:	7b5b      	ldrb	r3, [r3, #13]
 800ae50:	2001      	movs	r0, #1
 800ae52:	9000      	str	r0, [sp, #0]
 800ae54:	6878      	ldr	r0, [r7, #4]
 800ae56:	f001 fcda 	bl	800c80e <USBH_BulkSendData>
 800ae5a:	e00b      	b.n	800ae74 <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800ae64:	b29a      	uxth	r2, r3
 800ae66:	68fb      	ldr	r3, [r7, #12]
 800ae68:	7b5b      	ldrb	r3, [r3, #13]
 800ae6a:	2001      	movs	r0, #1
 800ae6c:	9000      	str	r0, [sp, #0]
 800ae6e:	6878      	ldr	r0, [r7, #4]
 800ae70:	f001 fccd 	bl	800c80e <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800ae74:	68fb      	ldr	r3, [r7, #12]
 800ae76:	2202      	movs	r2, #2
 800ae78:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800ae7c:	e03b      	b.n	800aef6 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 800ae7e:	68fb      	ldr	r3, [r7, #12]
 800ae80:	7b5b      	ldrb	r3, [r3, #13]
 800ae82:	4619      	mov	r1, r3
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	f001 fff1 	bl	800ce6c <USBH_LL_GetURBState>
 800ae8a:	4603      	mov	r3, r0
 800ae8c:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 800ae8e:	7afb      	ldrb	r3, [r7, #11]
 800ae90:	2b01      	cmp	r3, #1
 800ae92:	d128      	bne.n	800aee6 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800ae94:	68fb      	ldr	r3, [r7, #12]
 800ae96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ae98:	68fa      	ldr	r2, [r7, #12]
 800ae9a:	8b12      	ldrh	r2, [r2, #24]
 800ae9c:	4293      	cmp	r3, r2
 800ae9e:	d90e      	bls.n	800aebe <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 800aea0:	68fb      	ldr	r3, [r7, #12]
 800aea2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aea4:	68fa      	ldr	r2, [r7, #12]
 800aea6:	8b12      	ldrh	r2, [r2, #24]
 800aea8:	1a9a      	subs	r2, r3, r2
 800aeaa:	68fb      	ldr	r3, [r7, #12]
 800aeac:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 800aeae:	68fb      	ldr	r3, [r7, #12]
 800aeb0:	69db      	ldr	r3, [r3, #28]
 800aeb2:	68fa      	ldr	r2, [r7, #12]
 800aeb4:	8b12      	ldrh	r2, [r2, #24]
 800aeb6:	441a      	add	r2, r3
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	61da      	str	r2, [r3, #28]
 800aebc:	e002      	b.n	800aec4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 800aebe:	68fb      	ldr	r3, [r7, #12]
 800aec0:	2200      	movs	r2, #0
 800aec2:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800aec4:	68fb      	ldr	r3, [r7, #12]
 800aec6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d004      	beq.n	800aed6 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800aecc:	68fb      	ldr	r3, [r7, #12]
 800aece:	2201      	movs	r2, #1
 800aed0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800aed4:	e00e      	b.n	800aef4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	2200      	movs	r2, #0
 800aeda:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 800aede:	6878      	ldr	r0, [r7, #4]
 800aee0:	f000 f868 	bl	800afb4 <USBH_CDC_TransmitCallback>
      break;
 800aee4:	e006      	b.n	800aef4 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800aee6:	7afb      	ldrb	r3, [r7, #11]
 800aee8:	2b02      	cmp	r3, #2
 800aeea:	d103      	bne.n	800aef4 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 800aeec:	68fb      	ldr	r3, [r7, #12]
 800aeee:	2201      	movs	r2, #1
 800aef0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800aef4:	bf00      	nop
  }
}
 800aef6:	bf00      	nop
 800aef8:	3710      	adds	r7, #16
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}

0800aefe <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 800aefe:	b580      	push	{r7, lr}
 800af00:	b086      	sub	sp, #24
 800af02:	af00      	add	r7, sp, #0
 800af04:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800af0c:	69db      	ldr	r3, [r3, #28]
 800af0e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800af10:	2300      	movs	r3, #0
 800af12:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800af14:	697b      	ldr	r3, [r7, #20]
 800af16:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 800af1a:	2b03      	cmp	r3, #3
 800af1c:	d002      	beq.n	800af24 <CDC_ProcessReception+0x26>
 800af1e:	2b04      	cmp	r3, #4
 800af20:	d00e      	beq.n	800af40 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800af22:	e043      	b.n	800afac <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	6a19      	ldr	r1, [r3, #32]
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	8b5a      	ldrh	r2, [r3, #26]
 800af2c:	697b      	ldr	r3, [r7, #20]
 800af2e:	7b1b      	ldrb	r3, [r3, #12]
 800af30:	6878      	ldr	r0, [r7, #4]
 800af32:	f001 fc91 	bl	800c858 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	2204      	movs	r2, #4
 800af3a:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800af3e:	e035      	b.n	800afac <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 800af40:	697b      	ldr	r3, [r7, #20]
 800af42:	7b1b      	ldrb	r3, [r3, #12]
 800af44:	4619      	mov	r1, r3
 800af46:	6878      	ldr	r0, [r7, #4]
 800af48:	f001 ff90 	bl	800ce6c <USBH_LL_GetURBState>
 800af4c:	4603      	mov	r3, r0
 800af4e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 800af50:	7cfb      	ldrb	r3, [r7, #19]
 800af52:	2b01      	cmp	r3, #1
 800af54:	d129      	bne.n	800afaa <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800af56:	697b      	ldr	r3, [r7, #20]
 800af58:	7b1b      	ldrb	r3, [r3, #12]
 800af5a:	4619      	mov	r1, r3
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	f001 fef3 	bl	800cd48 <USBH_LL_GetLastXferSize>
 800af62:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 800af64:	697b      	ldr	r3, [r7, #20]
 800af66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800af68:	68fa      	ldr	r2, [r7, #12]
 800af6a:	429a      	cmp	r2, r3
 800af6c:	d016      	beq.n	800af9c <CDC_ProcessReception+0x9e>
 800af6e:	697b      	ldr	r3, [r7, #20]
 800af70:	8b5b      	ldrh	r3, [r3, #26]
 800af72:	461a      	mov	r2, r3
 800af74:	68fb      	ldr	r3, [r7, #12]
 800af76:	4293      	cmp	r3, r2
 800af78:	d110      	bne.n	800af9c <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 800af7a:	697b      	ldr	r3, [r7, #20]
 800af7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	1ad2      	subs	r2, r2, r3
 800af82:	697b      	ldr	r3, [r7, #20]
 800af84:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	6a1a      	ldr	r2, [r3, #32]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	441a      	add	r2, r3
 800af8e:	697b      	ldr	r3, [r7, #20]
 800af90:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800af92:	697b      	ldr	r3, [r7, #20]
 800af94:	2203      	movs	r2, #3
 800af96:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 800af9a:	e006      	b.n	800afaa <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 800af9c:	697b      	ldr	r3, [r7, #20]
 800af9e:	2200      	movs	r2, #0
 800afa0:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800afa4:	6878      	ldr	r0, [r7, #4]
 800afa6:	f000 f80f 	bl	800afc8 <USBH_CDC_ReceiveCallback>
      break;
 800afaa:	bf00      	nop
  }
}
 800afac:	bf00      	nop
 800afae:	3718      	adds	r7, #24
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}

0800afb4 <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800afb4:	b480      	push	{r7}
 800afb6:	b083      	sub	sp, #12
 800afb8:	af00      	add	r7, sp, #0
 800afba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800afbc:	bf00      	nop
 800afbe:	370c      	adds	r7, #12
 800afc0:	46bd      	mov	sp, r7
 800afc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc6:	4770      	bx	lr

0800afc8 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 800afc8:	b480      	push	{r7}
 800afca:	b083      	sub	sp, #12
 800afcc:	af00      	add	r7, sp, #0
 800afce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800afd0:	bf00      	nop
 800afd2:	370c      	adds	r7, #12
 800afd4:	46bd      	mov	sp, r7
 800afd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afda:	4770      	bx	lr

0800afdc <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 800afdc:	b480      	push	{r7}
 800afde:	b083      	sub	sp, #12
 800afe0:	af00      	add	r7, sp, #0
 800afe2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800afe4:	bf00      	nop
 800afe6:	370c      	adds	r7, #12
 800afe8:	46bd      	mov	sp, r7
 800afea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afee:	4770      	bx	lr

0800aff0 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 800aff0:	b580      	push	{r7, lr}
 800aff2:	b084      	sub	sp, #16
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	4613      	mov	r3, r2
 800affc:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d101      	bne.n	800b008 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800b004:	2302      	movs	r3, #2
 800b006:	e029      	b.n	800b05c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	79fa      	ldrb	r2, [r7, #7]
 800b00c:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	2200      	movs	r2, #0
 800b014:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	2200      	movs	r2, #0
 800b01c:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 800b020:	68f8      	ldr	r0, [r7, #12]
 800b022:	f000 f81f 	bl	800b064 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	2200      	movs	r2, #0
 800b02a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 800b02e:	68fb      	ldr	r3, [r7, #12]
 800b030:	2200      	movs	r2, #0
 800b032:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	2200      	movs	r2, #0
 800b03a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800b03e:	68fb      	ldr	r3, [r7, #12]
 800b040:	2200      	movs	r2, #0
 800b042:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800b046:	68bb      	ldr	r3, [r7, #8]
 800b048:	2b00      	cmp	r3, #0
 800b04a:	d003      	beq.n	800b054 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 800b04c:	68fb      	ldr	r3, [r7, #12]
 800b04e:	68ba      	ldr	r2, [r7, #8]
 800b050:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800b054:	68f8      	ldr	r0, [r7, #12]
 800b056:	f001 fdc3 	bl	800cbe0 <USBH_LL_Init>

  return USBH_OK;
 800b05a:	2300      	movs	r3, #0
}
 800b05c:	4618      	mov	r0, r3
 800b05e:	3710      	adds	r7, #16
 800b060:	46bd      	mov	sp, r7
 800b062:	bd80      	pop	{r7, pc}

0800b064 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800b064:	b580      	push	{r7, lr}
 800b066:	b084      	sub	sp, #16
 800b068:	af00      	add	r7, sp, #0
 800b06a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 800b06c:	2300      	movs	r3, #0
 800b06e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b070:	2300      	movs	r3, #0
 800b072:	60fb      	str	r3, [r7, #12]
 800b074:	e009      	b.n	800b08a <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800b076:	687a      	ldr	r2, [r7, #4]
 800b078:	68fb      	ldr	r3, [r7, #12]
 800b07a:	33e0      	adds	r3, #224	@ 0xe0
 800b07c:	009b      	lsls	r3, r3, #2
 800b07e:	4413      	add	r3, r2
 800b080:	2200      	movs	r2, #0
 800b082:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	3301      	adds	r3, #1
 800b088:	60fb      	str	r3, [r7, #12]
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	2b0f      	cmp	r3, #15
 800b08e:	d9f2      	bls.n	800b076 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b090:	2300      	movs	r3, #0
 800b092:	60fb      	str	r3, [r7, #12]
 800b094:	e009      	b.n	800b0aa <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800b096:	687a      	ldr	r2, [r7, #4]
 800b098:	68fb      	ldr	r3, [r7, #12]
 800b09a:	4413      	add	r3, r2
 800b09c:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	60fb      	str	r3, [r7, #12]
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b0b0:	d3f1      	bcc.n	800b096 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	2200      	movs	r2, #0
 800b0b6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2201      	movs	r2, #1
 800b0c2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2200      	movs	r2, #0
 800b0c8:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2201      	movs	r2, #1
 800b0d0:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	2240      	movs	r2, #64	@ 0x40
 800b0d6:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	2200      	movs	r2, #0
 800b0dc:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	2201      	movs	r2, #1
 800b0ea:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	2200      	movs	r2, #0
 800b0f2:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	331c      	adds	r3, #28
 800b102:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800b106:	2100      	movs	r1, #0
 800b108:	4618      	mov	r0, r3
 800b10a:	f002 f81d 	bl	800d148 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 800b10e:	687b      	ldr	r3, [r7, #4]
 800b110:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800b114:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b118:	2100      	movs	r1, #0
 800b11a:	4618      	mov	r0, r3
 800b11c:	f002 f814 	bl	800d148 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800b126:	2212      	movs	r2, #18
 800b128:	2100      	movs	r1, #0
 800b12a:	4618      	mov	r0, r3
 800b12c:	f002 f80c 	bl	800d148 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b136:	223e      	movs	r2, #62	@ 0x3e
 800b138:	2100      	movs	r1, #0
 800b13a:	4618      	mov	r0, r3
 800b13c:	f002 f804 	bl	800d148 <memset>

  return USBH_OK;
 800b140:	2300      	movs	r3, #0
}
 800b142:	4618      	mov	r0, r3
 800b144:	3710      	adds	r7, #16
 800b146:	46bd      	mov	sp, r7
 800b148:	bd80      	pop	{r7, pc}

0800b14a <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 800b14a:	b480      	push	{r7}
 800b14c:	b085      	sub	sp, #20
 800b14e:	af00      	add	r7, sp, #0
 800b150:	6078      	str	r0, [r7, #4]
 800b152:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800b154:	2300      	movs	r3, #0
 800b156:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 800b158:	683b      	ldr	r3, [r7, #0]
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d016      	beq.n	800b18c <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800b164:	2b00      	cmp	r3, #0
 800b166:	d10e      	bne.n	800b186 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800b16e:	1c59      	adds	r1, r3, #1
 800b170:	687a      	ldr	r2, [r7, #4]
 800b172:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 800b176:	687a      	ldr	r2, [r7, #4]
 800b178:	33de      	adds	r3, #222	@ 0xde
 800b17a:	6839      	ldr	r1, [r7, #0]
 800b17c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800b180:	2300      	movs	r3, #0
 800b182:	73fb      	strb	r3, [r7, #15]
 800b184:	e004      	b.n	800b190 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 800b186:	2302      	movs	r3, #2
 800b188:	73fb      	strb	r3, [r7, #15]
 800b18a:	e001      	b.n	800b190 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 800b18c:	2302      	movs	r3, #2
 800b18e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b190:	7bfb      	ldrb	r3, [r7, #15]
}
 800b192:	4618      	mov	r0, r3
 800b194:	3714      	adds	r7, #20
 800b196:	46bd      	mov	sp, r7
 800b198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b19c:	4770      	bx	lr

0800b19e <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 800b19e:	b480      	push	{r7}
 800b1a0:	b085      	sub	sp, #20
 800b1a2:	af00      	add	r7, sp, #0
 800b1a4:	6078      	str	r0, [r7, #4]
 800b1a6:	460b      	mov	r3, r1
 800b1a8:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 800b1aa:	2300      	movs	r3, #0
 800b1ac:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800b1b4:	78fa      	ldrb	r2, [r7, #3]
 800b1b6:	429a      	cmp	r2, r3
 800b1b8:	d204      	bcs.n	800b1c4 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	78fa      	ldrb	r2, [r7, #3]
 800b1be:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800b1c2:	e001      	b.n	800b1c8 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800b1c4:	2302      	movs	r3, #2
 800b1c6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800b1c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1ca:	4618      	mov	r0, r3
 800b1cc:	3714      	adds	r7, #20
 800b1ce:	46bd      	mov	sp, r7
 800b1d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1d4:	4770      	bx	lr

0800b1d6 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800b1d6:	b480      	push	{r7}
 800b1d8:	b087      	sub	sp, #28
 800b1da:	af00      	add	r7, sp, #0
 800b1dc:	6078      	str	r0, [r7, #4]
 800b1de:	4608      	mov	r0, r1
 800b1e0:	4611      	mov	r1, r2
 800b1e2:	461a      	mov	r2, r3
 800b1e4:	4603      	mov	r3, r0
 800b1e6:	70fb      	strb	r3, [r7, #3]
 800b1e8:	460b      	mov	r3, r1
 800b1ea:	70bb      	strb	r3, [r7, #2]
 800b1ec:	4613      	mov	r3, r2
 800b1ee:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800b1f4:	2300      	movs	r3, #0
 800b1f6:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800b1fe:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b200:	e025      	b.n	800b24e <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800b202:	7dfb      	ldrb	r3, [r7, #23]
 800b204:	221a      	movs	r2, #26
 800b206:	fb02 f303 	mul.w	r3, r2, r3
 800b20a:	3308      	adds	r3, #8
 800b20c:	68fa      	ldr	r2, [r7, #12]
 800b20e:	4413      	add	r3, r2
 800b210:	3302      	adds	r3, #2
 800b212:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b214:	693b      	ldr	r3, [r7, #16]
 800b216:	795b      	ldrb	r3, [r3, #5]
 800b218:	78fa      	ldrb	r2, [r7, #3]
 800b21a:	429a      	cmp	r2, r3
 800b21c:	d002      	beq.n	800b224 <USBH_FindInterface+0x4e>
 800b21e:	78fb      	ldrb	r3, [r7, #3]
 800b220:	2bff      	cmp	r3, #255	@ 0xff
 800b222:	d111      	bne.n	800b248 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800b228:	78ba      	ldrb	r2, [r7, #2]
 800b22a:	429a      	cmp	r2, r3
 800b22c:	d002      	beq.n	800b234 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b22e:	78bb      	ldrb	r3, [r7, #2]
 800b230:	2bff      	cmp	r3, #255	@ 0xff
 800b232:	d109      	bne.n	800b248 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b234:	693b      	ldr	r3, [r7, #16]
 800b236:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800b238:	787a      	ldrb	r2, [r7, #1]
 800b23a:	429a      	cmp	r2, r3
 800b23c:	d002      	beq.n	800b244 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800b23e:	787b      	ldrb	r3, [r7, #1]
 800b240:	2bff      	cmp	r3, #255	@ 0xff
 800b242:	d101      	bne.n	800b248 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800b244:	7dfb      	ldrb	r3, [r7, #23]
 800b246:	e006      	b.n	800b256 <USBH_FindInterface+0x80>
    }
    if_ix++;
 800b248:	7dfb      	ldrb	r3, [r7, #23]
 800b24a:	3301      	adds	r3, #1
 800b24c:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800b24e:	7dfb      	ldrb	r3, [r7, #23]
 800b250:	2b01      	cmp	r3, #1
 800b252:	d9d6      	bls.n	800b202 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800b254:	23ff      	movs	r3, #255	@ 0xff
}
 800b256:	4618      	mov	r0, r3
 800b258:	371c      	adds	r7, #28
 800b25a:	46bd      	mov	sp, r7
 800b25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b260:	4770      	bx	lr

0800b262 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 800b262:	b580      	push	{r7, lr}
 800b264:	b082      	sub	sp, #8
 800b266:	af00      	add	r7, sp, #0
 800b268:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f001 fcf4 	bl	800cc58 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800b270:	2101      	movs	r1, #1
 800b272:	6878      	ldr	r0, [r7, #4]
 800b274:	f001 fe0d 	bl	800ce92 <USBH_LL_DriverVBUS>

  return USBH_OK;
 800b278:	2300      	movs	r3, #0
}
 800b27a:	4618      	mov	r0, r3
 800b27c:	3708      	adds	r7, #8
 800b27e:	46bd      	mov	sp, r7
 800b280:	bd80      	pop	{r7, pc}
	...

0800b284 <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 800b284:	b580      	push	{r7, lr}
 800b286:	b088      	sub	sp, #32
 800b288:	af04      	add	r7, sp, #16
 800b28a:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 800b28c:	2302      	movs	r3, #2
 800b28e:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 800b290:	2300      	movs	r3, #0
 800b292:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 800b294:	687b      	ldr	r3, [r7, #4]
 800b296:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 800b29a:	b2db      	uxtb	r3, r3
 800b29c:	2b01      	cmp	r3, #1
 800b29e:	d102      	bne.n	800b2a6 <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	2203      	movs	r2, #3
 800b2a4:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	781b      	ldrb	r3, [r3, #0]
 800b2aa:	b2db      	uxtb	r3, r3
 800b2ac:	2b0b      	cmp	r3, #11
 800b2ae:	f200 81bb 	bhi.w	800b628 <USBH_Process+0x3a4>
 800b2b2:	a201      	add	r2, pc, #4	@ (adr r2, 800b2b8 <USBH_Process+0x34>)
 800b2b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2b8:	0800b2e9 	.word	0x0800b2e9
 800b2bc:	0800b31b 	.word	0x0800b31b
 800b2c0:	0800b383 	.word	0x0800b383
 800b2c4:	0800b5c3 	.word	0x0800b5c3
 800b2c8:	0800b629 	.word	0x0800b629
 800b2cc:	0800b423 	.word	0x0800b423
 800b2d0:	0800b569 	.word	0x0800b569
 800b2d4:	0800b459 	.word	0x0800b459
 800b2d8:	0800b479 	.word	0x0800b479
 800b2dc:	0800b497 	.word	0x0800b497
 800b2e0:	0800b4db 	.word	0x0800b4db
 800b2e4:	0800b5ab 	.word	0x0800b5ab
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 800b2ee:	b2db      	uxtb	r3, r3
 800b2f0:	2b00      	cmp	r3, #0
 800b2f2:	f000 819b 	beq.w	800b62c <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	2201      	movs	r2, #1
 800b2fa:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 800b2fc:	20c8      	movs	r0, #200	@ 0xc8
 800b2fe:	f001 fe12 	bl	800cf26 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800b302:	6878      	ldr	r0, [r7, #4]
 800b304:	f001 fd05 	bl	800cd12 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	2200      	movs	r2, #0
 800b30c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 800b310:	687b      	ldr	r3, [r7, #4]
 800b312:	2200      	movs	r2, #0
 800b314:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b318:	e188      	b.n	800b62c <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 800b320:	2b01      	cmp	r3, #1
 800b322:	d107      	bne.n	800b334 <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2200      	movs	r2, #0
 800b328:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2202      	movs	r2, #2
 800b330:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b332:	e18a      	b.n	800b64a <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800b33a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800b33e:	d914      	bls.n	800b36a <USBH_Process+0xe6>
          phost->device.RstCnt++;
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800b346:	3301      	adds	r3, #1
 800b348:	b2da      	uxtb	r2, r3
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 800b356:	2b03      	cmp	r3, #3
 800b358:	d903      	bls.n	800b362 <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	220d      	movs	r2, #13
 800b35e:	701a      	strb	r2, [r3, #0]
      break;
 800b360:	e173      	b.n	800b64a <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	2200      	movs	r2, #0
 800b366:	701a      	strb	r2, [r3, #0]
      break;
 800b368:	e16f      	b.n	800b64a <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 800b370:	f103 020a 	add.w	r2, r3, #10
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 800b37a:	200a      	movs	r0, #10
 800b37c:	f001 fdd3 	bl	800cf26 <USBH_Delay>
      break;
 800b380:	e163      	b.n	800b64a <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b388:	2b00      	cmp	r3, #0
 800b38a:	d005      	beq.n	800b398 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b392:	2104      	movs	r1, #4
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 800b398:	2064      	movs	r0, #100	@ 0x64
 800b39a:	f001 fdc4 	bl	800cf26 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f001 fc90 	bl	800ccc4 <USBH_LL_GetSpeed>
 800b3a4:	4603      	mov	r3, r0
 800b3a6:	461a      	mov	r2, r3
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	2205      	movs	r2, #5
 800b3b2:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800b3b4:	2100      	movs	r1, #0
 800b3b6:	6878      	ldr	r0, [r7, #4]
 800b3b8:	f001 fa9b 	bl	800c8f2 <USBH_AllocPipe>
 800b3bc:	4603      	mov	r3, r0
 800b3be:	461a      	mov	r2, r3
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800b3c4:	2180      	movs	r1, #128	@ 0x80
 800b3c6:	6878      	ldr	r0, [r7, #4]
 800b3c8:	f001 fa93 	bl	800c8f2 <USBH_AllocPipe>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	461a      	mov	r2, r3
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	7919      	ldrb	r1, [r3, #4]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b3e4:	687a      	ldr	r2, [r7, #4]
 800b3e6:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800b3e8:	9202      	str	r2, [sp, #8]
 800b3ea:	2200      	movs	r2, #0
 800b3ec:	9201      	str	r2, [sp, #4]
 800b3ee:	9300      	str	r3, [sp, #0]
 800b3f0:	4603      	mov	r3, r0
 800b3f2:	2280      	movs	r2, #128	@ 0x80
 800b3f4:	6878      	ldr	r0, [r7, #4]
 800b3f6:	f001 fa4d 	bl	800c894 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	7959      	ldrb	r1, [r3, #5]
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800b40a:	687a      	ldr	r2, [r7, #4]
 800b40c:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 800b40e:	9202      	str	r2, [sp, #8]
 800b410:	2200      	movs	r2, #0
 800b412:	9201      	str	r2, [sp, #4]
 800b414:	9300      	str	r3, [sp, #0]
 800b416:	4603      	mov	r3, r0
 800b418:	2200      	movs	r2, #0
 800b41a:	6878      	ldr	r0, [r7, #4]
 800b41c:	f001 fa3a 	bl	800c894 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b420:	e113      	b.n	800b64a <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f000 f916 	bl	800b654 <USBH_HandleEnum>
 800b428:	4603      	mov	r3, r0
 800b42a:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 800b42c:	7bbb      	ldrb	r3, [r7, #14]
 800b42e:	b2db      	uxtb	r3, r3
 800b430:	2b00      	cmp	r3, #0
 800b432:	f040 80fd 	bne.w	800b630 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2200      	movs	r2, #0
 800b43a:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 800b444:	2b01      	cmp	r3, #1
 800b446:	d103      	bne.n	800b450 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	2208      	movs	r2, #8
 800b44c:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b44e:	e0ef      	b.n	800b630 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2207      	movs	r2, #7
 800b454:	701a      	strb	r2, [r3, #0]
      break;
 800b456:	e0eb      	b.n	800b630 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b45e:	2b00      	cmp	r3, #0
 800b460:	f000 80e8 	beq.w	800b634 <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b46a:	2101      	movs	r1, #1
 800b46c:	6878      	ldr	r0, [r7, #4]
 800b46e:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2208      	movs	r2, #8
 800b474:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 800b476:	e0dd      	b.n	800b634 <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 800b47e:	4619      	mov	r1, r3
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f000 fc3a 	bl	800bcfa <USBH_SetCfg>
 800b486:	4603      	mov	r3, r0
 800b488:	2b00      	cmp	r3, #0
 800b48a:	f040 80d5 	bne.w	800b638 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2209      	movs	r2, #9
 800b492:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b494:	e0d0      	b.n	800b638 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 800b49c:	f003 0320 	and.w	r3, r3, #32
 800b4a0:	2b00      	cmp	r3, #0
 800b4a2:	d016      	beq.n	800b4d2 <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 800b4a4:	2101      	movs	r1, #1
 800b4a6:	6878      	ldr	r0, [r7, #4]
 800b4a8:	f000 fc4a 	bl	800bd40 <USBH_SetFeature>
 800b4ac:	4603      	mov	r3, r0
 800b4ae:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b4b0:	7bbb      	ldrb	r3, [r7, #14]
 800b4b2:	b2db      	uxtb	r3, r3
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	d103      	bne.n	800b4c0 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	220a      	movs	r2, #10
 800b4bc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b4be:	e0bd      	b.n	800b63c <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 800b4c0:	7bbb      	ldrb	r3, [r7, #14]
 800b4c2:	b2db      	uxtb	r3, r3
 800b4c4:	2b03      	cmp	r3, #3
 800b4c6:	f040 80b9 	bne.w	800b63c <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	220a      	movs	r2, #10
 800b4ce:	701a      	strb	r2, [r3, #0]
      break;
 800b4d0:	e0b4      	b.n	800b63c <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	220a      	movs	r2, #10
 800b4d6:	701a      	strb	r2, [r3, #0]
      break;
 800b4d8:	e0b0      	b.n	800b63c <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	f000 80ad 	beq.w	800b640 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2200      	movs	r2, #0
 800b4ea:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b4ee:	2300      	movs	r3, #0
 800b4f0:	73fb      	strb	r3, [r7, #15]
 800b4f2:	e016      	b.n	800b522 <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 800b4f4:	7bfa      	ldrb	r2, [r7, #15]
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	32de      	adds	r2, #222	@ 0xde
 800b4fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b4fe:	791a      	ldrb	r2, [r3, #4]
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 800b506:	429a      	cmp	r2, r3
 800b508:	d108      	bne.n	800b51c <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 800b50a:	7bfa      	ldrb	r2, [r7, #15]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	32de      	adds	r2, #222	@ 0xde
 800b510:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 800b51a:	e005      	b.n	800b528 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 800b51c:	7bfb      	ldrb	r3, [r7, #15]
 800b51e:	3301      	adds	r3, #1
 800b520:	73fb      	strb	r3, [r7, #15]
 800b522:	7bfb      	ldrb	r3, [r7, #15]
 800b524:	2b00      	cmp	r3, #0
 800b526:	d0e5      	beq.n	800b4f4 <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b52e:	2b00      	cmp	r3, #0
 800b530:	d016      	beq.n	800b560 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b538:	689b      	ldr	r3, [r3, #8]
 800b53a:	6878      	ldr	r0, [r7, #4]
 800b53c:	4798      	blx	r3
 800b53e:	4603      	mov	r3, r0
 800b540:	2b00      	cmp	r3, #0
 800b542:	d109      	bne.n	800b558 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2206      	movs	r2, #6
 800b548:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b550:	2103      	movs	r1, #3
 800b552:	6878      	ldr	r0, [r7, #4]
 800b554:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b556:	e073      	b.n	800b640 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 800b558:	687b      	ldr	r3, [r7, #4]
 800b55a:	220d      	movs	r2, #13
 800b55c:	701a      	strb	r2, [r3, #0]
      break;
 800b55e:	e06f      	b.n	800b640 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	220d      	movs	r2, #13
 800b564:	701a      	strb	r2, [r3, #0]
      break;
 800b566:	e06b      	b.n	800b640 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b56e:	2b00      	cmp	r3, #0
 800b570:	d017      	beq.n	800b5a2 <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b578:	691b      	ldr	r3, [r3, #16]
 800b57a:	6878      	ldr	r0, [r7, #4]
 800b57c:	4798      	blx	r3
 800b57e:	4603      	mov	r3, r0
 800b580:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 800b582:	7bbb      	ldrb	r3, [r7, #14]
 800b584:	b2db      	uxtb	r3, r3
 800b586:	2b00      	cmp	r3, #0
 800b588:	d103      	bne.n	800b592 <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 800b58a:	687b      	ldr	r3, [r7, #4]
 800b58c:	220b      	movs	r2, #11
 800b58e:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b590:	e058      	b.n	800b644 <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 800b592:	7bbb      	ldrb	r3, [r7, #14]
 800b594:	b2db      	uxtb	r3, r3
 800b596:	2b02      	cmp	r3, #2
 800b598:	d154      	bne.n	800b644 <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 800b59a:	687b      	ldr	r3, [r7, #4]
 800b59c:	220d      	movs	r2, #13
 800b59e:	701a      	strb	r2, [r3, #0]
      break;
 800b5a0:	e050      	b.n	800b644 <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	220d      	movs	r2, #13
 800b5a6:	701a      	strb	r2, [r3, #0]
      break;
 800b5a8:	e04c      	b.n	800b644 <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 800b5aa:	687b      	ldr	r3, [r7, #4]
 800b5ac:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d049      	beq.n	800b648 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 800b5b4:	687b      	ldr	r3, [r7, #4]
 800b5b6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b5ba:	695b      	ldr	r3, [r3, #20]
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	4798      	blx	r3
      }
      break;
 800b5c0:	e042      	b.n	800b648 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2200      	movs	r2, #0
 800b5c6:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 800b5ca:	6878      	ldr	r0, [r7, #4]
 800b5cc:	f7ff fd4a 	bl	800b064 <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d009      	beq.n	800b5ee <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800b5e0:	68db      	ldr	r3, [r3, #12]
 800b5e2:	6878      	ldr	r0, [r7, #4]
 800b5e4:	4798      	blx	r3
        phost->pActiveClass = NULL;
 800b5e6:	687b      	ldr	r3, [r7, #4]
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 800b5ee:	687b      	ldr	r3, [r7, #4]
 800b5f0:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d005      	beq.n	800b604 <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800b5fe:	2105      	movs	r1, #5
 800b600:	6878      	ldr	r0, [r7, #4]
 800b602:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 800b60a:	b2db      	uxtb	r3, r3
 800b60c:	2b01      	cmp	r3, #1
 800b60e:	d107      	bne.n	800b620 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	2200      	movs	r2, #0
 800b614:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 800b618:	6878      	ldr	r0, [r7, #4]
 800b61a:	f7ff fe22 	bl	800b262 <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800b61e:	e014      	b.n	800b64a <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f001 fb19 	bl	800cc58 <USBH_LL_Start>
      break;
 800b626:	e010      	b.n	800b64a <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 800b628:	bf00      	nop
 800b62a:	e00e      	b.n	800b64a <USBH_Process+0x3c6>
      break;
 800b62c:	bf00      	nop
 800b62e:	e00c      	b.n	800b64a <USBH_Process+0x3c6>
      break;
 800b630:	bf00      	nop
 800b632:	e00a      	b.n	800b64a <USBH_Process+0x3c6>
    break;
 800b634:	bf00      	nop
 800b636:	e008      	b.n	800b64a <USBH_Process+0x3c6>
      break;
 800b638:	bf00      	nop
 800b63a:	e006      	b.n	800b64a <USBH_Process+0x3c6>
      break;
 800b63c:	bf00      	nop
 800b63e:	e004      	b.n	800b64a <USBH_Process+0x3c6>
      break;
 800b640:	bf00      	nop
 800b642:	e002      	b.n	800b64a <USBH_Process+0x3c6>
      break;
 800b644:	bf00      	nop
 800b646:	e000      	b.n	800b64a <USBH_Process+0x3c6>
      break;
 800b648:	bf00      	nop
  }
  return USBH_OK;
 800b64a:	2300      	movs	r3, #0
}
 800b64c:	4618      	mov	r0, r3
 800b64e:	3710      	adds	r7, #16
 800b650:	46bd      	mov	sp, r7
 800b652:	bd80      	pop	{r7, pc}

0800b654 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800b654:	b580      	push	{r7, lr}
 800b656:	b088      	sub	sp, #32
 800b658:	af04      	add	r7, sp, #16
 800b65a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 800b65c:	2301      	movs	r3, #1
 800b65e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 800b660:	2301      	movs	r3, #1
 800b662:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	785b      	ldrb	r3, [r3, #1]
 800b668:	2b07      	cmp	r3, #7
 800b66a:	f200 81bd 	bhi.w	800b9e8 <USBH_HandleEnum+0x394>
 800b66e:	a201      	add	r2, pc, #4	@ (adr r2, 800b674 <USBH_HandleEnum+0x20>)
 800b670:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b674:	0800b695 	.word	0x0800b695
 800b678:	0800b74f 	.word	0x0800b74f
 800b67c:	0800b7b9 	.word	0x0800b7b9
 800b680:	0800b843 	.word	0x0800b843
 800b684:	0800b8ad 	.word	0x0800b8ad
 800b688:	0800b91d 	.word	0x0800b91d
 800b68c:	0800b963 	.word	0x0800b963
 800b690:	0800b9a9 	.word	0x0800b9a9
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800b694:	2108      	movs	r1, #8
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 fa4c 	bl	800bb34 <USBH_Get_DevDesc>
 800b69c:	4603      	mov	r3, r0
 800b69e:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b6a0:	7bbb      	ldrb	r3, [r7, #14]
 800b6a2:	2b00      	cmp	r3, #0
 800b6a4:	d12e      	bne.n	800b704 <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	2201      	movs	r2, #1
 800b6b4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	7919      	ldrb	r1, [r3, #4]
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b6c6:	687a      	ldr	r2, [r7, #4]
 800b6c8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 800b6ca:	9202      	str	r2, [sp, #8]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	9201      	str	r2, [sp, #4]
 800b6d0:	9300      	str	r3, [sp, #0]
 800b6d2:	4603      	mov	r3, r0
 800b6d4:	2280      	movs	r2, #128	@ 0x80
 800b6d6:	6878      	ldr	r0, [r7, #4]
 800b6d8:	f001 f8dc 	bl	800c894 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	7959      	ldrb	r1, [r3, #5]
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b6ec:	687a      	ldr	r2, [r7, #4]
 800b6ee:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b6f0:	9202      	str	r2, [sp, #8]
 800b6f2:	2200      	movs	r2, #0
 800b6f4:	9201      	str	r2, [sp, #4]
 800b6f6:	9300      	str	r3, [sp, #0]
 800b6f8:	4603      	mov	r3, r0
 800b6fa:	2200      	movs	r2, #0
 800b6fc:	6878      	ldr	r0, [r7, #4]
 800b6fe:	f001 f8c9 	bl	800c894 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b702:	e173      	b.n	800b9ec <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b704:	7bbb      	ldrb	r3, [r7, #14]
 800b706:	2b03      	cmp	r3, #3
 800b708:	f040 8170 	bne.w	800b9ec <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b712:	3301      	adds	r3, #1
 800b714:	b2da      	uxtb	r2, r3
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b722:	2b03      	cmp	r3, #3
 800b724:	d903      	bls.n	800b72e <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	220d      	movs	r2, #13
 800b72a:	701a      	strb	r2, [r3, #0]
      break;
 800b72c:	e15e      	b.n	800b9ec <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	795b      	ldrb	r3, [r3, #5]
 800b732:	4619      	mov	r1, r3
 800b734:	6878      	ldr	r0, [r7, #4]
 800b736:	f001 f8fd 	bl	800c934 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	791b      	ldrb	r3, [r3, #4]
 800b73e:	4619      	mov	r1, r3
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f001 f8f7 	bl	800c934 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	2200      	movs	r2, #0
 800b74a:	701a      	strb	r2, [r3, #0]
      break;
 800b74c:	e14e      	b.n	800b9ec <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 800b74e:	2112      	movs	r1, #18
 800b750:	6878      	ldr	r0, [r7, #4]
 800b752:	f000 f9ef 	bl	800bb34 <USBH_Get_DevDesc>
 800b756:	4603      	mov	r3, r0
 800b758:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b75a:	7bbb      	ldrb	r3, [r7, #14]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d103      	bne.n	800b768 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2202      	movs	r2, #2
 800b764:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b766:	e143      	b.n	800b9f0 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b768:	7bbb      	ldrb	r3, [r7, #14]
 800b76a:	2b03      	cmp	r3, #3
 800b76c:	f040 8140 	bne.w	800b9f0 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b776:	3301      	adds	r3, #1
 800b778:	b2da      	uxtb	r2, r3
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b786:	2b03      	cmp	r3, #3
 800b788:	d903      	bls.n	800b792 <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	220d      	movs	r2, #13
 800b78e:	701a      	strb	r2, [r3, #0]
      break;
 800b790:	e12e      	b.n	800b9f0 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	795b      	ldrb	r3, [r3, #5]
 800b796:	4619      	mov	r1, r3
 800b798:	6878      	ldr	r0, [r7, #4]
 800b79a:	f001 f8cb 	bl	800c934 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	791b      	ldrb	r3, [r3, #4]
 800b7a2:	4619      	mov	r1, r3
 800b7a4:	6878      	ldr	r0, [r7, #4]
 800b7a6:	f001 f8c5 	bl	800c934 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	2200      	movs	r2, #0
 800b7ae:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b7b0:	687b      	ldr	r3, [r7, #4]
 800b7b2:	2200      	movs	r2, #0
 800b7b4:	701a      	strb	r2, [r3, #0]
      break;
 800b7b6:	e11b      	b.n	800b9f0 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 800b7b8:	2101      	movs	r1, #1
 800b7ba:	6878      	ldr	r0, [r7, #4]
 800b7bc:	f000 fa79 	bl	800bcb2 <USBH_SetAddress>
 800b7c0:	4603      	mov	r3, r0
 800b7c2:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b7c4:	7bbb      	ldrb	r3, [r7, #14]
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d130      	bne.n	800b82c <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 800b7ca:	2002      	movs	r0, #2
 800b7cc:	f001 fbab 	bl	800cf26 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	2201      	movs	r2, #1
 800b7d4:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	2203      	movs	r2, #3
 800b7dc:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	7919      	ldrb	r1, [r3, #4]
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b7ee:	687a      	ldr	r2, [r7, #4]
 800b7f0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 800b7f2:	9202      	str	r2, [sp, #8]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	9201      	str	r2, [sp, #4]
 800b7f8:	9300      	str	r3, [sp, #0]
 800b7fa:	4603      	mov	r3, r0
 800b7fc:	2280      	movs	r2, #128	@ 0x80
 800b7fe:	6878      	ldr	r0, [r7, #4]
 800b800:	f001 f848 	bl	800c894 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	7959      	ldrb	r1, [r3, #5]
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800b814:	687a      	ldr	r2, [r7, #4]
 800b816:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 800b818:	9202      	str	r2, [sp, #8]
 800b81a:	2200      	movs	r2, #0
 800b81c:	9201      	str	r2, [sp, #4]
 800b81e:	9300      	str	r3, [sp, #0]
 800b820:	4603      	mov	r3, r0
 800b822:	2200      	movs	r2, #0
 800b824:	6878      	ldr	r0, [r7, #4]
 800b826:	f001 f835 	bl	800c894 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 800b82a:	e0e3      	b.n	800b9f4 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b82c:	7bbb      	ldrb	r3, [r7, #14]
 800b82e:	2b03      	cmp	r3, #3
 800b830:	f040 80e0 	bne.w	800b9f4 <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	220d      	movs	r2, #13
 800b838:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	2200      	movs	r2, #0
 800b83e:	705a      	strb	r2, [r3, #1]
      break;
 800b840:	e0d8      	b.n	800b9f4 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800b842:	2109      	movs	r1, #9
 800b844:	6878      	ldr	r0, [r7, #4]
 800b846:	f000 f9a1 	bl	800bb8c <USBH_Get_CfgDesc>
 800b84a:	4603      	mov	r3, r0
 800b84c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b84e:	7bbb      	ldrb	r3, [r7, #14]
 800b850:	2b00      	cmp	r3, #0
 800b852:	d103      	bne.n	800b85c <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2204      	movs	r2, #4
 800b858:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b85a:	e0cd      	b.n	800b9f8 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b85c:	7bbb      	ldrb	r3, [r7, #14]
 800b85e:	2b03      	cmp	r3, #3
 800b860:	f040 80ca 	bne.w	800b9f8 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800b864:	687b      	ldr	r3, [r7, #4]
 800b866:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b86a:	3301      	adds	r3, #1
 800b86c:	b2da      	uxtb	r2, r3
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b87a:	2b03      	cmp	r3, #3
 800b87c:	d903      	bls.n	800b886 <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	220d      	movs	r2, #13
 800b882:	701a      	strb	r2, [r3, #0]
      break;
 800b884:	e0b8      	b.n	800b9f8 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	795b      	ldrb	r3, [r3, #5]
 800b88a:	4619      	mov	r1, r3
 800b88c:	6878      	ldr	r0, [r7, #4]
 800b88e:	f001 f851 	bl	800c934 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	791b      	ldrb	r3, [r3, #4]
 800b896:	4619      	mov	r1, r3
 800b898:	6878      	ldr	r0, [r7, #4]
 800b89a:	f001 f84b 	bl	800c934 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	701a      	strb	r2, [r3, #0]
      break;
 800b8aa:	e0a5      	b.n	800b9f8 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 800b8b2:	4619      	mov	r1, r3
 800b8b4:	6878      	ldr	r0, [r7, #4]
 800b8b6:	f000 f969 	bl	800bb8c <USBH_Get_CfgDesc>
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 800b8be:	7bbb      	ldrb	r3, [r7, #14]
 800b8c0:	2b00      	cmp	r3, #0
 800b8c2:	d103      	bne.n	800b8cc <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	2205      	movs	r2, #5
 800b8c8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800b8ca:	e097      	b.n	800b9fc <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b8cc:	7bbb      	ldrb	r3, [r7, #14]
 800b8ce:	2b03      	cmp	r3, #3
 800b8d0:	f040 8094 	bne.w	800b9fc <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b8da:	3301      	adds	r3, #1
 800b8dc:	b2da      	uxtb	r2, r3
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800b8ea:	2b03      	cmp	r3, #3
 800b8ec:	d903      	bls.n	800b8f6 <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	220d      	movs	r2, #13
 800b8f2:	701a      	strb	r2, [r3, #0]
      break;
 800b8f4:	e082      	b.n	800b9fc <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	795b      	ldrb	r3, [r3, #5]
 800b8fa:	4619      	mov	r1, r3
 800b8fc:	6878      	ldr	r0, [r7, #4]
 800b8fe:	f001 f819 	bl	800c934 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	791b      	ldrb	r3, [r3, #4]
 800b906:	4619      	mov	r1, r3
 800b908:	6878      	ldr	r0, [r7, #4]
 800b90a:	f001 f813 	bl	800c934 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	2200      	movs	r2, #0
 800b912:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2200      	movs	r2, #0
 800b918:	701a      	strb	r2, [r3, #0]
      break;
 800b91a:	e06f      	b.n	800b9fc <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800b922:	2b00      	cmp	r3, #0
 800b924:	d019      	beq.n	800b95a <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800b932:	23ff      	movs	r3, #255	@ 0xff
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f000 f953 	bl	800bbe0 <USBH_Get_StringDesc>
 800b93a:	4603      	mov	r3, r0
 800b93c:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b93e:	7bbb      	ldrb	r3, [r7, #14]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d103      	bne.n	800b94c <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2206      	movs	r2, #6
 800b948:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b94a:	e059      	b.n	800ba00 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b94c:	7bbb      	ldrb	r3, [r7, #14]
 800b94e:	2b03      	cmp	r3, #3
 800b950:	d156      	bne.n	800ba00 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2206      	movs	r2, #6
 800b956:	705a      	strb	r2, [r3, #1]
      break;
 800b958:	e052      	b.n	800ba00 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800b95a:	687b      	ldr	r3, [r7, #4]
 800b95c:	2206      	movs	r2, #6
 800b95e:	705a      	strb	r2, [r3, #1]
      break;
 800b960:	e04e      	b.n	800ba00 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d019      	beq.n	800b9a0 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 800b978:	23ff      	movs	r3, #255	@ 0xff
 800b97a:	6878      	ldr	r0, [r7, #4]
 800b97c:	f000 f930 	bl	800bbe0 <USBH_Get_StringDesc>
 800b980:	4603      	mov	r3, r0
 800b982:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b984:	7bbb      	ldrb	r3, [r7, #14]
 800b986:	2b00      	cmp	r3, #0
 800b988:	d103      	bne.n	800b992 <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	2207      	movs	r2, #7
 800b98e:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 800b990:	e038      	b.n	800ba04 <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b992:	7bbb      	ldrb	r3, [r7, #14]
 800b994:	2b03      	cmp	r3, #3
 800b996:	d135      	bne.n	800ba04 <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2207      	movs	r2, #7
 800b99c:	705a      	strb	r2, [r3, #1]
      break;
 800b99e:	e031      	b.n	800ba04 <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	2207      	movs	r2, #7
 800b9a4:	705a      	strb	r2, [r3, #1]
      break;
 800b9a6:	e02d      	b.n	800ba04 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d017      	beq.n	800b9e2 <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 800b9b8:	687b      	ldr	r3, [r7, #4]
 800b9ba:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 800b9be:	23ff      	movs	r3, #255	@ 0xff
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	f000 f90d 	bl	800bbe0 <USBH_Get_StringDesc>
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800b9ca:	7bbb      	ldrb	r3, [r7, #14]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d102      	bne.n	800b9d6 <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800b9d4:	e018      	b.n	800ba08 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800b9d6:	7bbb      	ldrb	r3, [r7, #14]
 800b9d8:	2b03      	cmp	r3, #3
 800b9da:	d115      	bne.n	800ba08 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	73fb      	strb	r3, [r7, #15]
      break;
 800b9e0:	e012      	b.n	800ba08 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 800b9e2:	2300      	movs	r3, #0
 800b9e4:	73fb      	strb	r3, [r7, #15]
      break;
 800b9e6:	e00f      	b.n	800ba08 <USBH_HandleEnum+0x3b4>

    default:
      break;
 800b9e8:	bf00      	nop
 800b9ea:	e00e      	b.n	800ba0a <USBH_HandleEnum+0x3b6>
      break;
 800b9ec:	bf00      	nop
 800b9ee:	e00c      	b.n	800ba0a <USBH_HandleEnum+0x3b6>
      break;
 800b9f0:	bf00      	nop
 800b9f2:	e00a      	b.n	800ba0a <USBH_HandleEnum+0x3b6>
      break;
 800b9f4:	bf00      	nop
 800b9f6:	e008      	b.n	800ba0a <USBH_HandleEnum+0x3b6>
      break;
 800b9f8:	bf00      	nop
 800b9fa:	e006      	b.n	800ba0a <USBH_HandleEnum+0x3b6>
      break;
 800b9fc:	bf00      	nop
 800b9fe:	e004      	b.n	800ba0a <USBH_HandleEnum+0x3b6>
      break;
 800ba00:	bf00      	nop
 800ba02:	e002      	b.n	800ba0a <USBH_HandleEnum+0x3b6>
      break;
 800ba04:	bf00      	nop
 800ba06:	e000      	b.n	800ba0a <USBH_HandleEnum+0x3b6>
      break;
 800ba08:	bf00      	nop
  }
  return Status;
 800ba0a:	7bfb      	ldrb	r3, [r7, #15]
}
 800ba0c:	4618      	mov	r0, r3
 800ba0e:	3710      	adds	r7, #16
 800ba10:	46bd      	mov	sp, r7
 800ba12:	bd80      	pop	{r7, pc}

0800ba14 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800ba14:	b480      	push	{r7}
 800ba16:	b083      	sub	sp, #12
 800ba18:	af00      	add	r7, sp, #0
 800ba1a:	6078      	str	r0, [r7, #4]
 800ba1c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	683a      	ldr	r2, [r7, #0]
 800ba22:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800ba26:	bf00      	nop
 800ba28:	370c      	adds	r7, #12
 800ba2a:	46bd      	mov	sp, r7
 800ba2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba30:	4770      	bx	lr

0800ba32 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800ba32:	b580      	push	{r7, lr}
 800ba34:	b082      	sub	sp, #8
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800ba40:	1c5a      	adds	r2, r3, #1
 800ba42:	687b      	ldr	r3, [r7, #4]
 800ba44:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 800ba48:	6878      	ldr	r0, [r7, #4]
 800ba4a:	f000 f804 	bl	800ba56 <USBH_HandleSof>
}
 800ba4e:	bf00      	nop
 800ba50:	3708      	adds	r7, #8
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}

0800ba56 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800ba56:	b580      	push	{r7, lr}
 800ba58:	b082      	sub	sp, #8
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	781b      	ldrb	r3, [r3, #0]
 800ba62:	b2db      	uxtb	r3, r3
 800ba64:	2b0b      	cmp	r3, #11
 800ba66:	d10a      	bne.n	800ba7e <USBH_HandleSof+0x28>
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d005      	beq.n	800ba7e <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800ba78:	699b      	ldr	r3, [r3, #24]
 800ba7a:	6878      	ldr	r0, [r7, #4]
 800ba7c:	4798      	blx	r3
  }
}
 800ba7e:	bf00      	nop
 800ba80:	3708      	adds	r7, #8
 800ba82:	46bd      	mov	sp, r7
 800ba84:	bd80      	pop	{r7, pc}

0800ba86 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800ba86:	b480      	push	{r7}
 800ba88:	b083      	sub	sp, #12
 800ba8a:	af00      	add	r7, sp, #0
 800ba8c:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	2201      	movs	r2, #1
 800ba92:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800ba96:	bf00      	nop
}
 800ba98:	370c      	adds	r7, #12
 800ba9a:	46bd      	mov	sp, r7
 800ba9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa0:	4770      	bx	lr

0800baa2 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800baa2:	b480      	push	{r7}
 800baa4:	b083      	sub	sp, #12
 800baa6:	af00      	add	r7, sp, #0
 800baa8:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	2200      	movs	r2, #0
 800baae:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800bab2:	bf00      	nop
}
 800bab4:	370c      	adds	r7, #12
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr

0800babe <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 800babe:	b480      	push	{r7}
 800bac0:	b083      	sub	sp, #12
 800bac2:	af00      	add	r7, sp, #0
 800bac4:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	2201      	movs	r2, #1
 800baca:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800bace:	687b      	ldr	r3, [r7, #4]
 800bad0:	2200      	movs	r2, #0
 800bad2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	2200      	movs	r2, #0
 800bada:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800bade:	2300      	movs	r3, #0
}
 800bae0:	4618      	mov	r0, r3
 800bae2:	370c      	adds	r7, #12
 800bae4:	46bd      	mov	sp, r7
 800bae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baea:	4770      	bx	lr

0800baec <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 800baec:	b580      	push	{r7, lr}
 800baee:	b082      	sub	sp, #8
 800baf0:	af00      	add	r7, sp, #0
 800baf2:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800baf4:	687b      	ldr	r3, [r7, #4]
 800baf6:	2201      	movs	r2, #1
 800baf8:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	2200      	movs	r2, #0
 800bb00:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800bb04:	687b      	ldr	r3, [r7, #4]
 800bb06:	2200      	movs	r2, #0
 800bb08:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 800bb0c:	6878      	ldr	r0, [r7, #4]
 800bb0e:	f001 f8be 	bl	800cc8e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	791b      	ldrb	r3, [r3, #4]
 800bb16:	4619      	mov	r1, r3
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f000 ff0b 	bl	800c934 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	795b      	ldrb	r3, [r3, #5]
 800bb22:	4619      	mov	r1, r3
 800bb24:	6878      	ldr	r0, [r7, #4]
 800bb26:	f000 ff05 	bl	800c934 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 800bb2a:	2300      	movs	r3, #0
}
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	3708      	adds	r7, #8
 800bb30:	46bd      	mov	sp, r7
 800bb32:	bd80      	pop	{r7, pc}

0800bb34 <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b086      	sub	sp, #24
 800bb38:	af02      	add	r7, sp, #8
 800bb3a:	6078      	str	r0, [r7, #4]
 800bb3c:	460b      	mov	r3, r1
 800bb3e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 800bb40:	887b      	ldrh	r3, [r7, #2]
 800bb42:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bb46:	d901      	bls.n	800bb4c <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800bb48:	2303      	movs	r3, #3
 800bb4a:	e01b      	b.n	800bb84 <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800bb52:	887b      	ldrh	r3, [r7, #2]
 800bb54:	9300      	str	r3, [sp, #0]
 800bb56:	4613      	mov	r3, r2
 800bb58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800bb5c:	2100      	movs	r1, #0
 800bb5e:	6878      	ldr	r0, [r7, #4]
 800bb60:	f000 f872 	bl	800bc48 <USBH_GetDescriptor>
 800bb64:	4603      	mov	r3, r0
 800bb66:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 800bb68:	7bfb      	ldrb	r3, [r7, #15]
 800bb6a:	2b00      	cmp	r3, #0
 800bb6c:	d109      	bne.n	800bb82 <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800bb74:	887a      	ldrh	r2, [r7, #2]
 800bb76:	4619      	mov	r1, r3
 800bb78:	6878      	ldr	r0, [r7, #4]
 800bb7a:	f000 f929 	bl	800bdd0 <USBH_ParseDevDesc>
 800bb7e:	4603      	mov	r3, r0
 800bb80:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bb82:	7bfb      	ldrb	r3, [r7, #15]
}
 800bb84:	4618      	mov	r0, r3
 800bb86:	3710      	adds	r7, #16
 800bb88:	46bd      	mov	sp, r7
 800bb8a:	bd80      	pop	{r7, pc}

0800bb8c <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b086      	sub	sp, #24
 800bb90:	af02      	add	r7, sp, #8
 800bb92:	6078      	str	r0, [r7, #4]
 800bb94:	460b      	mov	r3, r1
 800bb96:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	331c      	adds	r3, #28
 800bb9c:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 800bb9e:	887b      	ldrh	r3, [r7, #2]
 800bba0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bba4:	d901      	bls.n	800bbaa <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800bba6:	2303      	movs	r3, #3
 800bba8:	e016      	b.n	800bbd8 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 800bbaa:	887b      	ldrh	r3, [r7, #2]
 800bbac:	9300      	str	r3, [sp, #0]
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bbb4:	2100      	movs	r1, #0
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f000 f846 	bl	800bc48 <USBH_GetDescriptor>
 800bbbc:	4603      	mov	r3, r0
 800bbbe:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 800bbc0:	7bfb      	ldrb	r3, [r7, #15]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d107      	bne.n	800bbd6 <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800bbc6:	887b      	ldrh	r3, [r7, #2]
 800bbc8:	461a      	mov	r2, r3
 800bbca:	68b9      	ldr	r1, [r7, #8]
 800bbcc:	6878      	ldr	r0, [r7, #4]
 800bbce:	f000 f9af 	bl	800bf30 <USBH_ParseCfgDesc>
 800bbd2:	4603      	mov	r3, r0
 800bbd4:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800bbd6:	7bfb      	ldrb	r3, [r7, #15]
}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	3710      	adds	r7, #16
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd80      	pop	{r7, pc}

0800bbe0 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 800bbe0:	b580      	push	{r7, lr}
 800bbe2:	b088      	sub	sp, #32
 800bbe4:	af02      	add	r7, sp, #8
 800bbe6:	60f8      	str	r0, [r7, #12]
 800bbe8:	607a      	str	r2, [r7, #4]
 800bbea:	461a      	mov	r2, r3
 800bbec:	460b      	mov	r3, r1
 800bbee:	72fb      	strb	r3, [r7, #11]
 800bbf0:	4613      	mov	r3, r2
 800bbf2:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800bbf4:	893b      	ldrh	r3, [r7, #8]
 800bbf6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bbfa:	d802      	bhi.n	800bc02 <USBH_Get_StringDesc+0x22>
 800bbfc:	687b      	ldr	r3, [r7, #4]
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d101      	bne.n	800bc06 <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800bc02:	2303      	movs	r3, #3
 800bc04:	e01c      	b.n	800bc40 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800bc06:	7afb      	ldrb	r3, [r7, #11]
 800bc08:	b29b      	uxth	r3, r3
 800bc0a:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 800bc0e:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800bc16:	893b      	ldrh	r3, [r7, #8]
 800bc18:	9300      	str	r3, [sp, #0]
 800bc1a:	460b      	mov	r3, r1
 800bc1c:	2100      	movs	r1, #0
 800bc1e:	68f8      	ldr	r0, [r7, #12]
 800bc20:	f000 f812 	bl	800bc48 <USBH_GetDescriptor>
 800bc24:	4603      	mov	r3, r0
 800bc26:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800bc28:	7dfb      	ldrb	r3, [r7, #23]
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d107      	bne.n	800bc3e <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 800bc2e:	68fb      	ldr	r3, [r7, #12]
 800bc30:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800bc34:	893a      	ldrh	r2, [r7, #8]
 800bc36:	6879      	ldr	r1, [r7, #4]
 800bc38:	4618      	mov	r0, r3
 800bc3a:	f000 fb8d 	bl	800c358 <USBH_ParseStringDesc>
  }

  return status;
 800bc3e:	7dfb      	ldrb	r3, [r7, #23]
}
 800bc40:	4618      	mov	r0, r3
 800bc42:	3718      	adds	r7, #24
 800bc44:	46bd      	mov	sp, r7
 800bc46:	bd80      	pop	{r7, pc}

0800bc48 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 800bc48:	b580      	push	{r7, lr}
 800bc4a:	b084      	sub	sp, #16
 800bc4c:	af00      	add	r7, sp, #0
 800bc4e:	60f8      	str	r0, [r7, #12]
 800bc50:	607b      	str	r3, [r7, #4]
 800bc52:	460b      	mov	r3, r1
 800bc54:	72fb      	strb	r3, [r7, #11]
 800bc56:	4613      	mov	r3, r2
 800bc58:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800bc5a:	68fb      	ldr	r3, [r7, #12]
 800bc5c:	789b      	ldrb	r3, [r3, #2]
 800bc5e:	2b01      	cmp	r3, #1
 800bc60:	d11c      	bne.n	800bc9c <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800bc62:	7afb      	ldrb	r3, [r7, #11]
 800bc64:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800bc68:	b2da      	uxtb	r2, r3
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 800bc6e:	68fb      	ldr	r3, [r7, #12]
 800bc70:	2206      	movs	r2, #6
 800bc72:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800bc74:	68fb      	ldr	r3, [r7, #12]
 800bc76:	893a      	ldrh	r2, [r7, #8]
 800bc78:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800bc7a:	893b      	ldrh	r3, [r7, #8]
 800bc7c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bc80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800bc84:	d104      	bne.n	800bc90 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800bc86:	68fb      	ldr	r3, [r7, #12]
 800bc88:	f240 4209 	movw	r2, #1033	@ 0x409
 800bc8c:	829a      	strh	r2, [r3, #20]
 800bc8e:	e002      	b.n	800bc96 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 800bc90:	68fb      	ldr	r3, [r7, #12]
 800bc92:	2200      	movs	r2, #0
 800bc94:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800bc96:	68fb      	ldr	r3, [r7, #12]
 800bc98:	8b3a      	ldrh	r2, [r7, #24]
 800bc9a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 800bc9c:	8b3b      	ldrh	r3, [r7, #24]
 800bc9e:	461a      	mov	r2, r3
 800bca0:	6879      	ldr	r1, [r7, #4]
 800bca2:	68f8      	ldr	r0, [r7, #12]
 800bca4:	f000 fba5 	bl	800c3f2 <USBH_CtlReq>
 800bca8:	4603      	mov	r3, r0
}
 800bcaa:	4618      	mov	r0, r3
 800bcac:	3710      	adds	r7, #16
 800bcae:	46bd      	mov	sp, r7
 800bcb0:	bd80      	pop	{r7, pc}

0800bcb2 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800bcb2:	b580      	push	{r7, lr}
 800bcb4:	b082      	sub	sp, #8
 800bcb6:	af00      	add	r7, sp, #0
 800bcb8:	6078      	str	r0, [r7, #4]
 800bcba:	460b      	mov	r3, r1
 800bcbc:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	789b      	ldrb	r3, [r3, #2]
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	d10f      	bne.n	800bce6 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2205      	movs	r2, #5
 800bcd0:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800bcd2:	78fb      	ldrb	r3, [r7, #3]
 800bcd4:	b29a      	uxth	r2, r3
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bce0:	687b      	ldr	r3, [r7, #4]
 800bce2:	2200      	movs	r2, #0
 800bce4:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bce6:	2200      	movs	r2, #0
 800bce8:	2100      	movs	r1, #0
 800bcea:	6878      	ldr	r0, [r7, #4]
 800bcec:	f000 fb81 	bl	800c3f2 <USBH_CtlReq>
 800bcf0:	4603      	mov	r3, r0
}
 800bcf2:	4618      	mov	r0, r3
 800bcf4:	3708      	adds	r7, #8
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	bd80      	pop	{r7, pc}

0800bcfa <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800bcfa:	b580      	push	{r7, lr}
 800bcfc:	b082      	sub	sp, #8
 800bcfe:	af00      	add	r7, sp, #0
 800bd00:	6078      	str	r0, [r7, #4]
 800bd02:	460b      	mov	r3, r1
 800bd04:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	789b      	ldrb	r3, [r3, #2]
 800bd0a:	2b01      	cmp	r3, #1
 800bd0c:	d10e      	bne.n	800bd2c <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2200      	movs	r2, #0
 800bd12:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2209      	movs	r2, #9
 800bd18:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	887a      	ldrh	r2, [r7, #2]
 800bd1e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	2200      	movs	r2, #0
 800bd2a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bd2c:	2200      	movs	r2, #0
 800bd2e:	2100      	movs	r1, #0
 800bd30:	6878      	ldr	r0, [r7, #4]
 800bd32:	f000 fb5e 	bl	800c3f2 <USBH_CtlReq>
 800bd36:	4603      	mov	r3, r0
}
 800bd38:	4618      	mov	r0, r3
 800bd3a:	3708      	adds	r7, #8
 800bd3c:	46bd      	mov	sp, r7
 800bd3e:	bd80      	pop	{r7, pc}

0800bd40 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 800bd40:	b580      	push	{r7, lr}
 800bd42:	b082      	sub	sp, #8
 800bd44:	af00      	add	r7, sp, #0
 800bd46:	6078      	str	r0, [r7, #4]
 800bd48:	460b      	mov	r3, r1
 800bd4a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	789b      	ldrb	r3, [r3, #2]
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d10f      	bne.n	800bd74 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2200      	movs	r2, #0
 800bd58:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2203      	movs	r2, #3
 800bd5e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 800bd60:	78fb      	ldrb	r3, [r7, #3]
 800bd62:	b29a      	uxth	r2, r3
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	2200      	movs	r2, #0
 800bd72:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bd74:	2200      	movs	r2, #0
 800bd76:	2100      	movs	r1, #0
 800bd78:	6878      	ldr	r0, [r7, #4]
 800bd7a:	f000 fb3a 	bl	800c3f2 <USBH_CtlReq>
 800bd7e:	4603      	mov	r3, r0
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3708      	adds	r7, #8
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
 800bd90:	460b      	mov	r3, r1
 800bd92:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	789b      	ldrb	r3, [r3, #2]
 800bd98:	2b01      	cmp	r3, #1
 800bd9a:	d10f      	bne.n	800bdbc <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	2202      	movs	r2, #2
 800bda0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	2201      	movs	r2, #1
 800bda6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	2200      	movs	r2, #0
 800bdac:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 800bdae:	78fb      	ldrb	r3, [r7, #3]
 800bdb0:	b29a      	uxth	r2, r3
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	2200      	movs	r2, #0
 800bdba:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800bdbc:	2200      	movs	r2, #0
 800bdbe:	2100      	movs	r1, #0
 800bdc0:	6878      	ldr	r0, [r7, #4]
 800bdc2:	f000 fb16 	bl	800c3f2 <USBH_CtlReq>
 800bdc6:	4603      	mov	r3, r0
}
 800bdc8:	4618      	mov	r0, r3
 800bdca:	3708      	adds	r7, #8
 800bdcc:	46bd      	mov	sp, r7
 800bdce:	bd80      	pop	{r7, pc}

0800bdd0 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800bdd0:	b480      	push	{r7}
 800bdd2:	b087      	sub	sp, #28
 800bdd4:	af00      	add	r7, sp, #0
 800bdd6:	60f8      	str	r0, [r7, #12]
 800bdd8:	60b9      	str	r1, [r7, #8]
 800bdda:	4613      	mov	r3, r2
 800bddc:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 800bdde:	68fb      	ldr	r3, [r7, #12]
 800bde0:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800bde4:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800bde6:	2300      	movs	r3, #0
 800bde8:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 800bdea:	68bb      	ldr	r3, [r7, #8]
 800bdec:	2b00      	cmp	r3, #0
 800bdee:	d101      	bne.n	800bdf4 <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 800bdf0:	2302      	movs	r3, #2
 800bdf2:	e094      	b.n	800bf1e <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800bdf4:	68bb      	ldr	r3, [r7, #8]
 800bdf6:	781a      	ldrb	r2, [r3, #0]
 800bdf8:	693b      	ldr	r3, [r7, #16]
 800bdfa:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 800bdfc:	68bb      	ldr	r3, [r7, #8]
 800bdfe:	785a      	ldrb	r2, [r3, #1]
 800be00:	693b      	ldr	r3, [r7, #16]
 800be02:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	3302      	adds	r3, #2
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	461a      	mov	r2, r3
 800be0c:	68bb      	ldr	r3, [r7, #8]
 800be0e:	3303      	adds	r3, #3
 800be10:	781b      	ldrb	r3, [r3, #0]
 800be12:	021b      	lsls	r3, r3, #8
 800be14:	b29b      	uxth	r3, r3
 800be16:	4313      	orrs	r3, r2
 800be18:	b29a      	uxth	r2, r3
 800be1a:	693b      	ldr	r3, [r7, #16]
 800be1c:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 800be1e:	68bb      	ldr	r3, [r7, #8]
 800be20:	791a      	ldrb	r2, [r3, #4]
 800be22:	693b      	ldr	r3, [r7, #16]
 800be24:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800be26:	68bb      	ldr	r3, [r7, #8]
 800be28:	795a      	ldrb	r2, [r3, #5]
 800be2a:	693b      	ldr	r3, [r7, #16]
 800be2c:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	799a      	ldrb	r2, [r3, #6]
 800be32:	693b      	ldr	r3, [r7, #16]
 800be34:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800be36:	68bb      	ldr	r3, [r7, #8]
 800be38:	79da      	ldrb	r2, [r3, #7]
 800be3a:	693b      	ldr	r3, [r7, #16]
 800be3c:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800be3e:	68fb      	ldr	r3, [r7, #12]
 800be40:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800be44:	2b00      	cmp	r3, #0
 800be46:	d004      	beq.n	800be52 <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 800be4e:	2b01      	cmp	r3, #1
 800be50:	d11b      	bne.n	800be8a <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800be52:	693b      	ldr	r3, [r7, #16]
 800be54:	79db      	ldrb	r3, [r3, #7]
 800be56:	2b20      	cmp	r3, #32
 800be58:	dc0f      	bgt.n	800be7a <USBH_ParseDevDesc+0xaa>
 800be5a:	2b08      	cmp	r3, #8
 800be5c:	db0f      	blt.n	800be7e <USBH_ParseDevDesc+0xae>
 800be5e:	3b08      	subs	r3, #8
 800be60:	4a32      	ldr	r2, [pc, #200]	@ (800bf2c <USBH_ParseDevDesc+0x15c>)
 800be62:	fa22 f303 	lsr.w	r3, r2, r3
 800be66:	f003 0301 	and.w	r3, r3, #1
 800be6a:	2b00      	cmp	r3, #0
 800be6c:	bf14      	ite	ne
 800be6e:	2301      	movne	r3, #1
 800be70:	2300      	moveq	r3, #0
 800be72:	b2db      	uxtb	r3, r3
 800be74:	2b00      	cmp	r3, #0
 800be76:	d106      	bne.n	800be86 <USBH_ParseDevDesc+0xb6>
 800be78:	e001      	b.n	800be7e <USBH_ParseDevDesc+0xae>
 800be7a:	2b40      	cmp	r3, #64	@ 0x40
 800be7c:	d003      	beq.n	800be86 <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 800be7e:	693b      	ldr	r3, [r7, #16]
 800be80:	2208      	movs	r2, #8
 800be82:	71da      	strb	r2, [r3, #7]
        break;
 800be84:	e000      	b.n	800be88 <USBH_ParseDevDesc+0xb8>
        break;
 800be86:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 800be88:	e00e      	b.n	800bea8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800be8a:	68fb      	ldr	r3, [r7, #12]
 800be8c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800be90:	2b02      	cmp	r3, #2
 800be92:	d107      	bne.n	800bea4 <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800be94:	693b      	ldr	r3, [r7, #16]
 800be96:	79db      	ldrb	r3, [r3, #7]
 800be98:	2b08      	cmp	r3, #8
 800be9a:	d005      	beq.n	800bea8 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 800be9c:	693b      	ldr	r3, [r7, #16]
 800be9e:	2208      	movs	r2, #8
 800bea0:	71da      	strb	r2, [r3, #7]
 800bea2:	e001      	b.n	800bea8 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800bea4:	2303      	movs	r3, #3
 800bea6:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 800bea8:	88fb      	ldrh	r3, [r7, #6]
 800beaa:	2b08      	cmp	r3, #8
 800beac:	d936      	bls.n	800bf1c <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 800beae:	68bb      	ldr	r3, [r7, #8]
 800beb0:	3308      	adds	r3, #8
 800beb2:	781b      	ldrb	r3, [r3, #0]
 800beb4:	461a      	mov	r2, r3
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	3309      	adds	r3, #9
 800beba:	781b      	ldrb	r3, [r3, #0]
 800bebc:	021b      	lsls	r3, r3, #8
 800bebe:	b29b      	uxth	r3, r3
 800bec0:	4313      	orrs	r3, r2
 800bec2:	b29a      	uxth	r2, r3
 800bec4:	693b      	ldr	r3, [r7, #16]
 800bec6:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 800bec8:	68bb      	ldr	r3, [r7, #8]
 800beca:	330a      	adds	r3, #10
 800becc:	781b      	ldrb	r3, [r3, #0]
 800bece:	461a      	mov	r2, r3
 800bed0:	68bb      	ldr	r3, [r7, #8]
 800bed2:	330b      	adds	r3, #11
 800bed4:	781b      	ldrb	r3, [r3, #0]
 800bed6:	021b      	lsls	r3, r3, #8
 800bed8:	b29b      	uxth	r3, r3
 800beda:	4313      	orrs	r3, r2
 800bedc:	b29a      	uxth	r2, r3
 800bede:	693b      	ldr	r3, [r7, #16]
 800bee0:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800bee2:	68bb      	ldr	r3, [r7, #8]
 800bee4:	330c      	adds	r3, #12
 800bee6:	781b      	ldrb	r3, [r3, #0]
 800bee8:	461a      	mov	r2, r3
 800beea:	68bb      	ldr	r3, [r7, #8]
 800beec:	330d      	adds	r3, #13
 800beee:	781b      	ldrb	r3, [r3, #0]
 800bef0:	021b      	lsls	r3, r3, #8
 800bef2:	b29b      	uxth	r3, r3
 800bef4:	4313      	orrs	r3, r2
 800bef6:	b29a      	uxth	r2, r3
 800bef8:	693b      	ldr	r3, [r7, #16]
 800befa:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 800befc:	68bb      	ldr	r3, [r7, #8]
 800befe:	7b9a      	ldrb	r2, [r3, #14]
 800bf00:	693b      	ldr	r3, [r7, #16]
 800bf02:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800bf04:	68bb      	ldr	r3, [r7, #8]
 800bf06:	7bda      	ldrb	r2, [r3, #15]
 800bf08:	693b      	ldr	r3, [r7, #16]
 800bf0a:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 800bf0c:	68bb      	ldr	r3, [r7, #8]
 800bf0e:	7c1a      	ldrb	r2, [r3, #16]
 800bf10:	693b      	ldr	r3, [r7, #16]
 800bf12:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800bf14:	68bb      	ldr	r3, [r7, #8]
 800bf16:	7c5a      	ldrb	r2, [r3, #17]
 800bf18:	693b      	ldr	r3, [r7, #16]
 800bf1a:	745a      	strb	r2, [r3, #17]
  }

  return status;
 800bf1c:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf1e:	4618      	mov	r0, r3
 800bf20:	371c      	adds	r7, #28
 800bf22:	46bd      	mov	sp, r7
 800bf24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf28:	4770      	bx	lr
 800bf2a:	bf00      	nop
 800bf2c:	01000101 	.word	0x01000101

0800bf30 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b08c      	sub	sp, #48	@ 0x30
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	60f8      	str	r0, [r7, #12]
 800bf38:	60b9      	str	r1, [r7, #8]
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800bf44:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800bf46:	2300      	movs	r3, #0
 800bf48:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 800bf4c:	2300      	movs	r3, #0
 800bf4e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800bf52:	2300      	movs	r3, #0
 800bf54:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 800bf58:	68bb      	ldr	r3, [r7, #8]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d101      	bne.n	800bf62 <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 800bf5e:	2302      	movs	r3, #2
 800bf60:	e0da      	b.n	800c118 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800bf62:	68bb      	ldr	r3, [r7, #8]
 800bf64:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 800bf66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	2b09      	cmp	r3, #9
 800bf6c:	d002      	beq.n	800bf74 <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 800bf6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf70:	2209      	movs	r2, #9
 800bf72:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800bf74:	68bb      	ldr	r3, [r7, #8]
 800bf76:	781a      	ldrb	r2, [r3, #0]
 800bf78:	6a3b      	ldr	r3, [r7, #32]
 800bf7a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 800bf7c:	68bb      	ldr	r3, [r7, #8]
 800bf7e:	785a      	ldrb	r2, [r3, #1]
 800bf80:	6a3b      	ldr	r3, [r7, #32]
 800bf82:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800bf84:	68bb      	ldr	r3, [r7, #8]
 800bf86:	3302      	adds	r3, #2
 800bf88:	781b      	ldrb	r3, [r3, #0]
 800bf8a:	461a      	mov	r2, r3
 800bf8c:	68bb      	ldr	r3, [r7, #8]
 800bf8e:	3303      	adds	r3, #3
 800bf90:	781b      	ldrb	r3, [r3, #0]
 800bf92:	021b      	lsls	r3, r3, #8
 800bf94:	b29b      	uxth	r3, r3
 800bf96:	4313      	orrs	r3, r2
 800bf98:	b29b      	uxth	r3, r3
 800bf9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bf9e:	bf28      	it	cs
 800bfa0:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800bfa4:	b29a      	uxth	r2, r3
 800bfa6:	6a3b      	ldr	r3, [r7, #32]
 800bfa8:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 800bfaa:	68bb      	ldr	r3, [r7, #8]
 800bfac:	791a      	ldrb	r2, [r3, #4]
 800bfae:	6a3b      	ldr	r3, [r7, #32]
 800bfb0:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800bfb2:	68bb      	ldr	r3, [r7, #8]
 800bfb4:	795a      	ldrb	r2, [r3, #5]
 800bfb6:	6a3b      	ldr	r3, [r7, #32]
 800bfb8:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 800bfba:	68bb      	ldr	r3, [r7, #8]
 800bfbc:	799a      	ldrb	r2, [r3, #6]
 800bfbe:	6a3b      	ldr	r3, [r7, #32]
 800bfc0:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800bfc2:	68bb      	ldr	r3, [r7, #8]
 800bfc4:	79da      	ldrb	r2, [r3, #7]
 800bfc6:	6a3b      	ldr	r3, [r7, #32]
 800bfc8:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 800bfca:	68bb      	ldr	r3, [r7, #8]
 800bfcc:	7a1a      	ldrb	r2, [r3, #8]
 800bfce:	6a3b      	ldr	r3, [r7, #32]
 800bfd0:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800bfd2:	88fb      	ldrh	r3, [r7, #6]
 800bfd4:	2b09      	cmp	r3, #9
 800bfd6:	f240 809d 	bls.w	800c114 <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 800bfda:	2309      	movs	r3, #9
 800bfdc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 800bfde:	2300      	movs	r3, #0
 800bfe0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800bfe2:	e081      	b.n	800c0e8 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800bfe4:	f107 0316 	add.w	r3, r7, #22
 800bfe8:	4619      	mov	r1, r3
 800bfea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bfec:	f000 f9e7 	bl	800c3be <USBH_GetNextDesc>
 800bff0:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800bff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bff4:	785b      	ldrb	r3, [r3, #1]
 800bff6:	2b04      	cmp	r3, #4
 800bff8:	d176      	bne.n	800c0e8 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 800bffa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bffc:	781b      	ldrb	r3, [r3, #0]
 800bffe:	2b09      	cmp	r3, #9
 800c000:	d002      	beq.n	800c008 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800c002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c004:	2209      	movs	r2, #9
 800c006:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 800c008:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c00c:	221a      	movs	r2, #26
 800c00e:	fb02 f303 	mul.w	r3, r2, r3
 800c012:	3308      	adds	r3, #8
 800c014:	6a3a      	ldr	r2, [r7, #32]
 800c016:	4413      	add	r3, r2
 800c018:	3302      	adds	r3, #2
 800c01a:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 800c01c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c01e:	69f8      	ldr	r0, [r7, #28]
 800c020:	f000 f87e 	bl	800c120 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800c024:	2300      	movs	r3, #0
 800c026:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800c02a:	2300      	movs	r3, #0
 800c02c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c02e:	e043      	b.n	800c0b8 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800c030:	f107 0316 	add.w	r3, r7, #22
 800c034:	4619      	mov	r1, r3
 800c036:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c038:	f000 f9c1 	bl	800c3be <USBH_GetNextDesc>
 800c03c:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800c03e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c040:	785b      	ldrb	r3, [r3, #1]
 800c042:	2b05      	cmp	r3, #5
 800c044:	d138      	bne.n	800c0b8 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 800c046:	69fb      	ldr	r3, [r7, #28]
 800c048:	795b      	ldrb	r3, [r3, #5]
 800c04a:	2b01      	cmp	r3, #1
 800c04c:	d113      	bne.n	800c076 <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c04e:	69fb      	ldr	r3, [r7, #28]
 800c050:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 800c052:	2b02      	cmp	r3, #2
 800c054:	d003      	beq.n	800c05e <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 800c056:	69fb      	ldr	r3, [r7, #28]
 800c058:	799b      	ldrb	r3, [r3, #6]
 800c05a:	2b03      	cmp	r3, #3
 800c05c:	d10b      	bne.n	800c076 <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c05e:	69fb      	ldr	r3, [r7, #28]
 800c060:	79db      	ldrb	r3, [r3, #7]
 800c062:	2b00      	cmp	r3, #0
 800c064:	d10b      	bne.n	800c07e <USBH_ParseCfgDesc+0x14e>
 800c066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c068:	781b      	ldrb	r3, [r3, #0]
 800c06a:	2b09      	cmp	r3, #9
 800c06c:	d007      	beq.n	800c07e <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 800c06e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c070:	2209      	movs	r2, #9
 800c072:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c074:	e003      	b.n	800c07e <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 800c076:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c078:	2207      	movs	r2, #7
 800c07a:	701a      	strb	r2, [r3, #0]
 800c07c:	e000      	b.n	800c080 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800c07e:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 800c080:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c084:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c088:	3201      	adds	r2, #1
 800c08a:	00d2      	lsls	r2, r2, #3
 800c08c:	211a      	movs	r1, #26
 800c08e:	fb01 f303 	mul.w	r3, r1, r3
 800c092:	4413      	add	r3, r2
 800c094:	3308      	adds	r3, #8
 800c096:	6a3a      	ldr	r2, [r7, #32]
 800c098:	4413      	add	r3, r2
 800c09a:	3304      	adds	r3, #4
 800c09c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800c09e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800c0a0:	69b9      	ldr	r1, [r7, #24]
 800c0a2:	68f8      	ldr	r0, [r7, #12]
 800c0a4:	f000 f870 	bl	800c188 <USBH_ParseEPDesc>
 800c0a8:	4603      	mov	r3, r0
 800c0aa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 800c0ae:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800c0b2:	3301      	adds	r3, #1
 800c0b4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800c0b8:	69fb      	ldr	r3, [r7, #28]
 800c0ba:	791b      	ldrb	r3, [r3, #4]
 800c0bc:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c0c0:	429a      	cmp	r2, r3
 800c0c2:	d204      	bcs.n	800c0ce <USBH_ParseCfgDesc+0x19e>
 800c0c4:	6a3b      	ldr	r3, [r7, #32]
 800c0c6:	885a      	ldrh	r2, [r3, #2]
 800c0c8:	8afb      	ldrh	r3, [r7, #22]
 800c0ca:	429a      	cmp	r2, r3
 800c0cc:	d8b0      	bhi.n	800c030 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 800c0ce:	69fb      	ldr	r3, [r7, #28]
 800c0d0:	791b      	ldrb	r3, [r3, #4]
 800c0d2:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800c0d6:	429a      	cmp	r2, r3
 800c0d8:	d201      	bcs.n	800c0de <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 800c0da:	2303      	movs	r3, #3
 800c0dc:	e01c      	b.n	800c118 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 800c0de:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c0e2:	3301      	adds	r3, #1
 800c0e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800c0e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800c0ec:	2b01      	cmp	r3, #1
 800c0ee:	d805      	bhi.n	800c0fc <USBH_ParseCfgDesc+0x1cc>
 800c0f0:	6a3b      	ldr	r3, [r7, #32]
 800c0f2:	885a      	ldrh	r2, [r3, #2]
 800c0f4:	8afb      	ldrh	r3, [r7, #22]
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	f63f af74 	bhi.w	800bfe4 <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 800c0fc:	6a3b      	ldr	r3, [r7, #32]
 800c0fe:	791b      	ldrb	r3, [r3, #4]
 800c100:	2b02      	cmp	r3, #2
 800c102:	bf28      	it	cs
 800c104:	2302      	movcs	r3, #2
 800c106:	b2db      	uxtb	r3, r3
 800c108:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 800c10c:	429a      	cmp	r2, r3
 800c10e:	d201      	bcs.n	800c114 <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 800c110:	2303      	movs	r3, #3
 800c112:	e001      	b.n	800c118 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800c114:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800c118:	4618      	mov	r0, r3
 800c11a:	3730      	adds	r7, #48	@ 0x30
 800c11c:	46bd      	mov	sp, r7
 800c11e:	bd80      	pop	{r7, pc}

0800c120 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 800c120:	b480      	push	{r7}
 800c122:	b083      	sub	sp, #12
 800c124:	af00      	add	r7, sp, #0
 800c126:	6078      	str	r0, [r7, #4]
 800c128:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 800c12a:	683b      	ldr	r3, [r7, #0]
 800c12c:	781a      	ldrb	r2, [r3, #0]
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	785a      	ldrb	r2, [r3, #1]
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	789a      	ldrb	r2, [r3, #2]
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 800c142:	683b      	ldr	r3, [r7, #0]
 800c144:	78da      	ldrb	r2, [r3, #3]
 800c146:	687b      	ldr	r3, [r7, #4]
 800c148:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 800c14a:	683b      	ldr	r3, [r7, #0]
 800c14c:	3304      	adds	r3, #4
 800c14e:	781b      	ldrb	r3, [r3, #0]
 800c150:	2b02      	cmp	r3, #2
 800c152:	bf28      	it	cs
 800c154:	2302      	movcs	r3, #2
 800c156:	b2da      	uxtb	r2, r3
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 800c15c:	683b      	ldr	r3, [r7, #0]
 800c15e:	795a      	ldrb	r2, [r3, #5]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	799a      	ldrb	r2, [r3, #6]
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 800c16c:	683b      	ldr	r3, [r7, #0]
 800c16e:	79da      	ldrb	r2, [r3, #7]
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	7a1a      	ldrb	r2, [r3, #8]
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	721a      	strb	r2, [r3, #8]
}
 800c17c:	bf00      	nop
 800c17e:	370c      	adds	r7, #12
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr

0800c188 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 800c188:	b480      	push	{r7}
 800c18a:	b087      	sub	sp, #28
 800c18c:	af00      	add	r7, sp, #0
 800c18e:	60f8      	str	r0, [r7, #12]
 800c190:	60b9      	str	r1, [r7, #8]
 800c192:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800c194:	2300      	movs	r3, #0
 800c196:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	781a      	ldrb	r2, [r3, #0]
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	785a      	ldrb	r2, [r3, #1]
 800c1a4:	68bb      	ldr	r3, [r7, #8]
 800c1a6:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 800c1a8:	687b      	ldr	r3, [r7, #4]
 800c1aa:	789a      	ldrb	r2, [r3, #2]
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	78da      	ldrb	r2, [r3, #3]
 800c1b4:	68bb      	ldr	r3, [r7, #8]
 800c1b6:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	3304      	adds	r3, #4
 800c1bc:	781b      	ldrb	r3, [r3, #0]
 800c1be:	461a      	mov	r2, r3
 800c1c0:	687b      	ldr	r3, [r7, #4]
 800c1c2:	3305      	adds	r3, #5
 800c1c4:	781b      	ldrb	r3, [r3, #0]
 800c1c6:	021b      	lsls	r3, r3, #8
 800c1c8:	b29b      	uxth	r3, r3
 800c1ca:	4313      	orrs	r3, r2
 800c1cc:	b29a      	uxth	r2, r3
 800c1ce:	68bb      	ldr	r3, [r7, #8]
 800c1d0:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	799a      	ldrb	r2, [r3, #6]
 800c1d6:	68bb      	ldr	r3, [r7, #8]
 800c1d8:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	889b      	ldrh	r3, [r3, #4]
 800c1de:	2b00      	cmp	r3, #0
 800c1e0:	d009      	beq.n	800c1f6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c1e2:	68bb      	ldr	r3, [r7, #8]
 800c1e4:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800c1e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c1ea:	d804      	bhi.n	800c1f6 <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 800c1ec:	68bb      	ldr	r3, [r7, #8]
 800c1ee:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800c1f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c1f4:	d901      	bls.n	800c1fa <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800c1f6:	2303      	movs	r3, #3
 800c1f8:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c200:	2b00      	cmp	r3, #0
 800c202:	d136      	bne.n	800c272 <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800c204:	68bb      	ldr	r3, [r7, #8]
 800c206:	78db      	ldrb	r3, [r3, #3]
 800c208:	f003 0303 	and.w	r3, r3, #3
 800c20c:	2b02      	cmp	r3, #2
 800c20e:	d108      	bne.n	800c222 <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 800c210:	68bb      	ldr	r3, [r7, #8]
 800c212:	889b      	ldrh	r3, [r3, #4]
 800c214:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800c218:	f240 8097 	bls.w	800c34a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c21c:	2303      	movs	r3, #3
 800c21e:	75fb      	strb	r3, [r7, #23]
 800c220:	e093      	b.n	800c34a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	78db      	ldrb	r3, [r3, #3]
 800c226:	f003 0303 	and.w	r3, r3, #3
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d107      	bne.n	800c23e <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c22e:	68bb      	ldr	r3, [r7, #8]
 800c230:	889b      	ldrh	r3, [r3, #4]
 800c232:	2b40      	cmp	r3, #64	@ 0x40
 800c234:	f240 8089 	bls.w	800c34a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c238:	2303      	movs	r3, #3
 800c23a:	75fb      	strb	r3, [r7, #23]
 800c23c:	e085      	b.n	800c34a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c23e:	68bb      	ldr	r3, [r7, #8]
 800c240:	78db      	ldrb	r3, [r3, #3]
 800c242:	f003 0303 	and.w	r3, r3, #3
 800c246:	2b01      	cmp	r3, #1
 800c248:	d005      	beq.n	800c256 <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800c24a:	68bb      	ldr	r3, [r7, #8]
 800c24c:	78db      	ldrb	r3, [r3, #3]
 800c24e:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 800c252:	2b03      	cmp	r3, #3
 800c254:	d10a      	bne.n	800c26c <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c256:	68bb      	ldr	r3, [r7, #8]
 800c258:	799b      	ldrb	r3, [r3, #6]
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d003      	beq.n	800c266 <USBH_ParseEPDesc+0xde>
 800c25e:	68bb      	ldr	r3, [r7, #8]
 800c260:	799b      	ldrb	r3, [r3, #6]
 800c262:	2b10      	cmp	r3, #16
 800c264:	d970      	bls.n	800c348 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 800c266:	2303      	movs	r3, #3
 800c268:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c26a:	e06d      	b.n	800c348 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c26c:	2303      	movs	r3, #3
 800c26e:	75fb      	strb	r3, [r7, #23]
 800c270:	e06b      	b.n	800c34a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c278:	2b01      	cmp	r3, #1
 800c27a:	d13c      	bne.n	800c2f6 <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c27c:	68bb      	ldr	r3, [r7, #8]
 800c27e:	78db      	ldrb	r3, [r3, #3]
 800c280:	f003 0303 	and.w	r3, r3, #3
 800c284:	2b02      	cmp	r3, #2
 800c286:	d005      	beq.n	800c294 <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 800c288:	68bb      	ldr	r3, [r7, #8]
 800c28a:	78db      	ldrb	r3, [r3, #3]
 800c28c:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 800c290:	2b00      	cmp	r3, #0
 800c292:	d106      	bne.n	800c2a2 <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c294:	68bb      	ldr	r3, [r7, #8]
 800c296:	889b      	ldrh	r3, [r3, #4]
 800c298:	2b40      	cmp	r3, #64	@ 0x40
 800c29a:	d956      	bls.n	800c34a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c29c:	2303      	movs	r3, #3
 800c29e:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 800c2a0:	e053      	b.n	800c34a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800c2a2:	68bb      	ldr	r3, [r7, #8]
 800c2a4:	78db      	ldrb	r3, [r3, #3]
 800c2a6:	f003 0303 	and.w	r3, r3, #3
 800c2aa:	2b01      	cmp	r3, #1
 800c2ac:	d10e      	bne.n	800c2cc <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	799b      	ldrb	r3, [r3, #6]
 800c2b2:	2b00      	cmp	r3, #0
 800c2b4:	d007      	beq.n	800c2c6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800c2b6:	68bb      	ldr	r3, [r7, #8]
 800c2b8:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 800c2ba:	2b10      	cmp	r3, #16
 800c2bc:	d803      	bhi.n	800c2c6 <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 800c2be:	68bb      	ldr	r3, [r7, #8]
 800c2c0:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800c2c2:	2b40      	cmp	r3, #64	@ 0x40
 800c2c4:	d941      	bls.n	800c34a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c2c6:	2303      	movs	r3, #3
 800c2c8:	75fb      	strb	r3, [r7, #23]
 800c2ca:	e03e      	b.n	800c34a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c2cc:	68bb      	ldr	r3, [r7, #8]
 800c2ce:	78db      	ldrb	r3, [r3, #3]
 800c2d0:	f003 0303 	and.w	r3, r3, #3
 800c2d4:	2b03      	cmp	r3, #3
 800c2d6:	d10b      	bne.n	800c2f0 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 800c2d8:	68bb      	ldr	r3, [r7, #8]
 800c2da:	799b      	ldrb	r3, [r3, #6]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d004      	beq.n	800c2ea <USBH_ParseEPDesc+0x162>
 800c2e0:	68bb      	ldr	r3, [r7, #8]
 800c2e2:	889b      	ldrh	r3, [r3, #4]
 800c2e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c2e8:	d32f      	bcc.n	800c34a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c2ea:	2303      	movs	r3, #3
 800c2ec:	75fb      	strb	r3, [r7, #23]
 800c2ee:	e02c      	b.n	800c34a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c2f0:	2303      	movs	r3, #3
 800c2f2:	75fb      	strb	r3, [r7, #23]
 800c2f4:	e029      	b.n	800c34a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800c2f6:	68fb      	ldr	r3, [r7, #12]
 800c2f8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c2fc:	2b02      	cmp	r3, #2
 800c2fe:	d120      	bne.n	800c342 <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800c300:	68bb      	ldr	r3, [r7, #8]
 800c302:	78db      	ldrb	r3, [r3, #3]
 800c304:	f003 0303 	and.w	r3, r3, #3
 800c308:	2b00      	cmp	r3, #0
 800c30a:	d106      	bne.n	800c31a <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 800c30c:	68bb      	ldr	r3, [r7, #8]
 800c30e:	889b      	ldrh	r3, [r3, #4]
 800c310:	2b08      	cmp	r3, #8
 800c312:	d01a      	beq.n	800c34a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c314:	2303      	movs	r3, #3
 800c316:	75fb      	strb	r3, [r7, #23]
 800c318:	e017      	b.n	800c34a <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 800c31a:	68bb      	ldr	r3, [r7, #8]
 800c31c:	78db      	ldrb	r3, [r3, #3]
 800c31e:	f003 0303 	and.w	r3, r3, #3
 800c322:	2b03      	cmp	r3, #3
 800c324:	d10a      	bne.n	800c33c <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800c326:	68bb      	ldr	r3, [r7, #8]
 800c328:	799b      	ldrb	r3, [r3, #6]
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d003      	beq.n	800c336 <USBH_ParseEPDesc+0x1ae>
 800c32e:	68bb      	ldr	r3, [r7, #8]
 800c330:	889b      	ldrh	r3, [r3, #4]
 800c332:	2b08      	cmp	r3, #8
 800c334:	d909      	bls.n	800c34a <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800c336:	2303      	movs	r3, #3
 800c338:	75fb      	strb	r3, [r7, #23]
 800c33a:	e006      	b.n	800c34a <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 800c33c:	2303      	movs	r3, #3
 800c33e:	75fb      	strb	r3, [r7, #23]
 800c340:	e003      	b.n	800c34a <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800c342:	2303      	movs	r3, #3
 800c344:	75fb      	strb	r3, [r7, #23]
 800c346:	e000      	b.n	800c34a <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800c348:	bf00      	nop
  }

  return status;
 800c34a:	7dfb      	ldrb	r3, [r7, #23]
}
 800c34c:	4618      	mov	r0, r3
 800c34e:	371c      	adds	r7, #28
 800c350:	46bd      	mov	sp, r7
 800c352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c356:	4770      	bx	lr

0800c358 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 800c358:	b480      	push	{r7}
 800c35a:	b087      	sub	sp, #28
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	60f8      	str	r0, [r7, #12]
 800c360:	60b9      	str	r1, [r7, #8]
 800c362:	4613      	mov	r3, r2
 800c364:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 800c366:	68fb      	ldr	r3, [r7, #12]
 800c368:	3301      	adds	r3, #1
 800c36a:	781b      	ldrb	r3, [r3, #0]
 800c36c:	2b03      	cmp	r3, #3
 800c36e:	d120      	bne.n	800c3b2 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	781b      	ldrb	r3, [r3, #0]
 800c374:	1e9a      	subs	r2, r3, #2
 800c376:	88fb      	ldrh	r3, [r7, #6]
 800c378:	4293      	cmp	r3, r2
 800c37a:	bf28      	it	cs
 800c37c:	4613      	movcs	r3, r2
 800c37e:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 800c380:	68fb      	ldr	r3, [r7, #12]
 800c382:	3302      	adds	r3, #2
 800c384:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 800c386:	2300      	movs	r3, #0
 800c388:	82fb      	strh	r3, [r7, #22]
 800c38a:	e00b      	b.n	800c3a4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 800c38c:	8afb      	ldrh	r3, [r7, #22]
 800c38e:	68fa      	ldr	r2, [r7, #12]
 800c390:	4413      	add	r3, r2
 800c392:	781a      	ldrb	r2, [r3, #0]
 800c394:	68bb      	ldr	r3, [r7, #8]
 800c396:	701a      	strb	r2, [r3, #0]
      pdest++;
 800c398:	68bb      	ldr	r3, [r7, #8]
 800c39a:	3301      	adds	r3, #1
 800c39c:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 800c39e:	8afb      	ldrh	r3, [r7, #22]
 800c3a0:	3302      	adds	r3, #2
 800c3a2:	82fb      	strh	r3, [r7, #22]
 800c3a4:	8afa      	ldrh	r2, [r7, #22]
 800c3a6:	8abb      	ldrh	r3, [r7, #20]
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	d3ef      	bcc.n	800c38c <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 800c3ac:	68bb      	ldr	r3, [r7, #8]
 800c3ae:	2200      	movs	r2, #0
 800c3b0:	701a      	strb	r2, [r3, #0]
  }
}
 800c3b2:	bf00      	nop
 800c3b4:	371c      	adds	r7, #28
 800c3b6:	46bd      	mov	sp, r7
 800c3b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3bc:	4770      	bx	lr

0800c3be <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800c3be:	b480      	push	{r7}
 800c3c0:	b085      	sub	sp, #20
 800c3c2:	af00      	add	r7, sp, #0
 800c3c4:	6078      	str	r0, [r7, #4]
 800c3c6:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	881b      	ldrh	r3, [r3, #0]
 800c3cc:	687a      	ldr	r2, [r7, #4]
 800c3ce:	7812      	ldrb	r2, [r2, #0]
 800c3d0:	4413      	add	r3, r2
 800c3d2:	b29a      	uxth	r2, r3
 800c3d4:	683b      	ldr	r3, [r7, #0]
 800c3d6:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	781b      	ldrb	r3, [r3, #0]
 800c3dc:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	4413      	add	r3, r2
 800c3e2:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800c3e4:	68fb      	ldr	r3, [r7, #12]
}
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	3714      	adds	r7, #20
 800c3ea:	46bd      	mov	sp, r7
 800c3ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3f0:	4770      	bx	lr

0800c3f2 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800c3f2:	b580      	push	{r7, lr}
 800c3f4:	b086      	sub	sp, #24
 800c3f6:	af00      	add	r7, sp, #0
 800c3f8:	60f8      	str	r0, [r7, #12]
 800c3fa:	60b9      	str	r1, [r7, #8]
 800c3fc:	4613      	mov	r3, r2
 800c3fe:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 800c400:	2301      	movs	r3, #1
 800c402:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800c404:	68fb      	ldr	r3, [r7, #12]
 800c406:	789b      	ldrb	r3, [r3, #2]
 800c408:	2b01      	cmp	r3, #1
 800c40a:	d002      	beq.n	800c412 <USBH_CtlReq+0x20>
 800c40c:	2b02      	cmp	r3, #2
 800c40e:	d00f      	beq.n	800c430 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 800c410:	e027      	b.n	800c462 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800c412:	68fb      	ldr	r3, [r7, #12]
 800c414:	68ba      	ldr	r2, [r7, #8]
 800c416:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	88fa      	ldrh	r2, [r7, #6]
 800c41c:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 800c41e:	68fb      	ldr	r3, [r7, #12]
 800c420:	2201      	movs	r2, #1
 800c422:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	2202      	movs	r2, #2
 800c428:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800c42a:	2301      	movs	r3, #1
 800c42c:	75fb      	strb	r3, [r7, #23]
      break;
 800c42e:	e018      	b.n	800c462 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800c430:	68f8      	ldr	r0, [r7, #12]
 800c432:	f000 f81b 	bl	800c46c <USBH_HandleControl>
 800c436:	4603      	mov	r3, r0
 800c438:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800c43a:	7dfb      	ldrb	r3, [r7, #23]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	d002      	beq.n	800c446 <USBH_CtlReq+0x54>
 800c440:	7dfb      	ldrb	r3, [r7, #23]
 800c442:	2b03      	cmp	r3, #3
 800c444:	d106      	bne.n	800c454 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	2201      	movs	r2, #1
 800c44a:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800c44c:	68fb      	ldr	r3, [r7, #12]
 800c44e:	2200      	movs	r2, #0
 800c450:	761a      	strb	r2, [r3, #24]
      break;
 800c452:	e005      	b.n	800c460 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800c454:	7dfb      	ldrb	r3, [r7, #23]
 800c456:	2b02      	cmp	r3, #2
 800c458:	d102      	bne.n	800c460 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	2201      	movs	r2, #1
 800c45e:	709a      	strb	r2, [r3, #2]
      break;
 800c460:	bf00      	nop
  }
  return status;
 800c462:	7dfb      	ldrb	r3, [r7, #23]
}
 800c464:	4618      	mov	r0, r3
 800c466:	3718      	adds	r7, #24
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b086      	sub	sp, #24
 800c470:	af02      	add	r7, sp, #8
 800c472:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 800c474:	2301      	movs	r3, #1
 800c476:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800c478:	2300      	movs	r3, #0
 800c47a:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	7e1b      	ldrb	r3, [r3, #24]
 800c480:	3b01      	subs	r3, #1
 800c482:	2b0a      	cmp	r3, #10
 800c484:	f200 8156 	bhi.w	800c734 <USBH_HandleControl+0x2c8>
 800c488:	a201      	add	r2, pc, #4	@ (adr r2, 800c490 <USBH_HandleControl+0x24>)
 800c48a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c48e:	bf00      	nop
 800c490:	0800c4bd 	.word	0x0800c4bd
 800c494:	0800c4d7 	.word	0x0800c4d7
 800c498:	0800c541 	.word	0x0800c541
 800c49c:	0800c567 	.word	0x0800c567
 800c4a0:	0800c59f 	.word	0x0800c59f
 800c4a4:	0800c5c9 	.word	0x0800c5c9
 800c4a8:	0800c61b 	.word	0x0800c61b
 800c4ac:	0800c63d 	.word	0x0800c63d
 800c4b0:	0800c679 	.word	0x0800c679
 800c4b4:	0800c69f 	.word	0x0800c69f
 800c4b8:	0800c6dd 	.word	0x0800c6dd
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	f103 0110 	add.w	r1, r3, #16
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	795b      	ldrb	r3, [r3, #5]
 800c4c6:	461a      	mov	r2, r3
 800c4c8:	6878      	ldr	r0, [r7, #4]
 800c4ca:	f000 f943 	bl	800c754 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	2202      	movs	r2, #2
 800c4d2:	761a      	strb	r2, [r3, #24]
      break;
 800c4d4:	e139      	b.n	800c74a <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	795b      	ldrb	r3, [r3, #5]
 800c4da:	4619      	mov	r1, r3
 800c4dc:	6878      	ldr	r0, [r7, #4]
 800c4de:	f000 fcc5 	bl	800ce6c <USBH_LL_GetURBState>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 800c4e6:	7bbb      	ldrb	r3, [r7, #14]
 800c4e8:	2b01      	cmp	r3, #1
 800c4ea:	d11e      	bne.n	800c52a <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 800c4ec:	687b      	ldr	r3, [r7, #4]
 800c4ee:	7c1b      	ldrb	r3, [r3, #16]
 800c4f0:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800c4f4:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 800c4f6:	687b      	ldr	r3, [r7, #4]
 800c4f8:	8adb      	ldrh	r3, [r3, #22]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d00a      	beq.n	800c514 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 800c4fe:	7b7b      	ldrb	r3, [r7, #13]
 800c500:	2b80      	cmp	r3, #128	@ 0x80
 800c502:	d103      	bne.n	800c50c <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	2203      	movs	r2, #3
 800c508:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c50a:	e115      	b.n	800c738 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2205      	movs	r2, #5
 800c510:	761a      	strb	r2, [r3, #24]
      break;
 800c512:	e111      	b.n	800c738 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 800c514:	7b7b      	ldrb	r3, [r7, #13]
 800c516:	2b80      	cmp	r3, #128	@ 0x80
 800c518:	d103      	bne.n	800c522 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	2209      	movs	r2, #9
 800c51e:	761a      	strb	r2, [r3, #24]
      break;
 800c520:	e10a      	b.n	800c738 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	2207      	movs	r2, #7
 800c526:	761a      	strb	r2, [r3, #24]
      break;
 800c528:	e106      	b.n	800c738 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800c52a:	7bbb      	ldrb	r3, [r7, #14]
 800c52c:	2b04      	cmp	r3, #4
 800c52e:	d003      	beq.n	800c538 <USBH_HandleControl+0xcc>
 800c530:	7bbb      	ldrb	r3, [r7, #14]
 800c532:	2b02      	cmp	r3, #2
 800c534:	f040 8100 	bne.w	800c738 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	220b      	movs	r2, #11
 800c53c:	761a      	strb	r2, [r3, #24]
      break;
 800c53e:	e0fb      	b.n	800c738 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c546:	b29a      	uxth	r2, r3
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6899      	ldr	r1, [r3, #8]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	899a      	ldrh	r2, [r3, #12]
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	791b      	ldrb	r3, [r3, #4]
 800c558:	6878      	ldr	r0, [r7, #4]
 800c55a:	f000 f93a 	bl	800c7d2 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800c55e:	687b      	ldr	r3, [r7, #4]
 800c560:	2204      	movs	r2, #4
 800c562:	761a      	strb	r2, [r3, #24]
      break;
 800c564:	e0f1      	b.n	800c74a <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	791b      	ldrb	r3, [r3, #4]
 800c56a:	4619      	mov	r1, r3
 800c56c:	6878      	ldr	r0, [r7, #4]
 800c56e:	f000 fc7d 	bl	800ce6c <USBH_LL_GetURBState>
 800c572:	4603      	mov	r3, r0
 800c574:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800c576:	7bbb      	ldrb	r3, [r7, #14]
 800c578:	2b01      	cmp	r3, #1
 800c57a:	d102      	bne.n	800c582 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2209      	movs	r2, #9
 800c580:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800c582:	7bbb      	ldrb	r3, [r7, #14]
 800c584:	2b05      	cmp	r3, #5
 800c586:	d102      	bne.n	800c58e <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800c588:	2303      	movs	r3, #3
 800c58a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c58c:	e0d6      	b.n	800c73c <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800c58e:	7bbb      	ldrb	r3, [r7, #14]
 800c590:	2b04      	cmp	r3, #4
 800c592:	f040 80d3 	bne.w	800c73c <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800c596:	687b      	ldr	r3, [r7, #4]
 800c598:	220b      	movs	r2, #11
 800c59a:	761a      	strb	r2, [r3, #24]
      break;
 800c59c:	e0ce      	b.n	800c73c <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	6899      	ldr	r1, [r3, #8]
 800c5a2:	687b      	ldr	r3, [r7, #4]
 800c5a4:	899a      	ldrh	r2, [r3, #12]
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	795b      	ldrb	r3, [r3, #5]
 800c5aa:	2001      	movs	r0, #1
 800c5ac:	9000      	str	r0, [sp, #0]
 800c5ae:	6878      	ldr	r0, [r7, #4]
 800c5b0:	f000 f8ea 	bl	800c788 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c5ba:	b29a      	uxth	r2, r3
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	2206      	movs	r2, #6
 800c5c4:	761a      	strb	r2, [r3, #24]
      break;
 800c5c6:	e0c0      	b.n	800c74a <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c5c8:	687b      	ldr	r3, [r7, #4]
 800c5ca:	795b      	ldrb	r3, [r3, #5]
 800c5cc:	4619      	mov	r1, r3
 800c5ce:	6878      	ldr	r0, [r7, #4]
 800c5d0:	f000 fc4c 	bl	800ce6c <USBH_LL_GetURBState>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c5d8:	7bbb      	ldrb	r3, [r7, #14]
 800c5da:	2b01      	cmp	r3, #1
 800c5dc:	d103      	bne.n	800c5e6 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	2207      	movs	r2, #7
 800c5e2:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c5e4:	e0ac      	b.n	800c740 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 800c5e6:	7bbb      	ldrb	r3, [r7, #14]
 800c5e8:	2b05      	cmp	r3, #5
 800c5ea:	d105      	bne.n	800c5f8 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	220c      	movs	r2, #12
 800c5f0:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 800c5f2:	2303      	movs	r3, #3
 800c5f4:	73fb      	strb	r3, [r7, #15]
      break;
 800c5f6:	e0a3      	b.n	800c740 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c5f8:	7bbb      	ldrb	r3, [r7, #14]
 800c5fa:	2b02      	cmp	r3, #2
 800c5fc:	d103      	bne.n	800c606 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 800c5fe:	687b      	ldr	r3, [r7, #4]
 800c600:	2205      	movs	r2, #5
 800c602:	761a      	strb	r2, [r3, #24]
      break;
 800c604:	e09c      	b.n	800c740 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800c606:	7bbb      	ldrb	r3, [r7, #14]
 800c608:	2b04      	cmp	r3, #4
 800c60a:	f040 8099 	bne.w	800c740 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	220b      	movs	r2, #11
 800c612:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800c614:	2302      	movs	r3, #2
 800c616:	73fb      	strb	r3, [r7, #15]
      break;
 800c618:	e092      	b.n	800c740 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800c61a:	687b      	ldr	r3, [r7, #4]
 800c61c:	791b      	ldrb	r3, [r3, #4]
 800c61e:	2200      	movs	r2, #0
 800c620:	2100      	movs	r1, #0
 800c622:	6878      	ldr	r0, [r7, #4]
 800c624:	f000 f8d5 	bl	800c7d2 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c62e:	b29a      	uxth	r2, r3
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	2208      	movs	r2, #8
 800c638:	761a      	strb	r2, [r3, #24]

      break;
 800c63a:	e086      	b.n	800c74a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	791b      	ldrb	r3, [r3, #4]
 800c640:	4619      	mov	r1, r3
 800c642:	6878      	ldr	r0, [r7, #4]
 800c644:	f000 fc12 	bl	800ce6c <USBH_LL_GetURBState>
 800c648:	4603      	mov	r3, r0
 800c64a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800c64c:	7bbb      	ldrb	r3, [r7, #14]
 800c64e:	2b01      	cmp	r3, #1
 800c650:	d105      	bne.n	800c65e <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	220d      	movs	r2, #13
 800c656:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800c658:	2300      	movs	r3, #0
 800c65a:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c65c:	e072      	b.n	800c744 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800c65e:	7bbb      	ldrb	r3, [r7, #14]
 800c660:	2b04      	cmp	r3, #4
 800c662:	d103      	bne.n	800c66c <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	220b      	movs	r2, #11
 800c668:	761a      	strb	r2, [r3, #24]
      break;
 800c66a:	e06b      	b.n	800c744 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800c66c:	7bbb      	ldrb	r3, [r7, #14]
 800c66e:	2b05      	cmp	r3, #5
 800c670:	d168      	bne.n	800c744 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800c672:	2303      	movs	r3, #3
 800c674:	73fb      	strb	r3, [r7, #15]
      break;
 800c676:	e065      	b.n	800c744 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	795b      	ldrb	r3, [r3, #5]
 800c67c:	2201      	movs	r2, #1
 800c67e:	9200      	str	r2, [sp, #0]
 800c680:	2200      	movs	r2, #0
 800c682:	2100      	movs	r1, #0
 800c684:	6878      	ldr	r0, [r7, #4]
 800c686:	f000 f87f 	bl	800c788 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800c690:	b29a      	uxth	r2, r3
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800c696:	687b      	ldr	r3, [r7, #4]
 800c698:	220a      	movs	r2, #10
 800c69a:	761a      	strb	r2, [r3, #24]
      break;
 800c69c:	e055      	b.n	800c74a <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800c69e:	687b      	ldr	r3, [r7, #4]
 800c6a0:	795b      	ldrb	r3, [r3, #5]
 800c6a2:	4619      	mov	r1, r3
 800c6a4:	6878      	ldr	r0, [r7, #4]
 800c6a6:	f000 fbe1 	bl	800ce6c <USBH_LL_GetURBState>
 800c6aa:	4603      	mov	r3, r0
 800c6ac:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800c6ae:	7bbb      	ldrb	r3, [r7, #14]
 800c6b0:	2b01      	cmp	r3, #1
 800c6b2:	d105      	bne.n	800c6c0 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800c6b4:	2300      	movs	r3, #0
 800c6b6:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	220d      	movs	r2, #13
 800c6bc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800c6be:	e043      	b.n	800c748 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800c6c0:	7bbb      	ldrb	r3, [r7, #14]
 800c6c2:	2b02      	cmp	r3, #2
 800c6c4:	d103      	bne.n	800c6ce <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	2209      	movs	r2, #9
 800c6ca:	761a      	strb	r2, [r3, #24]
      break;
 800c6cc:	e03c      	b.n	800c748 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800c6ce:	7bbb      	ldrb	r3, [r7, #14]
 800c6d0:	2b04      	cmp	r3, #4
 800c6d2:	d139      	bne.n	800c748 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	220b      	movs	r2, #11
 800c6d8:	761a      	strb	r2, [r3, #24]
      break;
 800c6da:	e035      	b.n	800c748 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	7e5b      	ldrb	r3, [r3, #25]
 800c6e0:	3301      	adds	r3, #1
 800c6e2:	b2da      	uxtb	r2, r3
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	765a      	strb	r2, [r3, #25]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	7e5b      	ldrb	r3, [r3, #25]
 800c6ec:	2b02      	cmp	r3, #2
 800c6ee:	d806      	bhi.n	800c6fe <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	2201      	movs	r2, #1
 800c6f4:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	2201      	movs	r2, #1
 800c6fa:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800c6fc:	e025      	b.n	800c74a <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800c704:	2106      	movs	r1, #6
 800c706:	6878      	ldr	r0, [r7, #4]
 800c708:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	2200      	movs	r2, #0
 800c70e:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	795b      	ldrb	r3, [r3, #5]
 800c714:	4619      	mov	r1, r3
 800c716:	6878      	ldr	r0, [r7, #4]
 800c718:	f000 f90c 	bl	800c934 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800c71c:	687b      	ldr	r3, [r7, #4]
 800c71e:	791b      	ldrb	r3, [r3, #4]
 800c720:	4619      	mov	r1, r3
 800c722:	6878      	ldr	r0, [r7, #4]
 800c724:	f000 f906 	bl	800c934 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	2200      	movs	r2, #0
 800c72c:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800c72e:	2302      	movs	r3, #2
 800c730:	73fb      	strb	r3, [r7, #15]
      break;
 800c732:	e00a      	b.n	800c74a <USBH_HandleControl+0x2de>

    default:
      break;
 800c734:	bf00      	nop
 800c736:	e008      	b.n	800c74a <USBH_HandleControl+0x2de>
      break;
 800c738:	bf00      	nop
 800c73a:	e006      	b.n	800c74a <USBH_HandleControl+0x2de>
      break;
 800c73c:	bf00      	nop
 800c73e:	e004      	b.n	800c74a <USBH_HandleControl+0x2de>
      break;
 800c740:	bf00      	nop
 800c742:	e002      	b.n	800c74a <USBH_HandleControl+0x2de>
      break;
 800c744:	bf00      	nop
 800c746:	e000      	b.n	800c74a <USBH_HandleControl+0x2de>
      break;
 800c748:	bf00      	nop
  }

  return status;
 800c74a:	7bfb      	ldrb	r3, [r7, #15]
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3710      	adds	r7, #16
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}

0800c754 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800c754:	b580      	push	{r7, lr}
 800c756:	b088      	sub	sp, #32
 800c758:	af04      	add	r7, sp, #16
 800c75a:	60f8      	str	r0, [r7, #12]
 800c75c:	60b9      	str	r1, [r7, #8]
 800c75e:	4613      	mov	r3, r2
 800c760:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c762:	79f9      	ldrb	r1, [r7, #7]
 800c764:	2300      	movs	r3, #0
 800c766:	9303      	str	r3, [sp, #12]
 800c768:	2308      	movs	r3, #8
 800c76a:	9302      	str	r3, [sp, #8]
 800c76c:	68bb      	ldr	r3, [r7, #8]
 800c76e:	9301      	str	r3, [sp, #4]
 800c770:	2300      	movs	r3, #0
 800c772:	9300      	str	r3, [sp, #0]
 800c774:	2300      	movs	r3, #0
 800c776:	2200      	movs	r2, #0
 800c778:	68f8      	ldr	r0, [r7, #12]
 800c77a:	f000 fb46 	bl	800ce0a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800c77e:	2300      	movs	r3, #0
}
 800c780:	4618      	mov	r0, r3
 800c782:	3710      	adds	r7, #16
 800c784:	46bd      	mov	sp, r7
 800c786:	bd80      	pop	{r7, pc}

0800c788 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800c788:	b580      	push	{r7, lr}
 800c78a:	b088      	sub	sp, #32
 800c78c:	af04      	add	r7, sp, #16
 800c78e:	60f8      	str	r0, [r7, #12]
 800c790:	60b9      	str	r1, [r7, #8]
 800c792:	4611      	mov	r1, r2
 800c794:	461a      	mov	r2, r3
 800c796:	460b      	mov	r3, r1
 800c798:	80fb      	strh	r3, [r7, #6]
 800c79a:	4613      	mov	r3, r2
 800c79c:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d001      	beq.n	800c7ac <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800c7a8:	2300      	movs	r3, #0
 800c7aa:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c7ac:	7979      	ldrb	r1, [r7, #5]
 800c7ae:	7e3b      	ldrb	r3, [r7, #24]
 800c7b0:	9303      	str	r3, [sp, #12]
 800c7b2:	88fb      	ldrh	r3, [r7, #6]
 800c7b4:	9302      	str	r3, [sp, #8]
 800c7b6:	68bb      	ldr	r3, [r7, #8]
 800c7b8:	9301      	str	r3, [sp, #4]
 800c7ba:	2301      	movs	r3, #1
 800c7bc:	9300      	str	r3, [sp, #0]
 800c7be:	2300      	movs	r3, #0
 800c7c0:	2200      	movs	r2, #0
 800c7c2:	68f8      	ldr	r0, [r7, #12]
 800c7c4:	f000 fb21 	bl	800ce0a <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800c7c8:	2300      	movs	r3, #0
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3710      	adds	r7, #16
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}

0800c7d2 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800c7d2:	b580      	push	{r7, lr}
 800c7d4:	b088      	sub	sp, #32
 800c7d6:	af04      	add	r7, sp, #16
 800c7d8:	60f8      	str	r0, [r7, #12]
 800c7da:	60b9      	str	r1, [r7, #8]
 800c7dc:	4611      	mov	r1, r2
 800c7de:	461a      	mov	r2, r3
 800c7e0:	460b      	mov	r3, r1
 800c7e2:	80fb      	strh	r3, [r7, #6]
 800c7e4:	4613      	mov	r3, r2
 800c7e6:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c7e8:	7979      	ldrb	r1, [r7, #5]
 800c7ea:	2300      	movs	r3, #0
 800c7ec:	9303      	str	r3, [sp, #12]
 800c7ee:	88fb      	ldrh	r3, [r7, #6]
 800c7f0:	9302      	str	r3, [sp, #8]
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	9301      	str	r3, [sp, #4]
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	9300      	str	r3, [sp, #0]
 800c7fa:	2300      	movs	r3, #0
 800c7fc:	2201      	movs	r2, #1
 800c7fe:	68f8      	ldr	r0, [r7, #12]
 800c800:	f000 fb03 	bl	800ce0a <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c804:	2300      	movs	r3, #0

}
 800c806:	4618      	mov	r0, r3
 800c808:	3710      	adds	r7, #16
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd80      	pop	{r7, pc}

0800c80e <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800c80e:	b580      	push	{r7, lr}
 800c810:	b088      	sub	sp, #32
 800c812:	af04      	add	r7, sp, #16
 800c814:	60f8      	str	r0, [r7, #12]
 800c816:	60b9      	str	r1, [r7, #8]
 800c818:	4611      	mov	r1, r2
 800c81a:	461a      	mov	r2, r3
 800c81c:	460b      	mov	r3, r1
 800c81e:	80fb      	strh	r3, [r7, #6]
 800c820:	4613      	mov	r3, r2
 800c822:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d001      	beq.n	800c832 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800c82e:	2300      	movs	r3, #0
 800c830:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c832:	7979      	ldrb	r1, [r7, #5]
 800c834:	7e3b      	ldrb	r3, [r7, #24]
 800c836:	9303      	str	r3, [sp, #12]
 800c838:	88fb      	ldrh	r3, [r7, #6]
 800c83a:	9302      	str	r3, [sp, #8]
 800c83c:	68bb      	ldr	r3, [r7, #8]
 800c83e:	9301      	str	r3, [sp, #4]
 800c840:	2301      	movs	r3, #1
 800c842:	9300      	str	r3, [sp, #0]
 800c844:	2302      	movs	r3, #2
 800c846:	2200      	movs	r2, #0
 800c848:	68f8      	ldr	r0, [r7, #12]
 800c84a:	f000 fade 	bl	800ce0a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800c84e:	2300      	movs	r3, #0
}
 800c850:	4618      	mov	r0, r3
 800c852:	3710      	adds	r7, #16
 800c854:	46bd      	mov	sp, r7
 800c856:	bd80      	pop	{r7, pc}

0800c858 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b088      	sub	sp, #32
 800c85c:	af04      	add	r7, sp, #16
 800c85e:	60f8      	str	r0, [r7, #12]
 800c860:	60b9      	str	r1, [r7, #8]
 800c862:	4611      	mov	r1, r2
 800c864:	461a      	mov	r2, r3
 800c866:	460b      	mov	r3, r1
 800c868:	80fb      	strh	r3, [r7, #6]
 800c86a:	4613      	mov	r3, r2
 800c86c:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800c86e:	7979      	ldrb	r1, [r7, #5]
 800c870:	2300      	movs	r3, #0
 800c872:	9303      	str	r3, [sp, #12]
 800c874:	88fb      	ldrh	r3, [r7, #6]
 800c876:	9302      	str	r3, [sp, #8]
 800c878:	68bb      	ldr	r3, [r7, #8]
 800c87a:	9301      	str	r3, [sp, #4]
 800c87c:	2301      	movs	r3, #1
 800c87e:	9300      	str	r3, [sp, #0]
 800c880:	2302      	movs	r3, #2
 800c882:	2201      	movs	r2, #1
 800c884:	68f8      	ldr	r0, [r7, #12]
 800c886:	f000 fac0 	bl	800ce0a <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800c88a:	2300      	movs	r3, #0
}
 800c88c:	4618      	mov	r0, r3
 800c88e:	3710      	adds	r7, #16
 800c890:	46bd      	mov	sp, r7
 800c892:	bd80      	pop	{r7, pc}

0800c894 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b086      	sub	sp, #24
 800c898:	af04      	add	r7, sp, #16
 800c89a:	6078      	str	r0, [r7, #4]
 800c89c:	4608      	mov	r0, r1
 800c89e:	4611      	mov	r1, r2
 800c8a0:	461a      	mov	r2, r3
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	70fb      	strb	r3, [r7, #3]
 800c8a6:	460b      	mov	r3, r1
 800c8a8:	70bb      	strb	r3, [r7, #2]
 800c8aa:	4613      	mov	r3, r2
 800c8ac:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800c8ae:	7878      	ldrb	r0, [r7, #1]
 800c8b0:	78ba      	ldrb	r2, [r7, #2]
 800c8b2:	78f9      	ldrb	r1, [r7, #3]
 800c8b4:	8b3b      	ldrh	r3, [r7, #24]
 800c8b6:	9302      	str	r3, [sp, #8]
 800c8b8:	7d3b      	ldrb	r3, [r7, #20]
 800c8ba:	9301      	str	r3, [sp, #4]
 800c8bc:	7c3b      	ldrb	r3, [r7, #16]
 800c8be:	9300      	str	r3, [sp, #0]
 800c8c0:	4603      	mov	r3, r0
 800c8c2:	6878      	ldr	r0, [r7, #4]
 800c8c4:	f000 fa53 	bl	800cd6e <USBH_LL_OpenPipe>

  return USBH_OK;
 800c8c8:	2300      	movs	r3, #0
}
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	3708      	adds	r7, #8
 800c8ce:	46bd      	mov	sp, r7
 800c8d0:	bd80      	pop	{r7, pc}

0800c8d2 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800c8d2:	b580      	push	{r7, lr}
 800c8d4:	b082      	sub	sp, #8
 800c8d6:	af00      	add	r7, sp, #0
 800c8d8:	6078      	str	r0, [r7, #4]
 800c8da:	460b      	mov	r3, r1
 800c8dc:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800c8de:	78fb      	ldrb	r3, [r7, #3]
 800c8e0:	4619      	mov	r1, r3
 800c8e2:	6878      	ldr	r0, [r7, #4]
 800c8e4:	f000 fa72 	bl	800cdcc <USBH_LL_ClosePipe>

  return USBH_OK;
 800c8e8:	2300      	movs	r3, #0
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3708      	adds	r7, #8
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}

0800c8f2 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800c8f2:	b580      	push	{r7, lr}
 800c8f4:	b084      	sub	sp, #16
 800c8f6:	af00      	add	r7, sp, #0
 800c8f8:	6078      	str	r0, [r7, #4]
 800c8fa:	460b      	mov	r3, r1
 800c8fc:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800c8fe:	6878      	ldr	r0, [r7, #4]
 800c900:	f000 f836 	bl	800c970 <USBH_GetFreePipe>
 800c904:	4603      	mov	r3, r0
 800c906:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800c908:	89fb      	ldrh	r3, [r7, #14]
 800c90a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800c90e:	4293      	cmp	r3, r2
 800c910:	d00a      	beq.n	800c928 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800c912:	78fa      	ldrb	r2, [r7, #3]
 800c914:	89fb      	ldrh	r3, [r7, #14]
 800c916:	f003 030f 	and.w	r3, r3, #15
 800c91a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800c91e:	6879      	ldr	r1, [r7, #4]
 800c920:	33e0      	adds	r3, #224	@ 0xe0
 800c922:	009b      	lsls	r3, r3, #2
 800c924:	440b      	add	r3, r1
 800c926:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800c928:	89fb      	ldrh	r3, [r7, #14]
 800c92a:	b2db      	uxtb	r3, r3
}
 800c92c:	4618      	mov	r0, r3
 800c92e:	3710      	adds	r7, #16
 800c930:	46bd      	mov	sp, r7
 800c932:	bd80      	pop	{r7, pc}

0800c934 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800c934:	b480      	push	{r7}
 800c936:	b083      	sub	sp, #12
 800c938:	af00      	add	r7, sp, #0
 800c93a:	6078      	str	r0, [r7, #4]
 800c93c:	460b      	mov	r3, r1
 800c93e:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800c940:	78fb      	ldrb	r3, [r7, #3]
 800c942:	2b0f      	cmp	r3, #15
 800c944:	d80d      	bhi.n	800c962 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800c946:	78fb      	ldrb	r3, [r7, #3]
 800c948:	687a      	ldr	r2, [r7, #4]
 800c94a:	33e0      	adds	r3, #224	@ 0xe0
 800c94c:	009b      	lsls	r3, r3, #2
 800c94e:	4413      	add	r3, r2
 800c950:	685a      	ldr	r2, [r3, #4]
 800c952:	78fb      	ldrb	r3, [r7, #3]
 800c954:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800c958:	6879      	ldr	r1, [r7, #4]
 800c95a:	33e0      	adds	r3, #224	@ 0xe0
 800c95c:	009b      	lsls	r3, r3, #2
 800c95e:	440b      	add	r3, r1
 800c960:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800c962:	2300      	movs	r3, #0
}
 800c964:	4618      	mov	r0, r3
 800c966:	370c      	adds	r7, #12
 800c968:	46bd      	mov	sp, r7
 800c96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c96e:	4770      	bx	lr

0800c970 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800c970:	b480      	push	{r7}
 800c972:	b085      	sub	sp, #20
 800c974:	af00      	add	r7, sp, #0
 800c976:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800c978:	2300      	movs	r3, #0
 800c97a:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c97c:	2300      	movs	r3, #0
 800c97e:	73fb      	strb	r3, [r7, #15]
 800c980:	e00f      	b.n	800c9a2 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800c982:	7bfb      	ldrb	r3, [r7, #15]
 800c984:	687a      	ldr	r2, [r7, #4]
 800c986:	33e0      	adds	r3, #224	@ 0xe0
 800c988:	009b      	lsls	r3, r3, #2
 800c98a:	4413      	add	r3, r2
 800c98c:	685b      	ldr	r3, [r3, #4]
 800c98e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800c992:	2b00      	cmp	r3, #0
 800c994:	d102      	bne.n	800c99c <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800c996:	7bfb      	ldrb	r3, [r7, #15]
 800c998:	b29b      	uxth	r3, r3
 800c99a:	e007      	b.n	800c9ac <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800c99c:	7bfb      	ldrb	r3, [r7, #15]
 800c99e:	3301      	adds	r3, #1
 800c9a0:	73fb      	strb	r3, [r7, #15]
 800c9a2:	7bfb      	ldrb	r3, [r7, #15]
 800c9a4:	2b0f      	cmp	r3, #15
 800c9a6:	d9ec      	bls.n	800c982 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800c9a8:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800c9ac:	4618      	mov	r0, r3
 800c9ae:	3714      	adds	r7, #20
 800c9b0:	46bd      	mov	sp, r7
 800c9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9b6:	4770      	bx	lr

0800c9b8 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800c9b8:	b580      	push	{r7, lr}
 800c9ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800c9bc:	2201      	movs	r2, #1
 800c9be:	490e      	ldr	r1, [pc, #56]	@ (800c9f8 <MX_USB_HOST_Init+0x40>)
 800c9c0:	480e      	ldr	r0, [pc, #56]	@ (800c9fc <MX_USB_HOST_Init+0x44>)
 800c9c2:	f7fe fb15 	bl	800aff0 <USBH_Init>
 800c9c6:	4603      	mov	r3, r0
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d001      	beq.n	800c9d0 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800c9cc:	f7f7 fca0 	bl	8004310 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800c9d0:	490b      	ldr	r1, [pc, #44]	@ (800ca00 <MX_USB_HOST_Init+0x48>)
 800c9d2:	480a      	ldr	r0, [pc, #40]	@ (800c9fc <MX_USB_HOST_Init+0x44>)
 800c9d4:	f7fe fbb9 	bl	800b14a <USBH_RegisterClass>
 800c9d8:	4603      	mov	r3, r0
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d001      	beq.n	800c9e2 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800c9de:	f7f7 fc97 	bl	8004310 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800c9e2:	4806      	ldr	r0, [pc, #24]	@ (800c9fc <MX_USB_HOST_Init+0x44>)
 800c9e4:	f7fe fc3d 	bl	800b262 <USBH_Start>
 800c9e8:	4603      	mov	r3, r0
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d001      	beq.n	800c9f2 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800c9ee:	f7f7 fc8f 	bl	8004310 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800c9f2:	bf00      	nop
 800c9f4:	bd80      	pop	{r7, pc}
 800c9f6:	bf00      	nop
 800c9f8:	0800ca19 	.word	0x0800ca19
 800c9fc:	200005a4 	.word	0x200005a4
 800ca00:	2000000c 	.word	0x2000000c

0800ca04 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800ca04:	b580      	push	{r7, lr}
 800ca06:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800ca08:	4802      	ldr	r0, [pc, #8]	@ (800ca14 <MX_USB_HOST_Process+0x10>)
 800ca0a:	f7fe fc3b 	bl	800b284 <USBH_Process>
}
 800ca0e:	bf00      	nop
 800ca10:	bd80      	pop	{r7, pc}
 800ca12:	bf00      	nop
 800ca14:	200005a4 	.word	0x200005a4

0800ca18 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800ca18:	b480      	push	{r7}
 800ca1a:	b083      	sub	sp, #12
 800ca1c:	af00      	add	r7, sp, #0
 800ca1e:	6078      	str	r0, [r7, #4]
 800ca20:	460b      	mov	r3, r1
 800ca22:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800ca24:	78fb      	ldrb	r3, [r7, #3]
 800ca26:	3b01      	subs	r3, #1
 800ca28:	2b04      	cmp	r3, #4
 800ca2a:	d819      	bhi.n	800ca60 <USBH_UserProcess+0x48>
 800ca2c:	a201      	add	r2, pc, #4	@ (adr r2, 800ca34 <USBH_UserProcess+0x1c>)
 800ca2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca32:	bf00      	nop
 800ca34:	0800ca61 	.word	0x0800ca61
 800ca38:	0800ca51 	.word	0x0800ca51
 800ca3c:	0800ca61 	.word	0x0800ca61
 800ca40:	0800ca59 	.word	0x0800ca59
 800ca44:	0800ca49 	.word	0x0800ca49
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800ca48:	4b09      	ldr	r3, [pc, #36]	@ (800ca70 <USBH_UserProcess+0x58>)
 800ca4a:	2203      	movs	r2, #3
 800ca4c:	701a      	strb	r2, [r3, #0]
  break;
 800ca4e:	e008      	b.n	800ca62 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800ca50:	4b07      	ldr	r3, [pc, #28]	@ (800ca70 <USBH_UserProcess+0x58>)
 800ca52:	2202      	movs	r2, #2
 800ca54:	701a      	strb	r2, [r3, #0]
  break;
 800ca56:	e004      	b.n	800ca62 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800ca58:	4b05      	ldr	r3, [pc, #20]	@ (800ca70 <USBH_UserProcess+0x58>)
 800ca5a:	2201      	movs	r2, #1
 800ca5c:	701a      	strb	r2, [r3, #0]
  break;
 800ca5e:	e000      	b.n	800ca62 <USBH_UserProcess+0x4a>

  default:
  break;
 800ca60:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800ca62:	bf00      	nop
 800ca64:	370c      	adds	r7, #12
 800ca66:	46bd      	mov	sp, r7
 800ca68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca6c:	4770      	bx	lr
 800ca6e:	bf00      	nop
 800ca70:	2000097c 	.word	0x2000097c

0800ca74 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800ca74:	b580      	push	{r7, lr}
 800ca76:	b08a      	sub	sp, #40	@ 0x28
 800ca78:	af00      	add	r7, sp, #0
 800ca7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ca7c:	f107 0314 	add.w	r3, r7, #20
 800ca80:	2200      	movs	r2, #0
 800ca82:	601a      	str	r2, [r3, #0]
 800ca84:	605a      	str	r2, [r3, #4]
 800ca86:	609a      	str	r2, [r3, #8]
 800ca88:	60da      	str	r2, [r3, #12]
 800ca8a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	681b      	ldr	r3, [r3, #0]
 800ca90:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ca94:	d147      	bne.n	800cb26 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ca96:	2300      	movs	r3, #0
 800ca98:	613b      	str	r3, [r7, #16]
 800ca9a:	4b25      	ldr	r3, [pc, #148]	@ (800cb30 <HAL_HCD_MspInit+0xbc>)
 800ca9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca9e:	4a24      	ldr	r2, [pc, #144]	@ (800cb30 <HAL_HCD_MspInit+0xbc>)
 800caa0:	f043 0301 	orr.w	r3, r3, #1
 800caa4:	6313      	str	r3, [r2, #48]	@ 0x30
 800caa6:	4b22      	ldr	r3, [pc, #136]	@ (800cb30 <HAL_HCD_MspInit+0xbc>)
 800caa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800caaa:	f003 0301 	and.w	r3, r3, #1
 800caae:	613b      	str	r3, [r7, #16]
 800cab0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800cab2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800cab6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800cab8:	2300      	movs	r3, #0
 800caba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cabc:	2300      	movs	r3, #0
 800cabe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800cac0:	f107 0314 	add.w	r3, r7, #20
 800cac4:	4619      	mov	r1, r3
 800cac6:	481b      	ldr	r0, [pc, #108]	@ (800cb34 <HAL_HCD_MspInit+0xc0>)
 800cac8:	f7f8 ffb6 	bl	8005a38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800cacc:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800cad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cad2:	2302      	movs	r3, #2
 800cad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cad6:	2300      	movs	r3, #0
 800cad8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800cada:	2300      	movs	r3, #0
 800cadc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800cade:	230a      	movs	r3, #10
 800cae0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cae2:	f107 0314 	add.w	r3, r7, #20
 800cae6:	4619      	mov	r1, r3
 800cae8:	4812      	ldr	r0, [pc, #72]	@ (800cb34 <HAL_HCD_MspInit+0xc0>)
 800caea:	f7f8 ffa5 	bl	8005a38 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800caee:	4b10      	ldr	r3, [pc, #64]	@ (800cb30 <HAL_HCD_MspInit+0xbc>)
 800caf0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800caf2:	4a0f      	ldr	r2, [pc, #60]	@ (800cb30 <HAL_HCD_MspInit+0xbc>)
 800caf4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800caf8:	6353      	str	r3, [r2, #52]	@ 0x34
 800cafa:	2300      	movs	r3, #0
 800cafc:	60fb      	str	r3, [r7, #12]
 800cafe:	4b0c      	ldr	r3, [pc, #48]	@ (800cb30 <HAL_HCD_MspInit+0xbc>)
 800cb00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb02:	4a0b      	ldr	r2, [pc, #44]	@ (800cb30 <HAL_HCD_MspInit+0xbc>)
 800cb04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800cb08:	6453      	str	r3, [r2, #68]	@ 0x44
 800cb0a:	4b09      	ldr	r3, [pc, #36]	@ (800cb30 <HAL_HCD_MspInit+0xbc>)
 800cb0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800cb12:	60fb      	str	r3, [r7, #12]
 800cb14:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800cb16:	2200      	movs	r2, #0
 800cb18:	2100      	movs	r1, #0
 800cb1a:	2043      	movs	r0, #67	@ 0x43
 800cb1c:	f7f8 ff55 	bl	80059ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800cb20:	2043      	movs	r0, #67	@ 0x43
 800cb22:	f7f8 ff6e 	bl	8005a02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800cb26:	bf00      	nop
 800cb28:	3728      	adds	r7, #40	@ 0x28
 800cb2a:	46bd      	mov	sp, r7
 800cb2c:	bd80      	pop	{r7, pc}
 800cb2e:	bf00      	nop
 800cb30:	40023800 	.word	0x40023800
 800cb34:	40020000 	.word	0x40020000

0800cb38 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800cb38:	b580      	push	{r7, lr}
 800cb3a:	b082      	sub	sp, #8
 800cb3c:	af00      	add	r7, sp, #0
 800cb3e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cb46:	4618      	mov	r0, r3
 800cb48:	f7fe ff73 	bl	800ba32 <USBH_LL_IncTimer>
}
 800cb4c:	bf00      	nop
 800cb4e:	3708      	adds	r7, #8
 800cb50:	46bd      	mov	sp, r7
 800cb52:	bd80      	pop	{r7, pc}

0800cb54 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cb54:	b580      	push	{r7, lr}
 800cb56:	b082      	sub	sp, #8
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800cb5c:	687b      	ldr	r3, [r7, #4]
 800cb5e:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cb62:	4618      	mov	r0, r3
 800cb64:	f7fe ffab 	bl	800babe <USBH_LL_Connect>
}
 800cb68:	bf00      	nop
 800cb6a:	3708      	adds	r7, #8
 800cb6c:	46bd      	mov	sp, r7
 800cb6e:	bd80      	pop	{r7, pc}

0800cb70 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800cb70:	b580      	push	{r7, lr}
 800cb72:	b082      	sub	sp, #8
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cb7e:	4618      	mov	r0, r3
 800cb80:	f7fe ffb4 	bl	800baec <USBH_LL_Disconnect>
}
 800cb84:	bf00      	nop
 800cb86:	3708      	adds	r7, #8
 800cb88:	46bd      	mov	sp, r7
 800cb8a:	bd80      	pop	{r7, pc}

0800cb8c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800cb8c:	b480      	push	{r7}
 800cb8e:	b083      	sub	sp, #12
 800cb90:	af00      	add	r7, sp, #0
 800cb92:	6078      	str	r0, [r7, #4]
 800cb94:	460b      	mov	r3, r1
 800cb96:	70fb      	strb	r3, [r7, #3]
 800cb98:	4613      	mov	r3, r2
 800cb9a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800cb9c:	bf00      	nop
 800cb9e:	370c      	adds	r7, #12
 800cba0:	46bd      	mov	sp, r7
 800cba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cba6:	4770      	bx	lr

0800cba8 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b082      	sub	sp, #8
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800cbb0:	687b      	ldr	r3, [r7, #4]
 800cbb2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cbb6:	4618      	mov	r0, r3
 800cbb8:	f7fe ff65 	bl	800ba86 <USBH_LL_PortEnabled>
}
 800cbbc:	bf00      	nop
 800cbbe:	3708      	adds	r7, #8
 800cbc0:	46bd      	mov	sp, r7
 800cbc2:	bd80      	pop	{r7, pc}

0800cbc4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800cbc4:	b580      	push	{r7, lr}
 800cbc6:	b082      	sub	sp, #8
 800cbc8:	af00      	add	r7, sp, #0
 800cbca:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800cbd2:	4618      	mov	r0, r3
 800cbd4:	f7fe ff65 	bl	800baa2 <USBH_LL_PortDisabled>
}
 800cbd8:	bf00      	nop
 800cbda:	3708      	adds	r7, #8
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	bd80      	pop	{r7, pc}

0800cbe0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800cbe0:	b580      	push	{r7, lr}
 800cbe2:	b082      	sub	sp, #8
 800cbe4:	af00      	add	r7, sp, #0
 800cbe6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800cbe8:	687b      	ldr	r3, [r7, #4]
 800cbea:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800cbee:	2b01      	cmp	r3, #1
 800cbf0:	d12a      	bne.n	800cc48 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800cbf2:	4a18      	ldr	r2, [pc, #96]	@ (800cc54 <USBH_LL_Init+0x74>)
 800cbf4:	687b      	ldr	r3, [r7, #4]
 800cbf6:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	4a15      	ldr	r2, [pc, #84]	@ (800cc54 <USBH_LL_Init+0x74>)
 800cbfe:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800cc02:	4b14      	ldr	r3, [pc, #80]	@ (800cc54 <USBH_LL_Init+0x74>)
 800cc04:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800cc08:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800cc0a:	4b12      	ldr	r3, [pc, #72]	@ (800cc54 <USBH_LL_Init+0x74>)
 800cc0c:	2208      	movs	r2, #8
 800cc0e:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800cc10:	4b10      	ldr	r3, [pc, #64]	@ (800cc54 <USBH_LL_Init+0x74>)
 800cc12:	2201      	movs	r2, #1
 800cc14:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800cc16:	4b0f      	ldr	r3, [pc, #60]	@ (800cc54 <USBH_LL_Init+0x74>)
 800cc18:	2200      	movs	r2, #0
 800cc1a:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800cc1c:	4b0d      	ldr	r3, [pc, #52]	@ (800cc54 <USBH_LL_Init+0x74>)
 800cc1e:	2202      	movs	r2, #2
 800cc20:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800cc22:	4b0c      	ldr	r3, [pc, #48]	@ (800cc54 <USBH_LL_Init+0x74>)
 800cc24:	2200      	movs	r2, #0
 800cc26:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800cc28:	480a      	ldr	r0, [pc, #40]	@ (800cc54 <USBH_LL_Init+0x74>)
 800cc2a:	f7f9 f8d4 	bl	8005dd6 <HAL_HCD_Init>
 800cc2e:	4603      	mov	r3, r0
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	d001      	beq.n	800cc38 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800cc34:	f7f7 fb6c 	bl	8004310 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800cc38:	4806      	ldr	r0, [pc, #24]	@ (800cc54 <USBH_LL_Init+0x74>)
 800cc3a:	f7f9 fd35 	bl	80066a8 <HAL_HCD_GetCurrentFrame>
 800cc3e:	4603      	mov	r3, r0
 800cc40:	4619      	mov	r1, r3
 800cc42:	6878      	ldr	r0, [r7, #4]
 800cc44:	f7fe fee6 	bl	800ba14 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800cc48:	2300      	movs	r3, #0
}
 800cc4a:	4618      	mov	r0, r3
 800cc4c:	3708      	adds	r7, #8
 800cc4e:	46bd      	mov	sp, r7
 800cc50:	bd80      	pop	{r7, pc}
 800cc52:	bf00      	nop
 800cc54:	20000980 	.word	0x20000980

0800cc58 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800cc58:	b580      	push	{r7, lr}
 800cc5a:	b084      	sub	sp, #16
 800cc5c:	af00      	add	r7, sp, #0
 800cc5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc60:	2300      	movs	r3, #0
 800cc62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cc64:	2300      	movs	r3, #0
 800cc66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cc6e:	4618      	mov	r0, r3
 800cc70:	f7f9 fca2 	bl	80065b8 <HAL_HCD_Start>
 800cc74:	4603      	mov	r3, r0
 800cc76:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cc78:	7bfb      	ldrb	r3, [r7, #15]
 800cc7a:	4618      	mov	r0, r3
 800cc7c:	f000 f95e 	bl	800cf3c <USBH_Get_USB_Status>
 800cc80:	4603      	mov	r3, r0
 800cc82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cc84:	7bbb      	ldrb	r3, [r7, #14]
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3710      	adds	r7, #16
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	bd80      	pop	{r7, pc}

0800cc8e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800cc8e:	b580      	push	{r7, lr}
 800cc90:	b084      	sub	sp, #16
 800cc92:	af00      	add	r7, sp, #0
 800cc94:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cc96:	2300      	movs	r3, #0
 800cc98:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cca4:	4618      	mov	r0, r3
 800cca6:	f7f9 fcaa 	bl	80065fe <HAL_HCD_Stop>
 800ccaa:	4603      	mov	r3, r0
 800ccac:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800ccae:	7bfb      	ldrb	r3, [r7, #15]
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f000 f943 	bl	800cf3c <USBH_Get_USB_Status>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ccba:	7bbb      	ldrb	r3, [r7, #14]
}
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	3710      	adds	r7, #16
 800ccc0:	46bd      	mov	sp, r7
 800ccc2:	bd80      	pop	{r7, pc}

0800ccc4 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800ccc4:	b580      	push	{r7, lr}
 800ccc6:	b084      	sub	sp, #16
 800ccc8:	af00      	add	r7, sp, #0
 800ccca:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800cccc:	2301      	movs	r3, #1
 800ccce:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ccd6:	4618      	mov	r0, r3
 800ccd8:	f7f9 fcf4 	bl	80066c4 <HAL_HCD_GetCurrentSpeed>
 800ccdc:	4603      	mov	r3, r0
 800ccde:	2b02      	cmp	r3, #2
 800cce0:	d00c      	beq.n	800ccfc <USBH_LL_GetSpeed+0x38>
 800cce2:	2b02      	cmp	r3, #2
 800cce4:	d80d      	bhi.n	800cd02 <USBH_LL_GetSpeed+0x3e>
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d002      	beq.n	800ccf0 <USBH_LL_GetSpeed+0x2c>
 800ccea:	2b01      	cmp	r3, #1
 800ccec:	d003      	beq.n	800ccf6 <USBH_LL_GetSpeed+0x32>
 800ccee:	e008      	b.n	800cd02 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800ccf0:	2300      	movs	r3, #0
 800ccf2:	73fb      	strb	r3, [r7, #15]
    break;
 800ccf4:	e008      	b.n	800cd08 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800ccf6:	2301      	movs	r3, #1
 800ccf8:	73fb      	strb	r3, [r7, #15]
    break;
 800ccfa:	e005      	b.n	800cd08 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800ccfc:	2302      	movs	r3, #2
 800ccfe:	73fb      	strb	r3, [r7, #15]
    break;
 800cd00:	e002      	b.n	800cd08 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800cd02:	2301      	movs	r3, #1
 800cd04:	73fb      	strb	r3, [r7, #15]
    break;
 800cd06:	bf00      	nop
  }
  return  speed;
 800cd08:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	3710      	adds	r7, #16
 800cd0e:	46bd      	mov	sp, r7
 800cd10:	bd80      	pop	{r7, pc}

0800cd12 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800cd12:	b580      	push	{r7, lr}
 800cd14:	b084      	sub	sp, #16
 800cd16:	af00      	add	r7, sp, #0
 800cd18:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd1a:	2300      	movs	r3, #0
 800cd1c:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd1e:	2300      	movs	r3, #0
 800cd20:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cd28:	4618      	mov	r0, r3
 800cd2a:	f7f9 fc85 	bl	8006638 <HAL_HCD_ResetPort>
 800cd2e:	4603      	mov	r3, r0
 800cd30:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cd32:	7bfb      	ldrb	r3, [r7, #15]
 800cd34:	4618      	mov	r0, r3
 800cd36:	f000 f901 	bl	800cf3c <USBH_Get_USB_Status>
 800cd3a:	4603      	mov	r3, r0
 800cd3c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cd3e:	7bbb      	ldrb	r3, [r7, #14]
}
 800cd40:	4618      	mov	r0, r3
 800cd42:	3710      	adds	r7, #16
 800cd44:	46bd      	mov	sp, r7
 800cd46:	bd80      	pop	{r7, pc}

0800cd48 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cd48:	b580      	push	{r7, lr}
 800cd4a:	b082      	sub	sp, #8
 800cd4c:	af00      	add	r7, sp, #0
 800cd4e:	6078      	str	r0, [r7, #4]
 800cd50:	460b      	mov	r3, r1
 800cd52:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cd5a:	78fa      	ldrb	r2, [r7, #3]
 800cd5c:	4611      	mov	r1, r2
 800cd5e:	4618      	mov	r0, r3
 800cd60:	f7f9 fc8d 	bl	800667e <HAL_HCD_HC_GetXferCount>
 800cd64:	4603      	mov	r3, r0
}
 800cd66:	4618      	mov	r0, r3
 800cd68:	3708      	adds	r7, #8
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	bd80      	pop	{r7, pc}

0800cd6e <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800cd6e:	b590      	push	{r4, r7, lr}
 800cd70:	b089      	sub	sp, #36	@ 0x24
 800cd72:	af04      	add	r7, sp, #16
 800cd74:	6078      	str	r0, [r7, #4]
 800cd76:	4608      	mov	r0, r1
 800cd78:	4611      	mov	r1, r2
 800cd7a:	461a      	mov	r2, r3
 800cd7c:	4603      	mov	r3, r0
 800cd7e:	70fb      	strb	r3, [r7, #3]
 800cd80:	460b      	mov	r3, r1
 800cd82:	70bb      	strb	r3, [r7, #2]
 800cd84:	4613      	mov	r3, r2
 800cd86:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cd88:	2300      	movs	r3, #0
 800cd8a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cd8c:	2300      	movs	r3, #0
 800cd8e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800cd90:	687b      	ldr	r3, [r7, #4]
 800cd92:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800cd96:	787c      	ldrb	r4, [r7, #1]
 800cd98:	78ba      	ldrb	r2, [r7, #2]
 800cd9a:	78f9      	ldrb	r1, [r7, #3]
 800cd9c:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800cd9e:	9302      	str	r3, [sp, #8]
 800cda0:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800cda4:	9301      	str	r3, [sp, #4]
 800cda6:	f897 3020 	ldrb.w	r3, [r7, #32]
 800cdaa:	9300      	str	r3, [sp, #0]
 800cdac:	4623      	mov	r3, r4
 800cdae:	f7f9 f879 	bl	8005ea4 <HAL_HCD_HC_Init>
 800cdb2:	4603      	mov	r3, r0
 800cdb4:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800cdb6:	7bfb      	ldrb	r3, [r7, #15]
 800cdb8:	4618      	mov	r0, r3
 800cdba:	f000 f8bf 	bl	800cf3c <USBH_Get_USB_Status>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800cdc2:	7bbb      	ldrb	r3, [r7, #14]
}
 800cdc4:	4618      	mov	r0, r3
 800cdc6:	3714      	adds	r7, #20
 800cdc8:	46bd      	mov	sp, r7
 800cdca:	bd90      	pop	{r4, r7, pc}

0800cdcc <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800cdcc:	b580      	push	{r7, lr}
 800cdce:	b084      	sub	sp, #16
 800cdd0:	af00      	add	r7, sp, #0
 800cdd2:	6078      	str	r0, [r7, #4]
 800cdd4:	460b      	mov	r3, r1
 800cdd6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800cdd8:	2300      	movs	r3, #0
 800cdda:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cddc:	2300      	movs	r3, #0
 800cdde:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800cde6:	78fa      	ldrb	r2, [r7, #3]
 800cde8:	4611      	mov	r1, r2
 800cdea:	4618      	mov	r0, r3
 800cdec:	f7f9 f912 	bl	8006014 <HAL_HCD_HC_Halt>
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800cdf4:	7bfb      	ldrb	r3, [r7, #15]
 800cdf6:	4618      	mov	r0, r3
 800cdf8:	f000 f8a0 	bl	800cf3c <USBH_Get_USB_Status>
 800cdfc:	4603      	mov	r3, r0
 800cdfe:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce00:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3710      	adds	r7, #16
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}

0800ce0a <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800ce0a:	b590      	push	{r4, r7, lr}
 800ce0c:	b089      	sub	sp, #36	@ 0x24
 800ce0e:	af04      	add	r7, sp, #16
 800ce10:	6078      	str	r0, [r7, #4]
 800ce12:	4608      	mov	r0, r1
 800ce14:	4611      	mov	r1, r2
 800ce16:	461a      	mov	r2, r3
 800ce18:	4603      	mov	r3, r0
 800ce1a:	70fb      	strb	r3, [r7, #3]
 800ce1c:	460b      	mov	r3, r1
 800ce1e:	70bb      	strb	r3, [r7, #2]
 800ce20:	4613      	mov	r3, r2
 800ce22:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800ce24:	2300      	movs	r3, #0
 800ce26:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800ce28:	2300      	movs	r3, #0
 800ce2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800ce32:	787c      	ldrb	r4, [r7, #1]
 800ce34:	78ba      	ldrb	r2, [r7, #2]
 800ce36:	78f9      	ldrb	r1, [r7, #3]
 800ce38:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800ce3c:	9303      	str	r3, [sp, #12]
 800ce3e:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800ce40:	9302      	str	r3, [sp, #8]
 800ce42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ce44:	9301      	str	r3, [sp, #4]
 800ce46:	f897 3020 	ldrb.w	r3, [r7, #32]
 800ce4a:	9300      	str	r3, [sp, #0]
 800ce4c:	4623      	mov	r3, r4
 800ce4e:	f7f9 f905 	bl	800605c <HAL_HCD_HC_SubmitRequest>
 800ce52:	4603      	mov	r3, r0
 800ce54:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800ce56:	7bfb      	ldrb	r3, [r7, #15]
 800ce58:	4618      	mov	r0, r3
 800ce5a:	f000 f86f 	bl	800cf3c <USBH_Get_USB_Status>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800ce62:	7bbb      	ldrb	r3, [r7, #14]
}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3714      	adds	r7, #20
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd90      	pop	{r4, r7, pc}

0800ce6c <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b082      	sub	sp, #8
 800ce70:	af00      	add	r7, sp, #0
 800ce72:	6078      	str	r0, [r7, #4]
 800ce74:	460b      	mov	r3, r1
 800ce76:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ce7e:	78fa      	ldrb	r2, [r7, #3]
 800ce80:	4611      	mov	r1, r2
 800ce82:	4618      	mov	r0, r3
 800ce84:	f7f9 fbe6 	bl	8006654 <HAL_HCD_HC_GetURBState>
 800ce88:	4603      	mov	r3, r0
}
 800ce8a:	4618      	mov	r0, r3
 800ce8c:	3708      	adds	r7, #8
 800ce8e:	46bd      	mov	sp, r7
 800ce90:	bd80      	pop	{r7, pc}

0800ce92 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800ce92:	b580      	push	{r7, lr}
 800ce94:	b082      	sub	sp, #8
 800ce96:	af00      	add	r7, sp, #0
 800ce98:	6078      	str	r0, [r7, #4]
 800ce9a:	460b      	mov	r3, r1
 800ce9c:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800cea4:	2b01      	cmp	r3, #1
 800cea6:	d103      	bne.n	800ceb0 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800cea8:	78fb      	ldrb	r3, [r7, #3]
 800ceaa:	4618      	mov	r0, r3
 800ceac:	f000 f872 	bl	800cf94 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800ceb0:	20c8      	movs	r0, #200	@ 0xc8
 800ceb2:	f7f7 fdc9 	bl	8004a48 <HAL_Delay>
  return USBH_OK;
 800ceb6:	2300      	movs	r3, #0
}
 800ceb8:	4618      	mov	r0, r3
 800ceba:	3708      	adds	r7, #8
 800cebc:	46bd      	mov	sp, r7
 800cebe:	bd80      	pop	{r7, pc}

0800cec0 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800cec0:	b480      	push	{r7}
 800cec2:	b085      	sub	sp, #20
 800cec4:	af00      	add	r7, sp, #0
 800cec6:	6078      	str	r0, [r7, #4]
 800cec8:	460b      	mov	r3, r1
 800ceca:	70fb      	strb	r3, [r7, #3]
 800cecc:	4613      	mov	r3, r2
 800cece:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800ced0:	687b      	ldr	r3, [r7, #4]
 800ced2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800ced6:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800ced8:	78fa      	ldrb	r2, [r7, #3]
 800ceda:	68f9      	ldr	r1, [r7, #12]
 800cedc:	4613      	mov	r3, r2
 800cede:	011b      	lsls	r3, r3, #4
 800cee0:	1a9b      	subs	r3, r3, r2
 800cee2:	009b      	lsls	r3, r3, #2
 800cee4:	440b      	add	r3, r1
 800cee6:	3317      	adds	r3, #23
 800cee8:	781b      	ldrb	r3, [r3, #0]
 800ceea:	2b00      	cmp	r3, #0
 800ceec:	d00a      	beq.n	800cf04 <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800ceee:	78fa      	ldrb	r2, [r7, #3]
 800cef0:	68f9      	ldr	r1, [r7, #12]
 800cef2:	4613      	mov	r3, r2
 800cef4:	011b      	lsls	r3, r3, #4
 800cef6:	1a9b      	subs	r3, r3, r2
 800cef8:	009b      	lsls	r3, r3, #2
 800cefa:	440b      	add	r3, r1
 800cefc:	333c      	adds	r3, #60	@ 0x3c
 800cefe:	78ba      	ldrb	r2, [r7, #2]
 800cf00:	701a      	strb	r2, [r3, #0]
 800cf02:	e009      	b.n	800cf18 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800cf04:	78fa      	ldrb	r2, [r7, #3]
 800cf06:	68f9      	ldr	r1, [r7, #12]
 800cf08:	4613      	mov	r3, r2
 800cf0a:	011b      	lsls	r3, r3, #4
 800cf0c:	1a9b      	subs	r3, r3, r2
 800cf0e:	009b      	lsls	r3, r3, #2
 800cf10:	440b      	add	r3, r1
 800cf12:	333d      	adds	r3, #61	@ 0x3d
 800cf14:	78ba      	ldrb	r2, [r7, #2]
 800cf16:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800cf18:	2300      	movs	r3, #0
}
 800cf1a:	4618      	mov	r0, r3
 800cf1c:	3714      	adds	r7, #20
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf24:	4770      	bx	lr

0800cf26 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800cf26:	b580      	push	{r7, lr}
 800cf28:	b082      	sub	sp, #8
 800cf2a:	af00      	add	r7, sp, #0
 800cf2c:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f7f7 fd8a 	bl	8004a48 <HAL_Delay>
}
 800cf34:	bf00      	nop
 800cf36:	3708      	adds	r7, #8
 800cf38:	46bd      	mov	sp, r7
 800cf3a:	bd80      	pop	{r7, pc}

0800cf3c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b085      	sub	sp, #20
 800cf40:	af00      	add	r7, sp, #0
 800cf42:	4603      	mov	r3, r0
 800cf44:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800cf46:	2300      	movs	r3, #0
 800cf48:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800cf4a:	79fb      	ldrb	r3, [r7, #7]
 800cf4c:	2b03      	cmp	r3, #3
 800cf4e:	d817      	bhi.n	800cf80 <USBH_Get_USB_Status+0x44>
 800cf50:	a201      	add	r2, pc, #4	@ (adr r2, 800cf58 <USBH_Get_USB_Status+0x1c>)
 800cf52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cf56:	bf00      	nop
 800cf58:	0800cf69 	.word	0x0800cf69
 800cf5c:	0800cf6f 	.word	0x0800cf6f
 800cf60:	0800cf75 	.word	0x0800cf75
 800cf64:	0800cf7b 	.word	0x0800cf7b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	73fb      	strb	r3, [r7, #15]
    break;
 800cf6c:	e00b      	b.n	800cf86 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800cf6e:	2302      	movs	r3, #2
 800cf70:	73fb      	strb	r3, [r7, #15]
    break;
 800cf72:	e008      	b.n	800cf86 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800cf74:	2301      	movs	r3, #1
 800cf76:	73fb      	strb	r3, [r7, #15]
    break;
 800cf78:	e005      	b.n	800cf86 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800cf7a:	2302      	movs	r3, #2
 800cf7c:	73fb      	strb	r3, [r7, #15]
    break;
 800cf7e:	e002      	b.n	800cf86 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800cf80:	2302      	movs	r3, #2
 800cf82:	73fb      	strb	r3, [r7, #15]
    break;
 800cf84:	bf00      	nop
  }
  return usb_status;
 800cf86:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf88:	4618      	mov	r0, r3
 800cf8a:	3714      	adds	r7, #20
 800cf8c:	46bd      	mov	sp, r7
 800cf8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf92:	4770      	bx	lr

0800cf94 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b084      	sub	sp, #16
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	4603      	mov	r3, r0
 800cf9c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800cf9e:	79fb      	ldrb	r3, [r7, #7]
 800cfa0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800cfa2:	79fb      	ldrb	r3, [r7, #7]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d102      	bne.n	800cfae <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800cfa8:	2300      	movs	r3, #0
 800cfaa:	73fb      	strb	r3, [r7, #15]
 800cfac:	e001      	b.n	800cfb2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800cfae:	2301      	movs	r3, #1
 800cfb0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800cfb2:	7bfb      	ldrb	r3, [r7, #15]
 800cfb4:	461a      	mov	r2, r3
 800cfb6:	2101      	movs	r1, #1
 800cfb8:	4803      	ldr	r0, [pc, #12]	@ (800cfc8 <MX_DriverVbusFS+0x34>)
 800cfba:	f7f8 fed9 	bl	8005d70 <HAL_GPIO_WritePin>
}
 800cfbe:	bf00      	nop
 800cfc0:	3710      	adds	r7, #16
 800cfc2:	46bd      	mov	sp, r7
 800cfc4:	bd80      	pop	{r7, pc}
 800cfc6:	bf00      	nop
 800cfc8:	40020800 	.word	0x40020800

0800cfcc <malloc>:
 800cfcc:	4b02      	ldr	r3, [pc, #8]	@ (800cfd8 <malloc+0xc>)
 800cfce:	4601      	mov	r1, r0
 800cfd0:	6818      	ldr	r0, [r3, #0]
 800cfd2:	f000 b82d 	b.w	800d030 <_malloc_r>
 800cfd6:	bf00      	nop
 800cfd8:	2000002c 	.word	0x2000002c

0800cfdc <free>:
 800cfdc:	4b02      	ldr	r3, [pc, #8]	@ (800cfe8 <free+0xc>)
 800cfde:	4601      	mov	r1, r0
 800cfe0:	6818      	ldr	r0, [r3, #0]
 800cfe2:	f000 b903 	b.w	800d1ec <_free_r>
 800cfe6:	bf00      	nop
 800cfe8:	2000002c 	.word	0x2000002c

0800cfec <sbrk_aligned>:
 800cfec:	b570      	push	{r4, r5, r6, lr}
 800cfee:	4e0f      	ldr	r6, [pc, #60]	@ (800d02c <sbrk_aligned+0x40>)
 800cff0:	460c      	mov	r4, r1
 800cff2:	6831      	ldr	r1, [r6, #0]
 800cff4:	4605      	mov	r5, r0
 800cff6:	b911      	cbnz	r1, 800cffe <sbrk_aligned+0x12>
 800cff8:	f000 f8ae 	bl	800d158 <_sbrk_r>
 800cffc:	6030      	str	r0, [r6, #0]
 800cffe:	4621      	mov	r1, r4
 800d000:	4628      	mov	r0, r5
 800d002:	f000 f8a9 	bl	800d158 <_sbrk_r>
 800d006:	1c43      	adds	r3, r0, #1
 800d008:	d103      	bne.n	800d012 <sbrk_aligned+0x26>
 800d00a:	f04f 34ff 	mov.w	r4, #4294967295
 800d00e:	4620      	mov	r0, r4
 800d010:	bd70      	pop	{r4, r5, r6, pc}
 800d012:	1cc4      	adds	r4, r0, #3
 800d014:	f024 0403 	bic.w	r4, r4, #3
 800d018:	42a0      	cmp	r0, r4
 800d01a:	d0f8      	beq.n	800d00e <sbrk_aligned+0x22>
 800d01c:	1a21      	subs	r1, r4, r0
 800d01e:	4628      	mov	r0, r5
 800d020:	f000 f89a 	bl	800d158 <_sbrk_r>
 800d024:	3001      	adds	r0, #1
 800d026:	d1f2      	bne.n	800d00e <sbrk_aligned+0x22>
 800d028:	e7ef      	b.n	800d00a <sbrk_aligned+0x1e>
 800d02a:	bf00      	nop
 800d02c:	20000d60 	.word	0x20000d60

0800d030 <_malloc_r>:
 800d030:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d034:	1ccd      	adds	r5, r1, #3
 800d036:	f025 0503 	bic.w	r5, r5, #3
 800d03a:	3508      	adds	r5, #8
 800d03c:	2d0c      	cmp	r5, #12
 800d03e:	bf38      	it	cc
 800d040:	250c      	movcc	r5, #12
 800d042:	2d00      	cmp	r5, #0
 800d044:	4606      	mov	r6, r0
 800d046:	db01      	blt.n	800d04c <_malloc_r+0x1c>
 800d048:	42a9      	cmp	r1, r5
 800d04a:	d904      	bls.n	800d056 <_malloc_r+0x26>
 800d04c:	230c      	movs	r3, #12
 800d04e:	6033      	str	r3, [r6, #0]
 800d050:	2000      	movs	r0, #0
 800d052:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d056:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800d12c <_malloc_r+0xfc>
 800d05a:	f000 f869 	bl	800d130 <__malloc_lock>
 800d05e:	f8d8 3000 	ldr.w	r3, [r8]
 800d062:	461c      	mov	r4, r3
 800d064:	bb44      	cbnz	r4, 800d0b8 <_malloc_r+0x88>
 800d066:	4629      	mov	r1, r5
 800d068:	4630      	mov	r0, r6
 800d06a:	f7ff ffbf 	bl	800cfec <sbrk_aligned>
 800d06e:	1c43      	adds	r3, r0, #1
 800d070:	4604      	mov	r4, r0
 800d072:	d158      	bne.n	800d126 <_malloc_r+0xf6>
 800d074:	f8d8 4000 	ldr.w	r4, [r8]
 800d078:	4627      	mov	r7, r4
 800d07a:	2f00      	cmp	r7, #0
 800d07c:	d143      	bne.n	800d106 <_malloc_r+0xd6>
 800d07e:	2c00      	cmp	r4, #0
 800d080:	d04b      	beq.n	800d11a <_malloc_r+0xea>
 800d082:	6823      	ldr	r3, [r4, #0]
 800d084:	4639      	mov	r1, r7
 800d086:	4630      	mov	r0, r6
 800d088:	eb04 0903 	add.w	r9, r4, r3
 800d08c:	f000 f864 	bl	800d158 <_sbrk_r>
 800d090:	4581      	cmp	r9, r0
 800d092:	d142      	bne.n	800d11a <_malloc_r+0xea>
 800d094:	6821      	ldr	r1, [r4, #0]
 800d096:	1a6d      	subs	r5, r5, r1
 800d098:	4629      	mov	r1, r5
 800d09a:	4630      	mov	r0, r6
 800d09c:	f7ff ffa6 	bl	800cfec <sbrk_aligned>
 800d0a0:	3001      	adds	r0, #1
 800d0a2:	d03a      	beq.n	800d11a <_malloc_r+0xea>
 800d0a4:	6823      	ldr	r3, [r4, #0]
 800d0a6:	442b      	add	r3, r5
 800d0a8:	6023      	str	r3, [r4, #0]
 800d0aa:	f8d8 3000 	ldr.w	r3, [r8]
 800d0ae:	685a      	ldr	r2, [r3, #4]
 800d0b0:	bb62      	cbnz	r2, 800d10c <_malloc_r+0xdc>
 800d0b2:	f8c8 7000 	str.w	r7, [r8]
 800d0b6:	e00f      	b.n	800d0d8 <_malloc_r+0xa8>
 800d0b8:	6822      	ldr	r2, [r4, #0]
 800d0ba:	1b52      	subs	r2, r2, r5
 800d0bc:	d420      	bmi.n	800d100 <_malloc_r+0xd0>
 800d0be:	2a0b      	cmp	r2, #11
 800d0c0:	d917      	bls.n	800d0f2 <_malloc_r+0xc2>
 800d0c2:	1961      	adds	r1, r4, r5
 800d0c4:	42a3      	cmp	r3, r4
 800d0c6:	6025      	str	r5, [r4, #0]
 800d0c8:	bf18      	it	ne
 800d0ca:	6059      	strne	r1, [r3, #4]
 800d0cc:	6863      	ldr	r3, [r4, #4]
 800d0ce:	bf08      	it	eq
 800d0d0:	f8c8 1000 	streq.w	r1, [r8]
 800d0d4:	5162      	str	r2, [r4, r5]
 800d0d6:	604b      	str	r3, [r1, #4]
 800d0d8:	4630      	mov	r0, r6
 800d0da:	f000 f82f 	bl	800d13c <__malloc_unlock>
 800d0de:	f104 000b 	add.w	r0, r4, #11
 800d0e2:	1d23      	adds	r3, r4, #4
 800d0e4:	f020 0007 	bic.w	r0, r0, #7
 800d0e8:	1ac2      	subs	r2, r0, r3
 800d0ea:	bf1c      	itt	ne
 800d0ec:	1a1b      	subne	r3, r3, r0
 800d0ee:	50a3      	strne	r3, [r4, r2]
 800d0f0:	e7af      	b.n	800d052 <_malloc_r+0x22>
 800d0f2:	6862      	ldr	r2, [r4, #4]
 800d0f4:	42a3      	cmp	r3, r4
 800d0f6:	bf0c      	ite	eq
 800d0f8:	f8c8 2000 	streq.w	r2, [r8]
 800d0fc:	605a      	strne	r2, [r3, #4]
 800d0fe:	e7eb      	b.n	800d0d8 <_malloc_r+0xa8>
 800d100:	4623      	mov	r3, r4
 800d102:	6864      	ldr	r4, [r4, #4]
 800d104:	e7ae      	b.n	800d064 <_malloc_r+0x34>
 800d106:	463c      	mov	r4, r7
 800d108:	687f      	ldr	r7, [r7, #4]
 800d10a:	e7b6      	b.n	800d07a <_malloc_r+0x4a>
 800d10c:	461a      	mov	r2, r3
 800d10e:	685b      	ldr	r3, [r3, #4]
 800d110:	42a3      	cmp	r3, r4
 800d112:	d1fb      	bne.n	800d10c <_malloc_r+0xdc>
 800d114:	2300      	movs	r3, #0
 800d116:	6053      	str	r3, [r2, #4]
 800d118:	e7de      	b.n	800d0d8 <_malloc_r+0xa8>
 800d11a:	230c      	movs	r3, #12
 800d11c:	6033      	str	r3, [r6, #0]
 800d11e:	4630      	mov	r0, r6
 800d120:	f000 f80c 	bl	800d13c <__malloc_unlock>
 800d124:	e794      	b.n	800d050 <_malloc_r+0x20>
 800d126:	6005      	str	r5, [r0, #0]
 800d128:	e7d6      	b.n	800d0d8 <_malloc_r+0xa8>
 800d12a:	bf00      	nop
 800d12c:	20000d64 	.word	0x20000d64

0800d130 <__malloc_lock>:
 800d130:	4801      	ldr	r0, [pc, #4]	@ (800d138 <__malloc_lock+0x8>)
 800d132:	f000 b84b 	b.w	800d1cc <__retarget_lock_acquire_recursive>
 800d136:	bf00      	nop
 800d138:	20000ea4 	.word	0x20000ea4

0800d13c <__malloc_unlock>:
 800d13c:	4801      	ldr	r0, [pc, #4]	@ (800d144 <__malloc_unlock+0x8>)
 800d13e:	f000 b846 	b.w	800d1ce <__retarget_lock_release_recursive>
 800d142:	bf00      	nop
 800d144:	20000ea4 	.word	0x20000ea4

0800d148 <memset>:
 800d148:	4402      	add	r2, r0
 800d14a:	4603      	mov	r3, r0
 800d14c:	4293      	cmp	r3, r2
 800d14e:	d100      	bne.n	800d152 <memset+0xa>
 800d150:	4770      	bx	lr
 800d152:	f803 1b01 	strb.w	r1, [r3], #1
 800d156:	e7f9      	b.n	800d14c <memset+0x4>

0800d158 <_sbrk_r>:
 800d158:	b538      	push	{r3, r4, r5, lr}
 800d15a:	4d06      	ldr	r5, [pc, #24]	@ (800d174 <_sbrk_r+0x1c>)
 800d15c:	2300      	movs	r3, #0
 800d15e:	4604      	mov	r4, r0
 800d160:	4608      	mov	r0, r1
 800d162:	602b      	str	r3, [r5, #0]
 800d164:	f7f7 fb8c 	bl	8004880 <_sbrk>
 800d168:	1c43      	adds	r3, r0, #1
 800d16a:	d102      	bne.n	800d172 <_sbrk_r+0x1a>
 800d16c:	682b      	ldr	r3, [r5, #0]
 800d16e:	b103      	cbz	r3, 800d172 <_sbrk_r+0x1a>
 800d170:	6023      	str	r3, [r4, #0]
 800d172:	bd38      	pop	{r3, r4, r5, pc}
 800d174:	20000ea0 	.word	0x20000ea0

0800d178 <__errno>:
 800d178:	4b01      	ldr	r3, [pc, #4]	@ (800d180 <__errno+0x8>)
 800d17a:	6818      	ldr	r0, [r3, #0]
 800d17c:	4770      	bx	lr
 800d17e:	bf00      	nop
 800d180:	2000002c 	.word	0x2000002c

0800d184 <__libc_init_array>:
 800d184:	b570      	push	{r4, r5, r6, lr}
 800d186:	4d0d      	ldr	r5, [pc, #52]	@ (800d1bc <__libc_init_array+0x38>)
 800d188:	4c0d      	ldr	r4, [pc, #52]	@ (800d1c0 <__libc_init_array+0x3c>)
 800d18a:	1b64      	subs	r4, r4, r5
 800d18c:	10a4      	asrs	r4, r4, #2
 800d18e:	2600      	movs	r6, #0
 800d190:	42a6      	cmp	r6, r4
 800d192:	d109      	bne.n	800d1a8 <__libc_init_array+0x24>
 800d194:	4d0b      	ldr	r5, [pc, #44]	@ (800d1c4 <__libc_init_array+0x40>)
 800d196:	4c0c      	ldr	r4, [pc, #48]	@ (800d1c8 <__libc_init_array+0x44>)
 800d198:	f000 f872 	bl	800d280 <_init>
 800d19c:	1b64      	subs	r4, r4, r5
 800d19e:	10a4      	asrs	r4, r4, #2
 800d1a0:	2600      	movs	r6, #0
 800d1a2:	42a6      	cmp	r6, r4
 800d1a4:	d105      	bne.n	800d1b2 <__libc_init_array+0x2e>
 800d1a6:	bd70      	pop	{r4, r5, r6, pc}
 800d1a8:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1ac:	4798      	blx	r3
 800d1ae:	3601      	adds	r6, #1
 800d1b0:	e7ee      	b.n	800d190 <__libc_init_array+0xc>
 800d1b2:	f855 3b04 	ldr.w	r3, [r5], #4
 800d1b6:	4798      	blx	r3
 800d1b8:	3601      	adds	r6, #1
 800d1ba:	e7f2      	b.n	800d1a2 <__libc_init_array+0x1e>
 800d1bc:	0800d2e0 	.word	0x0800d2e0
 800d1c0:	0800d2e0 	.word	0x0800d2e0
 800d1c4:	0800d2e0 	.word	0x0800d2e0
 800d1c8:	0800d2e4 	.word	0x0800d2e4

0800d1cc <__retarget_lock_acquire_recursive>:
 800d1cc:	4770      	bx	lr

0800d1ce <__retarget_lock_release_recursive>:
 800d1ce:	4770      	bx	lr

0800d1d0 <memcpy>:
 800d1d0:	440a      	add	r2, r1
 800d1d2:	4291      	cmp	r1, r2
 800d1d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800d1d8:	d100      	bne.n	800d1dc <memcpy+0xc>
 800d1da:	4770      	bx	lr
 800d1dc:	b510      	push	{r4, lr}
 800d1de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d1e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d1e6:	4291      	cmp	r1, r2
 800d1e8:	d1f9      	bne.n	800d1de <memcpy+0xe>
 800d1ea:	bd10      	pop	{r4, pc}

0800d1ec <_free_r>:
 800d1ec:	b538      	push	{r3, r4, r5, lr}
 800d1ee:	4605      	mov	r5, r0
 800d1f0:	2900      	cmp	r1, #0
 800d1f2:	d041      	beq.n	800d278 <_free_r+0x8c>
 800d1f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1f8:	1f0c      	subs	r4, r1, #4
 800d1fa:	2b00      	cmp	r3, #0
 800d1fc:	bfb8      	it	lt
 800d1fe:	18e4      	addlt	r4, r4, r3
 800d200:	f7ff ff96 	bl	800d130 <__malloc_lock>
 800d204:	4a1d      	ldr	r2, [pc, #116]	@ (800d27c <_free_r+0x90>)
 800d206:	6813      	ldr	r3, [r2, #0]
 800d208:	b933      	cbnz	r3, 800d218 <_free_r+0x2c>
 800d20a:	6063      	str	r3, [r4, #4]
 800d20c:	6014      	str	r4, [r2, #0]
 800d20e:	4628      	mov	r0, r5
 800d210:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d214:	f7ff bf92 	b.w	800d13c <__malloc_unlock>
 800d218:	42a3      	cmp	r3, r4
 800d21a:	d908      	bls.n	800d22e <_free_r+0x42>
 800d21c:	6820      	ldr	r0, [r4, #0]
 800d21e:	1821      	adds	r1, r4, r0
 800d220:	428b      	cmp	r3, r1
 800d222:	bf01      	itttt	eq
 800d224:	6819      	ldreq	r1, [r3, #0]
 800d226:	685b      	ldreq	r3, [r3, #4]
 800d228:	1809      	addeq	r1, r1, r0
 800d22a:	6021      	streq	r1, [r4, #0]
 800d22c:	e7ed      	b.n	800d20a <_free_r+0x1e>
 800d22e:	461a      	mov	r2, r3
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	b10b      	cbz	r3, 800d238 <_free_r+0x4c>
 800d234:	42a3      	cmp	r3, r4
 800d236:	d9fa      	bls.n	800d22e <_free_r+0x42>
 800d238:	6811      	ldr	r1, [r2, #0]
 800d23a:	1850      	adds	r0, r2, r1
 800d23c:	42a0      	cmp	r0, r4
 800d23e:	d10b      	bne.n	800d258 <_free_r+0x6c>
 800d240:	6820      	ldr	r0, [r4, #0]
 800d242:	4401      	add	r1, r0
 800d244:	1850      	adds	r0, r2, r1
 800d246:	4283      	cmp	r3, r0
 800d248:	6011      	str	r1, [r2, #0]
 800d24a:	d1e0      	bne.n	800d20e <_free_r+0x22>
 800d24c:	6818      	ldr	r0, [r3, #0]
 800d24e:	685b      	ldr	r3, [r3, #4]
 800d250:	6053      	str	r3, [r2, #4]
 800d252:	4408      	add	r0, r1
 800d254:	6010      	str	r0, [r2, #0]
 800d256:	e7da      	b.n	800d20e <_free_r+0x22>
 800d258:	d902      	bls.n	800d260 <_free_r+0x74>
 800d25a:	230c      	movs	r3, #12
 800d25c:	602b      	str	r3, [r5, #0]
 800d25e:	e7d6      	b.n	800d20e <_free_r+0x22>
 800d260:	6820      	ldr	r0, [r4, #0]
 800d262:	1821      	adds	r1, r4, r0
 800d264:	428b      	cmp	r3, r1
 800d266:	bf04      	itt	eq
 800d268:	6819      	ldreq	r1, [r3, #0]
 800d26a:	685b      	ldreq	r3, [r3, #4]
 800d26c:	6063      	str	r3, [r4, #4]
 800d26e:	bf04      	itt	eq
 800d270:	1809      	addeq	r1, r1, r0
 800d272:	6021      	streq	r1, [r4, #0]
 800d274:	6054      	str	r4, [r2, #4]
 800d276:	e7ca      	b.n	800d20e <_free_r+0x22>
 800d278:	bd38      	pop	{r3, r4, r5, pc}
 800d27a:	bf00      	nop
 800d27c:	20000d64 	.word	0x20000d64

0800d280 <_init>:
 800d280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d282:	bf00      	nop
 800d284:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d286:	bc08      	pop	{r3}
 800d288:	469e      	mov	lr, r3
 800d28a:	4770      	bx	lr

0800d28c <_fini>:
 800d28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d28e:	bf00      	nop
 800d290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d292:	bc08      	pop	{r3}
 800d294:	469e      	mov	lr, r3
 800d296:	4770      	bx	lr
